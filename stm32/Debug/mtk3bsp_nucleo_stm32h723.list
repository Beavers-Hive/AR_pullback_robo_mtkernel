
mtk3bsp_nucleo_stm32h723.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ef0c  08000000  08000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .boot2        00000100  0800ef0c  0800ef0c  0000ff0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 vector        00000338  24000000  24000000  00011000  2**2
                  ALLOC
  3 .data         00000090  24000338  0800f00c  00010338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00002644  240003c8  0800f09c  000103c8  2**3
                  ALLOC
  5 .debug_info   00018ed3  00000000  00000000  000103c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_abbrev 00007412  00000000  00000000  0002929b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_aranges 00001e80  00000000  00000000  000306b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_rnglists 00000ed7  00000000  00000000  00032530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_macro  0000d6f0  00000000  00000000  00033407  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_line   00028c4c  00000000  00000000  00040af7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    0001165a  00000000  00000000  00069743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .comment      00000043  00000000  00000000  0007ad9d  2**0
                  CONTENTS, READONLY
 13 .ARM.attributes 0000002e  00000000  00000000  0007ade0  2**0
                  CONTENTS, READONLY
 14 .debug_frame  00004cbc  00000000  00000000  0007ae10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 00000048  00000000  00000000  0007facc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000000 <vector_tbl>:
 8000000:	00 00 05 24 f1 3a 00 08 b9 38 00 08 cd 38 00 08     ...$.:...8...8..
 8000010:	31 39 00 08 45 39 00 08 59 39 00 08 00 00 00 00     19..E9..Y9......
	...
 800002c:	6d 39 00 08 81 39 00 08 00 00 00 00 39 03 00 08     m9...9......9...
 800003c:	65 3a 00 08 95 39 00 08 95 39 00 08 95 39 00 08     e:...9...9...9..
 800004c:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 800005c:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 800006c:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 800007c:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 800008c:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 800009c:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 80000ac:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 80000bc:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 80000cc:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 80000dc:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 80000ec:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 80000fc:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 800010c:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 800011c:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 800012c:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 800013c:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 800014c:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 800015c:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 800016c:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 800017c:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 800018c:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 800019c:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 80001ac:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 80001bc:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 80001cc:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 80001dc:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 80001ec:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 80001fc:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 800020c:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 800021c:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 800022c:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 800023c:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 800024c:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 800025c:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 800026c:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 800027c:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 800028c:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 800029c:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 80002ac:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 80002bc:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 80002cc:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 80002dc:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 80002ec:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 80002fc:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 800030c:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 800031c:	95 39 00 08 95 39 00 08 95 39 00 08 95 39 00 08     .9...9...9...9..
 800032c:	95 39 00 08 95 39 00 08 95 39 00 08                 .9...9...9..

08000338 <knl_dispatch_entry>:
	.thumb_func
	.globl Csym(knl_dispatch_entry)

Csym(knl_dispatch_entry):	
/*----------------- Start dispatch processing. -----------------*/
	ldr	r0, =Csym(knl_dispatch_disabled)
 8000338:	481c      	ldr	r0, [pc, #112]	@ (80003ac <l_dispatch_120+0x20>)
	ldr	r1, =1
 800033a:	f04f 0101 	mov.w	r1, #1
	str	r1, [r0]			// Dispatch disable
 800033e:	6001      	str	r1, [r0, #0]

	ldr	r0, =Csym(knl_ctxtsk)
 8000340:	481b      	ldr	r0, [pc, #108]	@ (80003b0 <l_dispatch_120+0x24>)
	ldr	r1, [r0]			// R1 = ctxtsk
 8000342:	6801      	ldr	r1, [r0, #0]
	cmp	r1, #0
 8000344:	2900      	cmp	r1, #0
	bne	l_dispatch_000
 8000346:	d102      	bne.n	800034e <l_dispatch_000>

	ldr	sp, =(Csym(knl_tmp_stack) + TMP_STACK_SIZE)	// Set temporal stack
 8000348:	f8df d068 	ldr.w	sp, [pc, #104]	@ 80003b4 <l_dispatch_120+0x28>
	b	l_dispatch_100
 800034c:	e007      	b.n	800035e <l_dispatch_100>

0800034e <l_dispatch_000>:

/*----------------- Save "ctxtsk" context. -----------------*/
l_dispatch_000: 
	push	{r4-r11}
 800034e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
	push	{lr}
 8000352:	b500      	push	{lr}
	push	{r3}				//FPU usage flag

l_dispatch_010:			// End of FPU register save process
#endif /* USE_FPU */

	str	sp, [r1, #TCB_tskctxb + CTXB_ssp]	// Save 'ssp' to TCB
 8000354:	f8c1 d018 	str.w	sp, [r1, #24]

	ldr	r2, =0
 8000358:	f04f 0200 	mov.w	r2, #0
	str	r2, [r0]			// ctxtsk = NULL
 800035c:	6002      	str	r2, [r0, #0]

0800035e <l_dispatch_100>:


/*----------------- Dispatch from "ctxtsk" to "schedtsk" -----------------*/
l_dispatch_100:
	ldr	r5, =Csym(knl_schedtsk)		// R5 = &schedtsk
 800035e:	4d16      	ldr	r5, [pc, #88]	@ (80003b8 <l_dispatch_120+0x2c>)
	ldr	r6, =Csym(knl_lowpow_discnt)	// R6 = &lowpow_discnt
 8000360:	4e16      	ldr	r6, [pc, #88]	@ (80003bc <l_dispatch_120+0x30>)

08000362 <l_dispatch_110>:

l_dispatch_110:
	ldr	r2, =INTPRI_VAL(INTPRI_MAX_EXTINT_PRI)	// Disable interruput
 8000362:	f04f 0210 	mov.w	r2, #16
	msr	basepri, r2
 8000366:	f382 8811 	msr	BASEPRI, r2

	ldr	r8, [r5]			// R8 = schedtsk
 800036a:	f8d5 8000 	ldr.w	r8, [r5]
	cmp	r8, #0				// Is there 'schedtsk'?
 800036e:	f1b8 0f00 	cmp.w	r8, #0
	bne	l_dispatch_120
 8000372:	d10b      	bne.n	800038c <l_dispatch_120>

	/* Moves to power saving mode because there are no tasks that can be run. */
	ldr	ip, [r6]			// Is 'low_pow' disabled?
 8000374:	f8d6 c000 	ldr.w	ip, [r6]
	cmp	ip, #0
 8000378:	f1bc 0f00 	cmp.w	ip, #0
	it	eq
 800037c:	bf08      	it	eq
	bleq	Csym(low_pow)			// call low_pow()
 800037e:	f003 feb9 	bleq	80040f4 <low_pow>

	ldr	r2, =0
 8000382:	f04f 0200 	mov.w	r2, #0
	msr	basepri, r2			// Enable interruput
 8000386:	f382 8811 	msr	BASEPRI, r2

	b	l_dispatch_110
 800038a:	e7ea      	b.n	8000362 <l_dispatch_110>

0800038c <l_dispatch_120>:

l_dispatch_120:			// Switch to 'schedtsk'
	str	r8, [r0]			// ctxtsk = schedtsk
 800038c:	f8c0 8000 	str.w	r8, [r0]
	ldr	sp, [r8, #TCB_tskctxb + CTXB_ssp]	// Restore 'ssp' from TCB
 8000390:	f8d8 d018 	ldr.w	sp, [r8, #24]
	vpop	{s16-s31}			// Pop FPU register (S16-S31)

l_dispatch_200:			//  End of FPU register restore process
#endif	/* USE_FPU */

	pop	{lr}
 8000394:	f85d eb04 	ldr.w	lr, [sp], #4
	pop	{r4-r11}
 8000398:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}

	ldr	r0, =Csym(knl_dispatch_disabled)
 800039c:	4803      	ldr	r0, [pc, #12]	@ (80003ac <l_dispatch_120+0x20>)
	ldr	r1, =0
 800039e:	f04f 0100 	mov.w	r1, #0
	str	r1, [r0]			// Dispatch enable
 80003a2:	6001      	str	r1, [r0, #0]

	msr	basepri, r1			// Enable inperrupt
 80003a4:	f381 8811 	msr	BASEPRI, r1

	bx	lr
 80003a8:	4770      	bx	lr
 80003aa:	0000      	.short	0x0000
	ldr	r0, =Csym(knl_dispatch_disabled)
 80003ac:	2400186c 	.word	0x2400186c
	ldr	r0, =Csym(knl_ctxtsk)
 80003b0:	24001870 	.word	0x24001870
	ldr	sp, =(Csym(knl_tmp_stack) + TMP_STACK_SIZE)	// Set temporal stack
 80003b4:	240004c8 	.word	0x240004c8
	ldr	r5, =Csym(knl_schedtsk)		// R5 = &schedtsk
 80003b8:	24001874 	.word	0x24001874
	ldr	r6, =Csym(knl_lowpow_discnt)	// R6 = &lowpow_discnt
 80003bc:	24002a08 	.word	0x24002a08
 80003c0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80003c4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003c8:	bf1e      	ittt	ne
 80003ca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003ce:	ea92 0f0c 	teqne	r2, ip
 80003d2:	ea93 0f0c 	teqne	r3, ip
 80003d6:	d06f      	beq.n	80004b8 <l_dispatch_120+0x12c>
 80003d8:	441a      	add	r2, r3
 80003da:	ea80 0c01 	eor.w	ip, r0, r1
 80003de:	0240      	lsls	r0, r0, #9
 80003e0:	bf18      	it	ne
 80003e2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003e6:	d01e      	beq.n	8000426 <l_dispatch_120+0x9a>
 80003e8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003ec:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003f0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003f4:	fba0 3101 	umull	r3, r1, r0, r1
 80003f8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003fc:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000400:	bf3e      	ittt	cc
 8000402:	0049      	lslcc	r1, r1, #1
 8000404:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000408:	005b      	lslcc	r3, r3, #1
 800040a:	ea40 0001 	orr.w	r0, r0, r1
 800040e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000412:	2afd      	cmp	r2, #253	@ 0xfd
 8000414:	d81d      	bhi.n	8000452 <l_dispatch_120+0xc6>
 8000416:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800041a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800041e:	bf08      	it	eq
 8000420:	f020 0001 	biceq.w	r0, r0, #1
 8000424:	4770      	bx	lr
 8000426:	f090 0f00 	teq	r0, #0
 800042a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 800042e:	bf08      	it	eq
 8000430:	0249      	lsleq	r1, r1, #9
 8000432:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000436:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800043a:	3a7f      	subs	r2, #127	@ 0x7f
 800043c:	bfc2      	ittt	gt
 800043e:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000442:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000446:	4770      	bxgt	lr
 8000448:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	3a01      	subs	r2, #1
 8000452:	dc5d      	bgt.n	8000510 <l_dispatch_120+0x184>
 8000454:	f112 0f19 	cmn.w	r2, #25
 8000458:	bfdc      	itt	le
 800045a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800045e:	4770      	bxle	lr
 8000460:	f1c2 0200 	rsb	r2, r2, #0
 8000464:	0041      	lsls	r1, r0, #1
 8000466:	fa21 f102 	lsr.w	r1, r1, r2
 800046a:	f1c2 0220 	rsb	r2, r2, #32
 800046e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000472:	ea5f 0031 	movs.w	r0, r1, rrx
 8000476:	f140 0000 	adc.w	r0, r0, #0
 800047a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800047e:	bf08      	it	eq
 8000480:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000484:	4770      	bx	lr
 8000486:	f092 0f00 	teq	r2, #0
 800048a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800048e:	bf02      	ittt	eq
 8000490:	0040      	lsleq	r0, r0, #1
 8000492:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000496:	3a01      	subeq	r2, #1
 8000498:	d0f9      	beq.n	800048e <l_dispatch_120+0x102>
 800049a:	ea40 000c 	orr.w	r0, r0, ip
 800049e:	f093 0f00 	teq	r3, #0
 80004a2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80004a6:	bf02      	ittt	eq
 80004a8:	0049      	lsleq	r1, r1, #1
 80004aa:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80004ae:	3b01      	subeq	r3, #1
 80004b0:	d0f9      	beq.n	80004a6 <l_dispatch_120+0x11a>
 80004b2:	ea41 010c 	orr.w	r1, r1, ip
 80004b6:	e78f      	b.n	80003d8 <l_dispatch_120+0x4c>
 80004b8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004bc:	ea92 0f0c 	teq	r2, ip
 80004c0:	bf18      	it	ne
 80004c2:	ea93 0f0c 	teqne	r3, ip
 80004c6:	d00a      	beq.n	80004de <l_dispatch_120+0x152>
 80004c8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80004cc:	bf18      	it	ne
 80004ce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80004d2:	d1d8      	bne.n	8000486 <l_dispatch_120+0xfa>
 80004d4:	ea80 0001 	eor.w	r0, r0, r1
 80004d8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004dc:	4770      	bx	lr
 80004de:	f090 0f00 	teq	r0, #0
 80004e2:	bf17      	itett	ne
 80004e4:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004e8:	4608      	moveq	r0, r1
 80004ea:	f091 0f00 	teqne	r1, #0
 80004ee:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004f2:	d014      	beq.n	800051e <l_dispatch_120+0x192>
 80004f4:	ea92 0f0c 	teq	r2, ip
 80004f8:	d101      	bne.n	80004fe <l_dispatch_120+0x172>
 80004fa:	0242      	lsls	r2, r0, #9
 80004fc:	d10f      	bne.n	800051e <l_dispatch_120+0x192>
 80004fe:	ea93 0f0c 	teq	r3, ip
 8000502:	d103      	bne.n	800050c <l_dispatch_120+0x180>
 8000504:	024b      	lsls	r3, r1, #9
 8000506:	bf18      	it	ne
 8000508:	4608      	movne	r0, r1
 800050a:	d108      	bne.n	800051e <l_dispatch_120+0x192>
 800050c:	ea80 0001 	eor.w	r0, r0, r1
 8000510:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000514:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000518:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800051c:	4770      	bx	lr
 800051e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000522:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000526:	4770      	bx	lr

08000528 <__aeabi_drsub>:
 8000528:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800052c:	e002      	b.n	8000534 <__adddf3>
 800052e:	bf00      	nop

08000530 <__aeabi_dsub>:
 8000530:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000534 <__adddf3>:
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800053a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800053e:	ea94 0f05 	teq	r4, r5
 8000542:	bf08      	it	eq
 8000544:	ea90 0f02 	teqeq	r0, r2
 8000548:	bf1f      	itttt	ne
 800054a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800054e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000552:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000556:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800055a:	f000 80e2 	beq.w	8000722 <__adddf3+0x1ee>
 800055e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000562:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000566:	bfb8      	it	lt
 8000568:	426d      	neglt	r5, r5
 800056a:	dd0c      	ble.n	8000586 <__adddf3+0x52>
 800056c:	442c      	add	r4, r5
 800056e:	ea80 0202 	eor.w	r2, r0, r2
 8000572:	ea81 0303 	eor.w	r3, r1, r3
 8000576:	ea82 0000 	eor.w	r0, r2, r0
 800057a:	ea83 0101 	eor.w	r1, r3, r1
 800057e:	ea80 0202 	eor.w	r2, r0, r2
 8000582:	ea81 0303 	eor.w	r3, r1, r3
 8000586:	2d36      	cmp	r5, #54	@ 0x36
 8000588:	bf88      	it	hi
 800058a:	bd30      	pophi	{r4, r5, pc}
 800058c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000590:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000594:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000598:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x70>
 800059e:	4240      	negs	r0, r0
 80005a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80005a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005b0:	d002      	beq.n	80005b8 <__adddf3+0x84>
 80005b2:	4252      	negs	r2, r2
 80005b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005b8:	ea94 0f05 	teq	r4, r5
 80005bc:	f000 80a7 	beq.w	800070e <__adddf3+0x1da>
 80005c0:	f1a4 0401 	sub.w	r4, r4, #1
 80005c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80005c8:	db0d      	blt.n	80005e6 <__adddf3+0xb2>
 80005ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ce:	fa22 f205 	lsr.w	r2, r2, r5
 80005d2:	1880      	adds	r0, r0, r2
 80005d4:	f141 0100 	adc.w	r1, r1, #0
 80005d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80005dc:	1880      	adds	r0, r0, r2
 80005de:	fa43 f305 	asr.w	r3, r3, r5
 80005e2:	4159      	adcs	r1, r3
 80005e4:	e00e      	b.n	8000604 <__adddf3+0xd0>
 80005e6:	f1a5 0520 	sub.w	r5, r5, #32
 80005ea:	f10e 0e20 	add.w	lr, lr, #32
 80005ee:	2a01      	cmp	r2, #1
 80005f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005f4:	bf28      	it	cs
 80005f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005fa:	fa43 f305 	asr.w	r3, r3, r5
 80005fe:	18c0      	adds	r0, r0, r3
 8000600:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000604:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000608:	d507      	bpl.n	800061a <__adddf3+0xe6>
 800060a:	f04f 0e00 	mov.w	lr, #0
 800060e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000612:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000616:	eb6e 0101 	sbc.w	r1, lr, r1
 800061a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800061e:	d31b      	bcc.n	8000658 <__adddf3+0x124>
 8000620:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000624:	d30c      	bcc.n	8000640 <__adddf3+0x10c>
 8000626:	0849      	lsrs	r1, r1, #1
 8000628:	ea5f 0030 	movs.w	r0, r0, rrx
 800062c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000630:	f104 0401 	add.w	r4, r4, #1
 8000634:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000638:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800063c:	f080 809a 	bcs.w	8000774 <__adddf3+0x240>
 8000640:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	ea41 0105 	orr.w	r1, r1, r5
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800065c:	4140      	adcs	r0, r0
 800065e:	eb41 0101 	adc.w	r1, r1, r1
 8000662:	3c01      	subs	r4, #1
 8000664:	bf28      	it	cs
 8000666:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800066a:	d2e9      	bcs.n	8000640 <__adddf3+0x10c>
 800066c:	f091 0f00 	teq	r1, #0
 8000670:	bf04      	itt	eq
 8000672:	4601      	moveq	r1, r0
 8000674:	2000      	moveq	r0, #0
 8000676:	fab1 f381 	clz	r3, r1
 800067a:	bf08      	it	eq
 800067c:	3320      	addeq	r3, #32
 800067e:	f1a3 030b 	sub.w	r3, r3, #11
 8000682:	f1b3 0220 	subs.w	r2, r3, #32
 8000686:	da0c      	bge.n	80006a2 <__adddf3+0x16e>
 8000688:	320c      	adds	r2, #12
 800068a:	dd08      	ble.n	800069e <__adddf3+0x16a>
 800068c:	f102 0c14 	add.w	ip, r2, #20
 8000690:	f1c2 020c 	rsb	r2, r2, #12
 8000694:	fa01 f00c 	lsl.w	r0, r1, ip
 8000698:	fa21 f102 	lsr.w	r1, r1, r2
 800069c:	e00c      	b.n	80006b8 <__adddf3+0x184>
 800069e:	f102 0214 	add.w	r2, r2, #20
 80006a2:	bfd8      	it	le
 80006a4:	f1c2 0c20 	rsble	ip, r2, #32
 80006a8:	fa01 f102 	lsl.w	r1, r1, r2
 80006ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006b0:	bfdc      	itt	le
 80006b2:	ea41 010c 	orrle.w	r1, r1, ip
 80006b6:	4090      	lslle	r0, r2
 80006b8:	1ae4      	subs	r4, r4, r3
 80006ba:	bfa2      	ittt	ge
 80006bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006c0:	4329      	orrge	r1, r5
 80006c2:	bd30      	popge	{r4, r5, pc}
 80006c4:	ea6f 0404 	mvn.w	r4, r4
 80006c8:	3c1f      	subs	r4, #31
 80006ca:	da1c      	bge.n	8000706 <__adddf3+0x1d2>
 80006cc:	340c      	adds	r4, #12
 80006ce:	dc0e      	bgt.n	80006ee <__adddf3+0x1ba>
 80006d0:	f104 0414 	add.w	r4, r4, #20
 80006d4:	f1c4 0220 	rsb	r2, r4, #32
 80006d8:	fa20 f004 	lsr.w	r0, r0, r4
 80006dc:	fa01 f302 	lsl.w	r3, r1, r2
 80006e0:	ea40 0003 	orr.w	r0, r0, r3
 80006e4:	fa21 f304 	lsr.w	r3, r1, r4
 80006e8:	ea45 0103 	orr.w	r1, r5, r3
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	f1c4 040c 	rsb	r4, r4, #12
 80006f2:	f1c4 0220 	rsb	r2, r4, #32
 80006f6:	fa20 f002 	lsr.w	r0, r0, r2
 80006fa:	fa01 f304 	lsl.w	r3, r1, r4
 80006fe:	ea40 0003 	orr.w	r0, r0, r3
 8000702:	4629      	mov	r1, r5
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	fa21 f004 	lsr.w	r0, r1, r4
 800070a:	4629      	mov	r1, r5
 800070c:	bd30      	pop	{r4, r5, pc}
 800070e:	f094 0f00 	teq	r4, #0
 8000712:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000716:	bf06      	itte	eq
 8000718:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800071c:	3401      	addeq	r4, #1
 800071e:	3d01      	subne	r5, #1
 8000720:	e74e      	b.n	80005c0 <__adddf3+0x8c>
 8000722:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000726:	bf18      	it	ne
 8000728:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800072c:	d029      	beq.n	8000782 <__adddf3+0x24e>
 800072e:	ea94 0f05 	teq	r4, r5
 8000732:	bf08      	it	eq
 8000734:	ea90 0f02 	teqeq	r0, r2
 8000738:	d005      	beq.n	8000746 <__adddf3+0x212>
 800073a:	ea54 0c00 	orrs.w	ip, r4, r0
 800073e:	bf04      	itt	eq
 8000740:	4619      	moveq	r1, r3
 8000742:	4610      	moveq	r0, r2
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	ea91 0f03 	teq	r1, r3
 800074a:	bf1e      	ittt	ne
 800074c:	2100      	movne	r1, #0
 800074e:	2000      	movne	r0, #0
 8000750:	bd30      	popne	{r4, r5, pc}
 8000752:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000756:	d105      	bne.n	8000764 <__adddf3+0x230>
 8000758:	0040      	lsls	r0, r0, #1
 800075a:	4149      	adcs	r1, r1
 800075c:	bf28      	it	cs
 800075e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000762:	bd30      	pop	{r4, r5, pc}
 8000764:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000768:	bf3c      	itt	cc
 800076a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800076e:	bd30      	popcc	{r4, r5, pc}
 8000770:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000774:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd30      	pop	{r4, r5, pc}
 8000782:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000786:	bf1a      	itte	ne
 8000788:	4619      	movne	r1, r3
 800078a:	4610      	movne	r0, r2
 800078c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000790:	bf1c      	itt	ne
 8000792:	460b      	movne	r3, r1
 8000794:	4602      	movne	r2, r0
 8000796:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800079a:	bf06      	itte	eq
 800079c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80007a0:	ea91 0f03 	teqeq	r1, r3
 80007a4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80007a8:	bd30      	pop	{r4, r5, pc}
 80007aa:	bf00      	nop

080007ac <__aeabi_ui2d>:
 80007ac:	f090 0f00 	teq	r0, #0
 80007b0:	bf04      	itt	eq
 80007b2:	2100      	moveq	r1, #0
 80007b4:	4770      	bxeq	lr
 80007b6:	b530      	push	{r4, r5, lr}
 80007b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007c0:	f04f 0500 	mov.w	r5, #0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e750      	b.n	800066c <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_i2d>:
 80007cc:	f090 0f00 	teq	r0, #0
 80007d0:	bf04      	itt	eq
 80007d2:	2100      	moveq	r1, #0
 80007d4:	4770      	bxeq	lr
 80007d6:	b530      	push	{r4, r5, lr}
 80007d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007e0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007e4:	bf48      	it	mi
 80007e6:	4240      	negmi	r0, r0
 80007e8:	f04f 0100 	mov.w	r1, #0
 80007ec:	e73e      	b.n	800066c <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_f2d>:
 80007f0:	0042      	lsls	r2, r0, #1
 80007f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80007fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007fe:	bf1f      	itttt	ne
 8000800:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000804:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000808:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800080c:	4770      	bxne	lr
 800080e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000812:	bf08      	it	eq
 8000814:	4770      	bxeq	lr
 8000816:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800081a:	bf04      	itt	eq
 800081c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000820:	4770      	bxeq	lr
 8000822:	b530      	push	{r4, r5, lr}
 8000824:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000828:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800082c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000830:	e71c      	b.n	800066c <__adddf3+0x138>
 8000832:	bf00      	nop

08000834 <__aeabi_ul2d>:
 8000834:	ea50 0201 	orrs.w	r2, r0, r1
 8000838:	bf08      	it	eq
 800083a:	4770      	bxeq	lr
 800083c:	b530      	push	{r4, r5, lr}
 800083e:	f04f 0500 	mov.w	r5, #0
 8000842:	e00a      	b.n	800085a <__aeabi_l2d+0x16>

08000844 <__aeabi_l2d>:
 8000844:	ea50 0201 	orrs.w	r2, r0, r1
 8000848:	bf08      	it	eq
 800084a:	4770      	bxeq	lr
 800084c:	b530      	push	{r4, r5, lr}
 800084e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000852:	d502      	bpl.n	800085a <__aeabi_l2d+0x16>
 8000854:	4240      	negs	r0, r0
 8000856:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800085a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800085e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000862:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000866:	f43f aed8 	beq.w	800061a <__adddf3+0xe6>
 800086a:	f04f 0203 	mov.w	r2, #3
 800086e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000872:	bf18      	it	ne
 8000874:	3203      	addne	r2, #3
 8000876:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800087a:	bf18      	it	ne
 800087c:	3203      	addne	r2, #3
 800087e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000882:	f1c2 0320 	rsb	r3, r2, #32
 8000886:	fa00 fc03 	lsl.w	ip, r0, r3
 800088a:	fa20 f002 	lsr.w	r0, r0, r2
 800088e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000892:	ea40 000e 	orr.w	r0, r0, lr
 8000896:	fa21 f102 	lsr.w	r1, r1, r2
 800089a:	4414      	add	r4, r2
 800089c:	e6bd      	b.n	800061a <__adddf3+0xe6>
 800089e:	bf00      	nop

080008a0 <__aeabi_frsub>:
 80008a0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80008a4:	e002      	b.n	80008ac <__addsf3>
 80008a6:	bf00      	nop

080008a8 <__aeabi_fsub>:
 80008a8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080008ac <__addsf3>:
 80008ac:	0042      	lsls	r2, r0, #1
 80008ae:	bf1f      	itttt	ne
 80008b0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80008b4:	ea92 0f03 	teqne	r2, r3
 80008b8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80008bc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008c0:	d06a      	beq.n	8000998 <__addsf3+0xec>
 80008c2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80008c6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80008ca:	bfc1      	itttt	gt
 80008cc:	18d2      	addgt	r2, r2, r3
 80008ce:	4041      	eorgt	r1, r0
 80008d0:	4048      	eorgt	r0, r1
 80008d2:	4041      	eorgt	r1, r0
 80008d4:	bfb8      	it	lt
 80008d6:	425b      	neglt	r3, r3
 80008d8:	2b19      	cmp	r3, #25
 80008da:	bf88      	it	hi
 80008dc:	4770      	bxhi	lr
 80008de:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80008e2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008e6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80008ea:	bf18      	it	ne
 80008ec:	4240      	negne	r0, r0
 80008ee:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80008f2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80008f6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80008fa:	bf18      	it	ne
 80008fc:	4249      	negne	r1, r1
 80008fe:	ea92 0f03 	teq	r2, r3
 8000902:	d03f      	beq.n	8000984 <__addsf3+0xd8>
 8000904:	f1a2 0201 	sub.w	r2, r2, #1
 8000908:	fa41 fc03 	asr.w	ip, r1, r3
 800090c:	eb10 000c 	adds.w	r0, r0, ip
 8000910:	f1c3 0320 	rsb	r3, r3, #32
 8000914:	fa01 f103 	lsl.w	r1, r1, r3
 8000918:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800091c:	d502      	bpl.n	8000924 <__addsf3+0x78>
 800091e:	4249      	negs	r1, r1
 8000920:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000924:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000928:	d313      	bcc.n	8000952 <__addsf3+0xa6>
 800092a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800092e:	d306      	bcc.n	800093e <__addsf3+0x92>
 8000930:	0840      	lsrs	r0, r0, #1
 8000932:	ea4f 0131 	mov.w	r1, r1, rrx
 8000936:	f102 0201 	add.w	r2, r2, #1
 800093a:	2afe      	cmp	r2, #254	@ 0xfe
 800093c:	d251      	bcs.n	80009e2 <__addsf3+0x136>
 800093e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000942:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000946:	bf08      	it	eq
 8000948:	f020 0001 	biceq.w	r0, r0, #1
 800094c:	ea40 0003 	orr.w	r0, r0, r3
 8000950:	4770      	bx	lr
 8000952:	0049      	lsls	r1, r1, #1
 8000954:	eb40 0000 	adc.w	r0, r0, r0
 8000958:	3a01      	subs	r2, #1
 800095a:	bf28      	it	cs
 800095c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000960:	d2ed      	bcs.n	800093e <__addsf3+0x92>
 8000962:	fab0 fc80 	clz	ip, r0
 8000966:	f1ac 0c08 	sub.w	ip, ip, #8
 800096a:	ebb2 020c 	subs.w	r2, r2, ip
 800096e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000972:	bfaa      	itet	ge
 8000974:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000978:	4252      	neglt	r2, r2
 800097a:	4318      	orrge	r0, r3
 800097c:	bfbc      	itt	lt
 800097e:	40d0      	lsrlt	r0, r2
 8000980:	4318      	orrlt	r0, r3
 8000982:	4770      	bx	lr
 8000984:	f092 0f00 	teq	r2, #0
 8000988:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800098c:	bf06      	itte	eq
 800098e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000992:	3201      	addeq	r2, #1
 8000994:	3b01      	subne	r3, #1
 8000996:	e7b5      	b.n	8000904 <__addsf3+0x58>
 8000998:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800099c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009a6:	d021      	beq.n	80009ec <__addsf3+0x140>
 80009a8:	ea92 0f03 	teq	r2, r3
 80009ac:	d004      	beq.n	80009b8 <__addsf3+0x10c>
 80009ae:	f092 0f00 	teq	r2, #0
 80009b2:	bf08      	it	eq
 80009b4:	4608      	moveq	r0, r1
 80009b6:	4770      	bx	lr
 80009b8:	ea90 0f01 	teq	r0, r1
 80009bc:	bf1c      	itt	ne
 80009be:	2000      	movne	r0, #0
 80009c0:	4770      	bxne	lr
 80009c2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80009c6:	d104      	bne.n	80009d2 <__addsf3+0x126>
 80009c8:	0040      	lsls	r0, r0, #1
 80009ca:	bf28      	it	cs
 80009cc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80009d0:	4770      	bx	lr
 80009d2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80009d6:	bf3c      	itt	cc
 80009d8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80009dc:	4770      	bxcc	lr
 80009de:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80009e2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80009e6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009ea:	4770      	bx	lr
 80009ec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80009f0:	bf16      	itet	ne
 80009f2:	4608      	movne	r0, r1
 80009f4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80009f8:	4601      	movne	r1, r0
 80009fa:	0242      	lsls	r2, r0, #9
 80009fc:	bf06      	itte	eq
 80009fe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a02:	ea90 0f01 	teqeq	r0, r1
 8000a06:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000a0a:	4770      	bx	lr

08000a0c <__aeabi_ui2f>:
 8000a0c:	f04f 0300 	mov.w	r3, #0
 8000a10:	e004      	b.n	8000a1c <__aeabi_i2f+0x8>
 8000a12:	bf00      	nop

08000a14 <__aeabi_i2f>:
 8000a14:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000a18:	bf48      	it	mi
 8000a1a:	4240      	negmi	r0, r0
 8000a1c:	ea5f 0c00 	movs.w	ip, r0
 8000a20:	bf08      	it	eq
 8000a22:	4770      	bxeq	lr
 8000a24:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000a28:	4601      	mov	r1, r0
 8000a2a:	f04f 0000 	mov.w	r0, #0
 8000a2e:	e01c      	b.n	8000a6a <__aeabi_l2f+0x2a>

08000a30 <__aeabi_ul2f>:
 8000a30:	ea50 0201 	orrs.w	r2, r0, r1
 8000a34:	bf08      	it	eq
 8000a36:	4770      	bxeq	lr
 8000a38:	f04f 0300 	mov.w	r3, #0
 8000a3c:	e00a      	b.n	8000a54 <__aeabi_l2f+0x14>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_l2f>:
 8000a40:	ea50 0201 	orrs.w	r2, r0, r1
 8000a44:	bf08      	it	eq
 8000a46:	4770      	bxeq	lr
 8000a48:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000a4c:	d502      	bpl.n	8000a54 <__aeabi_l2f+0x14>
 8000a4e:	4240      	negs	r0, r0
 8000a50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a54:	ea5f 0c01 	movs.w	ip, r1
 8000a58:	bf02      	ittt	eq
 8000a5a:	4684      	moveq	ip, r0
 8000a5c:	4601      	moveq	r1, r0
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000a64:	bf08      	it	eq
 8000a66:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000a6a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000a6e:	fabc f28c 	clz	r2, ip
 8000a72:	3a08      	subs	r2, #8
 8000a74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000a78:	db10      	blt.n	8000a9c <__aeabi_l2f+0x5c>
 8000a7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a7e:	4463      	add	r3, ip
 8000a80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a84:	f1c2 0220 	rsb	r2, r2, #32
 8000a88:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000a8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000a90:	eb43 0002 	adc.w	r0, r3, r2
 8000a94:	bf08      	it	eq
 8000a96:	f020 0001 	biceq.w	r0, r0, #1
 8000a9a:	4770      	bx	lr
 8000a9c:	f102 0220 	add.w	r2, r2, #32
 8000aa0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000aa4:	f1c2 0220 	rsb	r2, r2, #32
 8000aa8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000aac:	fa21 f202 	lsr.w	r2, r1, r2
 8000ab0:	eb43 0002 	adc.w	r0, r3, r2
 8000ab4:	bf08      	it	eq
 8000ab6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000aba:	4770      	bx	lr

08000abc <__aeabi_fmul>:
 8000abc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ac0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ac4:	bf1e      	ittt	ne
 8000ac6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000aca:	ea92 0f0c 	teqne	r2, ip
 8000ace:	ea93 0f0c 	teqne	r3, ip
 8000ad2:	d06f      	beq.n	8000bb4 <__aeabi_fmul+0xf8>
 8000ad4:	441a      	add	r2, r3
 8000ad6:	ea80 0c01 	eor.w	ip, r0, r1
 8000ada:	0240      	lsls	r0, r0, #9
 8000adc:	bf18      	it	ne
 8000ade:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000ae2:	d01e      	beq.n	8000b22 <__aeabi_fmul+0x66>
 8000ae4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000ae8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000aec:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000af0:	fba0 3101 	umull	r3, r1, r0, r1
 8000af4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000af8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000afc:	bf3e      	ittt	cc
 8000afe:	0049      	lslcc	r1, r1, #1
 8000b00:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000b04:	005b      	lslcc	r3, r3, #1
 8000b06:	ea40 0001 	orr.w	r0, r0, r1
 8000b0a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000b0e:	2afd      	cmp	r2, #253	@ 0xfd
 8000b10:	d81d      	bhi.n	8000b4e <__aeabi_fmul+0x92>
 8000b12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000b16:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b1a:	bf08      	it	eq
 8000b1c:	f020 0001 	biceq.w	r0, r0, #1
 8000b20:	4770      	bx	lr
 8000b22:	f090 0f00 	teq	r0, #0
 8000b26:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b2a:	bf08      	it	eq
 8000b2c:	0249      	lsleq	r1, r1, #9
 8000b2e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b32:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000b36:	3a7f      	subs	r2, #127	@ 0x7f
 8000b38:	bfc2      	ittt	gt
 8000b3a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000b3e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b42:	4770      	bxgt	lr
 8000b44:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	3a01      	subs	r2, #1
 8000b4e:	dc5d      	bgt.n	8000c0c <__aeabi_fmul+0x150>
 8000b50:	f112 0f19 	cmn.w	r2, #25
 8000b54:	bfdc      	itt	le
 8000b56:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000b5a:	4770      	bxle	lr
 8000b5c:	f1c2 0200 	rsb	r2, r2, #0
 8000b60:	0041      	lsls	r1, r0, #1
 8000b62:	fa21 f102 	lsr.w	r1, r1, r2
 8000b66:	f1c2 0220 	rsb	r2, r2, #32
 8000b6a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b6e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000b72:	f140 0000 	adc.w	r0, r0, #0
 8000b76:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000b7a:	bf08      	it	eq
 8000b7c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b80:	4770      	bx	lr
 8000b82:	f092 0f00 	teq	r2, #0
 8000b86:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000b8a:	bf02      	ittt	eq
 8000b8c:	0040      	lsleq	r0, r0, #1
 8000b8e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000b92:	3a01      	subeq	r2, #1
 8000b94:	d0f9      	beq.n	8000b8a <__aeabi_fmul+0xce>
 8000b96:	ea40 000c 	orr.w	r0, r0, ip
 8000b9a:	f093 0f00 	teq	r3, #0
 8000b9e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ba2:	bf02      	ittt	eq
 8000ba4:	0049      	lsleq	r1, r1, #1
 8000ba6:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000baa:	3b01      	subeq	r3, #1
 8000bac:	d0f9      	beq.n	8000ba2 <__aeabi_fmul+0xe6>
 8000bae:	ea41 010c 	orr.w	r1, r1, ip
 8000bb2:	e78f      	b.n	8000ad4 <__aeabi_fmul+0x18>
 8000bb4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000bb8:	ea92 0f0c 	teq	r2, ip
 8000bbc:	bf18      	it	ne
 8000bbe:	ea93 0f0c 	teqne	r3, ip
 8000bc2:	d00a      	beq.n	8000bda <__aeabi_fmul+0x11e>
 8000bc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000bc8:	bf18      	it	ne
 8000bca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000bce:	d1d8      	bne.n	8000b82 <__aeabi_fmul+0xc6>
 8000bd0:	ea80 0001 	eor.w	r0, r0, r1
 8000bd4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000bd8:	4770      	bx	lr
 8000bda:	f090 0f00 	teq	r0, #0
 8000bde:	bf17      	itett	ne
 8000be0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000be4:	4608      	moveq	r0, r1
 8000be6:	f091 0f00 	teqne	r1, #0
 8000bea:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000bee:	d014      	beq.n	8000c1a <__aeabi_fmul+0x15e>
 8000bf0:	ea92 0f0c 	teq	r2, ip
 8000bf4:	d101      	bne.n	8000bfa <__aeabi_fmul+0x13e>
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	d10f      	bne.n	8000c1a <__aeabi_fmul+0x15e>
 8000bfa:	ea93 0f0c 	teq	r3, ip
 8000bfe:	d103      	bne.n	8000c08 <__aeabi_fmul+0x14c>
 8000c00:	024b      	lsls	r3, r1, #9
 8000c02:	bf18      	it	ne
 8000c04:	4608      	movne	r0, r1
 8000c06:	d108      	bne.n	8000c1a <__aeabi_fmul+0x15e>
 8000c08:	ea80 0001 	eor.w	r0, r0, r1
 8000c0c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c1e:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000c22:	4770      	bx	lr

08000c24 <__aeabi_fdiv>:
 8000c24:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000c28:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000c32:	ea92 0f0c 	teqne	r2, ip
 8000c36:	ea93 0f0c 	teqne	r3, ip
 8000c3a:	d069      	beq.n	8000d10 <__aeabi_fdiv+0xec>
 8000c3c:	eba2 0203 	sub.w	r2, r2, r3
 8000c40:	ea80 0c01 	eor.w	ip, r0, r1
 8000c44:	0249      	lsls	r1, r1, #9
 8000c46:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000c4a:	d037      	beq.n	8000cbc <__aeabi_fdiv+0x98>
 8000c4c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c50:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000c54:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000c58:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c5c:	428b      	cmp	r3, r1
 8000c5e:	bf38      	it	cc
 8000c60:	005b      	lslcc	r3, r3, #1
 8000c62:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000c66:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	bf24      	itt	cs
 8000c6e:	1a5b      	subcs	r3, r3, r1
 8000c70:	ea40 000c 	orrcs.w	r0, r0, ip
 8000c74:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000c78:	bf24      	itt	cs
 8000c7a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000c7e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000c82:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000c86:	bf24      	itt	cs
 8000c88:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000c8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000c90:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000c94:	bf24      	itt	cs
 8000c96:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000c9a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000c9e:	011b      	lsls	r3, r3, #4
 8000ca0:	bf18      	it	ne
 8000ca2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ca6:	d1e0      	bne.n	8000c6a <__aeabi_fdiv+0x46>
 8000ca8:	2afd      	cmp	r2, #253	@ 0xfd
 8000caa:	f63f af50 	bhi.w	8000b4e <__aeabi_fmul+0x92>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cb4:	bf08      	it	eq
 8000cb6:	f020 0001 	biceq.w	r0, r0, #1
 8000cba:	4770      	bx	lr
 8000cbc:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000cc0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000cc4:	327f      	adds	r2, #127	@ 0x7f
 8000cc6:	bfc2      	ittt	gt
 8000cc8:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ccc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000cd0:	4770      	bxgt	lr
 8000cd2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd6:	f04f 0300 	mov.w	r3, #0
 8000cda:	3a01      	subs	r2, #1
 8000cdc:	e737      	b.n	8000b4e <__aeabi_fmul+0x92>
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ce6:	bf02      	ittt	eq
 8000ce8:	0040      	lsleq	r0, r0, #1
 8000cea:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000cee:	3a01      	subeq	r2, #1
 8000cf0:	d0f9      	beq.n	8000ce6 <__aeabi_fdiv+0xc2>
 8000cf2:	ea40 000c 	orr.w	r0, r0, ip
 8000cf6:	f093 0f00 	teq	r3, #0
 8000cfa:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cfe:	bf02      	ittt	eq
 8000d00:	0049      	lsleq	r1, r1, #1
 8000d02:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d06:	3b01      	subeq	r3, #1
 8000d08:	d0f9      	beq.n	8000cfe <__aeabi_fdiv+0xda>
 8000d0a:	ea41 010c 	orr.w	r1, r1, ip
 8000d0e:	e795      	b.n	8000c3c <__aeabi_fdiv+0x18>
 8000d10:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000d14:	ea92 0f0c 	teq	r2, ip
 8000d18:	d108      	bne.n	8000d2c <__aeabi_fdiv+0x108>
 8000d1a:	0242      	lsls	r2, r0, #9
 8000d1c:	f47f af7d 	bne.w	8000c1a <__aeabi_fmul+0x15e>
 8000d20:	ea93 0f0c 	teq	r3, ip
 8000d24:	f47f af70 	bne.w	8000c08 <__aeabi_fmul+0x14c>
 8000d28:	4608      	mov	r0, r1
 8000d2a:	e776      	b.n	8000c1a <__aeabi_fmul+0x15e>
 8000d2c:	ea93 0f0c 	teq	r3, ip
 8000d30:	d104      	bne.n	8000d3c <__aeabi_fdiv+0x118>
 8000d32:	024b      	lsls	r3, r1, #9
 8000d34:	f43f af4c 	beq.w	8000bd0 <__aeabi_fmul+0x114>
 8000d38:	4608      	mov	r0, r1
 8000d3a:	e76e      	b.n	8000c1a <__aeabi_fmul+0x15e>
 8000d3c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000d40:	bf18      	it	ne
 8000d42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000d46:	d1ca      	bne.n	8000cde <__aeabi_fdiv+0xba>
 8000d48:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000d4c:	f47f af5c 	bne.w	8000c08 <__aeabi_fmul+0x14c>
 8000d50:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000d54:	f47f af3c 	bne.w	8000bd0 <__aeabi_fmul+0x114>
 8000d58:	e75f      	b.n	8000c1a <__aeabi_fmul+0x15e>
 8000d5a:	bf00      	nop

08000d5c <kalman_init>:
    float x;
    float p;
    float k;
} KalmanFilter;

void kalman_init(KalmanFilter* kf, float init_x, float init_p, float q, float r) {
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	603b      	str	r3, [r7, #0]
    kf->x = init_x;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	68ba      	ldr	r2, [r7, #8]
 8000d6e:	609a      	str	r2, [r3, #8]
    kf->p = init_p;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	60da      	str	r2, [r3, #12]
    kf->q = q;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	683a      	ldr	r2, [r7, #0]
 8000d7a:	601a      	str	r2, [r3, #0]
    kf->r = r;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	605a      	str	r2, [r3, #4]
}
 8000d82:	bf00      	nop
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <kalman_update>:

float kalman_update(KalmanFilter* kf, float measurement) {
 8000d8c:	b5b0      	push	{r4, r5, r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
    kf->p += kf->q;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	68da      	ldr	r2, [r3, #12]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4610      	mov	r0, r2
 8000da2:	f7ff fd83 	bl	80008ac <__addsf3>
 8000da6:	4603      	mov	r3, r0
 8000da8:	461a      	mov	r2, r3
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	60da      	str	r2, [r3, #12]
    kf->k = kf->p / (kf->p + kf->r);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	68dc      	ldr	r4, [r3, #12]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	68da      	ldr	r2, [r3, #12]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4610      	mov	r0, r2
 8000dbe:	f7ff fd75 	bl	80008ac <__addsf3>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4620      	mov	r0, r4
 8000dc8:	f7ff ff2c 	bl	8000c24 <__aeabi_fdiv>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	461a      	mov	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	611a      	str	r2, [r3, #16]
    kf->x += kf->k * (measurement - kf->x);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689c      	ldr	r4, [r3, #8]
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	691d      	ldr	r5, [r3, #16]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	4619      	mov	r1, r3
 8000de2:	6838      	ldr	r0, [r7, #0]
 8000de4:	f7ff fd60 	bl	80008a8 <__aeabi_fsub>
 8000de8:	4603      	mov	r3, r0
 8000dea:	4619      	mov	r1, r3
 8000dec:	4628      	mov	r0, r5
 8000dee:	f7ff fe65 	bl	8000abc <__aeabi_fmul>
 8000df2:	4603      	mov	r3, r0
 8000df4:	4619      	mov	r1, r3
 8000df6:	4620      	mov	r0, r4
 8000df8:	f7ff fd58 	bl	80008ac <__addsf3>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	461a      	mov	r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	609a      	str	r2, [r3, #8]
    kf->p *= (1 - kf->k);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	68dc      	ldr	r4, [r3, #12]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	691b      	ldr	r3, [r3, #16]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8000e12:	f7ff fd49 	bl	80008a8 <__aeabi_fsub>
 8000e16:	4603      	mov	r3, r0
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	f7ff fe4e 	bl	8000abc <__aeabi_fmul>
 8000e20:	4603      	mov	r3, r0
 8000e22:	461a      	mov	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	60da      	str	r2, [r3, #12]

    return kf->x;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689b      	ldr	r3, [r3, #8]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bdb0      	pop	{r4, r5, r7, pc}

08000e34 <i2c_read_register>:
    .stksz      = MOTOR_TASK_STACK_SIZE,
    .task       = task_motor_odometry,
    .tskatr     = TA_HLNG | TA_RNG3,
};

LOCAL void i2c_read_register(UINT reg, UINT* data, UINT length) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	@ 0x28
 8000e38:	af02      	add	r7, sp, #8
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
    ID dd;
    SZ asize;

    dd = tk_opn_dev((UB*)"Uucp", TD_UPDATE);
 8000e40:	2103      	movs	r1, #3
 8000e42:	4820      	ldr	r0, [pc, #128]	@ (8000ec4 <i2c_read_register+0x90>)
 8000e44:	f004 f97c 	bl	8005140 <tk_opn_dev>
 8000e48:	61b8      	str	r0, [r7, #24]

    if (dd >= 0) {
 8000e4a:	69bb      	ldr	r3, [r7, #24]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	db32      	blt.n	8000eb6 <i2c_read_register+0x82>
        ER result = tk_srea_dev(dd, reg, data, length, &asize);
 8000e50:	68f9      	ldr	r1, [r7, #12]
 8000e52:	687a      	ldr	r2, [r7, #4]
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	9300      	str	r3, [sp, #0]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	68ba      	ldr	r2, [r7, #8]
 8000e5e:	69b8      	ldr	r0, [r7, #24]
 8000e60:	f004 fd03 	bl	800586a <tk_srea_dev>
 8000e64:	6178      	str	r0, [r7, #20]

        if (result >= 0) {
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	db1b      	blt.n	8000ea4 <i2c_read_register+0x70>
            tm_printf((const UB*)"Data successfully read from register 0x%x. Bytes read: %d\n", reg, asize);
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	68f9      	ldr	r1, [r7, #12]
 8000e72:	4815      	ldr	r0, [pc, #84]	@ (8000ec8 <i2c_read_register+0x94>)
 8000e74:	f00d fb7a 	bl	800e56c <tm_printf>
            for (UINT i = 0; i < asize; i++) {
 8000e78:	2300      	movs	r3, #0
 8000e7a:	61fb      	str	r3, [r7, #28]
 8000e7c:	e00c      	b.n	8000e98 <i2c_read_register+0x64>
                tm_printf((const UB*)"Data[%d] = 0x%x\n", i, data[i]);
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	4413      	add	r3, r2
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	69f9      	ldr	r1, [r7, #28]
 8000e8c:	480f      	ldr	r0, [pc, #60]	@ (8000ecc <i2c_read_register+0x98>)
 8000e8e:	f00d fb6d 	bl	800e56c <tm_printf>
            for (UINT i = 0; i < asize; i++) {
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3301      	adds	r3, #1
 8000e96:	61fb      	str	r3, [r7, #28]
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	461a      	mov	r2, r3
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d3ed      	bcc.n	8000e7e <i2c_read_register+0x4a>
 8000ea2:	e003      	b.n	8000eac <i2c_read_register+0x78>
            }
        } else {
            tm_printf((const UB*)"Error reading from register 0x%x\n", reg);
 8000ea4:	68f9      	ldr	r1, [r7, #12]
 8000ea6:	480a      	ldr	r0, [pc, #40]	@ (8000ed0 <i2c_read_register+0x9c>)
 8000ea8:	f00d fb60 	bl	800e56c <tm_printf>
        }

        tk_cls_dev(dd, 0);
 8000eac:	2100      	movs	r1, #0
 8000eae:	69b8      	ldr	r0, [r7, #24]
 8000eb0:	f004 fb98 	bl	80055e4 <tk_cls_dev>
    } else {
        tm_printf((const UB*)"Failed to open I2C device\n");
    }
}
 8000eb4:	e002      	b.n	8000ebc <i2c_read_register+0x88>
        tm_printf((const UB*)"Failed to open I2C device\n");
 8000eb6:	4807      	ldr	r0, [pc, #28]	@ (8000ed4 <i2c_read_register+0xa0>)
 8000eb8:	f00d fb58 	bl	800e56c <tm_printf>
}
 8000ebc:	bf00      	nop
 8000ebe:	3720      	adds	r7, #32
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	0800e730 	.word	0x0800e730
 8000ec8:	0800e738 	.word	0x0800e738
 8000ecc:	0800e774 	.word	0x0800e774
 8000ed0:	0800e788 	.word	0x0800e788
 8000ed4:	0800e7ac 	.word	0x0800e7ac

08000ed8 <read_mpu9250>:

LOCAL void read_mpu9250(INT* accel, INT* gyro) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b090      	sub	sp, #64	@ 0x40
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
    UINT data[14];
    memset(data, 0, sizeof(data));
 8000ee2:	f107 0308 	add.w	r3, r7, #8
 8000ee6:	2238      	movs	r2, #56	@ 0x38
 8000ee8:	2100      	movs	r1, #0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f00d fc18 	bl	800e720 <memset>
    i2c_read_register(ACCEL_XOUT_H, data, 14);
 8000ef0:	f107 0308 	add.w	r3, r7, #8
 8000ef4:	220e      	movs	r2, #14
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	203b      	movs	r0, #59	@ 0x3b
 8000efa:	f7ff ff9b 	bl	8000e34 <i2c_read_register>

    accel[0] = (data[0] << 8) | data[1];  // X軸
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	021a      	lsls	r2, r3, #8
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	461a      	mov	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	601a      	str	r2, [r3, #0]
    accel[1] = (data[2] << 8) | data[3];  // Y軸
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	021a      	lsls	r2, r3, #8
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	431a      	orrs	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3304      	adds	r3, #4
 8000f18:	601a      	str	r2, [r3, #0]
    accel[2] = (data[4] << 8) | data[5];  // Z軸
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	021a      	lsls	r2, r3, #8
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	431a      	orrs	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	3308      	adds	r3, #8
 8000f26:	601a      	str	r2, [r3, #0]
    gyro[0] = (data[8] << 8) | data[9];    // X軸
 8000f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f2a:	021a      	lsls	r2, r3, #8
 8000f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	461a      	mov	r2, r3
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	601a      	str	r2, [r3, #0]
    gyro[1] = (data[10] << 8) | data[11];  // Y軸
 8000f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f38:	021a      	lsls	r2, r3, #8
 8000f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	3304      	adds	r3, #4
 8000f42:	601a      	str	r2, [r3, #0]
    gyro[2] = (data[12] << 8) | data[13];  // Z軸
 8000f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000f46:	021a      	lsls	r2, r3, #8
 8000f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f4a:	431a      	orrs	r2, r3
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	3308      	adds	r3, #8
 8000f50:	601a      	str	r2, [r3, #0]
}
 8000f52:	bf00      	nop
 8000f54:	3740      	adds	r7, #64	@ 0x40
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <uart_init>:

LOCAL void uart_init(void) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
    ID uart_id = tk_opn_dev((UB*)UART_DEVNAME, -1);
 8000f62:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f66:	480b      	ldr	r0, [pc, #44]	@ (8000f94 <uart_init+0x38>)
 8000f68:	f004 f8ea 	bl	8005140 <tk_opn_dev>
 8000f6c:	6078      	str	r0, [r7, #4]
    if (uart_id < 0) {
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	da03      	bge.n	8000f7c <uart_init+0x20>
        tm_printf((const UB*)"Failed to open UART device\n");
 8000f74:	4808      	ldr	r0, [pc, #32]	@ (8000f98 <uart_init+0x3c>)
 8000f76:	f00d faf9 	bl	800e56c <tm_printf>
        return;
 8000f7a:	e007      	b.n	8000f8c <uart_init+0x30>
    }
    tk_cls_dev(uart_id, 0);  // バッファをクリア
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f004 fb30 	bl	80055e4 <tk_cls_dev>
    tk_cls_dev(uart_id, 0);
 8000f84:	2100      	movs	r1, #0
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f004 fb2c 	bl	80055e4 <tk_cls_dev>
}
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	0800e7c8 	.word	0x0800e7c8
 8000f98:	0800e7d0 	.word	0x0800e7d0

08000f9c <uart_read_angle>:

LOCAL char* uart_read_angle(INT* angle) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]

    static char buffer[BUFFER_SIZE];  // staticにして関数外でも使用できるようにする
    int index = 0;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60fb      	str	r3, [r7, #12]
    int ch;

    // 1文字ずつ受信し、バッファに追加
    while (index < BUFFER_SIZE - 1) {
 8000fa8:	e015      	b.n	8000fd6 <uart_read_angle+0x3a>
        ch = tm_getchar(1);  // 1文字受信
 8000faa:	2001      	movs	r0, #1
 8000fac:	f00c feca 	bl	800dd44 <tm_getchar>
 8000fb0:	60b8      	str	r0, [r7, #8]
        if (ch < 0) {
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	da04      	bge.n	8000fc2 <uart_read_angle+0x26>
            tm_printf((const UB*)"Failed to read from UART\n");
 8000fb8:	480e      	ldr	r0, [pc, #56]	@ (8000ff4 <uart_read_angle+0x58>)
 8000fba:	f00d fad7 	bl	800e56c <tm_printf>
            return NULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	e014      	b.n	8000fec <uart_read_angle+0x50>
        }

        buffer[index++] = (char)ch;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	1c5a      	adds	r2, r3, #1
 8000fc6:	60fa      	str	r2, [r7, #12]
 8000fc8:	68ba      	ldr	r2, [r7, #8]
 8000fca:	b2d1      	uxtb	r1, r2
 8000fcc:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff8 <uart_read_angle+0x5c>)
 8000fce:	54d1      	strb	r1, [r2, r3]

        // 改行文字を受信したら終了
        if (ch == '\n') {
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	2b0a      	cmp	r3, #10
 8000fd4:	d003      	beq.n	8000fde <uart_read_angle+0x42>
    while (index < BUFFER_SIZE - 1) {
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2b3e      	cmp	r3, #62	@ 0x3e
 8000fda:	dde6      	ble.n	8000faa <uart_read_angle+0xe>
 8000fdc:	e000      	b.n	8000fe0 <uart_read_angle+0x44>
            break;
 8000fde:	bf00      	nop
        }
    }
    buffer[index] = '\0';  // 文字列終端を追加
 8000fe0:	4a05      	ldr	r2, [pc, #20]	@ (8000ff8 <uart_read_angle+0x5c>)
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	701a      	strb	r2, [r3, #0]

    return buffer;  // バッファを返す
 8000fea:	4b03      	ldr	r3, [pc, #12]	@ (8000ff8 <uart_read_angle+0x5c>)
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3710      	adds	r7, #16
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	0800e7ec 	.word	0x0800e7ec
 8000ff8:	2400287c 	.word	0x2400287c

08000ffc <task_1>:



LOCAL void task_1(INT stacd, void *exinf)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
    while(1) {
        tm_printf((const UB*)"Accel: X=%d, Y=%d, Z=%d\n", accel[0], accel[1], accel[2]);
 8001006:	4b0b      	ldr	r3, [pc, #44]	@ (8001034 <task_1+0x38>)
 8001008:	6819      	ldr	r1, [r3, #0]
 800100a:	4b0a      	ldr	r3, [pc, #40]	@ (8001034 <task_1+0x38>)
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <task_1+0x38>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	4809      	ldr	r0, [pc, #36]	@ (8001038 <task_1+0x3c>)
 8001014:	f00d faaa 	bl	800e56c <tm_printf>
        tm_printf((const UB*)"Gyro:  X=%d, Y=%d, Z=%d\n", gyro[0], gyro[1], gyro[2]);
 8001018:	4b08      	ldr	r3, [pc, #32]	@ (800103c <task_1+0x40>)
 800101a:	6819      	ldr	r1, [r3, #0]
 800101c:	4b07      	ldr	r3, [pc, #28]	@ (800103c <task_1+0x40>)
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	4b06      	ldr	r3, [pc, #24]	@ (800103c <task_1+0x40>)
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	4806      	ldr	r0, [pc, #24]	@ (8001040 <task_1+0x44>)
 8001026:	f00d faa1 	bl	800e56c <tm_printf>

        tk_dly_tsk(100);
 800102a:	2064      	movs	r0, #100	@ 0x64
 800102c:	f00a fc96 	bl	800b95c <tk_dly_tsk>
        tm_printf((const UB*)"Accel: X=%d, Y=%d, Z=%d\n", accel[0], accel[1], accel[2]);
 8001030:	bf00      	nop
 8001032:	e7e8      	b.n	8001006 <task_1+0xa>
 8001034:	240027e8 	.word	0x240027e8
 8001038:	0800e808 	.word	0x0800e808
 800103c:	240027f4 	.word	0x240027f4
 8001040:	0800e824 	.word	0x0800e824

08001044 <task_2>:
    }
}

LOCAL void task_2(INT stacd, void *exinf)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
    while(1) {
        read_mpu9250(accel, gyro);
 800104e:	4904      	ldr	r1, [pc, #16]	@ (8001060 <task_2+0x1c>)
 8001050:	4804      	ldr	r0, [pc, #16]	@ (8001064 <task_2+0x20>)
 8001052:	f7ff ff41 	bl	8000ed8 <read_mpu9250>
        tk_dly_tsk(10);
 8001056:	200a      	movs	r0, #10
 8001058:	f00a fc80 	bl	800b95c <tk_dly_tsk>
        read_mpu9250(accel, gyro);
 800105c:	bf00      	nop
 800105e:	e7f6      	b.n	800104e <task_2+0xa>
 8001060:	240027f4 	.word	0x240027f4
 8001064:	240027e8 	.word	0x240027e8

08001068 <task_motor_odometry>:
    }
}

LOCAL void task_motor_odometry(INT stacd, void *exinf)
{
 8001068:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800106c:	b08e      	sub	sp, #56	@ 0x38
 800106e:	af04      	add	r7, sp, #16
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	6039      	str	r1, [r7, #0]
    INT motor_angle = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
    while (1) {
        if (uart_read_angle(&motor_angle) == 0) {
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff8d 	bl	8000f9c <uart_read_angle>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d17a      	bne.n	800117e <task_motor_odometry+0x116>

            float filtered_accel_x = kalman_update(&kf_accel_x, (float)accel[0]);
 8001088:	4b3f      	ldr	r3, [pc, #252]	@ (8001188 <task_motor_odometry+0x120>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fcc1 	bl	8000a14 <__aeabi_i2f>
 8001092:	4603      	mov	r3, r0
 8001094:	4619      	mov	r1, r3
 8001096:	483d      	ldr	r0, [pc, #244]	@ (800118c <task_motor_odometry+0x124>)
 8001098:	f7ff fe78 	bl	8000d8c <kalman_update>
 800109c:	6278      	str	r0, [r7, #36]	@ 0x24
            float filtered_accel_y = kalman_update(&kf_accel_y, (float)accel[1]);
 800109e:	4b3a      	ldr	r3, [pc, #232]	@ (8001188 <task_motor_odometry+0x120>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fcb6 	bl	8000a14 <__aeabi_i2f>
 80010a8:	4603      	mov	r3, r0
 80010aa:	4619      	mov	r1, r3
 80010ac:	4838      	ldr	r0, [pc, #224]	@ (8001190 <task_motor_odometry+0x128>)
 80010ae:	f7ff fe6d 	bl	8000d8c <kalman_update>
 80010b2:	6238      	str	r0, [r7, #32]
            float filtered_gyro_z = kalman_update(&kf_gyro_z, (float)gyro[2]);
 80010b4:	4b37      	ldr	r3, [pc, #220]	@ (8001194 <task_motor_odometry+0x12c>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fcab 	bl	8000a14 <__aeabi_i2f>
 80010be:	4603      	mov	r3, r0
 80010c0:	4619      	mov	r1, r3
 80010c2:	4835      	ldr	r0, [pc, #212]	@ (8001198 <task_motor_odometry+0x130>)
 80010c4:	f7ff fe62 	bl	8000d8c <kalman_update>
 80010c8:	61f8      	str	r0, [r7, #28]
            float dt = 0.01f;
 80010ca:	4b34      	ldr	r3, [pc, #208]	@ (800119c <task_motor_odometry+0x134>)
 80010cc:	61bb      	str	r3, [r7, #24]

            // 姿勢の更新
            odom_theta += filtered_gyro_z * dt;
 80010ce:	69b9      	ldr	r1, [r7, #24]
 80010d0:	69f8      	ldr	r0, [r7, #28]
 80010d2:	f7ff fcf3 	bl	8000abc <__aeabi_fmul>
 80010d6:	4603      	mov	r3, r0
 80010d8:	461a      	mov	r2, r3
 80010da:	4b31      	ldr	r3, [pc, #196]	@ (80011a0 <task_motor_odometry+0x138>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4619      	mov	r1, r3
 80010e0:	4610      	mov	r0, r2
 80010e2:	f7ff fbe3 	bl	80008ac <__addsf3>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b2d      	ldr	r3, [pc, #180]	@ (80011a0 <task_motor_odometry+0x138>)
 80010ec:	601a      	str	r2, [r3, #0]
            float delta_x = filtered_accel_x * dt * dt;
 80010ee:	69b9      	ldr	r1, [r7, #24]
 80010f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80010f2:	f7ff fce3 	bl	8000abc <__aeabi_fmul>
 80010f6:	4603      	mov	r3, r0
 80010f8:	4619      	mov	r1, r3
 80010fa:	69b8      	ldr	r0, [r7, #24]
 80010fc:	f7ff fcde 	bl	8000abc <__aeabi_fmul>
 8001100:	4603      	mov	r3, r0
 8001102:	617b      	str	r3, [r7, #20]
            float delta_y = filtered_accel_y * dt * dt;
 8001104:	69b9      	ldr	r1, [r7, #24]
 8001106:	6a38      	ldr	r0, [r7, #32]
 8001108:	f7ff fcd8 	bl	8000abc <__aeabi_fmul>
 800110c:	4603      	mov	r3, r0
 800110e:	4619      	mov	r1, r3
 8001110:	69b8      	ldr	r0, [r7, #24]
 8001112:	f7ff fcd3 	bl	8000abc <__aeabi_fmul>
 8001116:	4603      	mov	r3, r0
 8001118:	613b      	str	r3, [r7, #16]

            odom_x += delta_x;
 800111a:	4b22      	ldr	r3, [pc, #136]	@ (80011a4 <task_motor_odometry+0x13c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6979      	ldr	r1, [r7, #20]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fbc3 	bl	80008ac <__addsf3>
 8001126:	4603      	mov	r3, r0
 8001128:	461a      	mov	r2, r3
 800112a:	4b1e      	ldr	r3, [pc, #120]	@ (80011a4 <task_motor_odometry+0x13c>)
 800112c:	601a      	str	r2, [r3, #0]
            odom_y += delta_y;
 800112e:	4b1e      	ldr	r3, [pc, #120]	@ (80011a8 <task_motor_odometry+0x140>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6939      	ldr	r1, [r7, #16]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fbb9 	bl	80008ac <__addsf3>
 800113a:	4603      	mov	r3, r0
 800113c:	461a      	mov	r2, r3
 800113e:	4b1a      	ldr	r3, [pc, #104]	@ (80011a8 <task_motor_odometry+0x140>)
 8001140:	601a      	str	r2, [r3, #0]

            tm_printf((const UB*)"Odom: X=%.2f, Y=%.2f, Theta=%.2f\n", odom_x, odom_y, odom_theta);
 8001142:	4b18      	ldr	r3, [pc, #96]	@ (80011a4 <task_motor_odometry+0x13c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff fb52 	bl	80007f0 <__aeabi_f2d>
 800114c:	4680      	mov	r8, r0
 800114e:	4689      	mov	r9, r1
 8001150:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <task_motor_odometry+0x140>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fb4b 	bl	80007f0 <__aeabi_f2d>
 800115a:	4604      	mov	r4, r0
 800115c:	460d      	mov	r5, r1
 800115e:	4b10      	ldr	r3, [pc, #64]	@ (80011a0 <task_motor_odometry+0x138>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fb44 	bl	80007f0 <__aeabi_f2d>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001170:	e9cd 4500 	strd	r4, r5, [sp]
 8001174:	4642      	mov	r2, r8
 8001176:	464b      	mov	r3, r9
 8001178:	480c      	ldr	r0, [pc, #48]	@ (80011ac <task_motor_odometry+0x144>)
 800117a:	f00d f9f7 	bl	800e56c <tm_printf>
        }

        tk_dly_tsk(10);  // 10ms周期
 800117e:	200a      	movs	r0, #10
 8001180:	f00a fbec 	bl	800b95c <tk_dly_tsk>
        if (uart_read_angle(&motor_angle) == 0) {
 8001184:	e778      	b.n	8001078 <task_motor_odometry+0x10>
 8001186:	bf00      	nop
 8001188:	240027e8 	.word	0x240027e8
 800118c:	2400280c 	.word	0x2400280c
 8001190:	24002820 	.word	0x24002820
 8001194:	240027f4 	.word	0x240027f4
 8001198:	24002848 	.word	0x24002848
 800119c:	3c23d70a 	.word	0x3c23d70a
 80011a0:	24002808 	.word	0x24002808
 80011a4:	24002800 	.word	0x24002800
 80011a8:	24002804 	.word	0x24002804
 80011ac:	0800e840 	.word	0x0800e840

080011b0 <usermain>:
    }
}

// メインタスク
EXPORT INT usermain(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af02      	add	r7, sp, #8
    tm_printf((const UB*)"User program started\n");
 80011b6:	483d      	ldr	r0, [pc, #244]	@ (80012ac <usermain+0xfc>)
 80011b8:	f00d f9d8 	bl	800e56c <tm_printf>

    // UARTの初期化
    uart_init();
 80011bc:	f7ff fece 	bl	8000f5c <uart_init>

    // カルマンフィルターの初期化
    kalman_init(&kf_accel_x, 0.0f, 1.0f, 0.001f, 0.1f);
 80011c0:	4b3b      	ldr	r3, [pc, #236]	@ (80012b0 <usermain+0x100>)
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	4b3b      	ldr	r3, [pc, #236]	@ (80012b4 <usermain+0x104>)
 80011c6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80011ca:	f04f 0100 	mov.w	r1, #0
 80011ce:	483a      	ldr	r0, [pc, #232]	@ (80012b8 <usermain+0x108>)
 80011d0:	f7ff fdc4 	bl	8000d5c <kalman_init>
    kalman_init(&kf_accel_y, 0.0f, 1.0f, 0.001f, 0.1f);
 80011d4:	4b36      	ldr	r3, [pc, #216]	@ (80012b0 <usermain+0x100>)
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	4b36      	ldr	r3, [pc, #216]	@ (80012b4 <usermain+0x104>)
 80011da:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80011de:	f04f 0100 	mov.w	r1, #0
 80011e2:	4836      	ldr	r0, [pc, #216]	@ (80012bc <usermain+0x10c>)
 80011e4:	f7ff fdba 	bl	8000d5c <kalman_init>
    kalman_init(&kf_accel_z, 0.0f, 1.0f, 0.001f, 0.1f);
 80011e8:	4b31      	ldr	r3, [pc, #196]	@ (80012b0 <usermain+0x100>)
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	4b31      	ldr	r3, [pc, #196]	@ (80012b4 <usermain+0x104>)
 80011ee:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80011f2:	f04f 0100 	mov.w	r1, #0
 80011f6:	4832      	ldr	r0, [pc, #200]	@ (80012c0 <usermain+0x110>)
 80011f8:	f7ff fdb0 	bl	8000d5c <kalman_init>
    kalman_init(&kf_gyro_z, 0.0f, 1.0f, 0.001f, 0.1f);
 80011fc:	4b2c      	ldr	r3, [pc, #176]	@ (80012b0 <usermain+0x100>)
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	4b2c      	ldr	r3, [pc, #176]	@ (80012b4 <usermain+0x104>)
 8001202:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001206:	f04f 0100 	mov.w	r1, #0
 800120a:	482e      	ldr	r0, [pc, #184]	@ (80012c4 <usermain+0x114>)
 800120c:	f7ff fda6 	bl	8000d5c <kalman_init>
    kalman_init(&kf_motor_angle, 0.0f, 1.0f, 0.001f, 0.1f);
 8001210:	4b27      	ldr	r3, [pc, #156]	@ (80012b0 <usermain+0x100>)
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	4b27      	ldr	r3, [pc, #156]	@ (80012b4 <usermain+0x104>)
 8001216:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800121a:	f04f 0100 	mov.w	r1, #0
 800121e:	482a      	ldr	r0, [pc, #168]	@ (80012c8 <usermain+0x118>)
 8001220:	f7ff fd9c 	bl	8000d5c <kalman_init>

    // タスク1の作成と起動
    tskid_1 = tk_cre_tsk(&ctsk_1);
 8001224:	4829      	ldr	r0, [pc, #164]	@ (80012cc <usermain+0x11c>)
 8001226:	f009 fb89 	bl	800a93c <tk_cre_tsk>
 800122a:	4603      	mov	r3, r0
 800122c:	4a28      	ldr	r2, [pc, #160]	@ (80012d0 <usermain+0x120>)
 800122e:	6013      	str	r3, [r2, #0]
    if (tskid_1 >= 0) {
 8001230:	4b27      	ldr	r3, [pc, #156]	@ (80012d0 <usermain+0x120>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db06      	blt.n	8001246 <usermain+0x96>
        tk_sta_tsk(tskid_1, 0);
 8001238:	4b25      	ldr	r3, [pc, #148]	@ (80012d0 <usermain+0x120>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f009 fcbc 	bl	800abbc <tk_sta_tsk>
 8001244:	e002      	b.n	800124c <usermain+0x9c>
    } else {
        tm_printf((const UB*)"Failed to create task_1\n");
 8001246:	4823      	ldr	r0, [pc, #140]	@ (80012d4 <usermain+0x124>)
 8001248:	f00d f990 	bl	800e56c <tm_printf>
    }

    // タスク2の作成と起動
    tskid_2 = tk_cre_tsk(&ctsk_2);
 800124c:	4822      	ldr	r0, [pc, #136]	@ (80012d8 <usermain+0x128>)
 800124e:	f009 fb75 	bl	800a93c <tk_cre_tsk>
 8001252:	4603      	mov	r3, r0
 8001254:	4a21      	ldr	r2, [pc, #132]	@ (80012dc <usermain+0x12c>)
 8001256:	6013      	str	r3, [r2, #0]
    if (tskid_2 >= 0) {
 8001258:	4b20      	ldr	r3, [pc, #128]	@ (80012dc <usermain+0x12c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	db06      	blt.n	800126e <usermain+0xbe>
        tk_sta_tsk(tskid_2, 0);
 8001260:	4b1e      	ldr	r3, [pc, #120]	@ (80012dc <usermain+0x12c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f009 fca8 	bl	800abbc <tk_sta_tsk>
 800126c:	e002      	b.n	8001274 <usermain+0xc4>
    } else {
        tm_printf((const UB*)"Failed to create task_2\n");
 800126e:	481c      	ldr	r0, [pc, #112]	@ (80012e0 <usermain+0x130>)
 8001270:	f00d f97c 	bl	800e56c <tm_printf>
    }

    // オドメトリタスクの作成と起動
    tskid_motor = tk_cre_tsk(&ctsk_motor);
 8001274:	481b      	ldr	r0, [pc, #108]	@ (80012e4 <usermain+0x134>)
 8001276:	f009 fb61 	bl	800a93c <tk_cre_tsk>
 800127a:	4603      	mov	r3, r0
 800127c:	4a1a      	ldr	r2, [pc, #104]	@ (80012e8 <usermain+0x138>)
 800127e:	6013      	str	r3, [r2, #0]
    if (tskid_motor >= 0) {
 8001280:	4b19      	ldr	r3, [pc, #100]	@ (80012e8 <usermain+0x138>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	db06      	blt.n	8001296 <usermain+0xe6>
        tk_sta_tsk(tskid_motor, 0);
 8001288:	4b17      	ldr	r3, [pc, #92]	@ (80012e8 <usermain+0x138>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f009 fc94 	bl	800abbc <tk_sta_tsk>
 8001294:	e002      	b.n	800129c <usermain+0xec>
    } else {
        tm_printf((const UB*)"Failed to create motor task\n");
 8001296:	4815      	ldr	r0, [pc, #84]	@ (80012ec <usermain+0x13c>)
 8001298:	f00d f968 	bl	800e56c <tm_printf>
    }

    tk_slp_tsk(TMO_FEVR);  // メインタスクは永久にスリープ
 800129c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012a0:	f00a fa00 	bl	800b6a4 <tk_slp_tsk>
    return 0;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	0800e864 	.word	0x0800e864
 80012b0:	3dcccccd 	.word	0x3dcccccd
 80012b4:	3a83126f 	.word	0x3a83126f
 80012b8:	2400280c 	.word	0x2400280c
 80012bc:	24002820 	.word	0x24002820
 80012c0:	24002834 	.word	0x24002834
 80012c4:	24002848 	.word	0x24002848
 80012c8:	2400285c 	.word	0x2400285c
 80012cc:	24000338 	.word	0x24000338
 80012d0:	24002870 	.word	0x24002870
 80012d4:	0800e87c 	.word	0x0800e87c
 80012d8:	24000350 	.word	0x24000350
 80012dc:	24002874 	.word	0x24002874
 80012e0:	0800e898 	.word	0x0800e898
 80012e4:	24000368 	.word	0x24000368
 80012e8:	24002878 	.word	0x24002878
 80012ec:	0800e8b4 	.word	0x0800e8b4

080012f0 <read_atr>:

/*----------------------------------------------------------------------*/
/* Attribute data control
 */
LOCAL ER read_atr(T_ADC_DCB *p_dcb, T_DEVREQ *req)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
	ER	err	= E_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]

	switch(req->start) {
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001306:	d115      	bne.n	8001334 <read_atr+0x44>
	case TDN_EVENT:			/* MBF ID for event notification */
		if(req->size >= sizeof(ID)) {
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	2b03      	cmp	r3, #3
 800130e:	d905      	bls.n	800131c <read_atr+0x2c>
			*(ID*)req->buf = p_dcb->evtmbfid;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	687a      	ldr	r2, [r7, #4]
 8001316:	6892      	ldr	r2, [r2, #8]
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	e007      	b.n	800132c <read_atr+0x3c>
		} else if(req->size != 0) {
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	695b      	ldr	r3, [r3, #20]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <read_atr+0x3c>
			err = E_PAR;
 8001324:	f06f 0310 	mvn.w	r3, #16
 8001328:	60fb      	str	r3, [r7, #12]
			break;
 800132a:	e007      	b.n	800133c <read_atr+0x4c>
		}
		req->asize = sizeof(ID);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	2204      	movs	r2, #4
 8001330:	61da      	str	r2, [r3, #28]
		break;
 8001332:	e003      	b.n	800133c <read_atr+0x4c>
	default:
		err = E_PAR;
 8001334:	f06f 0310 	mvn.w	r3, #16
 8001338:	60fb      	str	r3, [r7, #12]
		break;
 800133a:	bf00      	nop
	}

	return err;
 800133c:	68fb      	ldr	r3, [r7, #12]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr

08001348 <write_atr>:


LOCAL ER write_atr(T_ADC_DCB *p_dcb, T_DEVREQ *req)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
	ER	err	= E_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]

	switch(req->start) {
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800135e:	d115      	bne.n	800138c <write_atr+0x44>
	case TDN_EVENT:			/* MBF ID for event notification */
		if(req->size >= sizeof(ID)) {
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	695b      	ldr	r3, [r3, #20]
 8001364:	2b03      	cmp	r3, #3
 8001366:	d905      	bls.n	8001374 <write_atr+0x2c>
			p_dcb->evtmbfid = *(ID*)req->buf;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	e007      	b.n	8001384 <write_atr+0x3c>
		} else if(req->size != 0) {
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	695b      	ldr	r3, [r3, #20]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d003      	beq.n	8001384 <write_atr+0x3c>
			err = E_PAR;
 800137c:	f06f 0310 	mvn.w	r3, #16
 8001380:	60fb      	str	r3, [r7, #12]
			break;
 8001382:	e007      	b.n	8001394 <write_atr+0x4c>
		}
		req->asize = sizeof(ID);
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	2204      	movs	r2, #4
 8001388:	61da      	str	r2, [r3, #28]
		break;
 800138a:	e003      	b.n	8001394 <write_atr+0x4c>
	default:
		err = E_PAR;
 800138c:	f06f 0310 	mvn.w	r3, #16
 8001390:	60fb      	str	r3, [r7, #12]
		break;
 8001392:	bf00      	nop
	}

	return err;
 8001394:	68fb      	ldr	r3, [r7, #12]
}
 8001396:	4618      	mov	r0, r3
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <read_data>:

/*----------------------------------------------------------------------*/
/* Device-specific data control
 */
LOCAL ER read_data(T_ADC_DCB *p_dcb, T_DEVREQ *req)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af02      	add	r7, sp, #8
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
	W	rtn;
	ER	err = E_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]

	if(req->size) {
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d021      	beq.n	80013fa <read_data+0x5a>
		rtn = dev_adc_llctl( p_dcb->unit, LLD_ADC_READ, req->start, req->size, req->buf);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6818      	ldr	r0, [r3, #0]
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	461a      	mov	r2, r3
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	4619      	mov	r1, r3
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	699b      	ldr	r3, [r3, #24]
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	460b      	mov	r3, r1
 80013ce:	2102      	movs	r1, #2
 80013d0:	f000 fb0c 	bl	80019ec <dev_adc_llctl>
 80013d4:	60b8      	str	r0, [r7, #8]
		if(rtn > 0) {
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	dd0b      	ble.n	80013f4 <read_data+0x54>
			req->asize = rtn;
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	61da      	str	r2, [r3, #28]
			if(req->size != rtn) err = E_IO;
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d014      	beq.n	8001416 <read_data+0x76>
 80013ec:	f06f 0338 	mvn.w	r3, #56	@ 0x38
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	e010      	b.n	8001416 <read_data+0x76>
		} else {
			err = (ER)rtn;
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	e00d      	b.n	8001416 <read_data+0x76>
		}
	} else {
		req->asize = dev_adc_llctl( p_dcb->unit, LLD_ADC_RSIZE, req->start, 0, 0);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6818      	ldr	r0, [r3, #0]
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	461a      	mov	r2, r3
 8001404:	2300      	movs	r3, #0
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	2300      	movs	r3, #0
 800140a:	2103      	movs	r1, #3
 800140c:	f000 faee 	bl	80019ec <dev_adc_llctl>
 8001410:	4602      	mov	r2, r0
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	61da      	str	r2, [r3, #28]
	}

	return err;
 8001416:	68fb      	ldr	r3, [r7, #12]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <dev_adc_openfn>:
 */
/*----------------------------------------------------------------------
 * Open device
 */
ER dev_adc_openfn( ID devid, UINT omode, T_MSDI *msdi)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af02      	add	r7, sp, #8
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
	T_ADC_DCB	*p_dcb;
	ER		err;

	p_dcb = (T_ADC_DCB*)(msdi->dmsdi.exinf);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	617b      	str	r3, [r7, #20]

	/* Device Open operation */
	p_dcb->omode = omode;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	68ba      	ldr	r2, [r7, #8]
 8001436:	605a      	str	r2, [r3, #4]
	err = (ER)dev_adc_llctl( p_dcb->unit, LLD_ADC_OPEN, 0, 0, 0);
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	6818      	ldr	r0, [r3, #0]
 800143c:	2300      	movs	r3, #0
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	2300      	movs	r3, #0
 8001442:	2200      	movs	r2, #0
 8001444:	2100      	movs	r1, #0
 8001446:	f000 fad1 	bl	80019ec <dev_adc_llctl>
 800144a:	6138      	str	r0, [r7, #16]

	return err;
 800144c:	693b      	ldr	r3, [r7, #16]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <dev_adc_closefn>:

/*----------------------------------------------------------------------
 * Close Device
 */
ER dev_adc_closefn( ID devid, UINT option, T_MSDI *msdi)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b088      	sub	sp, #32
 800145a:	af02      	add	r7, sp, #8
 800145c:	60f8      	str	r0, [r7, #12]
 800145e:	60b9      	str	r1, [r7, #8]
 8001460:	607a      	str	r2, [r7, #4]
	T_ADC_DCB	*p_dcb;
	ER		err;

	p_dcb = (T_ADC_DCB*)(msdi->dmsdi.exinf);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	617b      	str	r3, [r7, #20]

	/* Device Close operation */
	err =(ER)dev_adc_llctl( p_dcb->unit, LLD_ADC_CLOSE, 0, 0, 0);
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	6818      	ldr	r0, [r3, #0]
 800146c:	2300      	movs	r3, #0
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	2300      	movs	r3, #0
 8001472:	2200      	movs	r2, #0
 8001474:	2101      	movs	r1, #1
 8001476:	f000 fab9 	bl	80019ec <dev_adc_llctl>
 800147a:	6138      	str	r0, [r7, #16]
	
	return err;
 800147c:	693b      	ldr	r3, [r7, #16]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <dev_adc_readfn>:

/*----------------------------------------------------------------------
 * Read Device
 */
ER dev_adc_readfn( T_DEVREQ *req, T_MSDI *p_msdi)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b084      	sub	sp, #16
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
 800148e:	6039      	str	r1, [r7, #0]
	T_ADC_DCB	*p_dcb;
	ER		err;

	p_dcb = (T_ADC_DCB*)(p_msdi->dmsdi.exinf);
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	60bb      	str	r3, [r7, #8]

	if(req->start >= 0) {	// Device specific data
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	2b00      	cmp	r3, #0
 800149c:	db0f      	blt.n	80014be <dev_adc_readfn+0x38>
		if( p_dcb->omode & TD_READ ) {
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d005      	beq.n	80014b6 <dev_adc_readfn+0x30>
			err = read_data( p_dcb, req);
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	68b8      	ldr	r0, [r7, #8]
 80014ae:	f7ff ff77 	bl	80013a0 <read_data>
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	e008      	b.n	80014c8 <dev_adc_readfn+0x42>
		} else {
			err = E_OACV;
 80014b6:	f06f 031a 	mvn.w	r3, #26
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	e004      	b.n	80014c8 <dev_adc_readfn+0x42>
		}
	} else {		// Device attribute data
		err = read_atr( p_dcb, req);
 80014be:	6879      	ldr	r1, [r7, #4]
 80014c0:	68b8      	ldr	r0, [r7, #8]
 80014c2:	f7ff ff15 	bl	80012f0 <read_atr>
 80014c6:	60f8      	str	r0, [r7, #12]
	}

	return err;
 80014c8:	68fb      	ldr	r3, [r7, #12]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <dev_adc_writefn>:

/*----------------------------------------------------------------------
 * Write Device
 */
ER dev_adc_writefn( T_DEVREQ *req, T_MSDI *p_msdi)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b084      	sub	sp, #16
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	6039      	str	r1, [r7, #0]
	T_ADC_DCB	*p_dcb;
	ER		err;

	p_dcb = (T_ADC_DCB*)(p_msdi->dmsdi.exinf);
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	60bb      	str	r3, [r7, #8]

	if(req->start >= 0) {	// Device specific data
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	db03      	blt.n	80014f2 <dev_adc_writefn+0x20>
		err = E_PAR;
 80014ea:	f06f 0310 	mvn.w	r3, #16
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	e004      	b.n	80014fc <dev_adc_writefn+0x2a>
	} else {		// Device attribute data
		err = write_atr( p_dcb, req);
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	68b8      	ldr	r0, [r7, #8]
 80014f6:	f7ff ff27 	bl	8001348 <write_atr>
 80014fa:	60f8      	str	r0, [r7, #12]
	}

	return err;
 80014fc:	68fb      	ldr	r3, [r7, #12]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <dev_adc_eventfn>:

/*----------------------------------------------------------------------
 * Event Device
 */
ER dev_adc_eventfn( INT evttyp, void *evtinf, T_MSDI *msdi)
{
 8001506:	b480      	push	{r7}
 8001508:	b085      	sub	sp, #20
 800150a:	af00      	add	r7, sp, #0
 800150c:	60f8      	str	r0, [r7, #12]
 800150e:	60b9      	str	r1, [r7, #8]
 8001510:	607a      	str	r2, [r7, #4]
	return E_NOSPT;
 8001512:	f06f 0308 	mvn.w	r3, #8
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr

08001520 <dev_init_adc>:

/*----------------------------------------------------------------------
 * Device driver initialization and registration
 */
EXPORT ER dev_init_adc( UW unit )
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b094      	sub	sp, #80	@ 0x50
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	T_MSDI		*p_msdi;
	T_DMSDI		dmsdi;
	ER		err;
	INT		i;

	if( unit >= DEV_ADC_UNITNM) return E_PAR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b02      	cmp	r3, #2
 800152c:	d902      	bls.n	8001534 <dev_init_adc+0x14>
 800152e:	f06f 0310 	mvn.w	r3, #16
 8001532:	e069      	b.n	8001608 <dev_init_adc+0xe8>

#if TK_SUPPORT_MEMLIB
	p_dcb = (T_ADC_DCB*)Kmalloc(sizeof(T_ADC_DCB));
 8001534:	200c      	movs	r0, #12
 8001536:	f00c f89f 	bl	800d678 <Kmalloc>
 800153a:	64b8      	str	r0, [r7, #72]	@ 0x48
	if( p_dcb == NULL) return E_NOMEM;
 800153c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800153e:	2b00      	cmp	r3, #0
 8001540:	d102      	bne.n	8001548 <dev_init_adc+0x28>
 8001542:	f06f 0320 	mvn.w	r3, #32
 8001546:	e05f      	b.n	8001608 <dev_init_adc+0xe8>
	dev_adc_cb[unit]	= p_dcb;
 8001548:	4931      	ldr	r1, [pc, #196]	@ (8001610 <dev_init_adc+0xf0>)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800154e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#else
	p_dcb = &dev_adc_cb[unit];
#endif	/* TK_SUPPORT_MEMLIB */

	/* Device registration information */
	dmsdi.exinf	= p_dcb;
 8001552:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001554:	60bb      	str	r3, [r7, #8]
	dmsdi.drvatr	= 0;			/* Driver attributes */
 8001556:	2300      	movs	r3, #0
 8001558:	61bb      	str	r3, [r7, #24]
	dmsdi.devatr	= TDK_UNDEF;		/* Device attributes */
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
	dmsdi.nsub	= 0;			/* Number of subunits */
 800155e:	2300      	movs	r3, #0
 8001560:	623b      	str	r3, [r7, #32]
	dmsdi.blksz	= 1;			/* Unique data block size (-1 = unknown) */
 8001562:	2301      	movs	r3, #1
 8001564:	627b      	str	r3, [r7, #36]	@ 0x24
	dmsdi.openfn	= dev_adc_openfn;
 8001566:	4b2b      	ldr	r3, [pc, #172]	@ (8001614 <dev_init_adc+0xf4>)
 8001568:	62bb      	str	r3, [r7, #40]	@ 0x28
	dmsdi.closefn	= dev_adc_closefn;
 800156a:	4b2b      	ldr	r3, [pc, #172]	@ (8001618 <dev_init_adc+0xf8>)
 800156c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	dmsdi.readfn	= dev_adc_readfn;
 800156e:	4b2b      	ldr	r3, [pc, #172]	@ (800161c <dev_init_adc+0xfc>)
 8001570:	633b      	str	r3, [r7, #48]	@ 0x30
	dmsdi.writefn	= dev_adc_writefn;
 8001572:	4b2b      	ldr	r3, [pc, #172]	@ (8001620 <dev_init_adc+0x100>)
 8001574:	637b      	str	r3, [r7, #52]	@ 0x34
	dmsdi.eventfn	= dev_adc_eventfn;
 8001576:	4b2b      	ldr	r3, [pc, #172]	@ (8001624 <dev_init_adc+0x104>)
 8001578:	63bb      	str	r3, [r7, #56]	@ 0x38
	
	knl_strcpy( (char*)dmsdi.devnm, DEVCNF_ADC_DEVNAME);
 800157a:	f107 0308 	add.w	r3, r7, #8
 800157e:	3304      	adds	r3, #4
 8001580:	4929      	ldr	r1, [pc, #164]	@ (8001628 <dev_init_adc+0x108>)
 8001582:	4618      	mov	r0, r3
 8001584:	f00b fe23 	bl	800d1ce <knl_strcpy>
	i = knl_strlen(DEVCNF_ADC_DEVNAME);
 8001588:	4827      	ldr	r0, [pc, #156]	@ (8001628 <dev_init_adc+0x108>)
 800158a:	f00b fe0f 	bl	800d1ac <knl_strlen>
 800158e:	6478      	str	r0, [r7, #68]	@ 0x44
	dmsdi.devnm[i] = (UB)('a' + unit);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	3361      	adds	r3, #97	@ 0x61
 8001596:	b2d9      	uxtb	r1, r3
 8001598:	f107 020c 	add.w	r2, r7, #12
 800159c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800159e:	4413      	add	r3, r2
 80015a0:	460a      	mov	r2, r1
 80015a2:	701a      	strb	r2, [r3, #0]
	dmsdi.devnm[i+1] = 0;
 80015a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015a6:	3301      	adds	r3, #1
 80015a8:	3350      	adds	r3, #80	@ 0x50
 80015aa:	443b      	add	r3, r7
 80015ac:	2200      	movs	r2, #0
 80015ae:	f803 2c44 	strb.w	r2, [r3, #-68]

	err = msdi_def_dev( &dmsdi, &idev, &p_msdi);
 80015b2:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80015b6:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80015ba:	f107 0308 	add.w	r3, r7, #8
 80015be:	4618      	mov	r0, r3
 80015c0:	f000 fbc6 	bl	8001d50 <msdi_def_dev>
 80015c4:	64f8      	str	r0, [r7, #76]	@ 0x4c
	if(err != E_OK) goto err_2;
 80015c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d118      	bne.n	80015fe <dev_init_adc+0xde>

	p_dcb->unit	= unit;
 80015cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	601a      	str	r2, [r3, #0]
	p_dcb->evtmbfid = idev.evtmbfid;
 80015d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80015d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80015d6:	609a      	str	r2, [r3, #8]

	/* Low-level device initialization */
	err = (ER)dev_adc_llinit( get_dcb_ptr(unit));
 80015d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001610 <dev_init_adc+0xf0>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 fa3d 	bl	8001a60 <dev_adc_llinit>
 80015e6:	64f8      	str	r0, [r7, #76]	@ 0x4c
	if(err != E_OK) goto err_1;
 80015e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <dev_init_adc+0xd2>

	return E_OK;
 80015ee:	2300      	movs	r3, #0
 80015f0:	e00a      	b.n	8001608 <dev_init_adc+0xe8>
	if(err != E_OK) goto err_1;
 80015f2:	bf00      	nop

err_1:
	msdi_del_dev(p_msdi);
 80015f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 fc22 	bl	8001e40 <msdi_del_dev>
 80015fc:	e000      	b.n	8001600 <dev_init_adc+0xe0>
	if(err != E_OK) goto err_2;
 80015fe:	bf00      	nop
err_2:
	Kfree(p_dcb);
 8001600:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001602:	f00c f861 	bl	800d6c8 <Kfree>
	return err;
 8001606:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8001608:	4618      	mov	r0, r3
 800160a:	3750      	adds	r7, #80	@ 0x50
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	240028bc 	.word	0x240028bc
 8001614:	08001421 	.word	0x08001421
 8001618:	08001457 	.word	0x08001457
 800161c:	08001487 	.word	0x08001487
 8001620:	080014d3 	.word	0x080014d3
 8001624:	08001507 	.word	0x08001507
 8001628:	0800e8d4 	.word	0x0800e8d4

0800162c <out_w>:
/*
 * I/O port access
 *	for memory mapped I/O
 */
Inline void out_w( UW port, UW data )
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
	*(_UW*)port = data;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	601a      	str	r2, [r3, #0]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	bc80      	pop	{r7}
 8001644:	4770      	bx	lr

08001646 <in_w>:
{
	*(_UB*)port = data;
}

Inline UW in_w( UW port )
{
 8001646:	b480      	push	{r7}
 8001648:	b083      	sub	sp, #12
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
	return *(_UW*)port;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
}
 8001652:	4618      	mov	r0, r3
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr

0800165c <adc_inthdr>:

/*----------------------------------------------------------------------
 * Interrupt handler
 */
void adc_inthdr( UINT intno)
{
 800165c:	b5b0      	push	{r4, r5, r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	UW	isr;
	UW	unit;

	if(intno == INTNO_INTADC3) {
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b7f      	cmp	r3, #127	@ 0x7f
 8001668:	d102      	bne.n	8001670 <adc_inthdr+0x14>
		unit = DEV_ADC_3;
 800166a:	2302      	movs	r3, #2
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	e017      	b.n	80016a0 <adc_inthdr+0x44>
	} else if( in_w(ADC_ISR(DEV_ADC_1))) {
 8001670:	4b36      	ldr	r3, [pc, #216]	@ (800174c <adc_inthdr+0xf0>)
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff ffe7 	bl	8001646 <in_w>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d002      	beq.n	8001684 <adc_inthdr+0x28>
		unit = DEV_ADC_1;
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	e00d      	b.n	80016a0 <adc_inthdr+0x44>
	} else if( in_w(ADC_ISR(DEV_ADC_2))) {
 8001684:	4b32      	ldr	r3, [pc, #200]	@ (8001750 <adc_inthdr+0xf4>)
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ffdd 	bl	8001646 <in_w>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d002      	beq.n	8001698 <adc_inthdr+0x3c>
		unit = DEV_ADC_2;
 8001692:	2301      	movs	r3, #1
 8001694:	60bb      	str	r3, [r7, #8]
 8001696:	e003      	b.n	80016a0 <adc_inthdr+0x44>
	} else {
		ClearInt(intno);
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f00c faf2 	bl	800dc82 <ClearInt>
		return;
 800169e:	e052      	b.n	8001746 <adc_inthdr+0xea>
	}

	isr = in_w(ADC_ISR(unit));
 80016a0:	4a2c      	ldr	r2, [pc, #176]	@ (8001754 <adc_inthdr+0xf8>)
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ffcc 	bl	8001646 <in_w>
 80016ae:	60f8      	str	r0, [r7, #12]
	if(isr & (ADC_ISR_ADRDY | ADC_ISR_EOS)) {
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f003 0309 	and.w	r3, r3, #9
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d014      	beq.n	80016e4 <adc_inthdr+0x88>
		if(ll_devcb[unit].wait_tskid) {
 80016ba:	4927      	ldr	r1, [pc, #156]	@ (8001758 <adc_inthdr+0xfc>)
 80016bc:	68ba      	ldr	r2, [r7, #8]
 80016be:	4613      	mov	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	00db      	lsls	r3, r3, #3
 80016c6:	440b      	add	r3, r1
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00a      	beq.n	80016e4 <adc_inthdr+0x88>
			tk_wup_tsk(ll_devcb[unit].wait_tskid);
 80016ce:	4922      	ldr	r1, [pc, #136]	@ (8001758 <adc_inthdr+0xfc>)
 80016d0:	68ba      	ldr	r2, [r7, #8]
 80016d2:	4613      	mov	r3, r2
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	4413      	add	r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	440b      	add	r3, r1
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f00a f84c 	bl	800b77c <tk_wup_tsk>
		}
	}
	if(isr & ADC_ISR_EOC) {
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d020      	beq.n	8001730 <adc_inthdr+0xd4>
		*(ll_devcb[unit].buf++) = in_w(ADC_DR(unit));
 80016ee:	4a19      	ldr	r2, [pc, #100]	@ (8001754 <adc_inthdr+0xf8>)
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f6:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80016fa:	4917      	ldr	r1, [pc, #92]	@ (8001758 <adc_inthdr+0xfc>)
 80016fc:	68ba      	ldr	r2, [r7, #8]
 80016fe:	4613      	mov	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	4413      	add	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	440b      	add	r3, r1
 8001708:	3314      	adds	r3, #20
 800170a:	681c      	ldr	r4, [r3, #0]
 800170c:	1d21      	adds	r1, r4, #4
 800170e:	4d12      	ldr	r5, [pc, #72]	@ (8001758 <adc_inthdr+0xfc>)
 8001710:	68ba      	ldr	r2, [r7, #8]
 8001712:	4613      	mov	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	00db      	lsls	r3, r3, #3
 800171a:	442b      	add	r3, r5
 800171c:	3314      	adds	r3, #20
 800171e:	6019      	str	r1, [r3, #0]
 8001720:	f7ff ff91 	bl	8001646 <in_w>
 8001724:	4603      	mov	r3, r0
 8001726:	6023      	str	r3, [r4, #0]
		isr &= ~ADC_ISR_EOC;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f023 0304 	bic.w	r3, r3, #4
 800172e:	60fb      	str	r3, [r7, #12]
	}

	out_w(ADC_ISR(unit), isr);	// Clear all interrupt flag.
 8001730:	4a08      	ldr	r2, [pc, #32]	@ (8001754 <adc_inthdr+0xf8>)
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001738:	68f9      	ldr	r1, [r7, #12]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff ff76 	bl	800162c <out_w>
	ClearInt(intno);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f00c fa9e 	bl	800dc82 <ClearInt>
}
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bdb0      	pop	{r4, r5, r7, pc}
 800174c:	40022000 	.word	0x40022000
 8001750:	40022100 	.word	0x40022100
 8001754:	0800ec28 	.word	0x0800ec28
 8001758:	24000380 	.word	0x24000380

0800175c <adc_convert>:

/*----------------------------------------------------------------------
 * A/D convert
 */
LOCAL UW adc_convert( UINT unit, INT ch, INT size, UW *buf )
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	@ 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
 8001768:	603b      	str	r3, [r7, #0]
	_UW	*sqr;
	UINT	sqsz, sqch, sqpos;
	UW	pcsel;
	ER	err;

	if((ch >= ADC_CH_NUM) || (size > ADC_MAX_SQ) || ((ch+size) > ADC_CH_NUM)) return (UW)E_PAR;
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	2b13      	cmp	r3, #19
 800176e:	dc07      	bgt.n	8001780 <adc_convert+0x24>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b10      	cmp	r3, #16
 8001774:	dc04      	bgt.n	8001780 <adc_convert+0x24>
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4413      	add	r3, r2
 800177c:	2b14      	cmp	r3, #20
 800177e:	dd02      	ble.n	8001786 <adc_convert+0x2a>
 8001780:	f06f 0310 	mvn.w	r3, #16
 8001784:	e081      	b.n	800188a <adc_convert+0x12e>

	out_w(ADC_SQR1(unit), size-1);		// Set channel sequence length.
 8001786:	4a43      	ldr	r2, [pc, #268]	@ (8001894 <adc_convert+0x138>)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3b01      	subs	r3, #1
 8001796:	4619      	mov	r1, r3
 8001798:	4610      	mov	r0, r2
 800179a:	f7ff ff47 	bl	800162c <out_w>
	
	/* Set channel sequence */
	sqr = (UW*)ADC_SQR1(unit);
 800179e:	4a3d      	ldr	r2, [pc, #244]	@ (8001894 <adc_convert+0x138>)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017a6:	3330      	adds	r3, #48	@ 0x30
 80017a8:	627b      	str	r3, [r7, #36]	@ 0x24
	sqsz = size; sqch = ch; sqpos = 6; pcsel = 0;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	623b      	str	r3, [r7, #32]
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	61fb      	str	r3, [r7, #28]
 80017b2:	2306      	movs	r3, #6
 80017b4:	61bb      	str	r3, [r7, #24]
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
	while(sqsz--) {
 80017ba:	e020      	b.n	80017fe <adc_convert+0xa2>
		pcsel |= 1<<sqch;
 80017bc:	2201      	movs	r2, #1
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	461a      	mov	r2, r3
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	617b      	str	r3, [r7, #20]
		*sqr |= (sqch++)<<sqpos;
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	61fa      	str	r2, [r7, #28]
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	fa03 f202 	lsl.w	r2, r3, r2
 80017d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	431a      	orrs	r2, r3
 80017de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e0:	601a      	str	r2, [r3, #0]
		if((sqpos += 6) >= 32) {
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	3306      	adds	r3, #6
 80017e6:	61bb      	str	r3, [r7, #24]
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	2b1f      	cmp	r3, #31
 80017ec:	d907      	bls.n	80017fe <adc_convert+0xa2>
			sqpos = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61bb      	str	r3, [r7, #24]
			*(++sqr) = 0; 
 80017f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017f4:	3304      	adds	r3, #4
 80017f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80017f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
	while(sqsz--) {
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	1e5a      	subs	r2, r3, #1
 8001802:	623a      	str	r2, [r7, #32]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1d9      	bne.n	80017bc <adc_convert+0x60>
		}
	}
	if(unit != DEV_ADC_3) {
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	2b02      	cmp	r3, #2
 800180c:	d008      	beq.n	8001820 <adc_convert+0xc4>
		out_w(ADC_PCSEL(unit), pcsel);		// Set channel preselection
 800180e:	4a21      	ldr	r2, [pc, #132]	@ (8001894 <adc_convert+0x138>)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001816:	331c      	adds	r3, #28
 8001818:	6979      	ldr	r1, [r7, #20]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff ff06 	bl	800162c <out_w>
	}

	ll_devcb[unit].wait_tskid = tk_get_tid();
 8001820:	f009 fc3a 	bl	800b098 <tk_get_tid>
 8001824:	4601      	mov	r1, r0
 8001826:	481c      	ldr	r0, [pc, #112]	@ (8001898 <adc_convert+0x13c>)
 8001828:	68fa      	ldr	r2, [r7, #12]
 800182a:	4613      	mov	r3, r2
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	4413      	add	r3, r2
 8001830:	00db      	lsls	r3, r3, #3
 8001832:	4403      	add	r3, r0
 8001834:	6019      	str	r1, [r3, #0]
	ll_devcb[unit].buf = buf;
 8001836:	4918      	ldr	r1, [pc, #96]	@ (8001898 <adc_convert+0x13c>)
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	4613      	mov	r3, r2
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	4413      	add	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	440b      	add	r3, r1
 8001844:	3314      	adds	r3, #20
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	601a      	str	r2, [r3, #0]

	tk_can_wup(TSK_SELF);
 800184a:	2000      	movs	r0, #0
 800184c:	f00a f824 	bl	800b898 <tk_can_wup>
	out_w(ADC_CR(unit), ADC_CR_ADSTART | ADC_CR_ADVREGEN);	// Start Covert
 8001850:	4a10      	ldr	r2, [pc, #64]	@ (8001894 <adc_convert+0x138>)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001858:	3308      	adds	r3, #8
 800185a:	4910      	ldr	r1, [pc, #64]	@ (800189c <adc_convert+0x140>)
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fee5 	bl	800162c <out_w>
	err = tk_slp_tsk(DEVCNF_ADC_TMOSCAN);
 8001862:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001866:	f009 ff1d 	bl	800b6a4 <tk_slp_tsk>
 800186a:	6138      	str	r0, [r7, #16]
	ll_devcb[unit].wait_tskid = 0;
 800186c:	490a      	ldr	r1, [pc, #40]	@ (8001898 <adc_convert+0x13c>)
 800186e:	68fa      	ldr	r2, [r7, #12]
 8001870:	4613      	mov	r3, r2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4413      	add	r3, r2
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	440b      	add	r3, r1
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]

	return (err < E_OK)? err:size;
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	2b00      	cmp	r3, #0
 8001882:	da01      	bge.n	8001888 <adc_convert+0x12c>
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	e000      	b.n	800188a <adc_convert+0x12e>
 8001888:	687b      	ldr	r3, [r7, #4]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3728      	adds	r7, #40	@ 0x28
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	0800ec28 	.word	0x0800ec28
 8001898:	24000380 	.word	0x24000380
 800189c:	10000004 	.word	0x10000004

080018a0 <adc_open>:

/*----------------------------------------------------------------------
 * A/DC open
 */
LOCAL ER adc_open(UW unit)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	ER	err = E_OK;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60fb      	str	r3, [r7, #12]

	/* Set sampling time */
	out_w(ADC_SMPR1(unit), ll_devcb[unit].smpr1);
 80018ac:	4a37      	ldr	r2, [pc, #220]	@ (800198c <adc_open+0xec>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b4:	f103 0014 	add.w	r0, r3, #20
 80018b8:	4935      	ldr	r1, [pc, #212]	@ (8001990 <adc_open+0xf0>)
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	4413      	add	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	440b      	add	r3, r1
 80018c6:	330c      	adds	r3, #12
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4619      	mov	r1, r3
 80018cc:	f7ff feae 	bl	800162c <out_w>
	out_w(ADC_SMPR2(unit), ll_devcb[unit].smpr2);
 80018d0:	4a2e      	ldr	r2, [pc, #184]	@ (800198c <adc_open+0xec>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d8:	f103 0018 	add.w	r0, r3, #24
 80018dc:	492c      	ldr	r1, [pc, #176]	@ (8001990 <adc_open+0xf0>)
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	4613      	mov	r3, r2
 80018e2:	005b      	lsls	r3, r3, #1
 80018e4:	4413      	add	r3, r2
 80018e6:	00db      	lsls	r3, r3, #3
 80018e8:	440b      	add	r3, r1
 80018ea:	3310      	adds	r3, #16
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4619      	mov	r1, r3
 80018f0:	f7ff fe9c 	bl	800162c <out_w>

	/* Initialize interrupt */
	out_w(ADC_ISR(unit), 0x000007FF);			// Clear all interrupt flag.
 80018f4:	4a25      	ldr	r2, [pc, #148]	@ (800198c <adc_open+0xec>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fc:	f240 71ff 	movw	r1, #2047	@ 0x7ff
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff fe93 	bl	800162c <out_w>
	out_w(ADC_IER(unit), ADC_IER_ADRDYIE | ADC_IER_EOCIE);	// Set Interrupt mask.
 8001906:	4a21      	ldr	r2, [pc, #132]	@ (800198c <adc_open+0xec>)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800190e:	3304      	adds	r3, #4
 8001910:	2105      	movs	r1, #5
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fe8a 	bl	800162c <out_w>

	if(unit != DEV_ADC_3) {		// ADC1 or ADC2
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b02      	cmp	r3, #2
 800191c:	d004      	beq.n	8001928 <adc_open+0x88>
		EnableInt(INTNO_INTADC1_2, DEVCNF_ADC1_2_INTPRI);
 800191e:	2105      	movs	r1, #5
 8001920:	2012      	movs	r0, #18
 8001922:	f00c f975 	bl	800dc10 <EnableInt>
 8001926:	e003      	b.n	8001930 <adc_open+0x90>
	} else {			// ADC3
		EnableInt(INTNO_INTADC3, DEVCNF_ADC3_INTPRI);
 8001928:	2105      	movs	r1, #5
 800192a:	207f      	movs	r0, #127	@ 0x7f
 800192c:	f00c f970 	bl	800dc10 <EnableInt>
	}

	/* Enable ADC */
	ll_devcb[unit].wait_tskid = tk_get_tid();
 8001930:	f009 fbb2 	bl	800b098 <tk_get_tid>
 8001934:	4601      	mov	r1, r0
 8001936:	4816      	ldr	r0, [pc, #88]	@ (8001990 <adc_open+0xf0>)
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	4413      	add	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	4403      	add	r3, r0
 8001944:	6019      	str	r1, [r3, #0]
	out_w(ADC_CR(unit), ADC_CR_ADEN | ADC_CR_ADVREGEN);	// Set ADEN
 8001946:	4a11      	ldr	r2, [pc, #68]	@ (800198c <adc_open+0xec>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194e:	3308      	adds	r3, #8
 8001950:	4910      	ldr	r1, [pc, #64]	@ (8001994 <adc_open+0xf4>)
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff fe6a 	bl	800162c <out_w>

	err = tk_slp_tsk(DEVCNF_ADC_TMOSCAN);
 8001958:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800195c:	f009 fea2 	bl	800b6a4 <tk_slp_tsk>
 8001960:	60f8      	str	r0, [r7, #12]
	if(err < E_OK) err = E_TMOUT;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2b00      	cmp	r3, #0
 8001966:	da02      	bge.n	800196e <adc_open+0xce>
 8001968:	f06f 0331 	mvn.w	r3, #49	@ 0x31
 800196c:	60fb      	str	r3, [r7, #12]
	ll_devcb[unit].wait_tskid = 0;
 800196e:	4908      	ldr	r1, [pc, #32]	@ (8001990 <adc_open+0xf0>)
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	4413      	add	r3, r2
 8001978:	00db      	lsls	r3, r3, #3
 800197a:	440b      	add	r3, r1
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]

	return err;
 8001980:	68fb      	ldr	r3, [r7, #12]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	0800ec28 	.word	0x0800ec28
 8001990:	24000380 	.word	0x24000380
 8001994:	10000001 	.word	0x10000001

08001998 <adc_close>:

/*----------------------------------------------------------------------
 * A/DC close
 */
LOCAL void adc_close(UW unit)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	DisableInt((unit != DEV_ADC_3 )? INTNO_INTADC1_2: INTNO_INTADC3);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d001      	beq.n	80019aa <adc_close+0x12>
 80019a6:	2312      	movs	r3, #18
 80019a8:	e000      	b.n	80019ac <adc_close+0x14>
 80019aa:	237f      	movs	r3, #127	@ 0x7f
 80019ac:	4618      	mov	r0, r3
 80019ae:	f00c f94d 	bl	800dc4c <DisableInt>

	/* Disable ADC */
	out_w(ADC_CR(unit), ADC_CR_ADDIS);		// Set ADDIS
 80019b2:	4a0d      	ldr	r2, [pc, #52]	@ (80019e8 <adc_close+0x50>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ba:	3308      	adds	r3, #8
 80019bc:	2102      	movs	r1, #2
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fe34 	bl	800162c <out_w>
	while(in_w(ADC_ISR(unit)) & ADC_ISR_ADRDY);	// Wait until ADEN is clear
 80019c4:	bf00      	nop
 80019c6:	4a08      	ldr	r2, [pc, #32]	@ (80019e8 <adc_close+0x50>)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fe39 	bl	8001646 <in_w>
 80019d4:	4603      	mov	r3, r0
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1f3      	bne.n	80019c6 <adc_close+0x2e>
}
 80019de:	bf00      	nop
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	0800ec28 	.word	0x0800ec28

080019ec <dev_adc_llctl>:

/*----------------------------------------------------------------------
 * Low level device control
 */
EXPORT W dev_adc_llctl( UW unit, INT cmd, UW p1, UW p2, UW *pp)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
 80019f8:	603b      	str	r3, [r7, #0]
	W	rtn	= (W)E_OK;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]

	switch(cmd) {
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	2b03      	cmp	r3, #3
 8001a02:	d827      	bhi.n	8001a54 <dev_adc_llctl+0x68>
 8001a04:	a201      	add	r2, pc, #4	@ (adr r2, 8001a0c <dev_adc_llctl+0x20>)
 8001a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a0a:	bf00      	nop
 8001a0c:	08001a1d 	.word	0x08001a1d
 8001a10:	08001a27 	.word	0x08001a27
 8001a14:	08001a2f 	.word	0x08001a2f
 8001a18:	08001a41 	.word	0x08001a41
	case LLD_ADC_OPEN:	/* Open　A/DC */
		rtn = (W)adc_open(unit);
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	f7ff ff3f 	bl	80018a0 <adc_open>
 8001a22:	6178      	str	r0, [r7, #20]
		break;
 8001a24:	e016      	b.n	8001a54 <dev_adc_llctl+0x68>

	case LLD_ADC_CLOSE:	/* Close　A/DC */
		adc_close(unit);
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f7ff ffb6 	bl	8001998 <adc_close>
		break;
 8001a2c:	e012      	b.n	8001a54 <dev_adc_llctl+0x68>
	
	case LLD_ADC_READ:	/* Read A/DC data */
		rtn = adc_convert(unit, p1, p2, pp);
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	6a3b      	ldr	r3, [r7, #32]
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f7ff fe91 	bl	800175c <adc_convert>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	617b      	str	r3, [r7, #20]
		break;
 8001a3e:	e009      	b.n	8001a54 <dev_adc_llctl+0x68>
	
	case LLD_ADC_RSIZE:	/* Get read data size */
		rtn = ADC_CH_NUM - p1;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f1c3 0314 	rsb	r3, r3, #20
 8001a46:	617b      	str	r3, [r7, #20]
		if(rtn < 0 ) rtn = 0;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	da01      	bge.n	8001a52 <dev_adc_llctl+0x66>
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
		break;
 8001a52:	bf00      	nop
	}
	
	return rtn;
 8001a54:	697b      	ldr	r3, [r7, #20]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop

08001a60 <dev_adc_llinit>:

/*----------------------------------------------------------------------
 * Device initialization
 */
EXPORT ER dev_adc_llinit( T_ADC_DCB *p_dcb)
{
 8001a60:	b590      	push	{r4, r7, lr}
 8001a62:	b089      	sub	sp, #36	@ 0x24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	static BOOL init_12	= FALSE;

	const T_DINT	dint = {
 8001a68:	4a53      	ldr	r2, [pc, #332]	@ (8001bb8 <dev_adc_llinit+0x158>)
 8001a6a:	f107 0310 	add.w	r3, r7, #16
 8001a6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a72:	e883 0003 	stmia.w	r3, {r0, r1}
		.inthdr	= adc_inthdr
	};
	UW	unit;
	ER	err;

	unit = p_dcb->unit;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	61fb      	str	r3, [r7, #28]

#if DEVCNF_ADC_INIT_MCLK
	/* Select clock source */
	out_w(RCC_D3CCIPR, (in_w(RCC_D3CCIPR) & ~RCC_D3CCIPR_ADCSEL) | (DEVCNF_ADCSEL));
 8001a7c:	484f      	ldr	r0, [pc, #316]	@ (8001bbc <dev_adc_llinit+0x15c>)
 8001a7e:	f7ff fde2 	bl	8001646 <in_w>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8001a88:	4619      	mov	r1, r3
 8001a8a:	484c      	ldr	r0, [pc, #304]	@ (8001bbc <dev_adc_llinit+0x15c>)
 8001a8c:	f7ff fdce 	bl	800162c <out_w>

	/* Enable module clock */
	if(unit < DEV_ADC_3) {		// ADC1_2
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d806      	bhi.n	8001aa4 <dev_adc_llinit+0x44>
		*(_UW*)RCC_AHB1ENR |= RCC_AHB1ENR_ADC12EN;
 8001a96:	4b4a      	ldr	r3, [pc, #296]	@ (8001bc0 <dev_adc_llinit+0x160>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a49      	ldr	r2, [pc, #292]	@ (8001bc0 <dev_adc_llinit+0x160>)
 8001a9c:	f043 0320 	orr.w	r3, r3, #32
 8001aa0:	6013      	str	r3, [r2, #0]
 8001aa2:	e005      	b.n	8001ab0 <dev_adc_llinit+0x50>
	} else  {			// ADC3
		*(_UW*)RCC_AHB4ENR |= RCC_AHB4ENR_ADC3EN;
 8001aa4:	4b47      	ldr	r3, [pc, #284]	@ (8001bc4 <dev_adc_llinit+0x164>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a46      	ldr	r2, [pc, #280]	@ (8001bc4 <dev_adc_llinit+0x164>)
 8001aaa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001aae:	6013      	str	r3, [r2, #0]
	}

#endif

	/* ADC Power-On */
	out_w(ADC_CR(unit), 0);				// DEEPPWD = 0 
 8001ab0:	4a45      	ldr	r2, [pc, #276]	@ (8001bc8 <dev_adc_llinit+0x168>)
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab8:	3308      	adds	r3, #8
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fdb5 	bl	800162c <out_w>
	out_w(ADC_CR(unit), ADC_CR_ADVREGEN);		// ADVREGEN = 1
 8001ac2:	4a41      	ldr	r2, [pc, #260]	@ (8001bc8 <dev_adc_llinit+0x168>)
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aca:	3308      	adds	r3, #8
 8001acc:	f04f 5180 	mov.w	r1, #268435456	@ 0x10000000
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff fdab 	bl	800162c <out_w>

	_UW	wait_cnt = (TMCLK_KHz / 200UL) + 1UL;
 8001ad6:	f640 23bf 	movw	r3, #2751	@ 0xabf
 8001ada:	60fb      	str	r3, [r7, #12]
	while(wait_cnt-- != 0);
 8001adc:	bf00      	nop
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	1e5a      	subs	r2, r3, #1
 8001ae2:	60fa      	str	r2, [r7, #12]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1fa      	bne.n	8001ade <dev_adc_llinit+0x7e>

	/* Common ADC settings */
	if(unit < DEV_ADC_3) {		// ADC1 or ADC2
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d80e      	bhi.n	8001b0c <dev_adc_llinit+0xac>
		if(!init_12) {
 8001aee:	4b37      	ldr	r3, [pc, #220]	@ (8001bcc <dev_adc_llinit+0x16c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d114      	bne.n	8001b20 <dev_adc_llinit+0xc0>
			out_w(ADC_CCR(unit), 
 8001af6:	4a36      	ldr	r2, [pc, #216]	@ (8001bd0 <dev_adc_llinit+0x170>)
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afe:	3308      	adds	r3, #8
 8001b00:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fd91 	bl	800162c <out_w>
 8001b0a:	e009      	b.n	8001b20 <dev_adc_llinit+0xc0>
				((DEVCNF_ADC12_CKMODE & 0x03)<< 16)	// ADC clock mode
				|((DEVCNF_ADC12_PRESC & 0x0F)<< 18)	// ADC prescaler
			);
		}
	} else {			// ADC3
		out_w(ADC_CCR(unit), 
 8001b0c:	4a30      	ldr	r2, [pc, #192]	@ (8001bd0 <dev_adc_llinit+0x170>)
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b14:	3308      	adds	r3, #8
 8001b16:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff fd86 	bl	800162c <out_w>
			|((DEVCNF_ADC3_PRESC & 0x0F)<< 18)	// ADC prescaler
		);
	}

	/* ADC configuration */
	out_w(ADC_CFGR(unit), ll_devcb[unit].cfgr);
 8001b20:	4a29      	ldr	r2, [pc, #164]	@ (8001bc8 <dev_adc_llinit+0x168>)
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b28:	f103 000c 	add.w	r0, r3, #12
 8001b2c:	4929      	ldr	r1, [pc, #164]	@ (8001bd4 <dev_adc_llinit+0x174>)
 8001b2e:	69fa      	ldr	r2, [r7, #28]
 8001b30:	4613      	mov	r3, r2
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	4413      	add	r3, r2
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	440b      	add	r3, r1
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f7ff fd74 	bl	800162c <out_w>
	out_w(ADC_CFGR2(unit), ll_devcb[unit].cfgr2);
 8001b44:	4a20      	ldr	r2, [pc, #128]	@ (8001bc8 <dev_adc_llinit+0x168>)
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b4c:	f103 0010 	add.w	r0, r3, #16
 8001b50:	4920      	ldr	r1, [pc, #128]	@ (8001bd4 <dev_adc_llinit+0x174>)
 8001b52:	69fa      	ldr	r2, [r7, #28]
 8001b54:	4613      	mov	r3, r2
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	4413      	add	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	440b      	add	r3, r1
 8001b5e:	3308      	adds	r3, #8
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4619      	mov	r1, r3
 8001b64:	f7ff fd62 	bl	800162c <out_w>

	/* Configure boost mode */
	out_w(ADC_CR(unit), (in_w(ADC_CR(unit))&ADC_CR_BOOST) | (ADC_CR_BOOST_VAL<<8));
 8001b68:	4a17      	ldr	r2, [pc, #92]	@ (8001bc8 <dev_adc_llinit+0x168>)
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b70:	f103 0408 	add.w	r4, r3, #8
 8001b74:	4a14      	ldr	r2, [pc, #80]	@ (8001bc8 <dev_adc_llinit+0x168>)
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7c:	3308      	adds	r3, #8
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff fd61 	bl	8001646 <in_w>
 8001b84:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001b88:	4620      	mov	r0, r4
 8001b8a:	f7ff fd4f 	bl	800162c <out_w>

	/* Interrupt handler definition */
	err = tk_def_int((unit != DEV_ADC_3 )? INTNO_INTADC1_2: INTNO_INTADC3, &dint);
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d001      	beq.n	8001b98 <dev_adc_llinit+0x138>
 8001b94:	2312      	movs	r3, #18
 8001b96:	e000      	b.n	8001b9a <dev_adc_llinit+0x13a>
 8001b98:	237f      	movs	r3, #127	@ 0x7f
 8001b9a:	f107 0210 	add.w	r2, r7, #16
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f004 fd33 	bl	800660c <tk_def_int>
 8001ba6:	61b8      	str	r0, [r7, #24]

	init_12 = TRUE;
 8001ba8:	4b08      	ldr	r3, [pc, #32]	@ (8001bcc <dev_adc_llinit+0x16c>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	601a      	str	r2, [r3, #0]
	return err;
 8001bae:	69bb      	ldr	r3, [r7, #24]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3724      	adds	r7, #36	@ 0x24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd90      	pop	{r4, r7, pc}
 8001bb8:	0800e8d8 	.word	0x0800e8d8
 8001bbc:	58024458 	.word	0x58024458
 8001bc0:	580244d8 	.word	0x580244d8
 8001bc4:	580244e0 	.word	0x580244e0
 8001bc8:	0800ec28 	.word	0x0800ec28
 8001bcc:	240028c8 	.word	0x240028c8
 8001bd0:	0800ec34 	.word	0x0800ec34
 8001bd4:	24000380 	.word	0x24000380

08001bd8 <msdi_openfn>:

/*
 * Open function
 */
LOCAL ER msdi_openfn( ID devid, UINT omode, T_MSDI *msdi )
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
	ER	err;

	if ( msdi->dmsdi.openfn == NULL ) return E_OK;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <msdi_openfn+0x18>
 8001bec:	2300      	movs	r3, #0
 8001bee:	e011      	b.n	8001c14 <msdi_openfn+0x3c>

	Lock(&msdi->lock);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3304      	adds	r3, #4
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f00b fb9f 	bl	800d338 <Lock>
	err = (*msdi->dmsdi.openfn)(devid, omode, msdi);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	4798      	blx	r3
 8001c06:	6178      	str	r0, [r7, #20]
	Unlock(&msdi->lock);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f00b fba9 	bl	800d364 <Unlock>

	return err;
 8001c12:	697b      	ldr	r3, [r7, #20]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <msdi_closefn>:

/*
 * Close cunction
 */
LOCAL ER msdi_closefn( ID devid, UINT option, T_MSDI *msdi )
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
	ER	err;

	if ( msdi->dmsdi.closefn == NULL ) return E_OK;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <msdi_closefn+0x18>
 8001c30:	2300      	movs	r3, #0
 8001c32:	e011      	b.n	8001c58 <msdi_closefn+0x3c>

	Lock(&msdi->lock);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	3304      	adds	r3, #4
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f00b fb7d 	bl	800d338 <Lock>
	err = (*msdi->dmsdi.closefn)(devid, option, msdi);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	68b9      	ldr	r1, [r7, #8]
 8001c46:	68f8      	ldr	r0, [r7, #12]
 8001c48:	4798      	blx	r3
 8001c4a:	6178      	str	r0, [r7, #20]
	Unlock(&msdi->lock);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3304      	adds	r3, #4
 8001c50:	4618      	mov	r0, r3
 8001c52:	f00b fb87 	bl	800d364 <Unlock>

	return err;
 8001c56:	697b      	ldr	r3, [r7, #20]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <msdi_execfn>:

/*
 * Processing start function
 */
LOCAL ER msdi_execfn( T_DEVREQ *req, TMO tmout, T_MSDI *msdi )
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
	INT	(*fp)( T_DEVREQ*, T_MSDI* );
	ER	err;

	fp = ( req->cmd == TDC_READ )? msdi->dmsdi.readfn: msdi->dmsdi.writefn;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	7b1b      	ldrb	r3, [r3, #12]
 8001c70:	f003 030f 	and.w	r3, r3, #15
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d102      	bne.n	8001c80 <msdi_execfn+0x20>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c7e:	e001      	b.n	8001c84 <msdi_execfn+0x24>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c84:	617b      	str	r3, [r7, #20]
	if ( fp == NULL ) return E_NOSPT;
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d102      	bne.n	8001c92 <msdi_execfn+0x32>
 8001c8c:	f06f 0308 	mvn.w	r3, #8
 8001c90:	e01d      	b.n	8001cce <msdi_execfn+0x6e>

	if ( req->start >= 0 && msdi->dmsdi.blksz <= 0) return E_NOSPT;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	db06      	blt.n	8001ca8 <msdi_execfn+0x48>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	dc02      	bgt.n	8001ca8 <msdi_execfn+0x48>
 8001ca2:	f06f 0308 	mvn.w	r3, #8
 8001ca6:	e012      	b.n	8001cce <msdi_execfn+0x6e>

	/* I/O processing */
	Lock(&msdi->lock);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3304      	adds	r3, #4
 8001cac:	4618      	mov	r0, r3
 8001cae:	f00b fb43 	bl	800d338 <Lock>
	err = (*fp)(req, msdi);
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	4798      	blx	r3
 8001cba:	6138      	str	r0, [r7, #16]
	Unlock(&msdi->lock);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f00b fb4f 	bl	800d364 <Unlock>

	req->error = err;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	621a      	str	r2, [r3, #32]
	return E_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <msdi_waitfn>:

/*
 * Wait-for-completion function
 */
LOCAL INT msdi_waitfn( T_DEVREQ *req, INT nreq, TMO tmout, T_MSDI *msdi )
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b085      	sub	sp, #20
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	60f8      	str	r0, [r7, #12]
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	603b      	str	r3, [r7, #0]
	return 0;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3714      	adds	r7, #20
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <msdi_abortfn>:

/*
 * Abort processing function
 */
LOCAL ER msdi_abortfn( ID tskid, T_DEVREQ *req, INT nreq, T_MSDI *msdi )
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
 8001cfc:	603b      	str	r3, [r7, #0]
	return E_OK;
 8001cfe:	2300      	movs	r3, #0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr

08001d0a <msdi_eventfn>:

/*
 * Event function
 */
LOCAL INT msdi_eventfn( INT evttyp, void *evtinf, T_MSDI *msdi )
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b086      	sub	sp, #24
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	60f8      	str	r0, [r7, #12]
 8001d12:	60b9      	str	r1, [r7, #8]
 8001d14:	607a      	str	r2, [r7, #4]
	INT	ret;

	if ( msdi->dmsdi.eventfn == NULL ) return E_OK;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <msdi_eventfn+0x18>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e011      	b.n	8001d46 <msdi_eventfn+0x3c>

	Lock(&msdi->lock);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	3304      	adds	r3, #4
 8001d26:	4618      	mov	r0, r3
 8001d28:	f00b fb06 	bl	800d338 <Lock>
	ret = (*msdi->dmsdi.eventfn)(evttyp, evtinf, msdi);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	68b9      	ldr	r1, [r7, #8]
 8001d34:	68f8      	ldr	r0, [r7, #12]
 8001d36:	4798      	blx	r3
 8001d38:	6178      	str	r0, [r7, #20]
	Unlock(&msdi->lock);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f00b fb10 	bl	800d364 <Unlock>

	return ret;
 8001d44:	697b      	ldr	r3, [r7, #20]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3718      	adds	r7, #24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <msdi_def_dev>:

/*
 * SDI Device registration
 */
EXPORT ER msdi_def_dev( T_DMSDI *dmsdi, T_IDEV *idev, T_MSDI **p_msdi )
{
 8001d50:	b5b0      	push	{r4, r5, r7, lr}
 8001d52:	b092      	sub	sp, #72	@ 0x48
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
	T_MSDI	*msdi;
	T_DDEV	ddev;
	ER	err;

	/* Create "SDI"*/
	msdi = Kmalloc(sizeof(T_MSDI));
 8001d5c:	2044      	movs	r0, #68	@ 0x44
 8001d5e:	f00b fc8b 	bl	800d678 <Kmalloc>
 8001d62:	6438      	str	r0, [r7, #64]	@ 0x40
	if ( msdi == NULL ) {
 8001d64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d103      	bne.n	8001d72 <msdi_def_dev+0x22>
		err = E_NOMEM;
 8001d6a:	f06f 0320 	mvn.w	r3, #32
 8001d6e:	647b      	str	r3, [r7, #68]	@ 0x44
		goto err_ret1;
 8001d70:	e054      	b.n	8001e1c <msdi_def_dev+0xcc>
	}

	msdi->dmsdi = *dmsdi;		/* Structure Copy */
 8001d72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	f103 0410 	add.w	r4, r3, #16
 8001d7a:	4615      	mov	r5, r2
 8001d7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d88:	682b      	ldr	r3, [r5, #0]
 8001d8a:	6023      	str	r3, [r4, #0]

	/* Create the lock for exclusive access control */
	err = CreateLock(&msdi->lock, dmsdi->devnm);
 8001d8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d8e:	1d1a      	adds	r2, r3, #4
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	3304      	adds	r3, #4
 8001d94:	4619      	mov	r1, r3
 8001d96:	4610      	mov	r0, r2
 8001d98:	f00b faf8 	bl	800d38c <CreateLock>
 8001d9c:	6478      	str	r0, [r7, #68]	@ 0x44
	if ( err < E_OK ) goto err_ret2;
 8001d9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	db37      	blt.n	8001e14 <msdi_def_dev+0xc4>

	/* Device registration */
	ddev.exinf   = msdi;
 8001da4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001da6:	617b      	str	r3, [r7, #20]
	ddev.drvatr  = dmsdi->drvatr;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	61bb      	str	r3, [r7, #24]
	ddev.devatr  = dmsdi->devatr;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	61fb      	str	r3, [r7, #28]
	ddev.nsub    = dmsdi->nsub;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	623b      	str	r3, [r7, #32]
	ddev.blksz   = dmsdi->blksz;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	627b      	str	r3, [r7, #36]	@ 0x24
	ddev.openfn  = (FP)msdi_openfn;
 8001dc0:	4b19      	ldr	r3, [pc, #100]	@ (8001e28 <msdi_def_dev+0xd8>)
 8001dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
	ddev.closefn = (FP)msdi_closefn;
 8001dc4:	4b19      	ldr	r3, [pc, #100]	@ (8001e2c <msdi_def_dev+0xdc>)
 8001dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	ddev.execfn  = (FP)msdi_execfn;
 8001dc8:	4b19      	ldr	r3, [pc, #100]	@ (8001e30 <msdi_def_dev+0xe0>)
 8001dca:	633b      	str	r3, [r7, #48]	@ 0x30
	ddev.waitfn  = (FP)msdi_waitfn;
 8001dcc:	4b19      	ldr	r3, [pc, #100]	@ (8001e34 <msdi_def_dev+0xe4>)
 8001dce:	637b      	str	r3, [r7, #52]	@ 0x34
	ddev.abortfn = (FP)msdi_abortfn;
 8001dd0:	4b19      	ldr	r3, [pc, #100]	@ (8001e38 <msdi_def_dev+0xe8>)
 8001dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
	ddev.eventfn = (FP)msdi_eventfn;
 8001dd4:	4b19      	ldr	r3, [pc, #100]	@ (8001e3c <msdi_def_dev+0xec>)
 8001dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c

	err = tk_def_dev(msdi->dmsdi.devnm, &ddev, idev);
 8001dd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dda:	3314      	adds	r3, #20
 8001ddc:	f107 0114 	add.w	r1, r7, #20
 8001de0:	68ba      	ldr	r2, [r7, #8]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f002 fc32 	bl	800464c <tk_def_dev>
 8001de8:	6478      	str	r0, [r7, #68]	@ 0x44
	if ( err < E_OK )	goto err_ret3;
 8001dea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	db0a      	blt.n	8001e06 <msdi_def_dev+0xb6>
	
	msdi->devid = (ID)err;
 8001df0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001df2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001df4:	601a      	str	r2, [r3, #0]
	if(p_msdi != NULL) {
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d002      	beq.n	8001e02 <msdi_def_dev+0xb2>
		*p_msdi = msdi;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001e00:	601a      	str	r2, [r3, #0]
	}

	return E_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	e00b      	b.n	8001e1e <msdi_def_dev+0xce>
	if ( err < E_OK )	goto err_ret3;
 8001e06:	bf00      	nop

err_ret3:
	DeleteLock(&msdi->lock);
 8001e08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e0a:	3304      	adds	r3, #4
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f00b fafb 	bl	800d408 <DeleteLock>
 8001e12:	e000      	b.n	8001e16 <msdi_def_dev+0xc6>
	if ( err < E_OK ) goto err_ret2;
 8001e14:	bf00      	nop
err_ret2:
	Kfree(msdi);
 8001e16:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001e18:	f00b fc56 	bl	800d6c8 <Kfree>
err_ret1:
	return err;
 8001e1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3748      	adds	r7, #72	@ 0x48
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bdb0      	pop	{r4, r5, r7, pc}
 8001e26:	bf00      	nop
 8001e28:	08001bd9 	.word	0x08001bd9
 8001e2c:	08001c1d 	.word	0x08001c1d
 8001e30:	08001c61 	.word	0x08001c61
 8001e34:	08001cd7 	.word	0x08001cd7
 8001e38:	08001cf1 	.word	0x08001cf1
 8001e3c:	08001d0b 	.word	0x08001d0b

08001e40 <msdi_del_dev>:

/*
 * Deregistration
 */
EXPORT ER msdi_del_dev( T_MSDI *msdi )
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	ER	err;

	/* Deregister device */
	err = tk_def_dev(msdi->dmsdi.devnm, NULL, NULL);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3314      	adds	r3, #20
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2100      	movs	r1, #0
 8001e50:	4618      	mov	r0, r3
 8001e52:	f002 fbfb 	bl	800464c <tk_def_dev>
 8001e56:	60f8      	str	r0, [r7, #12]
	if ( err > E_OK ) {
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	dd09      	ble.n	8001e72 <msdi_del_dev+0x32>
		DeleteLock(&msdi->lock);	/* Delete the lock for exclusive access control */
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3304      	adds	r3, #4
 8001e62:	4618      	mov	r0, r3
 8001e64:	f00b fad0 	bl	800d408 <DeleteLock>
		Kfree(msdi);			/* Delete "SDI" */
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f00b fc2d 	bl	800d6c8 <Kfree>
		err = E_OK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
	}
	return err;
 8001e72:	68fb      	ldr	r3, [r7, #12]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <read_atr>:

/*---------------------------------------------------------------------*/
/* Attribute data control
 */
LOCAL ER read_atr(T_I2C_DCB *p_dcb, T_DEVREQ *req)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
	ER	err	= E_OK;
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]

	switch(req->start) {
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001e92:	d115      	bne.n	8001ec0 <read_atr+0x44>
	case TDN_EVENT:			/* MBF ID for event notification */
		if(req->size >= sizeof(ID)) {
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	2b03      	cmp	r3, #3
 8001e9a:	d905      	bls.n	8001ea8 <read_atr+0x2c>
			*(ID*)req->buf = p_dcb->evtmbfid;
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6892      	ldr	r2, [r2, #8]
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	e007      	b.n	8001eb8 <read_atr+0x3c>
		} else if(req->size != 0) {
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <read_atr+0x3c>
			err = E_PAR;
 8001eb0:	f06f 0310 	mvn.w	r3, #16
 8001eb4:	60fb      	str	r3, [r7, #12]
			break;
 8001eb6:	e007      	b.n	8001ec8 <read_atr+0x4c>
		}
		req->asize = sizeof(ID);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	2204      	movs	r2, #4
 8001ebc:	61da      	str	r2, [r3, #28]
		break;
 8001ebe:	e003      	b.n	8001ec8 <read_atr+0x4c>
	default:
		err = E_PAR;
 8001ec0:	f06f 0310 	mvn.w	r3, #16
 8001ec4:	60fb      	str	r3, [r7, #12]
		break;
 8001ec6:	bf00      	nop
	}

	return err;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr

08001ed4 <write_atr>:


LOCAL ER write_atr(T_I2C_DCB *p_dcb, T_DEVREQ *req)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af02      	add	r7, sp, #8
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
	T_I2C_EXEC	*p_ex;
	W		rtn;
	ER		err	= E_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]

	switch(req->start) {
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8001eea:	d018      	beq.n	8001f1e <write_atr+0x4a>
 8001eec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001ef0:	d157      	bne.n	8001fa2 <write_atr+0xce>
	case TDN_EVENT:			/* MBF ID for event notification */
		if(req->size >= sizeof(ID)) {
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	d905      	bls.n	8001f06 <write_atr+0x32>
			p_dcb->evtmbfid = *(ID*)(req->buf);
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	609a      	str	r2, [r3, #8]
 8001f04:	e007      	b.n	8001f16 <write_atr+0x42>
		} else if(req->size != 0) {
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <write_atr+0x42>
			err = E_PAR;
 8001f0e:	f06f 0310 	mvn.w	r3, #16
 8001f12:	617b      	str	r3, [r7, #20]
			break;
 8001f14:	e049      	b.n	8001faa <write_atr+0xd6>
		}
		req->asize = sizeof(ID);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	2204      	movs	r2, #4
 8001f1a:	61da      	str	r2, [r3, #28]
		break;
 8001f1c:	e045      	b.n	8001faa <write_atr+0xd6>
	case TDN_I2C_EXEC:
		if(req->size >= sizeof(T_I2C_EXEC)) {
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	2b13      	cmp	r3, #19
 8001f24:	d931      	bls.n	8001f8a <write_atr+0xb6>
			p_ex = (T_I2C_EXEC*)(req->buf);
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	699b      	ldr	r3, [r3, #24]
 8001f2a:	613b      	str	r3, [r7, #16]
			if(p_ex->snd_size <=0 || p_ex->snd_size > DEVCNF_I2C_MAX_SDATSZ) return E_PAR;
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	dd03      	ble.n	8001f3c <write_atr+0x68>
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	2b64      	cmp	r3, #100	@ 0x64
 8001f3a:	dd02      	ble.n	8001f42 <write_atr+0x6e>
 8001f3c:	f06f 0310 	mvn.w	r3, #16
 8001f40:	e034      	b.n	8001fac <write_atr+0xd8>
			if(p_ex->rcv_size <=0 || p_ex->rcv_size > DEVCNF_I2C_MAX_RDATSZ) return E_PAR;
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	dd03      	ble.n	8001f52 <write_atr+0x7e>
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	2b64      	cmp	r3, #100	@ 0x64
 8001f50:	dd02      	ble.n	8001f58 <write_atr+0x84>
 8001f52:	f06f 0310 	mvn.w	r3, #16
 8001f56:	e029      	b.n	8001fac <write_atr+0xd8>

			rtn = dev_i2c_llctl(p_dcb->unit, LLD_I2C_EXEC, req->start, req->size, (UW*)p_ex);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6818      	ldr	r0, [r3, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	461a      	mov	r2, r3
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	4619      	mov	r1, r3
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	2104      	movs	r1, #4
 8001f70:	f000 fc02 	bl	8002778 <dev_i2c_llctl>
 8001f74:	60f8      	str	r0, [r7, #12]
			if(rtn > 0) {
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	dd03      	ble.n	8001f84 <write_atr+0xb0>
				req->asize = sizeof(T_I2C_EXEC);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	2214      	movs	r2, #20
 8001f80:	61da      	str	r2, [r3, #28]
		} else if(req->size == 0){
			req->asize = sizeof(T_I2C_EXEC);
		} else {
			err = E_PAR;
		}
		break;
 8001f82:	e012      	b.n	8001faa <write_atr+0xd6>
				err = (ER)rtn;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	617b      	str	r3, [r7, #20]
		break;
 8001f88:	e00f      	b.n	8001faa <write_atr+0xd6>
		} else if(req->size == 0){
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d103      	bne.n	8001f9a <write_atr+0xc6>
			req->asize = sizeof(T_I2C_EXEC);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	2214      	movs	r2, #20
 8001f96:	61da      	str	r2, [r3, #28]
		break;
 8001f98:	e007      	b.n	8001faa <write_atr+0xd6>
			err = E_PAR;
 8001f9a:	f06f 0310 	mvn.w	r3, #16
 8001f9e:	617b      	str	r3, [r7, #20]
		break;
 8001fa0:	e003      	b.n	8001faa <write_atr+0xd6>

	default:
		err = E_PAR;
 8001fa2:	f06f 0310 	mvn.w	r3, #16
 8001fa6:	617b      	str	r3, [r7, #20]
		break;
 8001fa8:	bf00      	nop
	}

	return err;
 8001faa:	697b      	ldr	r3, [r7, #20]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <read_data>:

/*---------------------------------------------------------------------*/
/*Device-specific data control
 */
LOCAL ER read_data(T_I2C_DCB *p_dcb, T_DEVREQ *req)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af02      	add	r7, sp, #8
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
	W	rtn;
	ER	err	= E_OK;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]

	if(req->size <=0 || req->size > DEVCNF_I2C_MAX_RDATSZ) return E_PAR;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	dd03      	ble.n	8001fd2 <read_data+0x1e>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	2b64      	cmp	r3, #100	@ 0x64
 8001fd0:	dd02      	ble.n	8001fd8 <read_data+0x24>
 8001fd2:	f06f 0310 	mvn.w	r3, #16
 8001fd6:	e022      	b.n	800201e <read_data+0x6a>

	if(req->size) {
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d019      	beq.n	8002014 <read_data+0x60>
		rtn = dev_i2c_llctl(p_dcb->unit, LLD_I2C_READ, req->start, req->size, req->buf);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	4619      	mov	r1, r3
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	2102      	movs	r1, #2
 8001ffa:	f000 fbbd 	bl	8002778 <dev_i2c_llctl>
 8001ffe:	60b8      	str	r0, [r7, #8]
		if(rtn > 0) {
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	dd03      	ble.n	800200e <read_data+0x5a>
			req->asize = rtn;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	61da      	str	r2, [r3, #28]
 800200c:	e006      	b.n	800201c <read_data+0x68>
		} else {
			err = (ER)rtn;
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	e003      	b.n	800201c <read_data+0x68>
		}

	} else {
		req->asize = req->size;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	695a      	ldr	r2, [r3, #20]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	61da      	str	r2, [r3, #28]
	}

	return err;
 800201c:	68fb      	ldr	r3, [r7, #12]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <write_data>:


LOCAL ER write_data(T_I2C_DCB *p_dcb, T_DEVREQ *req)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b086      	sub	sp, #24
 800202a:	af02      	add	r7, sp, #8
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	6039      	str	r1, [r7, #0]
	W	rtn;
	ER	err	= E_OK;
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]

	if(req->size <=0 || req->size > DEVCNF_I2C_MAX_SDATSZ) return E_PAR;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	2b00      	cmp	r3, #0
 800203a:	dd03      	ble.n	8002044 <write_data+0x1e>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	2b64      	cmp	r3, #100	@ 0x64
 8002042:	dd02      	ble.n	800204a <write_data+0x24>
 8002044:	f06f 0310 	mvn.w	r3, #16
 8002048:	e022      	b.n	8002090 <write_data+0x6a>

	if(req->size) {
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d019      	beq.n	8002086 <write_data+0x60>
		rtn = dev_i2c_llctl(p_dcb->unit, LLD_I2C_WRITE, req->start, req->size, req->buf);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6818      	ldr	r0, [r3, #0]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	461a      	mov	r2, r3
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	4619      	mov	r1, r3
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	460b      	mov	r3, r1
 800206a:	2103      	movs	r1, #3
 800206c:	f000 fb84 	bl	8002778 <dev_i2c_llctl>
 8002070:	60b8      	str	r0, [r7, #8]
		if(rtn > 0) {
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	dd03      	ble.n	8002080 <write_data+0x5a>
			req->asize = rtn;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	61da      	str	r2, [r3, #28]
 800207e:	e006      	b.n	800208e <write_data+0x68>
		} else {
			err = (ER)rtn;
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	e003      	b.n	800208e <write_data+0x68>
		}

	} else {
		req->asize = req->size;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	695a      	ldr	r2, [r3, #20]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	61da      	str	r2, [r3, #28]
	}


	return err;
 800208e:	68fb      	ldr	r3, [r7, #12]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <dev_i2c_openfn>:
 */
/*----------------------------------------------------------------------
 * Open device
 */
ER dev_i2c_openfn( ID devid, UINT omode, T_MSDI *msdi)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af02      	add	r7, sp, #8
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
	T_I2C_DCB	*p_dcb;
	ER		err;

	p_dcb = (T_I2C_DCB*)(msdi->dmsdi.exinf);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	617b      	str	r3, [r7, #20]

	/* Device Open operation */
	p_dcb->omode = omode;
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	605a      	str	r2, [r3, #4]
	err = (ER)dev_i2c_llctl(p_dcb->unit, LLD_I2C_OPEN, 0, 0, 0);
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	2300      	movs	r3, #0
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	2300      	movs	r3, #0
 80020ba:	2200      	movs	r2, #0
 80020bc:	2100      	movs	r1, #0
 80020be:	f000 fb5b 	bl	8002778 <dev_i2c_llctl>
 80020c2:	6138      	str	r0, [r7, #16]

	return err;
 80020c4:	693b      	ldr	r3, [r7, #16]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <dev_i2c_closefn>:

/*----------------------------------------------------------------------
 * Close Device
 */
ER dev_i2c_closefn( ID devid, UINT option, T_MSDI *msdi)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b088      	sub	sp, #32
 80020d2:	af02      	add	r7, sp, #8
 80020d4:	60f8      	str	r0, [r7, #12]
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	607a      	str	r2, [r7, #4]
	T_I2C_DCB	*p_dcb;
	ER		err;

	p_dcb = (T_I2C_DCB*)(msdi->dmsdi.exinf);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	617b      	str	r3, [r7, #20]

	/* Device Close operation */
	err = (ER)dev_i2c_llctl(p_dcb->unit, LLD_I2C_CLOSE, 0, 0, 0);
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	6818      	ldr	r0, [r3, #0]
 80020e4:	2300      	movs	r3, #0
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	2300      	movs	r3, #0
 80020ea:	2200      	movs	r2, #0
 80020ec:	2101      	movs	r1, #1
 80020ee:	f000 fb43 	bl	8002778 <dev_i2c_llctl>
 80020f2:	6138      	str	r0, [r7, #16]

	return err;
 80020f4:	693b      	ldr	r3, [r7, #16]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <dev_i2c_readfn>:

/*----------------------------------------------------------------------
 * Read Device
 */
ER dev_i2c_readfn( T_DEVREQ *req, T_MSDI *p_msdi)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b084      	sub	sp, #16
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
 8002106:	6039      	str	r1, [r7, #0]
	T_I2C_DCB	*p_dcb;
	ER		err;

	p_dcb = (T_I2C_DCB*)(p_msdi->dmsdi.exinf);
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	60bb      	str	r3, [r7, #8]

	if(req->start >= 0) {
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	2b00      	cmp	r3, #0
 8002114:	db05      	blt.n	8002122 <dev_i2c_readfn+0x24>
		// Device specific data
		err = read_data( p_dcb, req);
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	68b8      	ldr	r0, [r7, #8]
 800211a:	f7ff ff4b 	bl	8001fb4 <read_data>
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	e004      	b.n	800212c <dev_i2c_readfn+0x2e>
	} else {
		// Device attribute data
		err = read_atr( p_dcb, req);
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	68b8      	ldr	r0, [r7, #8]
 8002126:	f7ff fea9 	bl	8001e7c <read_atr>
 800212a:	60f8      	str	r0, [r7, #12]
	}

	return err;
 800212c:	68fb      	ldr	r3, [r7, #12]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <dev_i2c_writefn>:

/*----------------------------------------------------------------------
 * Write Device
 */
ER dev_i2c_writefn( T_DEVREQ *req, T_MSDI *p_msdi)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b084      	sub	sp, #16
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	6039      	str	r1, [r7, #0]
	T_I2C_DCB	*p_dcb;
	ER		rtn;

	p_dcb = (T_I2C_DCB*)(p_msdi->dmsdi.exinf);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	691b      	ldr	r3, [r3, #16]
 8002144:	60bb      	str	r3, [r7, #8]

	if(req->start >= 0) {
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	2b00      	cmp	r3, #0
 800214c:	db05      	blt.n	800215a <dev_i2c_writefn+0x24>
		// Device specific data
		rtn = write_data( p_dcb, req);
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	68b8      	ldr	r0, [r7, #8]
 8002152:	f7ff ff68 	bl	8002026 <write_data>
 8002156:	60f8      	str	r0, [r7, #12]
 8002158:	e004      	b.n	8002164 <dev_i2c_writefn+0x2e>
	} else {
		// Device attribute data
		rtn = write_atr( p_dcb, req);
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	68b8      	ldr	r0, [r7, #8]
 800215e:	f7ff feb9 	bl	8001ed4 <write_atr>
 8002162:	60f8      	str	r0, [r7, #12]
	}

	return rtn;
 8002164:	68fb      	ldr	r3, [r7, #12]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <dev_i2c_eventfn>:

/*----------------------------------------------------------------------
 * Event Device
 */
ER dev_i2c_eventfn( INT evttyp, void *evtinf, T_MSDI *msdi)
{
 800216e:	b480      	push	{r7}
 8002170:	b085      	sub	sp, #20
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
	return E_NOSPT;
 800217a:	f06f 0308 	mvn.w	r3, #8
}
 800217e:	4618      	mov	r0, r3
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr

08002188 <dev_init_i2c>:

/*----------------------------------------------------------------------
 * Device driver initialization and registration
 */
EXPORT ER dev_init_i2c( UW unit )
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b094      	sub	sp, #80	@ 0x50
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
	T_MSDI		*p_msdi;
	T_DMSDI		dmsdi;
	ER		err;
	INT		i;

	if( unit >= DEV_I2C_UNITNM) return E_PAR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b04      	cmp	r3, #4
 8002194:	d902      	bls.n	800219c <dev_init_i2c+0x14>
 8002196:	f06f 0310 	mvn.w	r3, #16
 800219a:	e069      	b.n	8002270 <dev_init_i2c+0xe8>

#if TK_SUPPORT_MEMLIB
	p_dcb = (T_I2C_DCB*)Kmalloc(sizeof(T_I2C_DCB));
 800219c:	200c      	movs	r0, #12
 800219e:	f00b fa6b 	bl	800d678 <Kmalloc>
 80021a2:	64b8      	str	r0, [r7, #72]	@ 0x48
	if( p_dcb == NULL) return E_NOMEM;
 80021a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d102      	bne.n	80021b0 <dev_init_i2c+0x28>
 80021aa:	f06f 0320 	mvn.w	r3, #32
 80021ae:	e05f      	b.n	8002270 <dev_init_i2c+0xe8>
	dev_i2c_cb[unit]	= p_dcb;
 80021b0:	4931      	ldr	r1, [pc, #196]	@ (8002278 <dev_init_i2c+0xf0>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80021b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#else
	p_dcb = &dev_i2c_cb[unit];
#endif

	/* Device registration information */
	dmsdi.exinf	= p_dcb;
 80021ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021bc:	60bb      	str	r3, [r7, #8]
	dmsdi.drvatr	= 0;			/* Driver attributes */
 80021be:	2300      	movs	r3, #0
 80021c0:	61bb      	str	r3, [r7, #24]
	dmsdi.devatr	= TDK_UNDEF;		/* Device attributes */
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
	dmsdi.nsub	= 0;			/* Number of sub units */
 80021c6:	2300      	movs	r3, #0
 80021c8:	623b      	str	r3, [r7, #32]
	dmsdi.blksz	= 1;			/* Unique data block size (-1 = unknown) */
 80021ca:	2301      	movs	r3, #1
 80021cc:	627b      	str	r3, [r7, #36]	@ 0x24
	dmsdi.openfn	= dev_i2c_openfn;
 80021ce:	4b2b      	ldr	r3, [pc, #172]	@ (800227c <dev_init_i2c+0xf4>)
 80021d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	dmsdi.closefn	= dev_i2c_closefn;
 80021d2:	4b2b      	ldr	r3, [pc, #172]	@ (8002280 <dev_init_i2c+0xf8>)
 80021d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	dmsdi.readfn	= dev_i2c_readfn;
 80021d6:	4b2b      	ldr	r3, [pc, #172]	@ (8002284 <dev_init_i2c+0xfc>)
 80021d8:	633b      	str	r3, [r7, #48]	@ 0x30
	dmsdi.writefn	= dev_i2c_writefn;
 80021da:	4b2b      	ldr	r3, [pc, #172]	@ (8002288 <dev_init_i2c+0x100>)
 80021dc:	637b      	str	r3, [r7, #52]	@ 0x34
	dmsdi.eventfn	= dev_i2c_eventfn;
 80021de:	4b2b      	ldr	r3, [pc, #172]	@ (800228c <dev_init_i2c+0x104>)
 80021e0:	63bb      	str	r3, [r7, #56]	@ 0x38
	
	knl_strcpy( (char*)dmsdi.devnm, DEVCNF_I2C_DEVNAME);
 80021e2:	f107 0308 	add.w	r3, r7, #8
 80021e6:	3304      	adds	r3, #4
 80021e8:	4929      	ldr	r1, [pc, #164]	@ (8002290 <dev_init_i2c+0x108>)
 80021ea:	4618      	mov	r0, r3
 80021ec:	f00a ffef 	bl	800d1ce <knl_strcpy>
	i = knl_strlen(DEVCNF_I2C_DEVNAME);
 80021f0:	4827      	ldr	r0, [pc, #156]	@ (8002290 <dev_init_i2c+0x108>)
 80021f2:	f00a ffdb 	bl	800d1ac <knl_strlen>
 80021f6:	6478      	str	r0, [r7, #68]	@ 0x44
	dmsdi.devnm[i] = (UB)('a' + unit);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	3361      	adds	r3, #97	@ 0x61
 80021fe:	b2d9      	uxtb	r1, r3
 8002200:	f107 020c 	add.w	r2, r7, #12
 8002204:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002206:	4413      	add	r3, r2
 8002208:	460a      	mov	r2, r1
 800220a:	701a      	strb	r2, [r3, #0]
	dmsdi.devnm[i+1] = 0;
 800220c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800220e:	3301      	adds	r3, #1
 8002210:	3350      	adds	r3, #80	@ 0x50
 8002212:	443b      	add	r3, r7
 8002214:	2200      	movs	r2, #0
 8002216:	f803 2c44 	strb.w	r2, [r3, #-68]

	err = msdi_def_dev( &dmsdi, &idev, &p_msdi);
 800221a:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 800221e:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8002222:	f107 0308 	add.w	r3, r7, #8
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff fd92 	bl	8001d50 <msdi_def_dev>
 800222c:	64f8      	str	r0, [r7, #76]	@ 0x4c
	if(err != E_OK) goto err_2;
 800222e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002230:	2b00      	cmp	r3, #0
 8002232:	d118      	bne.n	8002266 <dev_init_i2c+0xde>

	p_dcb->unit	= unit;
 8002234:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	601a      	str	r2, [r3, #0]
	p_dcb->evtmbfid = idev.evtmbfid;
 800223a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800223c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800223e:	609a      	str	r2, [r3, #8]

	/* Low-level device initialization */
	err = dev_i2c_llinit( get_dcb_ptr(unit));
 8002240:	4a0d      	ldr	r2, [pc, #52]	@ (8002278 <dev_init_i2c+0xf0>)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002248:	4618      	mov	r0, r3
 800224a:	f000 fb6b 	bl	8002924 <dev_i2c_llinit>
 800224e:	64f8      	str	r0, [r7, #76]	@ 0x4c
	if(err != E_OK) goto err_1;
 8002250:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <dev_init_i2c+0xd2>

	/* Set default value for attribute data */

	return E_OK;
 8002256:	2300      	movs	r3, #0
 8002258:	e00a      	b.n	8002270 <dev_init_i2c+0xe8>
	if(err != E_OK) goto err_1;
 800225a:	bf00      	nop

err_1:
	msdi_del_dev(p_msdi);
 800225c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff fdee 	bl	8001e40 <msdi_del_dev>
 8002264:	e000      	b.n	8002268 <dev_init_i2c+0xe0>
	if(err != E_OK) goto err_2;
 8002266:	bf00      	nop
err_2:
	Kfree(p_dcb);
 8002268:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 800226a:	f00b fa2d 	bl	800d6c8 <Kfree>
	return err;
 800226e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8002270:	4618      	mov	r0, r3
 8002272:	3750      	adds	r7, #80	@ 0x50
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	240028cc 	.word	0x240028cc
 800227c:	08002099 	.word	0x08002099
 8002280:	080020cf 	.word	0x080020cf
 8002284:	080020ff 	.word	0x080020ff
 8002288:	08002137 	.word	0x08002137
 800228c:	0800216f 	.word	0x0800216f
 8002290:	0800e8e0 	.word	0x0800e8e0

08002294 <i2c_read_reg>:
/*----------------------------------------------------------------------
 * I2C register access support function
 */

EXPORT ER i2c_read_reg(ID dd, UW sadr, UW radr, UB *data)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08e      	sub	sp, #56	@ 0x38
 8002298:	af02      	add	r7, sp, #8
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
 80022a0:	603b      	str	r3, [r7, #0]
	T_I2C_EXEC	exec;
	SZ		asz;
	ER		err;

	exec.sadr	= sadr;
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	61bb      	str	r3, [r7, #24]
	exec.snd_size	= 1;
 80022a6:	2301      	movs	r3, #1
 80022a8:	61fb      	str	r3, [r7, #28]
	exec.snd_data	= (UB*)&radr;
 80022aa:	1d3b      	adds	r3, r7, #4
 80022ac:	623b      	str	r3, [r7, #32]
	exec.rcv_size	= 1;
 80022ae:	2301      	movs	r3, #1
 80022b0:	627b      	str	r3, [r7, #36]	@ 0x24
	exec.rcv_data	= data;
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	62bb      	str	r3, [r7, #40]	@ 0x28

	err = tk_swri_dev(dd, TDN_I2C_EXEC, &exec, sizeof(T_I2C_EXEC), &asz);
 80022b6:	f107 0218 	add.w	r2, r7, #24
 80022ba:	f107 0314 	add.w	r3, r7, #20
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	2314      	movs	r3, #20
 80022c2:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f003 fb12 	bl	80058f0 <tk_swri_dev>
 80022cc:	62f8      	str	r0, [r7, #44]	@ 0x2c

	return err;
 80022ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3730      	adds	r7, #48	@ 0x30
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <i2c_write_reg>:

EXPORT ER i2c_write_reg(ID dd, UW sadr, UW radr, UB data)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08a      	sub	sp, #40	@ 0x28
 80022dc:	af02      	add	r7, sp, #8
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
 80022e4:	70fb      	strb	r3, [r7, #3]
	UB	snd_data[2];
	SZ	asz;
	ER	err;

	snd_data[0] = radr;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	763b      	strb	r3, [r7, #24]
	snd_data[1] = data;
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	767b      	strb	r3, [r7, #25]
	
	err = tk_swri_dev(dd, sadr, snd_data, sizeof(snd_data), &asz);
 80022f0:	68b9      	ldr	r1, [r7, #8]
 80022f2:	f107 0218 	add.w	r2, r7, #24
 80022f6:	f107 0314 	add.w	r3, r7, #20
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	2302      	movs	r3, #2
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f003 faf6 	bl	80058f0 <tk_swri_dev>
 8002304:	61f8      	str	r0, [r7, #28]

	return err;
 8002306:	69fb      	ldr	r3, [r7, #28]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3720      	adds	r7, #32
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <out_w>:
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
	*(_UW*)port = data;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	601a      	str	r2, [r3, #0]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr

0800232a <in_w>:
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
	return *(_UW*)port;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr

08002340 <i2c_evhdr>:
 */
/*-------------------------------------------------------
 * Event interrupt handler
 */
LOCAL void i2c_evhdr( UINT intno )
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	T_I2C_LLDCB	*p_cb;
	UW		i2c_st;
	INT		unit;
	BOOL		wup	= FALSE;
 8002348:	2300      	movs	r3, #0
 800234a:	60fb      	str	r3, [r7, #12]

	for ( unit = 0; unit < DEV_I2C_UNITNM; unit++ ) {
 800234c:	2300      	movs	r3, #0
 800234e:	613b      	str	r3, [r7, #16]
 8002350:	e013      	b.n	800237a <i2c_evhdr+0x3a>
		if ( ll_devdat[unit].intno == intno ) {
 8002352:	4969      	ldr	r1, [pc, #420]	@ (80024f8 <i2c_evhdr+0x1b8>)
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	429a      	cmp	r2, r3
 8002366:	d105      	bne.n	8002374 <i2c_evhdr+0x34>
			p_cb = &ll_devcb[unit];
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	015b      	lsls	r3, r3, #5
 800236c:	4a63      	ldr	r2, [pc, #396]	@ (80024fc <i2c_evhdr+0x1bc>)
 800236e:	4413      	add	r3, r2
 8002370:	617b      	str	r3, [r7, #20]
			break;
 8002372:	e005      	b.n	8002380 <i2c_evhdr+0x40>
	for ( unit = 0; unit < DEV_I2C_UNITNM; unit++ ) {
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	3301      	adds	r3, #1
 8002378:	613b      	str	r3, [r7, #16]
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	2b04      	cmp	r3, #4
 800237e:	dde8      	ble.n	8002352 <i2c_evhdr+0x12>
		}
	}
	if(unit >= DEV_I2C_UNITNM) return;
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	2b04      	cmp	r3, #4
 8002384:	f300 80b4 	bgt.w	80024f0 <i2c_evhdr+0x1b0>

	i2c_st = in_w(I2C_ISR(unit));
 8002388:	4a5d      	ldr	r2, [pc, #372]	@ (8002500 <i2c_evhdr+0x1c0>)
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002390:	3318      	adds	r3, #24
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff ffc9 	bl	800232a <in_w>
 8002398:	60b8      	str	r0, [r7, #8]
	if( i2c_st & I2C_ISR_NACKF) {
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	f003 0310 	and.w	r3, r3, #16
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d006      	beq.n	80023b2 <i2c_evhdr+0x72>
		p_cb->ioerr = E_IO;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	f06f 0238 	mvn.w	r2, #56	@ 0x38
 80023aa:	60da      	str	r2, [r3, #12]
		wup = TRUE;
 80023ac:	2301      	movs	r3, #1
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	e081      	b.n	80024b6 <i2c_evhdr+0x176>

	} else if( i2c_st & I2C_ISR_TXIS) {		/* TX interrupt */
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d032      	beq.n	8002422 <i2c_evhdr+0xe2>
		out_w(I2C_TXDR(unit),*p_cb->sbuf++);
 80023bc:	4a50      	ldr	r2, [pc, #320]	@ (8002500 <i2c_evhdr+0x1c0>)
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023c4:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	1c59      	adds	r1, r3, #1
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	6191      	str	r1, [r2, #24]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	4619      	mov	r1, r3
 80023d6:	f7ff ff9b 	bl	8002310 <out_w>
		if(--(p_cb->sdat_num) <= 0) {			/* final data ? */
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	1e5a      	subs	r2, r3, #1
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	611a      	str	r2, [r3, #16]
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d164      	bne.n	80024b6 <i2c_evhdr+0x176>
			if(p_cb->rdat_num == 0) {
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10d      	bne.n	8002410 <i2c_evhdr+0xd0>
				out_w(I2C_CR1(unit), I2C_CR1_PE);
 80023f4:	4a42      	ldr	r2, [pc, #264]	@ (8002500 <i2c_evhdr+0x1c0>)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023fc:	2101      	movs	r1, #1
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff ff86 	bl	8002310 <out_w>
				p_cb->state = I2C_STS_STOP;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	2203      	movs	r2, #3
 8002408:	605a      	str	r2, [r3, #4]
				wup = TRUE;
 800240a:	2301      	movs	r3, #1
 800240c:	60fb      	str	r3, [r7, #12]
 800240e:	e052      	b.n	80024b6 <i2c_evhdr+0x176>
			} else {
				out_w(I2C_CR1(unit), I2C_CR1_PE | I2C_CR1_TCIE | I2C_CR1_RXIE | I2C_CR1_NACKIE | I2C_CR1_ERRIE );
 8002410:	4a3b      	ldr	r2, [pc, #236]	@ (8002500 <i2c_evhdr+0x1c0>)
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002418:	21d5      	movs	r1, #213	@ 0xd5
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff ff78 	bl	8002310 <out_w>
 8002420:	e049      	b.n	80024b6 <i2c_evhdr+0x176>
			}
		}

	} else if( i2c_st & I2C_ISR_TC) {		/* Transfer complete */
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00d      	beq.n	8002448 <i2c_evhdr+0x108>
		out_w(I2C_CR1(unit), I2C_CR1_PE | I2C_CR1_RXIE | I2C_CR1_NACKIE | I2C_CR1_ERRIE );
 800242c:	4a34      	ldr	r2, [pc, #208]	@ (8002500 <i2c_evhdr+0x1c0>)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002434:	2195      	movs	r1, #149	@ 0x95
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff ff6a 	bl	8002310 <out_w>
		p_cb->state = I2C_STS_START;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	2200      	movs	r2, #0
 8002440:	605a      	str	r2, [r3, #4]
		wup = TRUE;
 8002442:	2301      	movs	r3, #1
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	e036      	b.n	80024b6 <i2c_evhdr+0x176>

	} else if( i2c_st & I2C_ISR_RXNE) {	/* RX interrupt */
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	2b00      	cmp	r3, #0
 8002450:	d025      	beq.n	800249e <i2c_evhdr+0x15e>
		*(p_cb->rbuf++) = (UB)in_w(I2C_RXDR(unit));
 8002452:	4a2b      	ldr	r2, [pc, #172]	@ (8002500 <i2c_evhdr+0x1c0>)
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245a:	3324      	adds	r3, #36	@ 0x24
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff64 	bl	800232a <in_w>
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	1c59      	adds	r1, r3, #1
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	61d1      	str	r1, [r2, #28]
 800246c:	b2c2      	uxtb	r2, r0
 800246e:	701a      	strb	r2, [r3, #0]
		if(--(p_cb->rdat_num) <= 0) {			/* final data ? */
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	1e5a      	subs	r2, r3, #1
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	615a      	str	r2, [r3, #20]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d119      	bne.n	80024b6 <i2c_evhdr+0x176>
			out_w(I2C_CR1(unit), I2C_CR1_PE);
 8002482:	4a1f      	ldr	r2, [pc, #124]	@ (8002500 <i2c_evhdr+0x1c0>)
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800248a:	2101      	movs	r1, #1
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ff3f 	bl	8002310 <out_w>
			p_cb->state = I2C_STS_STOP;
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	2203      	movs	r2, #3
 8002496:	605a      	str	r2, [r3, #4]
			wup = TRUE;
 8002498:	2301      	movs	r3, #1
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	e00b      	b.n	80024b6 <i2c_evhdr+0x176>
		}
	} else {	/* Error */
		out_w(I2C_CR1(unit), I2C_CR1_PE);
 800249e:	4a18      	ldr	r2, [pc, #96]	@ (8002500 <i2c_evhdr+0x1c0>)
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a6:	2101      	movs	r1, #1
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff ff31 	bl	8002310 <out_w>
		p_cb->ioerr = E_IO;
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f06f 0238 	mvn.w	r2, #56	@ 0x38
 80024b4:	60da      	str	r2, [r3, #12]
	}

	out_w(I2C_ICR(unit), I2C_ICR_ALL);	// Clear all Interrupt flag
 80024b6:	4a12      	ldr	r2, [pc, #72]	@ (8002500 <i2c_evhdr+0x1c0>)
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024be:	331c      	adds	r3, #28
 80024c0:	f643 7138 	movw	r1, #16184	@ 0x3f38
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff ff23 	bl	8002310 <out_w>
	ClearInt(intno);			// Clear interrupt
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f00b fbd9 	bl	800dc82 <ClearInt>

	if(wup) {
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00d      	beq.n	80024f2 <i2c_evhdr+0x1b2>
		if(p_cb->wait_tskid) {
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d009      	beq.n	80024f2 <i2c_evhdr+0x1b2>
			tk_wup_tsk(p_cb->wait_tskid);
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f009 f94a 	bl	800b77c <tk_wup_tsk>
			p_cb->wait_tskid = 0;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	e000      	b.n	80024f2 <i2c_evhdr+0x1b2>
	if(unit >= DEV_I2C_UNITNM) return;
 80024f0:	bf00      	nop
		}
	}
}
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	0800ec54 	.word	0x0800ec54
 80024fc:	240028e0 	.word	0x240028e0
 8002500:	0800ec40 	.word	0x0800ec40

08002504 <i2c_erhdr>:

/*-------------------------------------------------------
 * Error interrupt handler
 */
LOCAL void i2c_erhdr( UINT intno )
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
	T_I2C_LLDCB	*p_cb;
	INT		unit;

	intno--;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3b01      	subs	r3, #1
 8002510:	607b      	str	r3, [r7, #4]
	for ( unit = 0; unit < DEV_I2C_UNITNM; unit++ ) {
 8002512:	2300      	movs	r3, #0
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	e013      	b.n	8002540 <i2c_erhdr+0x3c>
		if ( ll_devdat[unit].intno == intno ) {
 8002518:	4921      	ldr	r1, [pc, #132]	@ (80025a0 <i2c_erhdr+0x9c>)
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	4613      	mov	r3, r2
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	429a      	cmp	r2, r3
 800252c:	d105      	bne.n	800253a <i2c_erhdr+0x36>
			p_cb = &ll_devcb[unit];
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	015b      	lsls	r3, r3, #5
 8002532:	4a1c      	ldr	r2, [pc, #112]	@ (80025a4 <i2c_erhdr+0xa0>)
 8002534:	4413      	add	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]
			break;
 8002538:	e005      	b.n	8002546 <i2c_erhdr+0x42>
	for ( unit = 0; unit < DEV_I2C_UNITNM; unit++ ) {
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	3301      	adds	r3, #1
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b04      	cmp	r3, #4
 8002544:	dde8      	ble.n	8002518 <i2c_erhdr+0x14>
		}
	}
	if(unit >= DEV_I2C_UNITNM) return;
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b04      	cmp	r3, #4
 800254a:	dc25      	bgt.n	8002598 <i2c_erhdr+0x94>

	out_w(I2C_ICR(unit), I2C_ICR_ALL);	// Clear all Interrupt flag
 800254c:	4a16      	ldr	r2, [pc, #88]	@ (80025a8 <i2c_erhdr+0xa4>)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002554:	331c      	adds	r3, #28
 8002556:	f643 7138 	movw	r1, #16184	@ 0x3f38
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff fed8 	bl	8002310 <out_w>
	ClearInt(intno);			// Clear interrupt
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f00b fb8e 	bl	800dc82 <ClearInt>
	
	out_w(I2C_CR1(unit), I2C_CR1_PE);
 8002566:	4a10      	ldr	r2, [pc, #64]	@ (80025a8 <i2c_erhdr+0xa4>)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256e:	2101      	movs	r1, #1
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fecd 	bl	8002310 <out_w>

	p_cb->ioerr = E_IO;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f06f 0238 	mvn.w	r2, #56	@ 0x38
 800257c:	60da      	str	r2, [r3, #12]
	if(p_cb->wait_tskid) {
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d009      	beq.n	800259a <i2c_erhdr+0x96>
		tk_wup_tsk(p_cb->wait_tskid);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f009 f8f6 	bl	800b77c <tk_wup_tsk>
		p_cb->wait_tskid = 0;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	e000      	b.n	800259a <i2c_erhdr+0x96>
	if(unit >= DEV_I2C_UNITNM) return;
 8002598:	bf00      	nop
	}
}
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	0800ec54 	.word	0x0800ec54
 80025a4:	240028e0 	.word	0x240028e0
 80025a8:	0800ec40 	.word	0x0800ec40

080025ac <i2c_trans>:

/*----------------------------------------------------------------------
 * Execution of communication
 */
LOCAL ER i2c_trans(INT unit, T_I2C_LLDCB *p_cb)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
	UW		i2c_ctl;
	UINT		imask;
	ER		err;

	p_cb->ioerr		= E_OK;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2200      	movs	r2, #0
 80025ba:	60da      	str	r2, [r3, #12]
	p_cb->wait_tskid	= 0;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]

	/* I2C Device enable */
	out_w(I2C_CR1(unit), I2C_CR1_PE | I2C_CR1_TXIE | I2C_CR1_RXIE | I2C_CR1_NACKIE | I2C_CR1_ERRIE );
 80025c2:	4a4e      	ldr	r2, [pc, #312]	@ (80026fc <i2c_trans+0x150>)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ca:	2197      	movs	r1, #151	@ 0x97
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff fe9f 	bl	8002310 <out_w>

	while ((err = p_cb->ioerr) == E_OK ) {
 80025d2:	e07a      	b.n	80026ca <i2c_trans+0x11e>

		switch ( p_cb->state ) {
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d002      	beq.n	80025e2 <i2c_trans+0x36>
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d04d      	beq.n	800267c <i2c_trans+0xd0>
 80025e0:	e05a      	b.n	8002698 <i2c_trans+0xec>
		case I2C_STS_START:
			DI(imask);
 80025e2:	f00b f894 	bl	800d70e <disint>
 80025e6:	60f8      	str	r0, [r7, #12]
			i2c_ctl = p_cb->sadr <<1;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	617b      	str	r3, [r7, #20]
			if(p_cb->sdat_num > 0 ) {	/* Send */
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d01a      	beq.n	800262e <i2c_trans+0x82>
				i2c_ctl |= p_cb->sdat_num <<16 ;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	041b      	lsls	r3, r3, #16
 80025fe:	697a      	ldr	r2, [r7, #20]
 8002600:	4313      	orrs	r3, r2
 8002602:	617b      	str	r3, [r7, #20]
				if( p_cb->rdat_num == 0) {
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d103      	bne.n	8002614 <i2c_trans+0x68>
					i2c_ctl |= I2C_CR2_AUTOEND;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002612:	617b      	str	r3, [r7, #20]
				}
				out_w(I2C_CR2(unit), i2c_ctl);
 8002614:	4a39      	ldr	r2, [pc, #228]	@ (80026fc <i2c_trans+0x150>)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261c:	3304      	adds	r3, #4
 800261e:	6979      	ldr	r1, [r7, #20]
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff fe75 	bl	8002310 <out_w>
				p_cb->state = I2C_STS_SEND;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2204      	movs	r2, #4
 800262a:	605a      	str	r2, [r3, #4]
 800262c:	e013      	b.n	8002656 <i2c_trans+0xaa>
			} else {			/* Receive */
				i2c_ctl |= p_cb->rdat_num <<16 | I2C_CR2_RD_WRN | I2C_CR2_AUTOEND;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	041a      	lsls	r2, r3, #16
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	431a      	orrs	r2, r3
 8002638:	4b31      	ldr	r3, [pc, #196]	@ (8002700 <i2c_trans+0x154>)
 800263a:	4313      	orrs	r3, r2
 800263c:	617b      	str	r3, [r7, #20]
				p_cb->state = I2C_STS_RECV;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	2205      	movs	r2, #5
 8002642:	605a      	str	r2, [r3, #4]
				out_w(I2C_CR2(unit), i2c_ctl);
 8002644:	4a2d      	ldr	r2, [pc, #180]	@ (80026fc <i2c_trans+0x150>)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264c:	3304      	adds	r3, #4
 800264e:	6979      	ldr	r1, [r7, #20]
 8002650:	4618      	mov	r0, r3
 8002652:	f7ff fe5d 	bl	8002310 <out_w>
			}

			out_w(I2C_CR2(unit), i2c_ctl | I2C_CR2_START);
 8002656:	4a29      	ldr	r2, [pc, #164]	@ (80026fc <i2c_trans+0x150>)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265e:	1d1a      	adds	r2, r3, #4
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002666:	4619      	mov	r1, r3
 8002668:	4610      	mov	r0, r2
 800266a:	f7ff fe51 	bl	8002310 <out_w>
			EI(imask);
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f00b f835 	bl	800d6de <set_basepri>
			break;
 8002674:	e010      	b.n	8002698 <i2c_trans+0xec>

		case I2C_STS_STOP:
			while(in_w(I2C_ISR(unit)) & I2C_ISR_BUSY) {
				tk_dly_tsk(1);
 8002676:	2001      	movs	r0, #1
 8002678:	f009 f970 	bl	800b95c <tk_dly_tsk>
			while(in_w(I2C_ISR(unit)) & I2C_ISR_BUSY) {
 800267c:	4a1f      	ldr	r2, [pc, #124]	@ (80026fc <i2c_trans+0x150>)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002684:	3318      	adds	r3, #24
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fe4f 	bl	800232a <in_w>
 800268c:	4603      	mov	r3, r0
 800268e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1ef      	bne.n	8002676 <i2c_trans+0xca>
			}
			break;
 8002696:	bf00      	nop
		}
		if ( p_cb->state == I2C_STS_STOP ) break;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b03      	cmp	r3, #3
 800269e:	d01c      	beq.n	80026da <i2c_trans+0x12e>

		p_cb->wait_tskid = tk_get_tid();
 80026a0:	f008 fcfa 	bl	800b098 <tk_get_tid>
 80026a4:	4602      	mov	r2, r0
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	601a      	str	r2, [r3, #0]
		err = tk_slp_tsk(ll_devdat[unit].timout);
 80026aa:	4916      	ldr	r1, [pc, #88]	@ (8002704 <i2c_trans+0x158>)
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	4413      	add	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	440b      	add	r3, r1
 80026b8:	3308      	adds	r3, #8
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f008 fff1 	bl	800b6a4 <tk_slp_tsk>
 80026c2:	6138      	str	r0, [r7, #16]
		if ( err < E_OK ) break;
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	db09      	blt.n	80026de <i2c_trans+0x132>
	while ((err = p_cb->ioerr) == E_OK ) {
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f43f af7e 	beq.w	80025d4 <i2c_trans+0x28>
 80026d8:	e002      	b.n	80026e0 <i2c_trans+0x134>
		if ( p_cb->state == I2C_STS_STOP ) break;
 80026da:	bf00      	nop
 80026dc:	e000      	b.n	80026e0 <i2c_trans+0x134>
		if ( err < E_OK ) break;
 80026de:	bf00      	nop
	}

	out_w(I2C_CR1(unit), 0);	/* I2C Device disable */
 80026e0:	4a06      	ldr	r2, [pc, #24]	@ (80026fc <i2c_trans+0x150>)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e8:	2100      	movs	r1, #0
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff fe10 	bl	8002310 <out_w>

	return err;
 80026f0:	693b      	ldr	r3, [r7, #16]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3718      	adds	r7, #24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	0800ec40 	.word	0x0800ec40
 8002700:	02000400 	.word	0x02000400
 8002704:	0800ec54 	.word	0x0800ec54

08002708 <set_com_start>:

/*----------------------------------------------------------------------
 * Set communication parameters
 */
Inline void set_com_start(UW unit, UW sadr, UW sdat_num, UW rdat_num, UB *sbuf, UB *rbuf)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
 8002714:	603b      	str	r3, [r7, #0]
	ll_devcb[unit].state	= I2C_STS_START;
 8002716:	4a17      	ldr	r2, [pc, #92]	@ (8002774 <set_com_start+0x6c>)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	015b      	lsls	r3, r3, #5
 800271c:	4413      	add	r3, r2
 800271e:	3304      	adds	r3, #4
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
	ll_devcb[unit].sadr	= sadr;		/* Slave address */
 8002724:	4a13      	ldr	r2, [pc, #76]	@ (8002774 <set_com_start+0x6c>)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	015b      	lsls	r3, r3, #5
 800272a:	4413      	add	r3, r2
 800272c:	3308      	adds	r3, #8
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	601a      	str	r2, [r3, #0]
	ll_devcb[unit].sdat_num	= sdat_num;	/* Number of send data */
 8002732:	4a10      	ldr	r2, [pc, #64]	@ (8002774 <set_com_start+0x6c>)
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	015b      	lsls	r3, r3, #5
 8002738:	4413      	add	r3, r2
 800273a:	3310      	adds	r3, #16
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	601a      	str	r2, [r3, #0]
	ll_devcb[unit].rdat_num	= rdat_num;	/* Number of receive data */
 8002740:	4a0c      	ldr	r2, [pc, #48]	@ (8002774 <set_com_start+0x6c>)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	015b      	lsls	r3, r3, #5
 8002746:	4413      	add	r3, r2
 8002748:	3314      	adds	r3, #20
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	601a      	str	r2, [r3, #0]
	ll_devcb[unit].sbuf	= sbuf;		/* Send buffer */
 800274e:	4a09      	ldr	r2, [pc, #36]	@ (8002774 <set_com_start+0x6c>)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	015b      	lsls	r3, r3, #5
 8002754:	4413      	add	r3, r2
 8002756:	3318      	adds	r3, #24
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	601a      	str	r2, [r3, #0]
	ll_devcb[unit].rbuf	= rbuf;		/* Receive buffer */
 800275c:	4a05      	ldr	r2, [pc, #20]	@ (8002774 <set_com_start+0x6c>)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	015b      	lsls	r3, r3, #5
 8002762:	4413      	add	r3, r2
 8002764:	331c      	adds	r3, #28
 8002766:	69fa      	ldr	r2, [r7, #28]
 8002768:	601a      	str	r2, [r3, #0]
}
 800276a:	bf00      	nop
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr
 8002774:	240028e0 	.word	0x240028e0

08002778 <dev_i2c_llctl>:

/*----------------------------------------------------------------------
 * Low level device control
 */
EXPORT W dev_i2c_llctl( UW unit, INT cmd, UW p1, UW p2, UW *pp)
{
 8002778:	b590      	push	{r4, r7, lr}
 800277a:	b089      	sub	sp, #36	@ 0x24
 800277c:	af02      	add	r7, sp, #8
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	603b      	str	r3, [r7, #0]
	T_I2C_EXEC	*p_ex;
	ER		err	= E_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]

	switch(cmd) {
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b04      	cmp	r3, #4
 800278e:	f200 80bf 	bhi.w	8002910 <dev_i2c_llctl+0x198>
 8002792:	a201      	add	r2, pc, #4	@ (adr r2, 8002798 <dev_i2c_llctl+0x20>)
 8002794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002798:	080027ad 	.word	0x080027ad
 800279c:	08002801 	.word	0x08002801
 80027a0:	08002831 	.word	0x08002831
 80027a4:	08002873 	.word	0x08002873
 80027a8:	080028b5 	.word	0x080028b5
	case LLD_I2C_OPEN:
		/* I2C interrupt enable */
		EnableInt(ll_devdat[unit].intno, ll_devdat[unit].intpri);
 80027ac:	495b      	ldr	r1, [pc, #364]	@ (800291c <dev_i2c_llctl+0x1a4>)
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	4613      	mov	r3, r2
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	4413      	add	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	6818      	ldr	r0, [r3, #0]
 80027bc:	4957      	ldr	r1, [pc, #348]	@ (800291c <dev_i2c_llctl+0x1a4>)
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	4613      	mov	r3, r2
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	4413      	add	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	3304      	adds	r3, #4
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4619      	mov	r1, r3
 80027d0:	f00b fa1e 	bl	800dc10 <EnableInt>
		EnableInt(ll_devdat[unit].intno + 1, ll_devdat[unit].intpri);
 80027d4:	4951      	ldr	r1, [pc, #324]	@ (800291c <dev_i2c_llctl+0x1a4>)
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	4613      	mov	r3, r2
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	1c58      	adds	r0, r3, #1
 80027e6:	494d      	ldr	r1, [pc, #308]	@ (800291c <dev_i2c_llctl+0x1a4>)
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	4613      	mov	r3, r2
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	4413      	add	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	3304      	adds	r3, #4
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4619      	mov	r1, r3
 80027fa:	f00b fa09 	bl	800dc10 <EnableInt>
		break;
 80027fe:	e087      	b.n	8002910 <dev_i2c_llctl+0x198>

	case LLD_I2C_CLOSE:
		/* I2C interrupt disable */
		DisableInt(ll_devdat[unit].intno);
 8002800:	4946      	ldr	r1, [pc, #280]	@ (800291c <dev_i2c_llctl+0x1a4>)
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	4613      	mov	r3, r2
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	4413      	add	r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4618      	mov	r0, r3
 8002812:	f00b fa1b 	bl	800dc4c <DisableInt>
		DisableInt(ll_devdat[unit].intno + 1);
 8002816:	4941      	ldr	r1, [pc, #260]	@ (800291c <dev_i2c_llctl+0x1a4>)
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	4613      	mov	r3, r2
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	4413      	add	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	3301      	adds	r3, #1
 8002828:	4618      	mov	r0, r3
 800282a:	f00b fa0f 	bl	800dc4c <DisableInt>
		break;
 800282e:	e06f      	b.n	8002910 <dev_i2c_llctl+0x198>

	case LLD_I2C_READ:
		set_com_start( unit, p1, 0, p2, NULL, (UB*)pp);
 8002830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002832:	9301      	str	r3, [sp, #4]
 8002834:	2300      	movs	r3, #0
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	2200      	movs	r2, #0
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f7ff ff62 	bl	8002708 <set_com_start>
		err = i2c_trans(unit, &ll_devcb[unit]);
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	015b      	lsls	r3, r3, #5
 800284a:	4935      	ldr	r1, [pc, #212]	@ (8002920 <dev_i2c_llctl+0x1a8>)
 800284c:	440b      	add	r3, r1
 800284e:	4619      	mov	r1, r3
 8002850:	4610      	mov	r0, r2
 8002852:	f7ff feab 	bl	80025ac <i2c_trans>
 8002856:	6178      	str	r0, [r7, #20]
		if(err >= E_OK) err = p2 - ll_devcb[unit].sdat_num;
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	2b00      	cmp	r3, #0
 800285c:	db53      	blt.n	8002906 <dev_i2c_llctl+0x18e>
 800285e:	4a30      	ldr	r2, [pc, #192]	@ (8002920 <dev_i2c_llctl+0x1a8>)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	015b      	lsls	r3, r3, #5
 8002864:	4413      	add	r3, r2
 8002866:	3310      	adds	r3, #16
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	617b      	str	r3, [r7, #20]
		break;
 8002870:	e049      	b.n	8002906 <dev_i2c_llctl+0x18e>

	case LLD_I2C_WRITE:
		set_com_start( unit, p1, p2, 0, (UB*)pp, NULL);
 8002872:	2300      	movs	r3, #0
 8002874:	9301      	str	r3, [sp, #4]
 8002876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002878:	9300      	str	r3, [sp, #0]
 800287a:	2300      	movs	r3, #0
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f7ff ff41 	bl	8002708 <set_com_start>
		err = i2c_trans(unit, &ll_devcb[unit]);
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	015b      	lsls	r3, r3, #5
 800288c:	4924      	ldr	r1, [pc, #144]	@ (8002920 <dev_i2c_llctl+0x1a8>)
 800288e:	440b      	add	r3, r1
 8002890:	4619      	mov	r1, r3
 8002892:	4610      	mov	r0, r2
 8002894:	f7ff fe8a 	bl	80025ac <i2c_trans>
 8002898:	6178      	str	r0, [r7, #20]
		if(err >= E_OK) err = p2 - ll_devcb[unit].sdat_num;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2b00      	cmp	r3, #0
 800289e:	db34      	blt.n	800290a <dev_i2c_llctl+0x192>
 80028a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002920 <dev_i2c_llctl+0x1a8>)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	015b      	lsls	r3, r3, #5
 80028a6:	4413      	add	r3, r2
 80028a8:	3310      	adds	r3, #16
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	617b      	str	r3, [r7, #20]
		break;
 80028b2:	e02a      	b.n	800290a <dev_i2c_llctl+0x192>

	case LLD_I2C_EXEC:
		p_ex = (T_I2C_EXEC*)pp;
 80028b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b6:	613b      	str	r3, [r7, #16]
		set_com_start( unit, p_ex->sadr, p_ex->snd_size, p_ex->rcv_size, p_ex->snd_data, p_ex->rcv_data);
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	6819      	ldr	r1, [r3, #0]
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	4618      	mov	r0, r3
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	461c      	mov	r4, r3
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	6912      	ldr	r2, [r2, #16]
 80028d0:	9201      	str	r2, [sp, #4]
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	4623      	mov	r3, r4
 80028d6:	4602      	mov	r2, r0
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f7ff ff15 	bl	8002708 <set_com_start>
		err = i2c_trans(unit, &ll_devcb[unit]);
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	015b      	lsls	r3, r3, #5
 80028e4:	490e      	ldr	r1, [pc, #56]	@ (8002920 <dev_i2c_llctl+0x1a8>)
 80028e6:	440b      	add	r3, r1
 80028e8:	4619      	mov	r1, r3
 80028ea:	4610      	mov	r0, r2
 80028ec:	f7ff fe5e 	bl	80025ac <i2c_trans>
 80028f0:	6178      	str	r0, [r7, #20]
		if(err >= E_OK) err = p_ex->snd_size + p_ex->rcv_size;
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	db0a      	blt.n	800290e <dev_i2c_llctl+0x196>
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4413      	add	r3, r2
 8002902:	617b      	str	r3, [r7, #20]
		break;
 8002904:	e003      	b.n	800290e <dev_i2c_llctl+0x196>
		break;
 8002906:	bf00      	nop
 8002908:	e002      	b.n	8002910 <dev_i2c_llctl+0x198>
		break;
 800290a:	bf00      	nop
 800290c:	e000      	b.n	8002910 <dev_i2c_llctl+0x198>
		break;
 800290e:	bf00      	nop
	}
	
	return (W)err;
 8002910:	697b      	ldr	r3, [r7, #20]
}
 8002912:	4618      	mov	r0, r3
 8002914:	371c      	adds	r7, #28
 8002916:	46bd      	mov	sp, r7
 8002918:	bd90      	pop	{r4, r7, pc}
 800291a:	bf00      	nop
 800291c:	0800ec54 	.word	0x0800ec54
 8002920:	240028e0 	.word	0x240028e0

08002924 <dev_i2c_llinit>:

/*----------------------------------------------------------------------
 * Device initialization
 */
EXPORT ER dev_i2c_llinit( T_I2C_DCB *p_dcb)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b088      	sub	sp, #32
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]

	UW	unit;
	UW	intno;
	ER	err;

	unit = p_dcb->unit;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	61fb      	str	r3, [r7, #28]

#if DEVCONF_I2C_INIT_MCLK
	if(unit != DEV_I2C_4) {	// I2C 1,2,3,5
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	2b03      	cmp	r3, #3
 8002936:	d015      	beq.n	8002964 <dev_i2c_llinit+0x40>
		/* Select clock source */
		out_w(RCC_D2CCIP2R, (in_w(RCC_D2CCIP2R) & ~RCC_D2CCIP2R_I2C1235SEL) |(DEVCNF_I2CSEL << 12));
 8002938:	482f      	ldr	r0, [pc, #188]	@ (80029f8 <dev_i2c_llinit+0xd4>)
 800293a:	f7ff fcf6 	bl	800232a <in_w>
 800293e:	4603      	mov	r3, r0
 8002940:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002944:	4619      	mov	r1, r3
 8002946:	482c      	ldr	r0, [pc, #176]	@ (80029f8 <dev_i2c_llinit+0xd4>)
 8002948:	f7ff fce2 	bl	8002310 <out_w>
		
		/* Enable module clock */
		*(_UW*)RCC_APB1LENR |= (RCC_APB1LENR_I2C1EN<<unit);
 800294c:	4b2b      	ldr	r3, [pc, #172]	@ (80029fc <dev_i2c_llinit+0xd8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002954:	69fa      	ldr	r2, [r7, #28]
 8002956:	fa01 f202 	lsl.w	r2, r1, r2
 800295a:	4611      	mov	r1, r2
 800295c:	4a27      	ldr	r2, [pc, #156]	@ (80029fc <dev_i2c_llinit+0xd8>)
 800295e:	430b      	orrs	r3, r1
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	e00f      	b.n	8002984 <dev_i2c_llinit+0x60>
		
	} else {		// I2C4
		/* Select clock source */
		out_w(RCC_D3CCIPR, (in_w(RCC_D3CCIPR) & ~RCC_D3CCIPR_I2C4SEL) |(DEVCNF_I2CSEL << 8));
 8002964:	4826      	ldr	r0, [pc, #152]	@ (8002a00 <dev_i2c_llinit+0xdc>)
 8002966:	f7ff fce0 	bl	800232a <in_w>
 800296a:	4603      	mov	r3, r0
 800296c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002970:	4619      	mov	r1, r3
 8002972:	4823      	ldr	r0, [pc, #140]	@ (8002a00 <dev_i2c_llinit+0xdc>)
 8002974:	f7ff fccc 	bl	8002310 <out_w>

		/* Enable module clock */
		*(_UW*)RCC_APB4ENR |= RCC_APB4ENR_I2C4EN;
 8002978:	4b22      	ldr	r3, [pc, #136]	@ (8002a04 <dev_i2c_llinit+0xe0>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a21      	ldr	r2, [pc, #132]	@ (8002a04 <dev_i2c_llinit+0xe0>)
 800297e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002982:	6013      	str	r3, [r2, #0]
	}
#endif
	out_w(I2C_CR1(unit), 0);				// I2C disable
 8002984:	4a20      	ldr	r2, [pc, #128]	@ (8002a08 <dev_i2c_llinit+0xe4>)
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800298c:	2100      	movs	r1, #0
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff fcbe 	bl	8002310 <out_w>
	out_w(I2C_TIMINGR(unit), I2C_TIMINGR_INIT);		// I2C Initial setting
 8002994:	4a1c      	ldr	r2, [pc, #112]	@ (8002a08 <dev_i2c_llinit+0xe4>)
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800299c:	3310      	adds	r3, #16
 800299e:	491b      	ldr	r1, [pc, #108]	@ (8002a0c <dev_i2c_llinit+0xe8>)
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7ff fcb5 	bl	8002310 <out_w>

	/* Interrupt handler definition */
	intno		= ll_devdat[unit].intno;
 80029a6:	491a      	ldr	r1, [pc, #104]	@ (8002a10 <dev_i2c_llinit+0xec>)
 80029a8:	69fa      	ldr	r2, [r7, #28]
 80029aa:	4613      	mov	r3, r2
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	4413      	add	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	440b      	add	r3, r1
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	61bb      	str	r3, [r7, #24]
	dint.intatr	= TA_HLNG;
 80029b8:	2301      	movs	r3, #1
 80029ba:	60fb      	str	r3, [r7, #12]
	dint.inthdr	= i2c_evhdr;
 80029bc:	4b15      	ldr	r3, [pc, #84]	@ (8002a14 <dev_i2c_llinit+0xf0>)
 80029be:	613b      	str	r3, [r7, #16]
	
	err = tk_def_int(intno, &dint);		// I2C event interrupt
 80029c0:	f107 030c 	add.w	r3, r7, #12
 80029c4:	4619      	mov	r1, r3
 80029c6:	69b8      	ldr	r0, [r7, #24]
 80029c8:	f003 fe20 	bl	800660c <tk_def_int>
 80029cc:	6178      	str	r0, [r7, #20]
	if(err < E_OK) return err;
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	da01      	bge.n	80029d8 <dev_i2c_llinit+0xb4>
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	e00b      	b.n	80029f0 <dev_i2c_llinit+0xcc>

	dint.inthdr	= i2c_erhdr;
 80029d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002a18 <dev_i2c_llinit+0xf4>)
 80029da:	613b      	str	r3, [r7, #16]
	err = tk_def_int(intno + 1, &dint);	// I2C error interrupt
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	3301      	adds	r3, #1
 80029e0:	f107 020c 	add.w	r2, r7, #12
 80029e4:	4611      	mov	r1, r2
 80029e6:	4618      	mov	r0, r3
 80029e8:	f003 fe10 	bl	800660c <tk_def_int>
 80029ec:	6178      	str	r0, [r7, #20]

	return err;
 80029ee:	697b      	ldr	r3, [r7, #20]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3720      	adds	r7, #32
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	58024454 	.word	0x58024454
 80029fc:	580244e8 	.word	0x580244e8
 8002a00:	58024458 	.word	0x58024458
 8002a04:	580244f4 	.word	0x580244f4
 8002a08:	0800ec40 	.word	0x0800ec40
 8002a0c:	60404e72 	.word	0x60404e72
 8002a10:	0800ec54 	.word	0x0800ec54
 8002a14:	08002341 	.word	0x08002341
 8002a18:	08002505 	.word	0x08002505

08002a1c <buff_init>:
	ID	wait_tskid;
	UB	data[DEVCONF_SER_BUFFSIZE];
} T_SER_BUFF;

Inline	void buff_init(T_SER_BUFF *buff)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
	buff->top = buff->tail = buff->wait_tskid = 0;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	609a      	str	r2, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	605a      	str	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	601a      	str	r2, [r3, #0]
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr
	...

08002a44 <dev_ser_get_snddat>:
/* Serial device driver low-level interface
 *
 *	Called from a low level interrupt handler.
 */
EXPORT BOOL dev_ser_get_snddat(UW unit, UW *data)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
	T_SER_BUFF	*p_buff;

	p_buff = &get_dcb_mem(unit, snd_buff);
 8002a4e:	4a19      	ldr	r2, [pc, #100]	@ (8002ab4 <dev_ser_get_snddat+0x70>)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a56:	332c      	adds	r3, #44	@ 0x2c
 8002a58:	60fb      	str	r3, [r7, #12]
	if(p_buff->top != p_buff->tail) {
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d021      	beq.n	8002aaa <dev_ser_get_snddat+0x66>
		*data = p_buff->data[p_buff->tail];
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	7b1b      	ldrb	r3, [r3, #12]
 8002a70:	461a      	mov	r2, r3
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	601a      	str	r2, [r3, #0]
		if(++p_buff->tail >= DEVCONF_SER_BUFFSIZE) p_buff->tail = 0;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	605a      	str	r2, [r3, #4]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b31      	cmp	r3, #49	@ 0x31
 8002a86:	d902      	bls.n	8002a8e <dev_ser_get_snddat+0x4a>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	605a      	str	r2, [r3, #4]

		if(p_buff->wait_tskid) {
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d007      	beq.n	8002aa6 <dev_ser_get_snddat+0x62>
			tk_wup_tsk( p_buff->wait_tskid);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f008 fe6e 	bl	800b77c <tk_wup_tsk>
			p_buff->wait_tskid = 0;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]
		}
		return TRUE;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <dev_ser_get_snddat+0x68>
	} else {
		return FALSE;
 8002aaa:	2300      	movs	r3, #0
	}
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}
 8002ab4:	24002980 	.word	0x24002980

08002ab8 <dev_ser_notify_rcv>:

EXPORT void dev_ser_notify_rcv(UW unit, UW data)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
	T_SER_BUFF	*p_buff;
	INT		next;

	p_buff = &get_dcb_mem( unit, rcv_buff);
 8002ac2:	4a1a      	ldr	r2, [pc, #104]	@ (8002b2c <dev_ser_notify_rcv+0x74>)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aca:	336c      	adds	r3, #108	@ 0x6c
 8002acc:	60bb      	str	r3, [r7, #8]
	next = p_buff->top + 1;
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	60fb      	str	r3, [r7, #12]
	if(next >= DEVCONF_SER_BUFFSIZE) next = 0;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2b31      	cmp	r3, #49	@ 0x31
 8002ada:	dd01      	ble.n	8002ae0 <dev_ser_notify_rcv+0x28>
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]
	if(next != p_buff->tail) {
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d00b      	beq.n	8002b02 <dev_ser_notify_rcv+0x4a>
		p_buff->data[p_buff->top] = data;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	b2d1      	uxtb	r1, r2
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	4413      	add	r3, r2
 8002af6:	460a      	mov	r2, r1
 8002af8:	731a      	strb	r2, [r3, #12]
		p_buff->top = next;
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	e003      	b.n	8002b0a <dev_ser_notify_rcv+0x52>
	} else {	
		dev_ser_notify_err( unit, DEV_SER_ERR_ROVR);	/* Buffer over flow */
 8002b02:	2180      	movs	r1, #128	@ 0x80
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f813 	bl	8002b30 <dev_ser_notify_err>
	}

	if(p_buff->wait_tskid) {
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d007      	beq.n	8002b22 <dev_ser_notify_rcv+0x6a>
		tk_wup_tsk( p_buff->wait_tskid);
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f008 fe30 	bl	800b77c <tk_wup_tsk>
		p_buff->wait_tskid = 0;
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	609a      	str	r2, [r3, #8]
	}

}
 8002b22:	bf00      	nop
 8002b24:	3710      	adds	r7, #16
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	24002980 	.word	0x24002980

08002b30 <dev_ser_notify_err>:

EXPORT void dev_ser_notify_err(UW unit, UW err)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
	get_dcb_mem(unit, com_error) |= err;	
 8002b3a:	4a08      	ldr	r2, [pc, #32]	@ (8002b5c <dev_ser_notify_err+0x2c>)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b42:	6959      	ldr	r1, [r3, #20]
 8002b44:	4a05      	ldr	r2, [pc, #20]	@ (8002b5c <dev_ser_notify_err+0x2c>)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	615a      	str	r2, [r3, #20]
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bc80      	pop	{r7}
 8002b5a:	4770      	bx	lr
 8002b5c:	24002980 	.word	0x24002980

08002b60 <set_atr_size>:
/*----------------------------------------------------------------------*/
/* Attribute data control
 */

LOCAL ER set_atr_size(T_DEVREQ *req)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
	switch(req->start) {
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b70:	d011      	beq.n	8002b96 <set_atr_size+0x36>
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	da1b      	bge.n	8002bae <set_atr_size+0x4e>
 8002b76:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8002b7a:	dc18      	bgt.n	8002bae <set_atr_size+0x4e>
 8002b7c:	f113 0f65 	cmn.w	r3, #101	@ 0x65
 8002b80:	da0d      	bge.n	8002b9e <set_atr_size+0x3e>
 8002b82:	f113 0f68 	cmn.w	r3, #104	@ 0x68
 8002b86:	d00a      	beq.n	8002b9e <set_atr_size+0x3e>
 8002b88:	f113 0f68 	cmn.w	r3, #104	@ 0x68
 8002b8c:	db0f      	blt.n	8002bae <set_atr_size+0x4e>
 8002b8e:	3367      	adds	r3, #103	@ 0x67
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d80c      	bhi.n	8002bae <set_atr_size+0x4e>
 8002b94:	e007      	b.n	8002ba6 <set_atr_size+0x46>
	case TDN_EVENT:			/* MBF ID for event notification */
		req->asize = sizeof(ID);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2204      	movs	r2, #4
 8002b9a:	61da      	str	r2, [r3, #28]
		break;
 8002b9c:	e00a      	b.n	8002bb4 <set_atr_size+0x54>
	case TDN_SER_MODE:		/* Communication mode */
	case TDN_SER_SPEED:		/* Communication speed */
	case TDN_SER_COMERR:		/* Communication Error */
		req->asize = sizeof(UW);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2204      	movs	r2, #4
 8002ba2:	61da      	str	r2, [r3, #28]
		break;
 8002ba4:	e006      	b.n	8002bb4 <set_atr_size+0x54>
	case TDN_SER_SNDTMO:		/* Send timeout */
	case TDN_SER_RCVTMO:		/* Receive timeout */
		req->asize = sizeof(TMO);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2204      	movs	r2, #4
 8002baa:	61da      	str	r2, [r3, #28]
		break;
 8002bac:	e002      	b.n	8002bb4 <set_atr_size+0x54>
	default:
		return E_PAR;
 8002bae:	f06f 0310 	mvn.w	r3, #16
 8002bb2:	e000      	b.n	8002bb6 <set_atr_size+0x56>
	}
	return E_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bc80      	pop	{r7}
 8002bbe:	4770      	bx	lr

08002bc0 <read_atr>:

LOCAL ER read_atr(T_SER_DCB *p_dcb, T_DEVREQ *req)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
	UINT	imask;
	ER	err;

	err = set_atr_size(req);
 8002bca:	6838      	ldr	r0, [r7, #0]
 8002bcc:	f7ff ffc8 	bl	8002b60 <set_atr_size>
 8002bd0:	60f8      	str	r0, [r7, #12]
	if(err != E_OK) return err;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <read_atr+0x1c>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	e04f      	b.n	8002c7c <read_atr+0xbc>

	if(req->size) {
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d04a      	beq.n	8002c7a <read_atr+0xba>
		switch(req->start) {
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8002bec:	dc12      	bgt.n	8002c14 <read_atr+0x54>
 8002bee:	f113 0f68 	cmn.w	r3, #104	@ 0x68
 8002bf2:	db3f      	blt.n	8002c74 <read_atr+0xb4>
 8002bf4:	3368      	adds	r3, #104	@ 0x68
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d83c      	bhi.n	8002c74 <read_atr+0xb4>
 8002bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8002c00 <read_atr+0x40>)
 8002bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c00:	08002c57 	.word	0x08002c57
 8002c04:	08002c4b 	.word	0x08002c4b
 8002c08:	08002c3f 	.word	0x08002c3f
 8002c0c:	08002c33 	.word	0x08002c33
 8002c10:	08002c27 	.word	0x08002c27
 8002c14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c18:	d12c      	bne.n	8002c74 <read_atr+0xb4>
		case TDN_EVENT:			/* MBF ID for event notification */
			*(ID*)req->buf = p_dcb->evtmbfid;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6892      	ldr	r2, [r2, #8]
 8002c22:	601a      	str	r2, [r3, #0]
			break;
 8002c24:	e029      	b.n	8002c7a <read_atr+0xba>
		case TDN_SER_MODE:		/* Communication mode */
			*(UW*)req->buf = p_dcb->com_mode;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	68d2      	ldr	r2, [r2, #12]
 8002c2e:	601a      	str	r2, [r3, #0]
			break;
 8002c30:	e023      	b.n	8002c7a <read_atr+0xba>
		case TDN_SER_SPEED:		/* Communication speed */
			*(UW*)req->buf = p_dcb->com_speed;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6912      	ldr	r2, [r2, #16]
 8002c3a:	601a      	str	r2, [r3, #0]
			break;
 8002c3c:	e01d      	b.n	8002c7a <read_atr+0xba>
		case TDN_SER_SNDTMO:		/* Send timeout */
			*(TMO*)req->buf = p_dcb->snd_tmo;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6992      	ldr	r2, [r2, #24]
 8002c46:	601a      	str	r2, [r3, #0]
			break;
 8002c48:	e017      	b.n	8002c7a <read_atr+0xba>
		case TDN_SER_RCVTMO:		/* Receive timeout */
			*(TMO*)req->buf = p_dcb->rcv_tmo;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	699b      	ldr	r3, [r3, #24]
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	69d2      	ldr	r2, [r2, #28]
 8002c52:	601a      	str	r2, [r3, #0]
			break;
 8002c54:	e011      	b.n	8002c7a <read_atr+0xba>
		case TDN_SER_COMERR:		/* Communication Error */
			DI(imask);
 8002c56:	f00a fd5a 	bl	800d70e <disint>
 8002c5a:	60b8      	str	r0, [r7, #8]
			*(UW*)req->buf = p_dcb->com_error;
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6952      	ldr	r2, [r2, #20]
 8002c64:	601a      	str	r2, [r3, #0]
			p_dcb->com_error = 0;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	615a      	str	r2, [r3, #20]
			EI(imask);
 8002c6c:	68b8      	ldr	r0, [r7, #8]
 8002c6e:	f00a fd36 	bl	800d6de <set_basepri>
			break;
 8002c72:	e002      	b.n	8002c7a <read_atr+0xba>
		case TDN_SER_BREAK:		/* Send Break */
			/* no break */
		default:
			err = E_PAR;
 8002c74:	f06f 0310 	mvn.w	r3, #16
 8002c78:	60fb      	str	r3, [r7, #12]
		}
	}
	return err;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <write_atr>:

LOCAL ER write_atr(T_SER_DCB *p_dcb, T_DEVREQ *req)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
	ER	err;

	err = set_atr_size(req);
 8002c8e:	6838      	ldr	r0, [r7, #0]
 8002c90:	f7ff ff66 	bl	8002b60 <set_atr_size>
 8002c94:	60f8      	str	r0, [r7, #12]
	if(err != E_OK) return err;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <write_atr+0x1c>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	e05f      	b.n	8002d60 <write_atr+0xdc>

	if(req->size) {
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d05a      	beq.n	8002d5e <write_atr+0xda>
		switch(req->start) {
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8002cb0:	dc14      	bgt.n	8002cdc <write_atr+0x58>
 8002cb2:	f113 0f69 	cmn.w	r3, #105	@ 0x69
 8002cb6:	db4f      	blt.n	8002d58 <write_atr+0xd4>
 8002cb8:	3369      	adds	r3, #105	@ 0x69
 8002cba:	2b05      	cmp	r3, #5
 8002cbc:	d84c      	bhi.n	8002d58 <write_atr+0xd4>
 8002cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8002cc4 <write_atr+0x40>)
 8002cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc4:	08002d43 	.word	0x08002d43
 8002cc8:	08002d59 	.word	0x08002d59
 8002ccc:	08002d37 	.word	0x08002d37
 8002cd0:	08002d2b 	.word	0x08002d2b
 8002cd4:	08002d0d 	.word	0x08002d0d
 8002cd8:	08002cef 	.word	0x08002cef
 8002cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ce0:	d13a      	bne.n	8002d58 <write_atr+0xd4>
		case TDN_EVENT:			/* Message buffer ID for event notification */
			p_dcb->evtmbfid = *(ID*)req->buf;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	609a      	str	r2, [r3, #8]
			break;
 8002cec:	e037      	b.n	8002d5e <write_atr+0xda>
		case TDN_SER_MODE:		/* Communication mode */
			p_dcb->com_mode = *(UW*)req->buf;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	60da      	str	r2, [r3, #12]
			err = dev_ser_llctl( p_dcb->unit, LLD_SER_MODE, p_dcb->com_mode);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6818      	ldr	r0, [r3, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	461a      	mov	r2, r3
 8002d02:	2100      	movs	r1, #0
 8002d04:	f000 fb6c 	bl	80033e0 <dev_ser_llctl>
 8002d08:	60f8      	str	r0, [r7, #12]
			break;
 8002d0a:	e028      	b.n	8002d5e <write_atr+0xda>
		case TDN_SER_SPEED:		/* Communication speed */
			p_dcb->com_speed = *(UW*)req->buf;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	611a      	str	r2, [r3, #16]
			err = dev_ser_llctl( p_dcb->unit, LLD_SER_SPEED, p_dcb->com_speed);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	2101      	movs	r1, #1
 8002d22:	f000 fb5d 	bl	80033e0 <dev_ser_llctl>
 8002d26:	60f8      	str	r0, [r7, #12]
			break;
 8002d28:	e019      	b.n	8002d5e <write_atr+0xda>
		case TDN_SER_SNDTMO:		/* Send timeout */
			p_dcb->snd_tmo = *(TMO*)req->buf;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	619a      	str	r2, [r3, #24]
			break;
 8002d34:	e013      	b.n	8002d5e <write_atr+0xda>
		case TDN_SER_RCVTMO:		/* Receive timeout */
			p_dcb->rcv_tmo = *(TMO*)req->buf;
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	61da      	str	r2, [r3, #28]
			break;
 8002d40:	e00d      	b.n	8002d5e <write_atr+0xda>
		case TDN_SER_BREAK:		/* Send Break */
			err = dev_ser_llctl( p_dcb->unit, LLD_SER_BREAK, *(UW*)req->buf);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6818      	ldr	r0, [r3, #0]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	2105      	movs	r1, #5
 8002d50:	f000 fb46 	bl	80033e0 <dev_ser_llctl>
 8002d54:	60f8      	str	r0, [r7, #12]
			break;
 8002d56:	e002      	b.n	8002d5e <write_atr+0xda>
		default:
			err = E_PAR;
 8002d58:	f06f 0310 	mvn.w	r3, #16
 8002d5c:	60fb      	str	r3, [r7, #12]
		}
	}
	return err;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <read_data>:
/*----------------------------------------------------------------------*/
/*　Device-specific data control
 */

LOCAL ER read_data( T_SER_DCB *p_dcb, T_DEVREQ *req)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
	UW		tail;
	UB		*pd;
	SZ		rsize;
	ER		err;

	p_buff	= &p_dcb->rcv_buff;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	336c      	adds	r3, #108	@ 0x6c
 8002d76:	60fb      	str	r3, [r7, #12]
	tail	= p_buff->tail;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	61fb      	str	r3, [r7, #28]
	pd	= req->buf;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	61bb      	str	r3, [r7, #24]
	rsize	= req->size;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	617b      	str	r3, [r7, #20]
	err	= E_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	613b      	str	r3, [r7, #16]

	if(rsize != 0 ) {		/* size != 0 : Receive data */
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d04a      	beq.n	8002e2a <read_data+0xc2>
		while(rsize) {
 8002d94:	e03d      	b.n	8002e12 <read_data+0xaa>
			DisableInt(p_dcb->intno_rcv);	/* Disable Receive Int. */
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f00a ff56 	bl	800dc4c <DisableInt>
			if(p_buff->top != tail) {
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	69fa      	ldr	r2, [r7, #28]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d01d      	beq.n	8002de6 <read_data+0x7e>
				*pd++ = p_buff->data[tail++];
 8002daa:	69fa      	ldr	r2, [r7, #28]
 8002dac:	1c53      	adds	r3, r2, #1
 8002dae:	61fb      	str	r3, [r7, #28]
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	1c59      	adds	r1, r3, #1
 8002db4:	61b9      	str	r1, [r7, #24]
 8002db6:	68f9      	ldr	r1, [r7, #12]
 8002db8:	440a      	add	r2, r1
 8002dba:	7b12      	ldrb	r2, [r2, #12]
 8002dbc:	701a      	strb	r2, [r3, #0]
				if(tail >= DEVCONF_SER_BUFFSIZE ) tail = 0;
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	2b31      	cmp	r3, #49	@ 0x31
 8002dc2:	d901      	bls.n	8002dc8 <read_data+0x60>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61fb      	str	r3, [r7, #28]
				p_buff->tail = tail;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	69fa      	ldr	r2, [r7, #28]
 8002dcc:	605a      	str	r2, [r3, #4]
				EnableInt(p_dcb->intno_rcv, p_dcb->int_pri);	/* Enable Receive Int. */
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1a      	ldr	r2, [r3, #32]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4610      	mov	r0, r2
 8002dda:	f00a ff19 	bl	800dc10 <EnableInt>
				rsize--;
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	3b01      	subs	r3, #1
 8002de2:	617b      	str	r3, [r7, #20]
 8002de4:	e015      	b.n	8002e12 <read_data+0xaa>
			} else {
				p_buff->wait_tskid = tk_get_tid();
 8002de6:	f008 f957 	bl	800b098 <tk_get_tid>
 8002dea:	4602      	mov	r2, r0
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	609a      	str	r2, [r3, #8]
				EnableInt(p_dcb->intno_rcv, p_dcb->int_pri);	/* Enable Receive Int. */
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a1a      	ldr	r2, [r3, #32]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	f00a ff08 	bl	800dc10 <EnableInt>
				err = tk_slp_tsk(p_dcb->rcv_tmo);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f008 fc4d 	bl	800b6a4 <tk_slp_tsk>
 8002e0a:	6138      	str	r0, [r7, #16]
				if( err != E_OK) break;
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d103      	bne.n	8002e1a <read_data+0xb2>
		while(rsize) {
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1be      	bne.n	8002d96 <read_data+0x2e>
 8002e18:	e000      	b.n	8002e1c <read_data+0xb4>
				if( err != E_OK) break;
 8002e1a:	bf00      	nop
			}
		}
		req->asize = req->size - rsize;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	695a      	ldr	r2, [r3, #20]
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	1ad2      	subs	r2, r2, r3
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	61da      	str	r2, [r3, #28]
 8002e28:	e00e      	b.n	8002e48 <read_data+0xe0>
	} else {		/* size = 0: Get the number of readable data */
		/* Disable Receive Int. */
		rsize = p_buff->top - p_buff->tail;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	617b      	str	r3, [r7, #20]
		/* Enable Receive Int. */
		if(rsize < 0) {
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	da02      	bge.n	8002e42 <read_data+0xda>
			rsize += DEVCONF_SER_BUFFSIZE;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	3332      	adds	r3, #50	@ 0x32
 8002e40:	617b      	str	r3, [r7, #20]
		}
		req->asize = rsize;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	61da      	str	r2, [r3, #28]
	}

	return err;
 8002e48:	693b      	ldr	r3, [r7, #16]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3720      	adds	r7, #32
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <write_data>:

LOCAL ER write_data( T_SER_DCB *p_dcb, T_DEVREQ *req)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b088      	sub	sp, #32
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	6039      	str	r1, [r7, #0]
	UB		*pd;
	INT		ssize;
	ER		err;
	BOOL		s;

	p_buff	= &p_dcb->snd_buff;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	332c      	adds	r3, #44	@ 0x2c
 8002e60:	60bb      	str	r3, [r7, #8]
	pd	= req->buf;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	61bb      	str	r3, [r7, #24]
	ssize	= req->size;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	617b      	str	r3, [r7, #20]
	err	= E_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	613b      	str	r3, [r7, #16]

	if(ssize != 0) {		/* size != 0 : Send data */
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d06c      	beq.n	8002f52 <write_data+0x100>
		while(ssize) {
 8002e78:	e05f      	b.n	8002f3a <write_data+0xe8>
			next = p_buff->top + 1;
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	61fb      	str	r3, [r7, #28]
			if(next >= DEVCONF_SER_BUFFSIZE) next = 0;
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	2b31      	cmp	r3, #49	@ 0x31
 8002e86:	d901      	bls.n	8002e8c <write_data+0x3a>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	61fb      	str	r3, [r7, #28]
			
			DisableInt(p_dcb->intno_snd);	/* Disable Send Int. */
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e90:	4618      	mov	r0, r3
 8002e92:	f00a fedb 	bl	800dc4c <DisableInt>
			if(next != p_buff->tail) {
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	69fa      	ldr	r2, [r7, #28]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d036      	beq.n	8002f0e <write_data+0xbc>
				s = FALSE;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	60fb      	str	r3, [r7, #12]
				if(p_buff->top == p_buff->tail) {
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d10e      	bne.n	8002ece <write_data+0x7c>
					s = (E_OK == dev_ser_llctl( p_dcb->unit, LLD_SER_SEND, *pd));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6818      	ldr	r0, [r3, #0]
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2104      	movs	r1, #4
 8002ebc:	f000 fa90 	bl	80033e0 <dev_ser_llctl>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	bf0c      	ite	eq
 8002ec6:	2301      	moveq	r3, #1
 8002ec8:	2300      	movne	r3, #0
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	60fb      	str	r3, [r7, #12]
				}
				if(s) {		/* Successful transmission. */
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <write_data+0x8a>
					pd++;
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	61bb      	str	r3, [r7, #24]
 8002eda:	e00c      	b.n	8002ef6 <write_data+0xa4>
				} else {	/* FIFO is full. */
					p_buff->data[p_buff->top] = *pd++;
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	61ba      	str	r2, [r7, #24]
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	6812      	ldr	r2, [r2, #0]
 8002ee6:	7819      	ldrb	r1, [r3, #0]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	4413      	add	r3, r2
 8002eec:	460a      	mov	r2, r1
 8002eee:	731a      	strb	r2, [r3, #12]
					p_buff->top = next;
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	69fa      	ldr	r2, [r7, #28]
 8002ef4:	601a      	str	r2, [r3, #0]
				}
				EnableInt(p_dcb->intno_snd, p_dcb->int_pri);	/* Enable Send Int. */
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efe:	4619      	mov	r1, r3
 8002f00:	4610      	mov	r0, r2
 8002f02:	f00a fe85 	bl	800dc10 <EnableInt>
				ssize--;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	e015      	b.n	8002f3a <write_data+0xe8>
			} else {
				p_buff->wait_tskid = tk_get_tid();
 8002f0e:	f008 f8c3 	bl	800b098 <tk_get_tid>
 8002f12:	4602      	mov	r2, r0
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	609a      	str	r2, [r3, #8]
				EnableInt(p_dcb->intno_snd, p_dcb->int_pri);	/* Enable Send Int. */
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f20:	4619      	mov	r1, r3
 8002f22:	4610      	mov	r0, r2
 8002f24:	f00a fe74 	bl	800dc10 <EnableInt>
				err = tk_slp_tsk(p_dcb->snd_tmo);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f008 fbb9 	bl	800b6a4 <tk_slp_tsk>
 8002f32:	6138      	str	r0, [r7, #16]
				if(err != E_OK) break;
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d103      	bne.n	8002f42 <write_data+0xf0>
		while(ssize) {
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d19c      	bne.n	8002e7a <write_data+0x28>
 8002f40:	e000      	b.n	8002f44 <write_data+0xf2>
				if(err != E_OK) break;
 8002f42:	bf00      	nop
			}
		}
		req->asize = req->size - ssize;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	695a      	ldr	r2, [r3, #20]
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	1ad2      	subs	r2, r2, r3
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	61da      	str	r2, [r3, #28]
 8002f50:	e01d      	b.n	8002f8e <write_data+0x13c>
	} else {		/* size = 0: Get the number of writable data */
		DisableInt(p_dcb->intno_snd);			/* Disable Send Int. */
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f56:	4618      	mov	r0, r3
 8002f58:	f00a fe78 	bl	800dc4c <DisableInt>
		ssize = p_buff->top - p_buff->tail;
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	617b      	str	r3, [r7, #20]
		EnableInt(p_dcb->intno_snd, p_dcb->int_pri);	/* Enable send Int. */
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f70:	4619      	mov	r1, r3
 8002f72:	4610      	mov	r0, r2
 8002f74:	f00a fe4c 	bl	800dc10 <EnableInt>
		if(ssize < 0) {
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	da02      	bge.n	8002f84 <write_data+0x132>
			ssize += DEVCONF_SER_BUFFSIZE;
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	3332      	adds	r3, #50	@ 0x32
 8002f82:	617b      	str	r3, [r7, #20]
		}
		req->asize = DEVCONF_SER_BUFFSIZE - ssize;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f1c3 0232 	rsb	r2, r3, #50	@ 0x32
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	61da      	str	r2, [r3, #28]
	}

	return err;
 8002f8e:	693b      	ldr	r3, [r7, #16]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3720      	adds	r7, #32
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <dev_ser_openfn>:
 */
/*----------------------------------------------------------------------
 * Open device
 */
ER dev_ser_openfn( ID devid, UINT omode, T_MSDI *p_msdi)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
	T_SER_DCB	*p_dcb;
	ER		err;

	p_dcb = (T_SER_DCB*)p_msdi->dmsdi.exinf;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	617b      	str	r3, [r7, #20]

	/* Device Open operation */
	p_dcb->omode = omode;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	605a      	str	r2, [r3, #4]
	buff_init(&p_dcb->snd_buff);
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	332c      	adds	r3, #44	@ 0x2c
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff fd31 	bl	8002a1c <buff_init>
	buff_init(&p_dcb->rcv_buff);
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	336c      	adds	r3, #108	@ 0x6c
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff fd2c 	bl	8002a1c <buff_init>

	err = dev_ser_llctl(p_dcb->unit, LLD_SER_START, 0);
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2102      	movs	r1, #2
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f000 fa07 	bl	80033e0 <dev_ser_llctl>
 8002fd2:	6138      	str	r0, [r7, #16]

	return err;
 8002fd4:	693b      	ldr	r3, [r7, #16]
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <dev_ser_closefn>:

/*----------------------------------------------------------------------
 * Close Device
 */
ER dev_ser_closefn( ID devid, UINT option, T_MSDI *p_msdi)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b086      	sub	sp, #24
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	60f8      	str	r0, [r7, #12]
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
	T_SER_DCB	*p_dcb;
	ER		err;

	p_dcb = (T_SER_DCB*)(p_msdi->dmsdi.exinf);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	617b      	str	r3, [r7, #20]

	/* Device Close operation */
	err = dev_ser_llctl(p_dcb->unit, LLD_SER_STOP, 0);
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2103      	movs	r1, #3
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 f9f1 	bl	80033e0 <dev_ser_llctl>
 8002ffe:	6138      	str	r0, [r7, #16]
	
	return err;
 8003000:	693b      	ldr	r3, [r7, #16]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}

0800300a <dev_ser_readfn>:

/*----------------------------------------------------------------------
 * Read Device
 */
ER dev_ser_readfn( T_DEVREQ *req, T_MSDI *p_msdi)
{
 800300a:	b580      	push	{r7, lr}
 800300c:	b084      	sub	sp, #16
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	6039      	str	r1, [r7, #0]
	T_SER_DCB	*p_dcb;
	ER		err;

	p_dcb = (T_SER_DCB*)(p_msdi->dmsdi.exinf);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	60bb      	str	r3, [r7, #8]

	if(req->start >= 0) {	// Device specific data
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	2b00      	cmp	r3, #0
 8003020:	db0f      	blt.n	8003042 <dev_ser_readfn+0x38>
		if( p_dcb->omode & TD_READ ) {
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	d005      	beq.n	800303a <dev_ser_readfn+0x30>
			err = read_data( p_dcb, req);
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	68b8      	ldr	r0, [r7, #8]
 8003032:	f7ff fe99 	bl	8002d68 <read_data>
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	e008      	b.n	800304c <dev_ser_readfn+0x42>
		} else {
			err = E_OACV;
 800303a:	f06f 031a 	mvn.w	r3, #26
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	e004      	b.n	800304c <dev_ser_readfn+0x42>
		}
	} else {		// Device attribute data
		err = read_atr( p_dcb, req);
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	68b8      	ldr	r0, [r7, #8]
 8003046:	f7ff fdbb 	bl	8002bc0 <read_atr>
 800304a:	60f8      	str	r0, [r7, #12]
	}

	return err;
 800304c:	68fb      	ldr	r3, [r7, #12]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <dev_ser_writefn>:

/*----------------------------------------------------------------------
 * Write Device
 */
ER dev_ser_writefn( T_DEVREQ *req, T_MSDI *p_msdi)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b084      	sub	sp, #16
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
 800305e:	6039      	str	r1, [r7, #0]
	T_SER_DCB	*p_dcb;
	ER		err;

	p_dcb = (T_SER_DCB*)(p_msdi->dmsdi.exinf);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	60bb      	str	r3, [r7, #8]

	if(req->start >= 0) {	// Device specific data
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	2b00      	cmp	r3, #0
 800306c:	db0f      	blt.n	800308e <dev_ser_writefn+0x38>
		if( p_dcb->omode & TD_WRITE) {
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <dev_ser_writefn+0x30>
			err = write_data( p_dcb, req);
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	68b8      	ldr	r0, [r7, #8]
 800307e:	f7ff fee8 	bl	8002e52 <write_data>
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	e008      	b.n	8003098 <dev_ser_writefn+0x42>
		} else {
			err = E_OACV;
 8003086:	f06f 031a 	mvn.w	r3, #26
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	e004      	b.n	8003098 <dev_ser_writefn+0x42>
		}
	} else {		// Device attribute data
		err = write_atr( p_dcb, req);
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	68b8      	ldr	r0, [r7, #8]
 8003092:	f7ff fdf7 	bl	8002c84 <write_atr>
 8003096:	60f8      	str	r0, [r7, #12]
	}

	return err;
 8003098:	68fb      	ldr	r3, [r7, #12]
}
 800309a:	4618      	mov	r0, r3
 800309c:	3710      	adds	r7, #16
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <dev_ser_eventfn>:

/*----------------------------------------------------------------------
 * Event Device
 */
ER dev_ser_eventfn( INT evttyp, void *evtinf, T_MSDI *p_msdi)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b085      	sub	sp, #20
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	60f8      	str	r0, [r7, #12]
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
	return E_NOSPT;
 80030ae:	f06f 0308 	mvn.w	r3, #8
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <dev_init_ser>:

/*----------------------------------------------------------------------
 * Serial communication Device initialization and registration
 */
EXPORT ER dev_init_ser( UW unit )
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b094      	sub	sp, #80	@ 0x50
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
	T_MSDI		*p_msdi;
	T_DMSDI		dmsdi;
	ER		err;
	INT		i;

	if( unit >= DEV_SER_UNITNM) return E_PAR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b09      	cmp	r3, #9
 80030c8:	d902      	bls.n	80030d0 <dev_init_ser+0x14>
 80030ca:	f06f 0310 	mvn.w	r3, #16
 80030ce:	e081      	b.n	80031d4 <dev_init_ser+0x118>

#if TK_SUPPORT_MEMLIB
	p_dcb = (T_SER_DCB*)Kmalloc(sizeof(T_SER_DCB));
 80030d0:	20ac      	movs	r0, #172	@ 0xac
 80030d2:	f00a fad1 	bl	800d678 <Kmalloc>
 80030d6:	64b8      	str	r0, [r7, #72]	@ 0x48
	if( p_dcb == NULL) return E_NOMEM;
 80030d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d102      	bne.n	80030e4 <dev_init_ser+0x28>
 80030de:	f06f 0320 	mvn.w	r3, #32
 80030e2:	e077      	b.n	80031d4 <dev_init_ser+0x118>
	dev_ser_cb[unit]	= p_dcb;
 80030e4:	493d      	ldr	r1, [pc, #244]	@ (80031dc <dev_init_ser+0x120>)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#else
	p_dcb = &dev_ser_cb[unit];
#endif

	/* Device registration information */
	dmsdi.exinf	= p_dcb;
 80030ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030f0:	60bb      	str	r3, [r7, #8]
	dmsdi.drvatr	= 0;			/* Driver attributes */
 80030f2:	2300      	movs	r3, #0
 80030f4:	61bb      	str	r3, [r7, #24]
	dmsdi.devatr	= TDK_UNDEF;		/* Device attributes */
 80030f6:	2300      	movs	r3, #0
 80030f8:	61fb      	str	r3, [r7, #28]
	dmsdi.nsub	= 0;			/* Number of subunits */
 80030fa:	2300      	movs	r3, #0
 80030fc:	623b      	str	r3, [r7, #32]
	dmsdi.blksz	= 1;			/* Unique data block size (-1 = unknown) */
 80030fe:	2301      	movs	r3, #1
 8003100:	627b      	str	r3, [r7, #36]	@ 0x24
	dmsdi.openfn	= dev_ser_openfn;
 8003102:	4b37      	ldr	r3, [pc, #220]	@ (80031e0 <dev_init_ser+0x124>)
 8003104:	62bb      	str	r3, [r7, #40]	@ 0x28
	dmsdi.closefn	= dev_ser_closefn;
 8003106:	4b37      	ldr	r3, [pc, #220]	@ (80031e4 <dev_init_ser+0x128>)
 8003108:	62fb      	str	r3, [r7, #44]	@ 0x2c
	dmsdi.readfn	= dev_ser_readfn;
 800310a:	4b37      	ldr	r3, [pc, #220]	@ (80031e8 <dev_init_ser+0x12c>)
 800310c:	633b      	str	r3, [r7, #48]	@ 0x30
	dmsdi.writefn	= dev_ser_writefn;
 800310e:	4b37      	ldr	r3, [pc, #220]	@ (80031ec <dev_init_ser+0x130>)
 8003110:	637b      	str	r3, [r7, #52]	@ 0x34
	dmsdi.eventfn	= dev_ser_eventfn;
 8003112:	4b37      	ldr	r3, [pc, #220]	@ (80031f0 <dev_init_ser+0x134>)
 8003114:	63bb      	str	r3, [r7, #56]	@ 0x38
	
	knl_strcpy( (char*)dmsdi.devnm, DEVCNF_SER_DEVNAME);
 8003116:	f107 0308 	add.w	r3, r7, #8
 800311a:	3304      	adds	r3, #4
 800311c:	4935      	ldr	r1, [pc, #212]	@ (80031f4 <dev_init_ser+0x138>)
 800311e:	4618      	mov	r0, r3
 8003120:	f00a f855 	bl	800d1ce <knl_strcpy>
	i = knl_strlen(DEVCNF_SER_DEVNAME);
 8003124:	4833      	ldr	r0, [pc, #204]	@ (80031f4 <dev_init_ser+0x138>)
 8003126:	f00a f841 	bl	800d1ac <knl_strlen>
 800312a:	6478      	str	r0, [r7, #68]	@ 0x44
	dmsdi.devnm[i] = (UB)('a' + unit);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	b2db      	uxtb	r3, r3
 8003130:	3361      	adds	r3, #97	@ 0x61
 8003132:	b2d9      	uxtb	r1, r3
 8003134:	f107 020c 	add.w	r2, r7, #12
 8003138:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800313a:	4413      	add	r3, r2
 800313c:	460a      	mov	r2, r1
 800313e:	701a      	strb	r2, [r3, #0]
	dmsdi.devnm[i+1] = 0;
 8003140:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003142:	3301      	adds	r3, #1
 8003144:	3350      	adds	r3, #80	@ 0x50
 8003146:	443b      	add	r3, r7
 8003148:	2200      	movs	r2, #0
 800314a:	f803 2c44 	strb.w	r2, [r3, #-68]

	err = msdi_def_dev( &dmsdi, &idev, &p_msdi);
 800314e:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8003152:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8003156:	f107 0308 	add.w	r3, r7, #8
 800315a:	4618      	mov	r0, r3
 800315c:	f7fe fdf8 	bl	8001d50 <msdi_def_dev>
 8003160:	64f8      	str	r0, [r7, #76]	@ 0x4c
	if(err != E_OK) goto err_2;
 8003162:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003164:	2b00      	cmp	r3, #0
 8003166:	d130      	bne.n	80031ca <dev_init_ser+0x10e>

	p_dcb->unit	= unit;
 8003168:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	601a      	str	r2, [r3, #0]
	p_dcb->evtmbfid	= idev.evtmbfid;
 800316e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003170:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003172:	609a      	str	r2, [r3, #8]

	/* Low-level device initialization */
	err = dev_ser_llinit( p_dcb);
 8003174:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8003176:	f000 f9e5 	bl	8003544 <dev_ser_llinit>
 800317a:	64f8      	str	r0, [r7, #76]	@ 0x4c
	if(err != E_OK) goto err_1;
 800317c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800317e:	2b00      	cmp	r3, #0
 8003180:	d11d      	bne.n	80031be <dev_init_ser+0x102>

	/* Set default value for attribute data */
	p_dcb->com_speed = DEVCNF_SER_SPEED;
 8003182:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003184:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003188:	611a      	str	r2, [r3, #16]
	dev_ser_llctl( unit, LLD_SER_SPEED, DEVCNF_SER_SPEED);
 800318a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800318e:	2101      	movs	r1, #1
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f925 	bl	80033e0 <dev_ser_llctl>
	p_dcb->com_mode = DEVCNF_SER_MODE;
 8003196:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003198:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800319c:	60da      	str	r2, [r3, #12]
	dev_ser_llctl( unit, LLD_SER_MODE, DEVCNF_SER_MODE);
 800319e:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80031a2:	2100      	movs	r1, #0
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f91b 	bl	80033e0 <dev_ser_llctl>
	p_dcb->snd_tmo = DEVCNF_SER_SND_TMO;
 80031aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80031b0:	619a      	str	r2, [r3, #24]
	p_dcb->rcv_tmo = DEVCNF_SER_RCV_TMO;
 80031b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031b4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80031b8:	61da      	str	r2, [r3, #28]

	return E_OK;
 80031ba:	2300      	movs	r3, #0
 80031bc:	e00a      	b.n	80031d4 <dev_init_ser+0x118>
	if(err != E_OK) goto err_1;
 80031be:	bf00      	nop

err_1:
	msdi_del_dev(p_msdi);
 80031c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fe fe3c 	bl	8001e40 <msdi_del_dev>
 80031c8:	e000      	b.n	80031cc <dev_init_ser+0x110>
	if(err != E_OK) goto err_2;
 80031ca:	bf00      	nop
err_2:
	Kfree(p_dcb);
 80031cc:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80031ce:	f00a fa7b 	bl	800d6c8 <Kfree>
	return err;
 80031d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3750      	adds	r7, #80	@ 0x50
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	24002980 	.word	0x24002980
 80031e0:	08002f99 	.word	0x08002f99
 80031e4:	08002fdf 	.word	0x08002fdf
 80031e8:	0800300b 	.word	0x0800300b
 80031ec:	08003057 	.word	0x08003057
 80031f0:	080030a3 	.word	0x080030a3
 80031f4:	0800e8e4 	.word	0x0800e8e4

080031f8 <out_w>:
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
	*(_UW*)port = data;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	601a      	str	r2, [r3, #0]
}
 8003208:	bf00      	nop
 800320a:	370c      	adds	r7, #12
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr

08003212 <in_w>:
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
	return *(_UW*)port;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
}
 800321e:	4618      	mov	r0, r3
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	bc80      	pop	{r7}
 8003226:	4770      	bx	lr

08003228 <usart_inthdr>:

/*----------------------------------------------------------------------
 * Interrupt handler
 */
void usart_inthdr( UINT intno)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b086      	sub	sp, #24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
	UW	data, err;
	UW	isr;
	W	unit;

	for( unit = 0; unit < DEV_SER_UNITNM; unit++ ) {
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	e009      	b.n	800324a <usart_inthdr+0x22>
		if( ll_devdat[unit].intno == intno) break;
 8003236:	4a39      	ldr	r2, [pc, #228]	@ (800331c <usart_inthdr+0xf4>)
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	429a      	cmp	r2, r3
 8003242:	d006      	beq.n	8003252 <usart_inthdr+0x2a>
	for( unit = 0; unit < DEV_SER_UNITNM; unit++ ) {
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	3301      	adds	r3, #1
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2b09      	cmp	r3, #9
 800324e:	ddf2      	ble.n	8003236 <usart_inthdr+0xe>
 8003250:	e000      	b.n	8003254 <usart_inthdr+0x2c>
		if( ll_devdat[unit].intno == intno) break;
 8003252:	bf00      	nop
	}
	if( unit >= DEV_SER_UNITNM) return;
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2b09      	cmp	r3, #9
 8003258:	dc5c      	bgt.n	8003314 <usart_inthdr+0xec>
	
	isr = in_w(USART_ISR(unit));			// Get interrupt factor
 800325a:	4a31      	ldr	r2, [pc, #196]	@ (8003320 <usart_inthdr+0xf8>)
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003262:	331c      	adds	r3, #28
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff ffd4 	bl	8003212 <in_w>
 800326a:	6138      	str	r0, [r7, #16]
	out_w(USART_ICR(unit), USART_ICR_ALL);		// Clear Interrupt
 800326c:	4a2c      	ldr	r2, [pc, #176]	@ (8003320 <usart_inthdr+0xf8>)
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003274:	3320      	adds	r3, #32
 8003276:	492b      	ldr	r1, [pc, #172]	@ (8003324 <usart_inthdr+0xfc>)
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff ffbd 	bl	80031f8 <out_w>
	ClearInt(intno);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f00a fcff 	bl	800dc82 <ClearInt>

	/* Reception process */
	if( isr & USART_ISR_RXNE) {
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f003 0320 	and.w	r3, r3, #32
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00f      	beq.n	80032ae <usart_inthdr+0x86>
		data = in_w(USART_RDR(unit));
 800328e:	4a24      	ldr	r2, [pc, #144]	@ (8003320 <usart_inthdr+0xf8>)
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003296:	3324      	adds	r3, #36	@ 0x24
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff ffba 	bl	8003212 <in_w>
 800329e:	4603      	mov	r3, r0
 80032a0:	60bb      	str	r3, [r7, #8]
		dev_ser_notify_rcv(unit, data);	/* Notify the main process of data reception. */
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	4611      	mov	r1, r2
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff fc05 	bl	8002ab8 <dev_ser_notify_rcv>
	}

	/* Transmission process */
	if( isr & USART_ISR_TXE ) {
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d020      	beq.n	80032fa <usart_inthdr+0xd2>
		if( dev_ser_get_snddat(unit, &data)) {
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	f107 0208 	add.w	r2, r7, #8
 80032be:	4611      	mov	r1, r2
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff fbbf 	bl	8002a44 <dev_ser_get_snddat>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00a      	beq.n	80032e2 <usart_inthdr+0xba>
			out_w(USART_TDR(unit), data);
 80032cc:	4a14      	ldr	r2, [pc, #80]	@ (8003320 <usart_inthdr+0xf8>)
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d4:	3328      	adds	r3, #40	@ 0x28
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	4611      	mov	r1, r2
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff ff8c 	bl	80031f8 <out_w>
 80032e0:	e00b      	b.n	80032fa <usart_inthdr+0xd2>
		} else {
			*(_UW*)( USART_CR1(unit)) &= ~USART_CR1_TXFNFIE;	// Disable TXE interrupt
 80032e2:	4a0f      	ldr	r2, [pc, #60]	@ (8003320 <usart_inthdr+0xf8>)
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	490c      	ldr	r1, [pc, #48]	@ (8003320 <usart_inthdr+0xf8>)
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80032f4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032f8:	6013      	str	r3, [r2, #0]
		}
	}

	/* Error handling */
	err = isr & USART_ISR_ERR;
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	f003 030f 	and.w	r3, r3, #15
 8003300:	60fb      	str	r3, [r7, #12]
	if(err) {
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d006      	beq.n	8003316 <usart_inthdr+0xee>
		dev_ser_notify_err(unit, err);	/* Notify the main process of this error. */
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	68f9      	ldr	r1, [r7, #12]
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff fc0f 	bl	8002b30 <dev_ser_notify_err>
 8003312:	e000      	b.n	8003316 <usart_inthdr+0xee>
	if( unit >= DEV_SER_UNITNM) return;
 8003314:	bf00      	nop
	}
}
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	0800ecb8 	.word	0x0800ecb8
 8003320:	0800ec90 	.word	0x0800ec90
 8003324:	00126bff 	.word	0x00126bff

08003328 <start_com>:
 * Set mode & Start communication
 */
#define	MASK_MODE_CR1	(USART_CR1_M1| USART_CR1_M0|USART_CR1_PS|USART_CR1_PCE)

LOCAL void start_com(UW unit, UW mode, UW speed)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
	out_w(USART_CR2(unit), mode & USART_CR2_STOP);		// Set stop-bit
 8003334:	4a19      	ldr	r2, [pc, #100]	@ (800339c <start_com+0x74>)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800333c:	1d1a      	adds	r2, r3, #4
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003344:	4619      	mov	r1, r3
 8003346:	4610      	mov	r0, r2
 8003348:	f7ff ff56 	bl	80031f8 <out_w>
	out_w(USART_CR3(unit), mode & (USART_CR3_RTSE | USART_CR3_CTSE)); // Set RTS/CTS
 800334c:	4a13      	ldr	r2, [pc, #76]	@ (800339c <start_com+0x74>)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003354:	f103 0208 	add.w	r2, r3, #8
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800335e:	4619      	mov	r1, r3
 8003360:	4610      	mov	r0, r2
 8003362:	f7ff ff49 	bl	80031f8 <out_w>
	out_w(USART_BRR(unit), speed);				// Set communication Speed
 8003366:	4a0d      	ldr	r2, [pc, #52]	@ (800339c <start_com+0x74>)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800336e:	330c      	adds	r3, #12
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff ff40 	bl	80031f8 <out_w>

	/* Set mode & Start communication */
	out_w(USART_CR1(unit),
 8003378:	4a08      	ldr	r2, [pc, #32]	@ (800339c <start_com+0x74>)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
		USART_CR1_RXFNEIE | USART_CR1_PEIE		// Unmask Receive & Parity error interrupt
		| (mode & MASK_MODE_CR1 )			// Set word length & parity
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	4b07      	ldr	r3, [pc, #28]	@ (80033a0 <start_com+0x78>)
 8003384:	4013      	ands	r3, r2
	out_w(USART_CR1(unit),
 8003386:	f240 122d 	movw	r2, #301	@ 0x12d
 800338a:	431a      	orrs	r2, r3
 800338c:	4611      	mov	r1, r2
 800338e:	f7ff ff33 	bl	80031f8 <out_w>
		| USART_CR1_UE | USART_CR1_RE | USART_CR1_TE	// USART enable
	);
}
 8003392:	bf00      	nop
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	0800ec90 	.word	0x0800ec90
 80033a0:	10001600 	.word	0x10001600

080033a4 <stop_com>:

/*----------------------------------------------------------------------
 * Stop communication
 */
LOCAL void stop_com(UW unit)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
	if(unit != DEVCNF_SER_DBGUN) {
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d008      	beq.n	80033c4 <stop_com+0x20>
		out_w(USART_CR1(unit), 0);
 80033b2:	4a0a      	ldr	r2, [pc, #40]	@ (80033dc <stop_com+0x38>)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ba:	2100      	movs	r1, #0
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff ff1b 	bl	80031f8 <out_w>
	} else {	/* Used by T-Monitor */
		out_w(USART_CR1(unit), USART_CR1_DEBUG);
	}
}
 80033c2:	e007      	b.n	80033d4 <stop_com+0x30>
		out_w(USART_CR1(unit), USART_CR1_DEBUG);
 80033c4:	4a05      	ldr	r2, [pc, #20]	@ (80033dc <stop_com+0x38>)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033cc:	210d      	movs	r1, #13
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff ff12 	bl	80031f8 <out_w>
}
 80033d4:	bf00      	nop
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	0800ec90 	.word	0x0800ec90

080033e0 <dev_ser_llctl>:

/*----------------------------------------------------------------------
 * Low level device control
 */
EXPORT ER dev_ser_llctl( UW unit, INT cmd, UW parm)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
	ER	err	= E_OK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]

	switch(cmd) {
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2b05      	cmp	r3, #5
 80033f4:	f200 8097 	bhi.w	8003526 <dev_ser_llctl+0x146>
 80033f8:	a201      	add	r2, pc, #4	@ (adr r2, 8003400 <dev_ser_llctl+0x20>)
 80033fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fe:	bf00      	nop
 8003400:	08003419 	.word	0x08003419
 8003404:	08003425 	.word	0x08003425
 8003408:	0800343f 	.word	0x0800343f
 800340c:	080034a5 	.word	0x080034a5
 8003410:	080034bb 	.word	0x080034bb
 8003414:	0800350d 	.word	0x0800350d
	case LLD_SER_MODE:	/* Set Communication mode */
		ll_devcb[unit].mode = parm;
 8003418:	4945      	ldr	r1, [pc, #276]	@ (8003530 <dev_ser_llctl+0x150>)
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		break;
 8003422:	e080      	b.n	8003526 <dev_ser_llctl+0x146>
	
	case LLD_SER_SPEED:	/* Set Communication Speed */
		ll_devcb[unit].speed = ((PCLK1*1000*1000) + parm/2)/parm;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	085a      	lsrs	r2, r3, #1
 8003428:	4b42      	ldr	r3, [pc, #264]	@ (8003534 <dev_ser_llctl+0x154>)
 800342a:	4413      	add	r3, r2
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003432:	493f      	ldr	r1, [pc, #252]	@ (8003530 <dev_ser_llctl+0x150>)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	440b      	add	r3, r1
 800343a:	605a      	str	r2, [r3, #4]
		break;
 800343c:	e073      	b.n	8003526 <dev_ser_llctl+0x146>
	
	case LLD_SER_START:	/* Start communication */
		out_w(USART_CR1(unit), 0);
 800343e:	4a3e      	ldr	r2, [pc, #248]	@ (8003538 <dev_ser_llctl+0x158>)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003446:	2100      	movs	r1, #0
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff fed5 	bl	80031f8 <out_w>
		out_w(USART_ICR(unit), USART_ICR_ALL);			// Clear interrupt
 800344e:	4a3a      	ldr	r2, [pc, #232]	@ (8003538 <dev_ser_llctl+0x158>)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003456:	3320      	adds	r3, #32
 8003458:	4938      	ldr	r1, [pc, #224]	@ (800353c <dev_ser_llctl+0x15c>)
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff fecc 	bl	80031f8 <out_w>
		ClearInt(ll_devdat[unit].intno);
 8003460:	4a37      	ldr	r2, [pc, #220]	@ (8003540 <dev_ser_llctl+0x160>)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003468:	4618      	mov	r0, r3
 800346a:	f00a fc0a 	bl	800dc82 <ClearInt>
		EnableInt(ll_devdat[unit].intno, ll_devdat[unit].intpri);	// Enable Interrupt
 800346e:	4a34      	ldr	r2, [pc, #208]	@ (8003540 <dev_ser_llctl+0x160>)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8003476:	4932      	ldr	r1, [pc, #200]	@ (8003540 <dev_ser_llctl+0x160>)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	440b      	add	r3, r1
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	4619      	mov	r1, r3
 8003482:	4610      	mov	r0, r2
 8003484:	f00a fbc4 	bl	800dc10 <EnableInt>
		start_com( unit, ll_devcb[unit].mode, ll_devcb[unit].speed);
 8003488:	4a29      	ldr	r2, [pc, #164]	@ (8003530 <dev_ser_llctl+0x150>)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8003490:	4a27      	ldr	r2, [pc, #156]	@ (8003530 <dev_ser_llctl+0x150>)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	4413      	add	r3, r2
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	461a      	mov	r2, r3
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f7ff ff43 	bl	8003328 <start_com>
		break;
 80034a2:	e040      	b.n	8003526 <dev_ser_llctl+0x146>
	
	case LLD_SER_STOP:
		DisableInt(ll_devdat[unit].intno);
 80034a4:	4a26      	ldr	r2, [pc, #152]	@ (8003540 <dev_ser_llctl+0x160>)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f00a fbcd 	bl	800dc4c <DisableInt>
		stop_com(unit);
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f7ff ff76 	bl	80033a4 <stop_com>
		break;
 80034b8:	e035      	b.n	8003526 <dev_ser_llctl+0x146>

	case LLD_SER_SEND:
		if(in_w(USART_ISR(unit)) & USART_ISR_TXE) {
 80034ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003538 <dev_ser_llctl+0x158>)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034c2:	331c      	adds	r3, #28
 80034c4:	4618      	mov	r0, r3
 80034c6:	f7ff fea4 	bl	8003212 <in_w>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d017      	beq.n	8003504 <dev_ser_llctl+0x124>
			out_w(USART_TDR(unit), parm);			// Set Transmission data
 80034d4:	4a18      	ldr	r2, [pc, #96]	@ (8003538 <dev_ser_llctl+0x158>)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034dc:	3328      	adds	r3, #40	@ 0x28
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7ff fe89 	bl	80031f8 <out_w>
			*(_UW*)( USART_CR1(unit)) |= USART_CR1_TXFNFIE;	// Enable TXE interrupt
 80034e6:	4a14      	ldr	r2, [pc, #80]	@ (8003538 <dev_ser_llctl+0x158>)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4911      	ldr	r1, [pc, #68]	@ (8003538 <dev_ser_llctl+0x158>)
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80034f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034fc:	6013      	str	r3, [r2, #0]
			err = E_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
		} else {
			err = E_BUSY;
		}
		break;
 8003502:	e010      	b.n	8003526 <dev_ser_llctl+0x146>
			err = E_BUSY;
 8003504:	f06f 0340 	mvn.w	r3, #64	@ 0x40
 8003508:	617b      	str	r3, [r7, #20]
		break;
 800350a:	e00c      	b.n	8003526 <dev_ser_llctl+0x146>

	case LLD_SER_BREAK:	/* Send Break */
		if(parm) {
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d008      	beq.n	8003524 <dev_ser_llctl+0x144>
			out_w(USART_RQR(unit), USART_RQR_SBKRQ);
 8003512:	4a09      	ldr	r2, [pc, #36]	@ (8003538 <dev_ser_llctl+0x158>)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800351a:	3318      	adds	r3, #24
 800351c:	2102      	movs	r1, #2
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff fe6a 	bl	80031f8 <out_w>
		}
		break;
 8003524:	bf00      	nop
	}

	return err;
 8003526:	697b      	ldr	r3, [r7, #20]
}
 8003528:	4618      	mov	r0, r3
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	240029a8 	.word	0x240029a8
 8003534:	082a7440 	.word	0x082a7440
 8003538:	0800ec90 	.word	0x0800ec90
 800353c:	00126bff 	.word	0x00126bff
 8003540:	0800ecb8 	.word	0x0800ecb8

08003544 <dev_ser_llinit>:

/*----------------------------------------------------------------------
 * Device initialization
 */
EXPORT ER dev_ser_llinit( T_SER_DCB *p_dcb)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
	const T_DINT	dint = {
 800354c:	4a48      	ldr	r2, [pc, #288]	@ (8003670 <dev_ser_llinit+0x12c>)
 800354e:	f107 0308 	add.w	r3, r7, #8
 8003552:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003556:	e883 0003 	stmia.w	r3, {r0, r1}
		.inthdr	= usart_inthdr,
	};
	UW	unit;
	ER	err;

	unit = p_dcb->unit;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	617b      	str	r3, [r7, #20]

#if DEVCONF_SER_INIT_MCLK
	/* Select clock source */
	out_w(RCC_D2CCIP2R, (in_w(RCC_D2CCIP2R) & ~RCC_D2CCIP2R_USARTxSEL) | DEVCNF_USARTxSEL_INIT );
 8003560:	4844      	ldr	r0, [pc, #272]	@ (8003674 <dev_ser_llinit+0x130>)
 8003562:	f7ff fe56 	bl	8003212 <in_w>
 8003566:	4603      	mov	r3, r0
 8003568:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800356c:	4619      	mov	r1, r3
 800356e:	4841      	ldr	r0, [pc, #260]	@ (8003674 <dev_ser_llinit+0x130>)
 8003570:	f7ff fe42 	bl	80031f8 <out_w>

	/* Enable module clock */
	switch(unit) {
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2b09      	cmp	r3, #9
 8003578:	d855      	bhi.n	8003626 <dev_ser_llinit+0xe2>
 800357a:	a201      	add	r2, pc, #4	@ (adr r2, 8003580 <dev_ser_llinit+0x3c>)
 800357c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003580:	080035a9 	.word	0x080035a9
 8003584:	080035b7 	.word	0x080035b7
 8003588:	080035c5 	.word	0x080035c5
 800358c:	080035d3 	.word	0x080035d3
 8003590:	080035e1 	.word	0x080035e1
 8003594:	080035ef 	.word	0x080035ef
 8003598:	080035fd 	.word	0x080035fd
 800359c:	0800360b 	.word	0x0800360b
 80035a0:	08003619 	.word	0x08003619
 80035a4:	08003627 	.word	0x08003627
	case 0:	// USART1
		*(_UW*)RCC_APB2ENR |= RCC_APB2ENR_USART1EN;
 80035a8:	4b33      	ldr	r3, [pc, #204]	@ (8003678 <dev_ser_llinit+0x134>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a32      	ldr	r2, [pc, #200]	@ (8003678 <dev_ser_llinit+0x134>)
 80035ae:	f043 0310 	orr.w	r3, r3, #16
 80035b2:	6013      	str	r3, [r2, #0]
		break;
 80035b4:	e037      	b.n	8003626 <dev_ser_llinit+0xe2>
	case 1:	// USART2
		*(_UW*)RCC_APB1LENR |= RCC_APB1LENR_USART2EN;
 80035b6:	4b31      	ldr	r3, [pc, #196]	@ (800367c <dev_ser_llinit+0x138>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a30      	ldr	r2, [pc, #192]	@ (800367c <dev_ser_llinit+0x138>)
 80035bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035c0:	6013      	str	r3, [r2, #0]
		break;
 80035c2:	e030      	b.n	8003626 <dev_ser_llinit+0xe2>
	case 2:	// USART3
		*(_UW*)RCC_APB1LENR |= RCC_APB1LENR_USART3EN;
 80035c4:	4b2d      	ldr	r3, [pc, #180]	@ (800367c <dev_ser_llinit+0x138>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a2c      	ldr	r2, [pc, #176]	@ (800367c <dev_ser_llinit+0x138>)
 80035ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035ce:	6013      	str	r3, [r2, #0]
		break;
 80035d0:	e029      	b.n	8003626 <dev_ser_llinit+0xe2>
	case 3:	// UART4
		*(_UW*)RCC_APB1LENR |= RCC_APB1LENR_UART4EN;
 80035d2:	4b2a      	ldr	r3, [pc, #168]	@ (800367c <dev_ser_llinit+0x138>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a29      	ldr	r2, [pc, #164]	@ (800367c <dev_ser_llinit+0x138>)
 80035d8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80035dc:	6013      	str	r3, [r2, #0]
		break;
 80035de:	e022      	b.n	8003626 <dev_ser_llinit+0xe2>
	case 4:	// UART5
		*(_UW*)RCC_APB1LENR |= RCC_APB1LENR_UART5EN;
 80035e0:	4b26      	ldr	r3, [pc, #152]	@ (800367c <dev_ser_llinit+0x138>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a25      	ldr	r2, [pc, #148]	@ (800367c <dev_ser_llinit+0x138>)
 80035e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035ea:	6013      	str	r3, [r2, #0]
		break;
 80035ec:	e01b      	b.n	8003626 <dev_ser_llinit+0xe2>
	case 5:	// USART6
		*(_UW*)RCC_APB2ENR |= RCC_APB2ENR_USART6EN;
 80035ee:	4b22      	ldr	r3, [pc, #136]	@ (8003678 <dev_ser_llinit+0x134>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a21      	ldr	r2, [pc, #132]	@ (8003678 <dev_ser_llinit+0x134>)
 80035f4:	f043 0320 	orr.w	r3, r3, #32
 80035f8:	6013      	str	r3, [r2, #0]
		break;
 80035fa:	e014      	b.n	8003626 <dev_ser_llinit+0xe2>
	case 6:	// UART7
		*(_UW*)RCC_APB1LENR |= RCC_APB1LENR_UART7EN;
 80035fc:	4b1f      	ldr	r3, [pc, #124]	@ (800367c <dev_ser_llinit+0x138>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a1e      	ldr	r2, [pc, #120]	@ (800367c <dev_ser_llinit+0x138>)
 8003602:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003606:	6013      	str	r3, [r2, #0]
		break;
 8003608:	e00d      	b.n	8003626 <dev_ser_llinit+0xe2>
	case 7:	// UART8
		*(_UW*)RCC_APB1LENR |= RCC_APB1LENR_UART8EN;
 800360a:	4b1c      	ldr	r3, [pc, #112]	@ (800367c <dev_ser_llinit+0x138>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a1b      	ldr	r2, [pc, #108]	@ (800367c <dev_ser_llinit+0x138>)
 8003610:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003614:	6013      	str	r3, [r2, #0]
		break;
 8003616:	e006      	b.n	8003626 <dev_ser_llinit+0xe2>
	case 8:	// UART9
		*(_UW*)RCC_APB2ENR |= RCC_APB2ENR_UART9EN;
 8003618:	4b17      	ldr	r3, [pc, #92]	@ (8003678 <dev_ser_llinit+0x134>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a16      	ldr	r2, [pc, #88]	@ (8003678 <dev_ser_llinit+0x134>)
 800361e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003622:	6013      	str	r3, [r2, #0]
		break;
 8003624:	bf00      	nop
		*(_UW*)RCC_APB2ENR |= RCC_APB2ENR_USART10EN;
	}
#endif

	/* USART device initialize (Disable USART & Disable all interrupt) */
	stop_com(unit);
 8003626:	6978      	ldr	r0, [r7, #20]
 8003628:	f7ff febc 	bl	80033a4 <stop_com>

	/* Initizlize Device Control block */
	p_dcb->intno_rcv = p_dcb->intno_snd = INTNO_USART1 + unit;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f103 0225 	add.w	r2, r3, #37	@ 0x25
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	625a      	str	r2, [r3, #36]	@ 0x24
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	621a      	str	r2, [r3, #32]
	p_dcb->int_pri = ll_devdat[unit].intpri;
 800363e:	4a10      	ldr	r2, [pc, #64]	@ (8003680 <dev_ser_llinit+0x13c>)
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4413      	add	r3, r2
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	461a      	mov	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	629a      	str	r2, [r3, #40]	@ 0x28

	/* Interrupt handler definition */
	err = tk_def_int(ll_devdat[unit].intno, &dint);
 800364e:	4a0c      	ldr	r2, [pc, #48]	@ (8003680 <dev_ser_llinit+0x13c>)
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003656:	f107 0208 	add.w	r2, r7, #8
 800365a:	4611      	mov	r1, r2
 800365c:	4618      	mov	r0, r3
 800365e:	f002 ffd5 	bl	800660c <tk_def_int>
 8003662:	6138      	str	r0, [r7, #16]

	return err;
 8003664:	693b      	ldr	r3, [r7, #16]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	0800e8e8 	.word	0x0800e8e8
 8003674:	58024454 	.word	0x58024454
 8003678:	580244f0 	.word	0x580244f0
 800367c:	580244e8 	.word	0x580244e8
 8003680:	0800ecb8 	.word	0x0800ecb8

08003684 <start_system>:
 * Start System
 *	Start each subsystem and each device driver.
 *	Return from function after starting.
 */
LOCAL ER start_system( void )
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
	ER	ercd;

#if USE_DEVICE
	/* Initialize Device manager */
	ercd = knl_initialize_devmgr();
 800368a:	f001 fb2f 	bl	8004cec <knl_initialize_devmgr>
 800368e:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) return ercd;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	da01      	bge.n	800369a <start_system+0x16>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	e003      	b.n	80036a2 <start_system+0x1e>
#endif

	/* Start system dependent sequence */
	ercd = knl_start_device();
 800369a:	f000 fc90 	bl	8003fbe <knl_start_device>
 800369e:	6078      	str	r0, [r7, #4]

	return ercd;
 80036a0:	687b      	ldr	r3, [r7, #4]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <shutdown_system>:
 *		-3 : Normal re-start		(Boot -> Start)
 *
 *	fin are not always supported.
 */
LOCAL void shutdown_system( INT fin )
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
#if USE_SHUTDOWN
	/* Platform dependent finalize sequence */
	knl_finish_device();
 80036b4:	f000 fca6 	bl	8004004 <knl_finish_device>

	/* Shutdown message output */
	if ( fin >= 0 ) {
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	db02      	blt.n	80036c4 <shutdown_system+0x18>
		SYSTEM_MESSAGE("\n<< SYSTEM SHUTDOWN >>\n");
 80036be:	4807      	ldr	r0, [pc, #28]	@ (80036dc <shutdown_system+0x30>)
 80036c0:	f00a fbb4 	bl	800de2c <tm_putstring>
	}

	if ( fin < 0 ) {
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	da02      	bge.n	80036d0 <shutdown_system+0x24>
		/* Re-start sequence (platform dependent) */
		knl_restart_hw(fin);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 fce0 	bl	8004090 <knl_restart_hw>
	}

	knl_tkernel_exit();		/* Stop system */
 80036d0:	f000 fd84 	bl	80041dc <knl_tkernel_exit>
	DISABLE_INTERRUPT;
	for(;;) {
		;
	}
#endif /* USE_SHUTDOWN */
}
 80036d4:	bf00      	nop
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	0800e8f0 	.word	0x0800e8f0

080036e0 <init_task_main>:

/*
 * Initial task main
 */
LOCAL void init_task_main(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
	INT	fin = 1;
 80036e6:	2301      	movs	r3, #1
 80036e8:	607b      	str	r3, [r7, #4]
	ER	ercd;

	ercd = start_system();		/* Start Sub-system & device driver */
 80036ea:	f7ff ffcb 	bl	8003684 <start_system>
 80036ee:	6038      	str	r0, [r7, #0]
	if(ercd  >= E_OK) {
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	db0b      	blt.n	800370e <init_task_main+0x2e>

#if (USE_SYSTEM_MESSAGE && USE_TMONITOR)
		tm_printf((UB*)"\n\nmicroT-Kernel Version %x.%02x\n\n", VER_MAJOR, VER_MINOR);
 80036f6:	2200      	movs	r2, #0
 80036f8:	2103      	movs	r1, #3
 80036fa:	480a      	ldr	r0, [pc, #40]	@ (8003724 <init_task_main+0x44>)
 80036fc:	f00a ff36 	bl	800e56c <tm_printf>

#if USE_USERINIT
		/* Perform user defined initialization sequence */
		fin = (*(MAIN_FP)RI_USERINIT)(0, NULL);
#endif
		if ( fin > 0 ) {
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	dd06      	ble.n	8003714 <init_task_main+0x34>
			fin = usermain();	/* User Main Program */
 8003706:	f7fd fd53 	bl	80011b0 <usermain>
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	e002      	b.n	8003714 <init_task_main+0x34>
		/* Perform user defined finalization sequence */
		(*(MAIN_FP)RI_USERINIT)(-1, NULL);
#endif

	} else {
		SYSTEM_MESSAGE("!ERROR! Init Task start\n");	/* Start message */
 800370e:	4806      	ldr	r0, [pc, #24]	@ (8003728 <init_task_main+0x48>)
 8003710:	f00a fb8c 	bl	800de2c <tm_putstring>
	}

	shutdown_system(fin);	/* Never return */
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7ff ffc9 	bl	80036ac <shutdown_system>
}
 800371a:	bf00      	nop
 800371c:	3708      	adds	r7, #8
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	0800e908 	.word	0x0800e908
 8003728:	0800e92c 	.word	0x0800e92c

0800372c <knl_set_reg>:
/* ------------------------------------------------------------------------ */
/*
 * Set task register contents (Used in tk_set_reg())
 */
EXPORT void knl_set_reg( TCB *tcb, CONST T_REGS *regs, CONST T_EIT *eit, CONST T_CREGS *cregs )
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	603b      	str	r3, [r7, #0]
		}
	} else {
		ssp = (SStackFrame*)tmpp;
	}
#else
	ssp = (SStackFrame*)(( cregs != NULL )? cregs->ssp: tcb->tskctxb.ssp);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <knl_set_reg+0x1a>
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	e001      	b.n	800374a <knl_set_reg+0x1e>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	613b      	str	r3, [r7, #16]
#endif
	
	if ( regs != NULL ) {
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d027      	beq.n	80037a2 <knl_set_reg+0x76>
		for ( i = 0; i < 4; ++i ) {
 8003752:	2300      	movs	r3, #0
 8003754:	617b      	str	r3, [r7, #20]
 8003756:	e00d      	b.n	8003774 <knl_set_reg+0x48>
			ssp->r[i] = regs->r[i];
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003760:	4619      	mov	r1, r3
 8003762:	693a      	ldr	r2, [r7, #16]
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	3308      	adds	r3, #8
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	6059      	str	r1, [r3, #4]
		for ( i = 0; i < 4; ++i ) {
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	3301      	adds	r3, #1
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	2b03      	cmp	r3, #3
 8003778:	ddee      	ble.n	8003758 <knl_set_reg+0x2c>
		}
		for ( i = 4; i < 12; ++i){
 800377a:	2304      	movs	r3, #4
 800377c:	617b      	str	r3, [r7, #20]
 800377e:	e00d      	b.n	800379c <knl_set_reg+0x70>
			ssp->r_[i - 4] = regs->r[i];
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	3b04      	subs	r3, #4
 800378c:	4611      	mov	r1, r2
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	6059      	str	r1, [r3, #4]
		for ( i = 4; i < 12; ++i){
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	3301      	adds	r3, #1
 800379a:	617b      	str	r3, [r7, #20]
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	2b0b      	cmp	r3, #11
 80037a0:	ddee      	ble.n	8003780 <knl_set_reg+0x54>
		}
	}

	if ( eit != NULL ) {
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <knl_set_reg+0x84>
		ssp->pc = eit->pc;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	63da      	str	r2, [r3, #60]	@ 0x3c
	}

	if ( cregs != NULL ) {
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <knl_set_reg+0x92>
		tcb->tskctxb.ssp  = cregs->ssp;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	619a      	str	r2, [r3, #24]
	}
}
 80037be:	bf00      	nop
 80037c0:	371c      	adds	r7, #28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bc80      	pop	{r7}
 80037c6:	4770      	bx	lr

080037c8 <knl_get_reg>:
/* ------------------------------------------------------------------------ */
/*
 * Get task register contents (Used in tk_get_reg())
 */
EXPORT void knl_get_reg( TCB *tcb, T_REGS *regs, T_EIT *eit, T_CREGS *cregs )
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
 80037d4:	603b      	str	r3, [r7, #0]
		}
	} else {
		ssp = (SStackFrame*)tmpp;
	}
#else
	ssp = (SStackFrame*)tcb->tskctxb.ssp;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	613b      	str	r3, [r7, #16]
#endif

	if ( regs != NULL ) {
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d030      	beq.n	8003844 <knl_get_reg+0x7c>
		for ( i = 0; i < 4; ++i ) {
 80037e2:	2300      	movs	r3, #0
 80037e4:	617b      	str	r3, [r7, #20]
 80037e6:	e00d      	b.n	8003804 <knl_get_reg+0x3c>
			regs->r[i] = ssp->r[i];
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	3308      	adds	r3, #8
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	4619      	mov	r1, r3
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for ( i = 0; i < 4; ++i ) {
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	3301      	adds	r3, #1
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	2b03      	cmp	r3, #3
 8003808:	ddee      	ble.n	80037e8 <knl_get_reg+0x20>
		}
		for ( i = 4; i < 12; ++i ){
 800380a:	2304      	movs	r3, #4
 800380c:	617b      	str	r3, [r7, #20]
 800380e:	e00d      	b.n	800382c <knl_get_reg+0x64>
			regs->r[i] = ssp->r_[i - 4];
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	3b04      	subs	r3, #4
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	4619      	mov	r1, r3
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		for ( i = 4; i < 12; ++i ){
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	3301      	adds	r3, #1
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	2b0b      	cmp	r3, #11
 8003830:	ddee      	ble.n	8003810 <knl_get_reg+0x48>
		}
		regs->r[12] = ssp->ip;
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003836:	461a      	mov	r2, r3
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	631a      	str	r2, [r3, #48]	@ 0x30
		regs->lr = ssp->lr;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	635a      	str	r2, [r3, #52]	@ 0x34
	}

	if ( eit != NULL ) {
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d006      	beq.n	8003858 <knl_get_reg+0x90>
		eit->pc       = ssp->pc;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	601a      	str	r2, [r3, #0]
		eit->taskmode = 0;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	609a      	str	r2, [r3, #8]
	}

	if ( cregs != NULL ) {
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d003      	beq.n	8003866 <knl_get_reg+0x9e>
		cregs->ssp   = tcb->tskctxb.ssp;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	699a      	ldr	r2, [r3, #24]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	601a      	str	r2, [r3, #0]
	}
}
 8003866:	bf00      	nop
 8003868:	371c      	adds	r7, #28
 800386a:	46bd      	mov	sp, r7
 800386c:	bc80      	pop	{r7}
 800386e:	4770      	bx	lr

08003870 <knl_force_dispatch>:
/* ----------------------------------------------------------------------- */
/*
 *	Task dispatcher startup
 */
EXPORT void knl_force_dispatch( void )
{
 8003870:	b580      	push	{r7, lr}
 8003872:	af00      	add	r7, sp, #0
	knl_dispatch_disabled = DDS_DISABLE_IMPLICIT;
 8003874:	4b07      	ldr	r3, [pc, #28]	@ (8003894 <knl_force_dispatch+0x24>)
 8003876:	2201      	movs	r2, #1
 8003878:	601a      	str	r2, [r3, #0]
	knl_ctxtsk = NULL;
 800387a:	4b07      	ldr	r3, [pc, #28]	@ (8003898 <knl_force_dispatch+0x28>)
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]
	*(_UW*)SCB_ICSR = ICSR_PENDSVSET;	/* pendsv exception */
 8003880:	4b06      	ldr	r3, [pc, #24]	@ (800389c <knl_force_dispatch+0x2c>)
 8003882:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003886:	601a      	str	r2, [r3, #0]
	set_basepri(0);
 8003888:	2000      	movs	r0, #0
 800388a:	f009 ff28 	bl	800d6de <set_basepri>
}
 800388e:	bf00      	nop
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	2400186c 	.word	0x2400186c
 8003898:	24001870 	.word	0x24001870
 800389c:	e000ed04 	.word	0xe000ed04

080038a0 <knl_dispatch>:

EXPORT void knl_dispatch( void )
{
 80038a0:	b480      	push	{r7}
 80038a2:	af00      	add	r7, sp, #0
	*(_UW*)SCB_ICSR = ICSR_PENDSVSET;	/* pendsv exception */
 80038a4:	4b03      	ldr	r3, [pc, #12]	@ (80038b4 <knl_dispatch+0x14>)
 80038a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038aa:	601a      	str	r2, [r3, #0]
}
 80038ac:	bf00      	nop
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bc80      	pop	{r7}
 80038b2:	4770      	bx	lr
 80038b4:	e000ed04 	.word	0xe000ed04

080038b8 <NMI_Handler>:

/*
 * NMI handler
 */
WEAK_FUNC EXPORT void NMI_Handler(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
	EXCEPTION_DBG_MSG("NMI\n");
 80038bc:	4802      	ldr	r0, [pc, #8]	@ (80038c8 <NMI_Handler+0x10>)
 80038be:	f00a fab5 	bl	800de2c <tm_putstring>
	while(1);
 80038c2:	bf00      	nop
 80038c4:	e7fd      	b.n	80038c2 <NMI_Handler+0xa>
 80038c6:	bf00      	nop
 80038c8:	0800e948 	.word	0x0800e948

080038cc <HardFault_Handler>:

/*
 * Hard fault handler
 */
WEAK_FUNC EXPORT void HardFault_Handler(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
#if (USE_EXCEPTION_DBG_MSG  && USE_TMONITOR)

	UW	hfsr, cfsr;
	ID	ctskid;

	hfsr	= *(_UW *)SCB_HFSR;
 80038d2:	4b12      	ldr	r3, [pc, #72]	@ (800391c <HardFault_Handler+0x50>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	60bb      	str	r3, [r7, #8]
	if(knl_ctxtsk != NULL) {
 80038d8:	4b11      	ldr	r3, [pc, #68]	@ (8003920 <HardFault_Handler+0x54>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d004      	beq.n	80038ea <HardFault_Handler+0x1e>
		ctskid = knl_ctxtsk->tskid;
 80038e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003920 <HardFault_Handler+0x54>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	60fb      	str	r3, [r7, #12]
 80038e8:	e001      	b.n	80038ee <HardFault_Handler+0x22>
	} else {
		ctskid = 0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]
	}

	if(hfsr & 0x40000000) {
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d009      	beq.n	800390c <HardFault_Handler+0x40>
		cfsr = *(_UW*)SCB_CFSR;
 80038f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003924 <HardFault_Handler+0x58>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	607b      	str	r3, [r7, #4]
		tm_printf((UB*)"*** Hard fault ***  ctxtsk:%d  HFSR:%x  CFSR:%x\n", ctskid, hfsr, cfsr);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	68f9      	ldr	r1, [r7, #12]
 8003904:	4808      	ldr	r0, [pc, #32]	@ (8003928 <HardFault_Handler+0x5c>)
 8003906:	f00a fe31 	bl	800e56c <tm_printf>
 800390a:	e005      	b.n	8003918 <HardFault_Handler+0x4c>
	} else {
		tm_printf((UB*)"*** Hard fault ***  ctxtsk:%d  HFSR:%x%x\n", ctskid, hfsr);
 800390c:	68ba      	ldr	r2, [r7, #8]
 800390e:	68f9      	ldr	r1, [r7, #12]
 8003910:	4806      	ldr	r0, [pc, #24]	@ (800392c <HardFault_Handler+0x60>)
 8003912:	f00a fe2b 	bl	800e56c <tm_printf>
	}
#endif
	while(1);
 8003916:	bf00      	nop
 8003918:	bf00      	nop
 800391a:	e7fd      	b.n	8003918 <HardFault_Handler+0x4c>
 800391c:	e000ed2c 	.word	0xe000ed2c
 8003920:	24001870 	.word	0x24001870
 8003924:	e000ed28 	.word	0xe000ed28
 8003928:	0800e950 	.word	0x0800e950
 800392c:	0800e984 	.word	0x0800e984

08003930 <MemManage_Handler>:

/*
 * MPU Fault Handler
 */
WEAK_FUNC EXPORT void MemManage_Handler(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
	EXCEPTION_DBG_MSG("MPU Fault\n");
 8003934:	4802      	ldr	r0, [pc, #8]	@ (8003940 <MemManage_Handler+0x10>)
 8003936:	f00a fa79 	bl	800de2c <tm_putstring>
	while(1);
 800393a:	bf00      	nop
 800393c:	e7fd      	b.n	800393a <MemManage_Handler+0xa>
 800393e:	bf00      	nop
 8003940:	0800e9b0 	.word	0x0800e9b0

08003944 <BusFault_Handler>:

/* 
 * Bus Fault Handler
 */
WEAK_FUNC EXPORT void BusFault_Handler(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
	EXCEPTION_DBG_MSG("Bus Fault\n");
 8003948:	4802      	ldr	r0, [pc, #8]	@ (8003954 <BusFault_Handler+0x10>)
 800394a:	f00a fa6f 	bl	800de2c <tm_putstring>
	while(1);
 800394e:	bf00      	nop
 8003950:	e7fd      	b.n	800394e <BusFault_Handler+0xa>
 8003952:	bf00      	nop
 8003954:	0800e9bc 	.word	0x0800e9bc

08003958 <UsageFault_Handler>:

/*
 * Usage Fault Handler
 */
WEAK_FUNC EXPORT void UsageFault_Handler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
	EXCEPTION_DBG_MSG("Usage Fault\n");
 800395c:	4802      	ldr	r0, [pc, #8]	@ (8003968 <UsageFault_Handler+0x10>)
 800395e:	f00a fa65 	bl	800de2c <tm_putstring>
	while(1);
 8003962:	bf00      	nop
 8003964:	e7fd      	b.n	8003962 <UsageFault_Handler+0xa>
 8003966:	bf00      	nop
 8003968:	0800e9c8 	.word	0x0800e9c8

0800396c <Svcall_Handler>:

/*
 * Svcall
 */
WEAK_FUNC EXPORT void Svcall_Handler(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
	EXCEPTION_DBG_MSG("SVCall\n");
 8003970:	4802      	ldr	r0, [pc, #8]	@ (800397c <Svcall_Handler+0x10>)
 8003972:	f00a fa5b 	bl	800de2c <tm_putstring>
	while(1);
 8003976:	bf00      	nop
 8003978:	e7fd      	b.n	8003976 <Svcall_Handler+0xa>
 800397a:	bf00      	nop
 800397c:	0800e9d8 	.word	0x0800e9d8

08003980 <DebugMon_Handler>:

/* 
 * Debug Monitor
 */
WEAK_FUNC EXPORT void DebugMon_Handler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
	EXCEPTION_DBG_MSG("Debug Monitor\n");
 8003984:	4802      	ldr	r0, [pc, #8]	@ (8003990 <DebugMon_Handler+0x10>)
 8003986:	f00a fa51 	bl	800de2c <tm_putstring>
	while(1);
 800398a:	bf00      	nop
 800398c:	e7fd      	b.n	800398a <DebugMon_Handler+0xa>
 800398e:	bf00      	nop
 8003990:	0800e9e0 	.word	0x0800e9e0

08003994 <Default_Handler>:

/*
 * Default Handler
 */
WEAK_FUNC EXPORT void Default_Handler(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
#if (USE_EXCEPTION_DBG_MSG  && USE_TMONITOR)
	INT	i;
	_UW	*icpr;

	icpr = (_UW*)NVIC_ICPR_BASE;
 800399a:	4b0d      	ldr	r3, [pc, #52]	@ (80039d0 <Default_Handler+0x3c>)
 800399c:	603b      	str	r3, [r7, #0]

	EXCEPTION_DBG_MSG("Undefine Exceptio ICPR: ");
 800399e:	480d      	ldr	r0, [pc, #52]	@ (80039d4 <Default_Handler+0x40>)
 80039a0:	f00a fa44 	bl	800de2c <tm_putstring>
	for(i=0; i < 8; i++) {
 80039a4:	2300      	movs	r3, #0
 80039a6:	607b      	str	r3, [r7, #4]
 80039a8:	e00a      	b.n	80039c0 <Default_Handler+0x2c>
		tm_printf((UB*)"%x ", *icpr++);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	1d1a      	adds	r2, r3, #4
 80039ae:	603a      	str	r2, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4619      	mov	r1, r3
 80039b4:	4808      	ldr	r0, [pc, #32]	@ (80039d8 <Default_Handler+0x44>)
 80039b6:	f00a fdd9 	bl	800e56c <tm_printf>
	for(i=0; i < 8; i++) {
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3301      	adds	r3, #1
 80039be:	607b      	str	r3, [r7, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b07      	cmp	r3, #7
 80039c4:	ddf1      	ble.n	80039aa <Default_Handler+0x16>
	}
	EXCEPTION_DBG_MSG("\n");
 80039c6:	4805      	ldr	r0, [pc, #20]	@ (80039dc <Default_Handler+0x48>)
 80039c8:	f00a fa30 	bl	800de2c <tm_putstring>
#endif
	while(1);
 80039cc:	bf00      	nop
 80039ce:	e7fd      	b.n	80039cc <Default_Handler+0x38>
 80039d0:	e000e280 	.word	0xe000e280
 80039d4:	0800e9f0 	.word	0x0800e9f0
 80039d8:	0800ea0c 	.word	0x0800ea0c
 80039dc:	0800ea10 	.word	0x0800ea10

080039e0 <knl_get_ipsr>:
/*
 *	Control register operation
 */

Inline UW knl_get_ipsr(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
	UW	ipsr;
	Asm("mrs %0, ipsr": "=r"(ipsr));
 80039e6:	f3ef 8305 	mrs	r3, IPSR
 80039ea:	607b      	str	r3, [r7, #4]
	return ipsr;
 80039ec:	687b      	ldr	r3, [r7, #4]
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr

080039f8 <knl_EnterTaskIndependent>:
}
/*
 * Move to/Restore task independent part
 */
Inline void knl_EnterTaskIndependent( void )
{
 80039f8:	b480      	push	{r7}
 80039fa:	af00      	add	r7, sp, #0
	knl_taskindp++;
 80039fc:	4b04      	ldr	r3, [pc, #16]	@ (8003a10 <knl_EnterTaskIndependent+0x18>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3301      	adds	r3, #1
 8003a02:	4a03      	ldr	r2, [pc, #12]	@ (8003a10 <knl_EnterTaskIndependent+0x18>)
 8003a04:	6013      	str	r3, [r2, #0]
}
 8003a06:	bf00      	nop
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bc80      	pop	{r7}
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	240029f8 	.word	0x240029f8

08003a14 <knl_LeaveTaskIndependent>:
Inline void knl_LeaveTaskIndependent( void )
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
	knl_taskindp--;
 8003a18:	4b04      	ldr	r3, [pc, #16]	@ (8003a2c <knl_LeaveTaskIndependent+0x18>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	4a03      	ldr	r2, [pc, #12]	@ (8003a2c <knl_LeaveTaskIndependent+0x18>)
 8003a20:	6013      	str	r3, [r2, #0]
}
 8003a22:	bf00      	nop
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bc80      	pop	{r7}
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	240029f8 	.word	0x240029f8

08003a30 <knl_hll_inthdr>:
 */

Noinit(LOCAL FP knl_inthdr_tbl[N_INTVEC]);	/* HLL Interrupt Handler Table */

EXPORT void knl_hll_inthdr(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
	FP	inthdr;
	UW	intno;

	ENTER_TASK_INDEPENDENT;
 8003a36:	f7ff ffdf 	bl	80039f8 <knl_EnterTaskIndependent>

	intno	= knl_get_ipsr() - 16;
 8003a3a:	f7ff ffd1 	bl	80039e0 <knl_get_ipsr>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	3b10      	subs	r3, #16
 8003a42:	607b      	str	r3, [r7, #4]
	inthdr	= knl_inthdr_tbl[intno];
 8003a44:	4a06      	ldr	r2, [pc, #24]	@ (8003a60 <knl_hll_inthdr+0x30>)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a4c:	603b      	str	r3, [r7, #0]

	(*inthdr)(intno);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	4798      	blx	r3

	LEAVE_TASK_INDEPENDENT;
 8003a54:	f7ff ffde 	bl	8003a14 <knl_LeaveTaskIndependent>
}
 8003a58:	bf00      	nop
 8003a5a:	3708      	adds	r7, #8
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	240004c8 	.word	0x240004c8

08003a64 <knl_systim_inthdr>:
/* ------------------------------------------------------------------------ */
/*
 * System-timer Interrupt handler
 */
EXPORT void knl_systim_inthdr(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
	ENTER_TASK_INDEPENDENT;
 8003a68:	f7ff ffc6 	bl	80039f8 <knl_EnterTaskIndependent>

	knl_timer_handler();
 8003a6c:	f009 f88e 	bl	800cb8c <knl_timer_handler>

	LEAVE_TASK_INDEPENDENT;
 8003a70:	f7ff ffd0 	bl	8003a14 <knl_LeaveTaskIndependent>
}
 8003a74:	bf00      	nop
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <knl_define_inthdr>:
/* ----------------------------------------------------------------------- */
/*
 * Set interrupt handler (Used in tk_def_int())
 */
EXPORT ER knl_define_inthdr( INT intno, ATR intatr, FP inthdr )
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b087      	sub	sp, #28
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
	volatile FP	*intvet;

	if(inthdr != NULL) {
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00c      	beq.n	8003aa4 <knl_define_inthdr+0x2c>
		if ( (intatr & TA_HLNG) != 0 ) {
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	f003 0301 	and.w	r3, r3, #1
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d009      	beq.n	8003aa8 <knl_define_inthdr+0x30>
			knl_inthdr_tbl[intno] = inthdr;
 8003a94:	490b      	ldr	r1, [pc, #44]	@ (8003ac4 <knl_define_inthdr+0x4c>)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			inthdr = knl_hll_inthdr;
 8003a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8003ac8 <knl_define_inthdr+0x50>)
 8003aa0:	607b      	str	r3, [r7, #4]
 8003aa2:	e001      	b.n	8003aa8 <knl_define_inthdr+0x30>
		}		
	} else 	{	/* Clear interrupt handler */
		inthdr = Default_Handler;
 8003aa4:	4b09      	ldr	r3, [pc, #36]	@ (8003acc <knl_define_inthdr+0x54>)
 8003aa6:	607b      	str	r3, [r7, #4]
	}
	intvet = (FP*)&exchdr_tbl[N_SYSVEC];
 8003aa8:	4b09      	ldr	r3, [pc, #36]	@ (8003ad0 <knl_define_inthdr+0x58>)
 8003aaa:	617b      	str	r3, [r7, #20]
	intvet[intno] = inthdr;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	601a      	str	r2, [r3, #0]

	return E_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	371c      	adds	r7, #28
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr
 8003ac4:	240004c8 	.word	0x240004c8
 8003ac8:	08003a31 	.word	0x08003a31
 8003acc:	08003995 	.word	0x08003995
 8003ad0:	24000040 	.word	0x24000040

08003ad4 <knl_return_inthdr>:
/* ----------------------------------------------------------------------- */
/*
 * Return interrupt handler (Used in tk_ret_int())
 */
EXPORT void knl_return_inthdr(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
	/* No processing in ARM. */
	return;
 8003ad8:	bf00      	nop
}
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr

08003ae0 <knl_init_interrupt>:
/* ------------------------------------------------------------------------ */
/*
 * Interrupt initialize
 */
EXPORT ER knl_init_interrupt( void )
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
	/* Register exception handler used on OS */

	return E_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bc80      	pop	{r7}
 8003aec:	4770      	bx	lr
	...

08003af0 <Reset_Handler>:
#endif

IMPORT const void (*vector_tbl[])();

EXPORT void Reset_Handler(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
	UW	*src, *top, *end;
	UW	reg;
	INT	i;

	/* Startup Hardware */
	knl_startup_hw();
 8003af6:	f000 fa8d 	bl	8004014 <knl_startup_hw>

#if !USE_STATIC_IVT
	/* Load Vector Table from ROM to RAM */
	src = (UW*)vector_tbl;
 8003afa:	4b33      	ldr	r3, [pc, #204]	@ (8003bc8 <Reset_Handler+0xd8>)
 8003afc:	617b      	str	r3, [r7, #20]
	top = (UW*)exchdr_tbl;
 8003afe:	4b33      	ldr	r3, [pc, #204]	@ (8003bcc <Reset_Handler+0xdc>)
 8003b00:	613b      	str	r3, [r7, #16]

	for(i=0; i < ((N_SYSVEC + N_INTVEC)); i++) {
 8003b02:	2300      	movs	r3, #0
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	e00a      	b.n	8003b1e <Reset_Handler+0x2e>
		*top++ = *src++;
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	1d13      	adds	r3, r2, #4
 8003b0c:	617b      	str	r3, [r7, #20]
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1d19      	adds	r1, r3, #4
 8003b12:	6139      	str	r1, [r7, #16]
 8003b14:	6812      	ldr	r2, [r2, #0]
 8003b16:	601a      	str	r2, [r3, #0]
	for(i=0; i < ((N_SYSVEC + N_INTVEC)); i++) {
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2bcd      	cmp	r3, #205	@ 0xcd
 8003b22:	ddf1      	ble.n	8003b08 <Reset_Handler+0x18>
	}
	
	/* Set Vector Table offset to SRAM */
	*(_UW*)SCB_VTOR = (UW)exchdr_tbl;
 8003b24:	4b2a      	ldr	r3, [pc, #168]	@ (8003bd0 <Reset_Handler+0xe0>)
 8003b26:	4a29      	ldr	r2, [pc, #164]	@ (8003bcc <Reset_Handler+0xdc>)
 8003b28:	601a      	str	r2, [r3, #0]
#endif

	/* Load .data to ram */
	src = (UW*)&__data_org;
 8003b2a:	4b2a      	ldr	r3, [pc, #168]	@ (8003bd4 <Reset_Handler+0xe4>)
 8003b2c:	617b      	str	r3, [r7, #20]
	top = (UW*)&__data_start;
 8003b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8003bd8 <Reset_Handler+0xe8>)
 8003b30:	613b      	str	r3, [r7, #16]
	end = (UW*)&__data_end;
 8003b32:	4b2a      	ldr	r3, [pc, #168]	@ (8003bdc <Reset_Handler+0xec>)
 8003b34:	60bb      	str	r3, [r7, #8]
	while(top != end) {
 8003b36:	e007      	b.n	8003b48 <Reset_Handler+0x58>
		*top++ = *src++;
 8003b38:	697a      	ldr	r2, [r7, #20]
 8003b3a:	1d13      	adds	r3, r2, #4
 8003b3c:	617b      	str	r3, [r7, #20]
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1d19      	adds	r1, r3, #4
 8003b42:	6139      	str	r1, [r7, #16]
 8003b44:	6812      	ldr	r2, [r2, #0]
 8003b46:	601a      	str	r2, [r3, #0]
	while(top != end) {
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d1f3      	bne.n	8003b38 <Reset_Handler+0x48>

	/* Initialize .bss */
#if USE_NOINIT
	top = (UW*)&__noinit_end;
#else 
	top = (UW*)&__bss_start;
 8003b50:	4b23      	ldr	r3, [pc, #140]	@ (8003be0 <Reset_Handler+0xf0>)
 8003b52:	613b      	str	r3, [r7, #16]
#endif
	for(i = ((INT)&__bss_end - (INT)top)/sizeof(UW); i > 0 ; i--) {
 8003b54:	4a23      	ldr	r2, [pc, #140]	@ (8003be4 <Reset_Handler+0xf4>)
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	089b      	lsrs	r3, r3, #2
 8003b5c:	60fb      	str	r3, [r7, #12]
 8003b5e:	e007      	b.n	8003b70 <Reset_Handler+0x80>
		*top++ = 0;
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1d1a      	adds	r2, r3, #4
 8003b64:	613a      	str	r2, [r7, #16]
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]
	for(i = ((INT)&__bss_end - (INT)top)/sizeof(UW); i > 0 ; i--) {
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	dcf4      	bgt.n	8003b60 <Reset_Handler+0x70>
	}

#if USE_IMALLOC
	/* Set System memory area */
	if(INTERNAL_RAM_START > SYSTEMAREA_TOP) {
		knl_lowmem_top = (UW*)INTERNAL_RAM_START;
 8003b76:	4b1c      	ldr	r3, [pc, #112]	@ (8003be8 <Reset_Handler+0xf8>)
 8003b78:	f04f 5210 	mov.w	r2, #603979776	@ 0x24000000
 8003b7c:	601a      	str	r2, [r3, #0]
	} else {
		knl_lowmem_top = (UW*)SYSTEMAREA_TOP;
	}
	if((UW)knl_lowmem_top < (UW)&__bss_end) {
 8003b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8003be8 <Reset_Handler+0xf8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	461a      	mov	r2, r3
 8003b84:	4b17      	ldr	r3, [pc, #92]	@ (8003be4 <Reset_Handler+0xf4>)
 8003b86:	429a      	cmp	r2, r3
 8003b88:	d202      	bcs.n	8003b90 <Reset_Handler+0xa0>
		knl_lowmem_top = (UW*)&__bss_end;
 8003b8a:	4b17      	ldr	r3, [pc, #92]	@ (8003be8 <Reset_Handler+0xf8>)
 8003b8c:	4a15      	ldr	r2, [pc, #84]	@ (8003be4 <Reset_Handler+0xf4>)
 8003b8e:	601a      	str	r2, [r3, #0]
	}

	if((SYSTEMAREA_END != 0) && (INTERNAL_RAM_END > CNF_SYSTEMAREA_END)) {
		knl_lowmem_limit = (UW*)(SYSTEMAREA_END - EXC_STACK_SIZE);
	} else {
		knl_lowmem_limit = (UW*)(INTERNAL_RAM_END - EXC_STACK_SIZE);
 8003b90:	4b16      	ldr	r3, [pc, #88]	@ (8003bec <Reset_Handler+0xfc>)
 8003b92:	4a17      	ldr	r2, [pc, #92]	@ (8003bf0 <Reset_Handler+0x100>)
 8003b94:	601a      	str	r2, [r3, #0]
	}
#endif

	/* Configure exception priorities */
	reg = *(_UW*)SCB_AIRCR;
 8003b96:	4b17      	ldr	r3, [pc, #92]	@ (8003bf4 <Reset_Handler+0x104>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	607b      	str	r3, [r7, #4]
	reg = (reg & (~AIRCR_PRIGROUP7)) | AIRCR_PRIGROUP3;	// PRIGRP:SUBPRI = 4 : 4
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003ba2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003ba6:	607b      	str	r3, [r7, #4]
	*(_UW*)SCB_AIRCR = (reg & 0x0000FFFF) | AIRCR_VECTKEY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	4911      	ldr	r1, [pc, #68]	@ (8003bf4 <Reset_Handler+0x104>)
 8003bae:	4b12      	ldr	r3, [pc, #72]	@ (8003bf8 <Reset_Handler+0x108>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	600b      	str	r3, [r1, #0]
	
	*(_UW*)SCB_SHPR2 = SCB_SHPR2_VAL;		// SVC pri = 0
 8003bb4:	4b11      	ldr	r3, [pc, #68]	@ (8003bfc <Reset_Handler+0x10c>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]
	*(_UW*)SCB_SHPR3 = SCB_SHPR3_VAL;		// SysTick = 1 , PendSV = 7
 8003bba:	4b11      	ldr	r3, [pc, #68]	@ (8003c00 <Reset_Handler+0x110>)
 8003bbc:	4a11      	ldr	r2, [pc, #68]	@ (8003c04 <Reset_Handler+0x114>)
 8003bbe:	601a      	str	r2, [r3, #0]
	*(_UW*)FPU_CPACR |= FPU_CPACR_FPUENABLE;
	*(_UW*)FPU_FPCCR |= (FPU_FPCCR_ASPEN | FPU_FPCCR_LSPEN);
#endif /* USE_FPU */

	/* Startup Kernel */
	main();		/**** No return ****/
 8003bc0:	f000 faa4 	bl	800410c <main>
	while(1);	/* guard - infinite loops */
 8003bc4:	bf00      	nop
 8003bc6:	e7fd      	b.n	8003bc4 <Reset_Handler+0xd4>
 8003bc8:	08000000 	.word	0x08000000
 8003bcc:	24000000 	.word	0x24000000
 8003bd0:	e000ed08 	.word	0xe000ed08
 8003bd4:	0800f00c 	.word	0x0800f00c
 8003bd8:	24000338 	.word	0x24000338
 8003bdc:	240003c8 	.word	0x240003c8
 8003be0:	240003c8 	.word	0x240003c8
 8003be4:	24002a0c 	.word	0x24002a0c
 8003be8:	240029fc 	.word	0x240029fc
 8003bec:	24002a00 	.word	0x24002a00
 8003bf0:	2404f800 	.word	0x2404f800
 8003bf4:	e000ed0c 	.word	0xe000ed0c
 8003bf8:	05fa0000 	.word	0x05fa0000
 8003bfc:	e000ed1c 	.word	0xe000ed1c
 8003c00:	e000ed20 	.word	0xe000ed20
 8003c04:	10f00000 	.word	0x10f00000

08003c08 <out_w>:
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
	*(_UW*)port = data;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	601a      	str	r2, [r3, #0]
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bc80      	pop	{r7}
 8003c20:	4770      	bx	lr

08003c22 <in_w>:
{
 8003c22:	b480      	push	{r7}
 8003c24:	b083      	sub	sp, #12
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
	return *(_UW*)port;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr

08003c38 <startup_clock>:

/*
 *  Startup System Clock
 */
EXPORT void startup_clock(ATR clkatr)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
	/* Supply configuration update enable */
	out_w(PWR_CR3, (in_w(PWR_CR3)&~(0x00000003)) | PWR_CR3_LDOEN);
 8003c40:	48ac      	ldr	r0, [pc, #688]	@ (8003ef4 <startup_clock+0x2bc>)
 8003c42:	f7ff ffee 	bl	8003c22 <in_w>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f023 0303 	bic.w	r3, r3, #3
 8003c4c:	f043 0302 	orr.w	r3, r3, #2
 8003c50:	4619      	mov	r1, r3
 8003c52:	48a8      	ldr	r0, [pc, #672]	@ (8003ef4 <startup_clock+0x2bc>)
 8003c54:	f7ff ffd8 	bl	8003c08 <out_w>
	while((in_w(PWR_CSR1) & PWR_CSR1_ACTVOSRDY) == 0);
 8003c58:	bf00      	nop
 8003c5a:	48a7      	ldr	r0, [pc, #668]	@ (8003ef8 <startup_clock+0x2c0>)
 8003c5c:	f7ff ffe1 	bl	8003c22 <in_w>
 8003c60:	4603      	mov	r3, r0
 8003c62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0f7      	beq.n	8003c5a <startup_clock+0x22>

	/* Configure the main internal regulator output voltage */
	out_w(PWR_D3CR, PWR_D3CR_INIT);
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	48a3      	ldr	r0, [pc, #652]	@ (8003efc <startup_clock+0x2c4>)
 8003c6e:	f7ff ffcb 	bl	8003c08 <out_w>
	in_w(PWR_D3CR);
 8003c72:	48a2      	ldr	r0, [pc, #648]	@ (8003efc <startup_clock+0x2c4>)
 8003c74:	f7ff ffd5 	bl	8003c22 <in_w>
	while((in_w(PWR_D3CR) & PWR_D3CR_VOSRDY) == 0);
 8003c78:	bf00      	nop
 8003c7a:	48a0      	ldr	r0, [pc, #640]	@ (8003efc <startup_clock+0x2c4>)
 8003c7c:	f7ff ffd1 	bl	8003c22 <in_w>
 8003c80:	4603      	mov	r3, r0
 8003c82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0f7      	beq.n	8003c7a <startup_clock+0x42>

	/* Enable clock source */
	/* Use HSI clock */
	if( clkatr & CLKATR_HSI ) {
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d00c      	beq.n	8003cae <startup_clock+0x76>
		*(_UW*)RCC_CR |= RCC_CR_HSION;				// HSI enable
 8003c94:	4b9a      	ldr	r3, [pc, #616]	@ (8003f00 <startup_clock+0x2c8>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a99      	ldr	r2, [pc, #612]	@ (8003f00 <startup_clock+0x2c8>)
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	6013      	str	r3, [r2, #0]
		while((*(_UW*)RCC_CR & RCC_CR_HSIRDY) == 0 );		// Wait HSI ready
 8003ca0:	bf00      	nop
 8003ca2:	4b97      	ldr	r3, [pc, #604]	@ (8003f00 <startup_clock+0x2c8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0f9      	beq.n	8003ca2 <startup_clock+0x6a>
	}

	/* Use CSI clock */
	if( clkatr & CLKATR_CSI ) {
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00c      	beq.n	8003cd2 <startup_clock+0x9a>
		*(_UW*)RCC_CR |= RCC_CR_CSION;				// CSI enable
 8003cb8:	4b91      	ldr	r3, [pc, #580]	@ (8003f00 <startup_clock+0x2c8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a90      	ldr	r2, [pc, #576]	@ (8003f00 <startup_clock+0x2c8>)
 8003cbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cc2:	6013      	str	r3, [r2, #0]
		while((*(_UW*)RCC_CR & RCC_CR_CSIRDY) == 0 );		// Wait CSI ready
 8003cc4:	bf00      	nop
 8003cc6:	4b8e      	ldr	r3, [pc, #568]	@ (8003f00 <startup_clock+0x2c8>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0f9      	beq.n	8003cc6 <startup_clock+0x8e>
	}

	/* Use MSE clock */
	if( clkatr & CLKATR_HSE ) {
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d017      	beq.n	8003d0c <startup_clock+0xd4>
		if( clkatr & CLKATR_HSEBYP) *(_UW*)RCC_CR |= RCC_CR_HSEBYP;	// HSE clock bypass
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d005      	beq.n	8003cf2 <startup_clock+0xba>
 8003ce6:	4b86      	ldr	r3, [pc, #536]	@ (8003f00 <startup_clock+0x2c8>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a85      	ldr	r2, [pc, #532]	@ (8003f00 <startup_clock+0x2c8>)
 8003cec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cf0:	6013      	str	r3, [r2, #0]
		*(_UW*)RCC_CR |= RCC_CR_HSEON;				// HSE enable
 8003cf2:	4b83      	ldr	r3, [pc, #524]	@ (8003f00 <startup_clock+0x2c8>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a82      	ldr	r2, [pc, #520]	@ (8003f00 <startup_clock+0x2c8>)
 8003cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cfc:	6013      	str	r3, [r2, #0]
		while( (*(_UW*)RCC_CR & RCC_CR_HSERDY) == 0 );		// Wait HSE ready
 8003cfe:	bf00      	nop
 8003d00:	4b7f      	ldr	r3, [pc, #508]	@ (8003f00 <startup_clock+0x2c8>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0f9      	beq.n	8003d00 <startup_clock+0xc8>
	}

	/* Use HSI48 clock */
	if( clkatr & CLKATR_HSI48 ) {
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f003 0310 	and.w	r3, r3, #16
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00c      	beq.n	8003d30 <startup_clock+0xf8>
		*(_UW*)RCC_CR |= RCC_CR_HSI48ON;			// HSI48 enable
 8003d16:	4b7a      	ldr	r3, [pc, #488]	@ (8003f00 <startup_clock+0x2c8>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a79      	ldr	r2, [pc, #484]	@ (8003f00 <startup_clock+0x2c8>)
 8003d1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d20:	6013      	str	r3, [r2, #0]
		while( (*(_UW*)RCC_CR & RCC_CR_HSI48RDY) == 0 );	// Wait HSI48 ready
 8003d22:	bf00      	nop
 8003d24:	4b76      	ldr	r3, [pc, #472]	@ (8003f00 <startup_clock+0x2c8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d0f9      	beq.n	8003d24 <startup_clock+0xec>
	}

	/* PLL1 Configuration */
	if(clkatr & CLKATR_PLL1) {
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f003 0320 	and.w	r3, r3, #32
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d035      	beq.n	8003da6 <startup_clock+0x16e>
		*(_UW*)RCC_CR &= ~RCC_CR_PLL1ON;		// PLL1 disable
 8003d3a:	4b71      	ldr	r3, [pc, #452]	@ (8003f00 <startup_clock+0x2c8>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a70      	ldr	r2, [pc, #448]	@ (8003f00 <startup_clock+0x2c8>)
 8003d40:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d44:	6013      	str	r3, [r2, #0]
		while( (*((_UW*)RCC_CR) & RCC_CR_PLL1RDY) != 0 );	// Wait PLL1 ready
 8003d46:	bf00      	nop
 8003d48:	4b6d      	ldr	r3, [pc, #436]	@ (8003f00 <startup_clock+0x2c8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1f9      	bne.n	8003d48 <startup_clock+0x110>

		out_w(RCC_PLLCKSELR, RCC_PLLCKSELR_INIT);	// PLLs clock source selection
 8003d54:	496b      	ldr	r1, [pc, #428]	@ (8003f04 <startup_clock+0x2cc>)
 8003d56:	486c      	ldr	r0, [pc, #432]	@ (8003f08 <startup_clock+0x2d0>)
 8003d58:	f7ff ff56 	bl	8003c08 <out_w>
		out_w(RCC_PLL1DIVR, RCC_PLL1DIVR_INIT);		// PLL1 dividers configuration
 8003d5c:	496b      	ldr	r1, [pc, #428]	@ (8003f0c <startup_clock+0x2d4>)
 8003d5e:	486c      	ldr	r0, [pc, #432]	@ (8003f10 <startup_clock+0x2d8>)
 8003d60:	f7ff ff52 	bl	8003c08 <out_w>

		*(_UW*)RCC_PLLCFGR &= ~RCC_PLLCFGR_PLL1FRACEN;	// PLL1 fractional latch disable
 8003d64:	4b6b      	ldr	r3, [pc, #428]	@ (8003f14 <startup_clock+0x2dc>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a6a      	ldr	r2, [pc, #424]	@ (8003f14 <startup_clock+0x2dc>)
 8003d6a:	f023 0301 	bic.w	r3, r3, #1
 8003d6e:	6013      	str	r3, [r2, #0]
	
		out_w(RCC_PLL1FRACR, RCC_PLL1FRACR_INIT);	// PLL1 fractional divider
 8003d70:	2100      	movs	r1, #0
 8003d72:	4869      	ldr	r0, [pc, #420]	@ (8003f18 <startup_clock+0x2e0>)
 8003d74:	f7ff ff48 	bl	8003c08 <out_w>
		out_w(RCC_PLLCFGR, RCC_PLLCFGR_INIT);		// PLLs Configuration
 8003d78:	4968      	ldr	r1, [pc, #416]	@ (8003f1c <startup_clock+0x2e4>)
 8003d7a:	4866      	ldr	r0, [pc, #408]	@ (8003f14 <startup_clock+0x2dc>)
 8003d7c:	f7ff ff44 	bl	8003c08 <out_w>
	
		*(_UW*)RCC_PLLCFGR |= RCC_PLLCFGR_PLL1FRACEN;	// PLL1 fractional latch enable
 8003d80:	4b64      	ldr	r3, [pc, #400]	@ (8003f14 <startup_clock+0x2dc>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a63      	ldr	r2, [pc, #396]	@ (8003f14 <startup_clock+0x2dc>)
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	6013      	str	r3, [r2, #0]
	
		*(_UW*)RCC_CR |= RCC_CR_PLL1ON;			// PLL1 eneble
 8003d8c:	4b5c      	ldr	r3, [pc, #368]	@ (8003f00 <startup_clock+0x2c8>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a5b      	ldr	r2, [pc, #364]	@ (8003f00 <startup_clock+0x2c8>)
 8003d92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003d96:	6013      	str	r3, [r2, #0]
		while( (*((_UW*)RCC_CR) & RCC_CR_PLL1RDY) == 0 );	// Wait PLL1 ready
 8003d98:	bf00      	nop
 8003d9a:	4b59      	ldr	r3, [pc, #356]	@ (8003f00 <startup_clock+0x2c8>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0f9      	beq.n	8003d9a <startup_clock+0x162>
	}

	/* Prescaler configuration */
	out_w(RCC_D1CFGR, RCC_D1CFGR_INIT);	// D1 domain AHB & Core prescaler(HCLK & SYSCLK)
 8003da6:	2148      	movs	r1, #72	@ 0x48
 8003da8:	485d      	ldr	r0, [pc, #372]	@ (8003f20 <startup_clock+0x2e8>)
 8003daa:	f7ff ff2d 	bl	8003c08 <out_w>
	out_w(RCC_D2CFGR, RCC_D2CFGR_INIT);	// D2 domain APB1&2 prescaler (PCLK1&2)
 8003dae:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8003db2:	485c      	ldr	r0, [pc, #368]	@ (8003f24 <startup_clock+0x2ec>)
 8003db4:	f7ff ff28 	bl	8003c08 <out_w>
	out_w(RCC_D3CFGR, RCC_D3CFGR_INIT);	// D3 domain APB4 prescaler (D3PCLK1)
 8003db8:	2140      	movs	r1, #64	@ 0x40
 8003dba:	485b      	ldr	r0, [pc, #364]	@ (8003f28 <startup_clock+0x2f0>)
 8003dbc:	f7ff ff24 	bl	8003c08 <out_w>

	/* Set Flash Memory Access latency  */
	out_w(FLASH_ACR, FLASH_ACR_INIT);	// FLASH Read latency
 8003dc0:	2133      	movs	r1, #51	@ 0x33
 8003dc2:	485a      	ldr	r0, [pc, #360]	@ (8003f2c <startup_clock+0x2f4>)
 8003dc4:	f7ff ff20 	bl	8003c08 <out_w>
	while(in_w(FLASH_ACR) != FLASH_ACR_INIT);
 8003dc8:	bf00      	nop
 8003dca:	4858      	ldr	r0, [pc, #352]	@ (8003f2c <startup_clock+0x2f4>)
 8003dcc:	f7ff ff29 	bl	8003c22 <in_w>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b33      	cmp	r3, #51	@ 0x33
 8003dd4:	d1f9      	bne.n	8003dca <startup_clock+0x192>

	/* Set system clock switch */
	out_w(RCC_CFGR, (in_w(RCC_CFGR) & ~RCC_CFGR_SW) | RCC_CFGR_SW_INIT);
 8003dd6:	4856      	ldr	r0, [pc, #344]	@ (8003f30 <startup_clock+0x2f8>)
 8003dd8:	f7ff ff23 	bl	8003c22 <in_w>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	f023 0307 	bic.w	r3, r3, #7
 8003de2:	f043 0303 	orr.w	r3, r3, #3
 8003de6:	4619      	mov	r1, r3
 8003de8:	4851      	ldr	r0, [pc, #324]	@ (8003f30 <startup_clock+0x2f8>)
 8003dea:	f7ff ff0d 	bl	8003c08 <out_w>
	while(((in_w(RCC_CFGR) & RCC_CFGR_SWS) >>3) != RCC_CFGR_SW_INIT) ;
 8003dee:	bf00      	nop
 8003df0:	484f      	ldr	r0, [pc, #316]	@ (8003f30 <startup_clock+0x2f8>)
 8003df2:	f7ff ff16 	bl	8003c22 <in_w>
 8003df6:	4603      	mov	r3, r0
 8003df8:	08db      	lsrs	r3, r3, #3
 8003dfa:	f003 0307 	and.w	r3, r3, #7
 8003dfe:	2b03      	cmp	r3, #3
 8003e00:	d1f6      	bne.n	8003df0 <startup_clock+0x1b8>

	/* PLL2 Configuration */
	if(clkatr & CLKATR_PLL2) {
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d045      	beq.n	8003e98 <startup_clock+0x260>
		*(_UW*)RCC_CR &= ~RCC_CR_PLL2ON;			// PLL2 disable
 8003e0c:	4b3c      	ldr	r3, [pc, #240]	@ (8003f00 <startup_clock+0x2c8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a3b      	ldr	r2, [pc, #236]	@ (8003f00 <startup_clock+0x2c8>)
 8003e12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e16:	6013      	str	r3, [r2, #0]
		while( (*((_UW*)RCC_CR) & RCC_CR_PLL2RDY) != 0 );	// Wait PLL2 disable
 8003e18:	bf00      	nop
 8003e1a:	4b39      	ldr	r3, [pc, #228]	@ (8003f00 <startup_clock+0x2c8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1f9      	bne.n	8003e1a <startup_clock+0x1e2>

		out_w(RCC_PLLCKSELR, (in_w(RCC_PLLCKSELR) & ~RCC_PLLCKSELR_DIVM2)|(RCC_PLLCKSELR_DIVM2_INIT<<12));
 8003e26:	4838      	ldr	r0, [pc, #224]	@ (8003f08 <startup_clock+0x2d0>)
 8003e28:	f7ff fefb 	bl	8003c22 <in_w>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003e32:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003e36:	4619      	mov	r1, r3
 8003e38:	4833      	ldr	r0, [pc, #204]	@ (8003f08 <startup_clock+0x2d0>)
 8003e3a:	f7ff fee5 	bl	8003c08 <out_w>
		out_w(RCC_PLL2DIVR, RCC_PLL2DIVR_INIT);
 8003e3e:	493d      	ldr	r1, [pc, #244]	@ (8003f34 <startup_clock+0x2fc>)
 8003e40:	483d      	ldr	r0, [pc, #244]	@ (8003f38 <startup_clock+0x300>)
 8003e42:	f7ff fee1 	bl	8003c08 <out_w>

		*(_UW*)RCC_PLLCFGR &= ~RCC_PLLCFGR_PLL2FRACEN;	// PLL2 fractional latch disable
 8003e46:	4b33      	ldr	r3, [pc, #204]	@ (8003f14 <startup_clock+0x2dc>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a32      	ldr	r2, [pc, #200]	@ (8003f14 <startup_clock+0x2dc>)
 8003e4c:	f023 0310 	bic.w	r3, r3, #16
 8003e50:	6013      	str	r3, [r2, #0]

		out_w(RCC_PLL2FRACR, RCC_PLL2FRACR_INIT);	// PLL2 fractional divider
 8003e52:	2100      	movs	r1, #0
 8003e54:	4839      	ldr	r0, [pc, #228]	@ (8003f3c <startup_clock+0x304>)
 8003e56:	f7ff fed7 	bl	8003c08 <out_w>
		out_w(RCC_PLLCFGR, (in_w(RCC_PLLCFGR) & ~(RCC_PLLCFGR_PLL2RGE | RCC_PLLCFGR_PLL2VCOSEL))
 8003e5a:	482e      	ldr	r0, [pc, #184]	@ (8003f14 <startup_clock+0x2dc>)
 8003e5c:	f7ff fee1 	bl	8003c22 <in_w>
 8003e60:	4603      	mov	r3, r0
 8003e62:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8003e66:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4829      	ldr	r0, [pc, #164]	@ (8003f14 <startup_clock+0x2dc>)
 8003e6e:	f7ff fecb 	bl	8003c08 <out_w>
					|((RCC_PLLCFGR_PLL2RGE_INIT<<6)|(RCC_PLLCFGR_PLL2VCOSEL_INIT<<5)));

		*(_UW*)RCC_PLLCFGR |= RCC_PLLCFGR_PLL2FRACEN;	// PLL2 fractional latch enable
 8003e72:	4b28      	ldr	r3, [pc, #160]	@ (8003f14 <startup_clock+0x2dc>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a27      	ldr	r2, [pc, #156]	@ (8003f14 <startup_clock+0x2dc>)
 8003e78:	f043 0310 	orr.w	r3, r3, #16
 8003e7c:	6013      	str	r3, [r2, #0]
		
		*(_UW*)RCC_CR |= RCC_CR_PLL2ON;				// PLL2 Enable
 8003e7e:	4b20      	ldr	r3, [pc, #128]	@ (8003f00 <startup_clock+0x2c8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a1f      	ldr	r2, [pc, #124]	@ (8003f00 <startup_clock+0x2c8>)
 8003e84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e88:	6013      	str	r3, [r2, #0]
		while( (*((_UW*)RCC_CR) & RCC_CR_PLL2RDY) == 0 );	// Wait PLL2 ready
 8003e8a:	bf00      	nop
 8003e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8003f00 <startup_clock+0x2c8>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0f9      	beq.n	8003e8c <startup_clock+0x254>
	}

	/* PLL3 Configuration */
	if(clkatr & CLKATR_PLL3) {
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d071      	beq.n	8003f86 <startup_clock+0x34e>
		*(_UW*)RCC_CR &= ~RCC_CR_PLL3ON;			// PLL3 disable
 8003ea2:	4b17      	ldr	r3, [pc, #92]	@ (8003f00 <startup_clock+0x2c8>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a16      	ldr	r2, [pc, #88]	@ (8003f00 <startup_clock+0x2c8>)
 8003ea8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003eac:	6013      	str	r3, [r2, #0]
		while( (*((_UW*)RCC_CR) & RCC_CR_PLL3RDY) != 0 );	// Wait PLL3 disable
 8003eae:	bf00      	nop
 8003eb0:	4b13      	ldr	r3, [pc, #76]	@ (8003f00 <startup_clock+0x2c8>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1f9      	bne.n	8003eb0 <startup_clock+0x278>

		out_w(RCC_PLLCKSELR, (in_w(RCC_PLLCKSELR) & ~RCC_PLLCKSELR_DIVM3)|(RCC_PLLCKSELR_DIVM3_INIT<<20));
 8003ebc:	4812      	ldr	r0, [pc, #72]	@ (8003f08 <startup_clock+0x2d0>)
 8003ebe:	f7ff feb0 	bl	8003c22 <in_w>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8003ec8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003ecc:	4619      	mov	r1, r3
 8003ece:	480e      	ldr	r0, [pc, #56]	@ (8003f08 <startup_clock+0x2d0>)
 8003ed0:	f7ff fe9a 	bl	8003c08 <out_w>
		out_w(RCC_PLL3DIVR, RCC_PLL3DIVR_INIT);
 8003ed4:	491a      	ldr	r1, [pc, #104]	@ (8003f40 <startup_clock+0x308>)
 8003ed6:	481b      	ldr	r0, [pc, #108]	@ (8003f44 <startup_clock+0x30c>)
 8003ed8:	f7ff fe96 	bl	8003c08 <out_w>

		*(_UW*)RCC_PLLCFGR &= ~RCC_PLLCFGR_PLL3FRACEN;	// PLL3 fractional latch disable
 8003edc:	4b0d      	ldr	r3, [pc, #52]	@ (8003f14 <startup_clock+0x2dc>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a0c      	ldr	r2, [pc, #48]	@ (8003f14 <startup_clock+0x2dc>)
 8003ee2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ee6:	6013      	str	r3, [r2, #0]

		out_w(RCC_PLL3FRACR, RCC_PLL3FRACR_INIT);	// PLL3 fractional divider
 8003ee8:	2100      	movs	r1, #0
 8003eea:	4817      	ldr	r0, [pc, #92]	@ (8003f48 <startup_clock+0x310>)
 8003eec:	f7ff fe8c 	bl	8003c08 <out_w>
 8003ef0:	e02c      	b.n	8003f4c <startup_clock+0x314>
 8003ef2:	bf00      	nop
 8003ef4:	5802480c 	.word	0x5802480c
 8003ef8:	58024804 	.word	0x58024804
 8003efc:	58024818 	.word	0x58024818
 8003f00:	58024400 	.word	0x58024400
 8003f04:	02020042 	.word	0x02020042
 8003f08:	58024428 	.word	0x58024428
 8003f0c:	01030112 	.word	0x01030112
 8003f10:	58024430 	.word	0x58024430
 8003f14:	5802442c 	.word	0x5802442c
 8003f18:	58024434 	.word	0x58024434
 8003f1c:	01ff0004 	.word	0x01ff0004
 8003f20:	58024418 	.word	0x58024418
 8003f24:	5802441c 	.word	0x5802441c
 8003f28:	58024420 	.word	0x58024420
 8003f2c:	52002000 	.word	0x52002000
 8003f30:	58024410 	.word	0x58024410
 8003f34:	01010117 	.word	0x01010117
 8003f38:	58024438 	.word	0x58024438
 8003f3c:	5802443c 	.word	0x5802443c
 8003f40:	01010280 	.word	0x01010280
 8003f44:	58024440 	.word	0x58024440
 8003f48:	58024444 	.word	0x58024444
		out_w(RCC_PLLCFGR, (in_w(RCC_PLLCFGR) & ~(RCC_PLLCFGR_PLL3RGE | RCC_PLLCFGR_PLL3VCOSEL))
 8003f4c:	4812      	ldr	r0, [pc, #72]	@ (8003f98 <startup_clock+0x360>)
 8003f4e:	f7ff fe68 	bl	8003c22 <in_w>
 8003f52:	4603      	mov	r3, r0
 8003f54:	f423 6360 	bic.w	r3, r3, #3584	@ 0xe00
 8003f58:	4619      	mov	r1, r3
 8003f5a:	480f      	ldr	r0, [pc, #60]	@ (8003f98 <startup_clock+0x360>)
 8003f5c:	f7ff fe54 	bl	8003c08 <out_w>
					|((RCC_PLLCFGR_PLL3RGE_INIT<<10)|(RCC_PLLCFGR_PLL2VCOSEL_INIT<<9)));

		*(_UW*)RCC_PLLCFGR |= RCC_PLLCFGR_PLL3FRACEN;	// PLL3 fractional latch enable
 8003f60:	4b0d      	ldr	r3, [pc, #52]	@ (8003f98 <startup_clock+0x360>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a0c      	ldr	r2, [pc, #48]	@ (8003f98 <startup_clock+0x360>)
 8003f66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f6a:	6013      	str	r3, [r2, #0]
		
		*(_UW*)RCC_CR |= RCC_CR_PLL3ON;				// PLL3 Enable
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f9c <startup_clock+0x364>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a0a      	ldr	r2, [pc, #40]	@ (8003f9c <startup_clock+0x364>)
 8003f72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f76:	6013      	str	r3, [r2, #0]
		while( (*((_UW*)RCC_CR) & RCC_CR_PLL3RDY) == 0 );	// Wait PLL3 ready
 8003f78:	bf00      	nop
 8003f7a:	4b08      	ldr	r3, [pc, #32]	@ (8003f9c <startup_clock+0x364>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f9      	beq.n	8003f7a <startup_clock+0x342>
	}

	/* Disable all interrupts */
	out_w(RCC_CIER, 0);
 8003f86:	2100      	movs	r1, #0
 8003f88:	4805      	ldr	r0, [pc, #20]	@ (8003fa0 <startup_clock+0x368>)
 8003f8a:	f7ff fe3d 	bl	8003c08 <out_w>
}
 8003f8e:	bf00      	nop
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	5802442c 	.word	0x5802442c
 8003f9c:	58024400 	.word	0x58024400
 8003fa0:	58024460 	.word	0x58024460

08003fa4 <shutdown_clock>:

EXPORT void shutdown_clock(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0

}
 8003fa8:	bf00      	nop
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bc80      	pop	{r7}
 8003fae:	4770      	bx	lr

08003fb0 <knl_init_device>:
/*
 * Initialization before micro T-Kernel starts
 */

EXPORT ER knl_init_device( void )
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
	return E_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bc80      	pop	{r7}
 8003fbc:	4770      	bx	lr

08003fbe <knl_start_device>:
/*
 * Start processing after T-Kernel starts
 *	Called from the initial task contexts.
 */
EXPORT ER knl_start_device( void )
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b082      	sub	sp, #8
 8003fc2:	af00      	add	r7, sp, #0
#if USE_SDEV_DRV	// Use sample driver
	ER	err;

	/* A/D Converter unit.0 "adca" */
	#if DEVCNF_USE_ADC
		err = dev_init_adc(0);
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	f7fd faab 	bl	8001520 <dev_init_adc>
 8003fca:	6078      	str	r0, [r7, #4]
		if(err < E_OK) return err;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	da01      	bge.n	8003fd6 <knl_start_device+0x18>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	e012      	b.n	8003ffc <knl_start_device+0x3e>
	#endif

	/* I2C unit.0 "iica" */
	#if DEVCNF_USE_IIC
		err = dev_init_i2c(0);
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	f7fe f8d6 	bl	8002188 <dev_init_i2c>
 8003fdc:	6078      	str	r0, [r7, #4]
		if(err < E_OK) return err;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	da01      	bge.n	8003fe8 <knl_start_device+0x2a>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	e009      	b.n	8003ffc <knl_start_device+0x3e>
	#endif

	/* Serial ch.2 "serc" */
	#if DEVCNF_USE_SER
		err = dev_init_ser(2);
 8003fe8:	2002      	movs	r0, #2
 8003fea:	f7ff f867 	bl	80030bc <dev_init_ser>
 8003fee:	6078      	str	r0, [r7, #4]
		if(err < E_OK) return err;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	da01      	bge.n	8003ffa <knl_start_device+0x3c>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	e000      	b.n	8003ffc <knl_start_device+0x3e>
	#endif

#endif

	return E_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3708      	adds	r7, #8
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <knl_finish_device>:
 * System finalization
 *	Called just before system shutdown.
 *	Execute finalization that must be done before system shutdown.
 */
EXPORT ER knl_finish_device( void )
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
	return E_OK;
 8004008:	2300      	movs	r3, #0
}
 800400a:	4618      	mov	r0, r3
 800400c:	46bd      	mov	sp, r7
 800400e:	bc80      	pop	{r7}
 8004010:	4770      	bx	lr
	...

08004014 <knl_startup_hw>:

/*
 * Startup Device
 */
EXPORT void knl_startup_hw(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
	const T_SETUP_REG	*p;

	/* Startup module clock */
	for(p = modclk_tbl; p->addr != 0; p++) {
 800401a:	4b18      	ldr	r3, [pc, #96]	@ (800407c <knl_startup_hw+0x68>)
 800401c:	607b      	str	r3, [r7, #4]
 800401e:	e010      	b.n	8004042 <knl_startup_hw+0x2e>
		*(_UW*)(p->addr) = p->data;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	461a      	mov	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	6013      	str	r3, [r2, #0]
		while(*(_UW*)(p->addr) != p->data);	/* Delay after an RCC peripheral clock enabling */
 800402c:	bf00      	nop
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	429a      	cmp	r2, r3
 800403a:	d1f8      	bne.n	800402e <knl_startup_hw+0x1a>
	for(p = modclk_tbl; p->addr != 0; p++) {
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3308      	adds	r3, #8
 8004040:	607b      	str	r3, [r7, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1ea      	bne.n	8004020 <knl_startup_hw+0xc>
	}

	/* Startup clock */
	startup_clock(CLKATR_HSE | CLKATR_HSEBYP | CLKATR_PLL1);
 800404a:	202c      	movs	r0, #44	@ 0x2c
 800404c:	f7ff fdf4 	bl	8003c38 <startup_clock>

	/* Setup Pin Function */
	for(p = pinfnc_tbl; p->addr != 0; p++) {
 8004050:	4b0b      	ldr	r3, [pc, #44]	@ (8004080 <knl_startup_hw+0x6c>)
 8004052:	607b      	str	r3, [r7, #4]
 8004054:	e008      	b.n	8004068 <knl_startup_hw+0x54>
		*(_UW*)(p->addr) = p->data;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	461a      	mov	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	6013      	str	r3, [r2, #0]
	for(p = pinfnc_tbl; p->addr != 0; p++) {
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3308      	adds	r3, #8
 8004066:	607b      	str	r3, [r7, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d1f2      	bne.n	8004056 <knl_startup_hw+0x42>
	}
}
 8004070:	bf00      	nop
 8004072:	bf00      	nop
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	0800ed20 	.word	0x0800ed20
 8004080:	0800ed40 	.word	0x0800ed40

08004084 <knl_shutdown_hw>:
#if USE_SHUTDOWN
/*
 * Shutdown device
 */
EXPORT void knl_shutdown_hw( void )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
	disint();
 8004088:	f009 fb41 	bl	800d70e <disint>
	while(1);
 800408c:	bf00      	nop
 800408e:	e7fd      	b.n	800408c <knl_shutdown_hw+0x8>

08004090 <knl_restart_hw>:
 *	mode = -1		reset and re-start	(Reset -> Boot -> Start)
 *	mode = -2		fast re-start		(Start)
 *	mode = -3		Normal re-start		(Boot -> Start)
 */
EXPORT ER knl_restart_hw( W mode )
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
	switch(mode) {
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800409e:	d00b      	beq.n	80040b8 <knl_restart_hw+0x28>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	da1a      	bge.n	80040dc <knl_restart_hw+0x4c>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f113 0f03 	cmn.w	r3, #3
 80040ac:	d010      	beq.n	80040d0 <knl_restart_hw+0x40>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f113 0f02 	cmn.w	r3, #2
 80040b4:	d006      	beq.n	80040c4 <knl_restart_hw+0x34>
 80040b6:	e011      	b.n	80040dc <knl_restart_hw+0x4c>
	case -1: /* Reset and re-start */
		SYSTEM_MESSAGE("\n<< SYSTEM RESET & RESTART >>\n");
 80040b8:	480b      	ldr	r0, [pc, #44]	@ (80040e8 <knl_restart_hw+0x58>)
 80040ba:	f009 feb7 	bl	800de2c <tm_putstring>
		return E_NOSPT;
 80040be:	f06f 0308 	mvn.w	r3, #8
 80040c2:	e00d      	b.n	80040e0 <knl_restart_hw+0x50>
	case -2: /* fast re-start */
		SYSTEM_MESSAGE("\n<< SYSTEM FAST RESTART >>\n");
 80040c4:	4809      	ldr	r0, [pc, #36]	@ (80040ec <knl_restart_hw+0x5c>)
 80040c6:	f009 feb1 	bl	800de2c <tm_putstring>
		return E_NOSPT;
 80040ca:	f06f 0308 	mvn.w	r3, #8
 80040ce:	e007      	b.n	80040e0 <knl_restart_hw+0x50>
	case -3: /* Normal re-start */
		SYSTEM_MESSAGE("\n<< SYSTEM RESTART >>\n");
 80040d0:	4807      	ldr	r0, [pc, #28]	@ (80040f0 <knl_restart_hw+0x60>)
 80040d2:	f009 feab 	bl	800de2c <tm_putstring>
		return E_NOSPT;
 80040d6:	f06f 0308 	mvn.w	r3, #8
 80040da:	e001      	b.n	80040e0 <knl_restart_hw+0x50>
	default:
		return E_PAR;
 80040dc:	f06f 0310 	mvn.w	r3, #16
	}
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	0800ea14 	.word	0x0800ea14
 80040ec:	0800ea34 	.word	0x0800ea34
 80040f0:	0800ea50 	.word	0x0800ea50

080040f4 <low_pow>:

/*
 * Switch to power-saving mode
 */
EXPORT void low_pow( void )
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
}
 80040f8:	bf00      	nop
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr

08004100 <off_pow>:

/*
 * Move to suspend mode
 */
EXPORT void off_pow( void )
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0
}
 8004104:	bf00      	nop
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr

0800410c <main>:
 * Start micro T-Kernel
 *    Initialize sequence before micro T-Kernel start.
 *    Perform preparation necessary to start micro T-Kernel.
 */
EXPORT INT main( void )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
	ER	ercd;

	DISABLE_INTERRUPT;
 8004112:	f009 fafc 	bl	800d70e <disint>

#if USE_TMONITOR
	/* Initialize T-Monitor Compatible Library */
	libtm_init();
 8004116:	f009 fe0f 	bl	800dd38 <libtm_init>
#endif

#if USE_IMALLOC
	/* Initialize Internal memory allocation (Imalloc) */
	ercd = knl_init_Imalloc();
 800411a:	f003 f9db 	bl	80074d4 <knl_init_Imalloc>
 800411e:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	da03      	bge.n	800412e <main+0x22>
		SYSTEM_MESSAGE("!ERROR! init_Imalloc\n");
 8004126:	4825      	ldr	r0, [pc, #148]	@ (80041bc <main+0xb0>)
 8004128:	f009 fe80 	bl	800de2c <tm_putstring>
		goto err_ret;
 800412c:	e044      	b.n	80041b8 <main+0xac>
	}
#endif /* USE_IMALLOC */

	/* Initialize Device before micro T-Kernel starts */
	ercd = knl_init_device();
 800412e:	f7ff ff3f 	bl	8003fb0 <knl_init_device>
 8004132:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	da03      	bge.n	8004142 <main+0x36>
		SYSTEM_MESSAGE("!ERROR! init_device\n");
 800413a:	4821      	ldr	r0, [pc, #132]	@ (80041c0 <main+0xb4>)
 800413c:	f009 fe76 	bl	800de2c <tm_putstring>
		goto err_ret;
 8004140:	e03a      	b.n	80041b8 <main+0xac>
	}

	/* Interrupt initialize */
	ercd = knl_init_interrupt();
 8004142:	f7ff fccd 	bl	8003ae0 <knl_init_interrupt>
 8004146:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	da03      	bge.n	8004156 <main+0x4a>
		SYSTEM_MESSAGE("!ERROR! init_initialize\n");
 800414e:	481d      	ldr	r0, [pc, #116]	@ (80041c4 <main+0xb8>)
 8004150:	f009 fe6c 	bl	800de2c <tm_putstring>
		goto err_ret;
 8004154:	e030      	b.n	80041b8 <main+0xac>
	}

	/* Initialize Kernel-objects  */
	ercd = knl_init_object();
 8004156:	f008 fd75 	bl	800cc44 <knl_init_object>
 800415a:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	da03      	bge.n	800416a <main+0x5e>
		SYSTEM_MESSAGE("!ERROR! kernel object initialize\n");
 8004162:	4819      	ldr	r0, [pc, #100]	@ (80041c8 <main+0xbc>)
 8004164:	f009 fe62 	bl	800de2c <tm_putstring>
		goto err_ret1;
 8004168:	e024      	b.n	80041b4 <main+0xa8>
	}

	/* Start System Timer */
	ercd = knl_timer_startup();
 800416a:	f008 fc5b 	bl	800ca24 <knl_timer_startup>
 800416e:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	da03      	bge.n	800417e <main+0x72>
		SYSTEM_MESSAGE("!ERROR! System timer startup\n");
 8004176:	4815      	ldr	r0, [pc, #84]	@ (80041cc <main+0xc0>)
 8004178:	f009 fe58 	bl	800de2c <tm_putstring>
		goto err_ret1;
 800417c:	e01a      	b.n	80041b4 <main+0xa8>
	}

	/* Create & start initial task */
	ercd = tk_cre_tsk((CONST T_CTSK *)&knl_init_ctsk);
 800417e:	4814      	ldr	r0, [pc, #80]	@ (80041d0 <main+0xc4>)
 8004180:	f006 fbdc 	bl	800a93c <tk_cre_tsk>
 8004184:	6078      	str	r0, [r7, #4]
	if ( ercd >= E_OK ) {
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	db0e      	blt.n	80041aa <main+0x9e>
		ercd = tk_sta_tsk((ID)ercd, 0);
 800418c:	2100      	movs	r1, #0
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f006 fd14 	bl	800abbc <tk_sta_tsk>
 8004194:	6078      	str	r0, [r7, #4]
		if ( ercd >= E_OK ) {
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	db02      	blt.n	80041a2 <main+0x96>
			knl_force_dispatch();
 800419c:	f7ff fb68 	bl	8003870 <knl_force_dispatch>
 80041a0:	e006      	b.n	80041b0 <main+0xa4>
			/**** Start Initial Task. ****/
			/**** No return ****/
		} else {
			SYSTEM_MESSAGE("!ERROR! Initial Task can not start\n");
 80041a2:	480c      	ldr	r0, [pc, #48]	@ (80041d4 <main+0xc8>)
 80041a4:	f009 fe42 	bl	800de2c <tm_putstring>
 80041a8:	e002      	b.n	80041b0 <main+0xa4>
		}
	} else {
		SYSTEM_MESSAGE("!ERROR! Initial Task can not creat\n");
 80041aa:	480b      	ldr	r0, [pc, #44]	@ (80041d8 <main+0xcc>)
 80041ac:	f009 fe3e 	bl	800de2c <tm_putstring>
	}

	/* After this, Error handling */

#if USE_SHUTDOWN
	knl_timer_shutdown();	/* Stop System timer */
 80041b0:	f008 fc56 	bl	800ca60 <knl_timer_shutdown>
err_ret1:
	knl_shutdown_hw();	/* Hardware-dependent Finalization */
 80041b4:	f7ff ff66 	bl	8004084 <knl_shutdown_hw>
#else
err_ret1:
#endif /* USE_SHUTDOWN */

err_ret:
	while(1);
 80041b8:	bf00      	nop
 80041ba:	e7fd      	b.n	80041b8 <main+0xac>
 80041bc:	0800ea68 	.word	0x0800ea68
 80041c0:	0800ea80 	.word	0x0800ea80
 80041c4:	0800ea98 	.word	0x0800ea98
 80041c8:	0800eab4 	.word	0x0800eab4
 80041cc:	0800ead8 	.word	0x0800ead8
 80041d0:	0800ed08 	.word	0x0800ed08
 80041d4:	0800eaf8 	.word	0x0800eaf8
 80041d8:	0800eb1c 	.word	0x0800eb1c

080041dc <knl_tkernel_exit>:
/*
 * Exit micro T-Kernel from Initial Task.
 */
#if USE_SHUTDOWN
EXPORT void knl_tkernel_exit( void )
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
	knl_timer_shutdown();	/* Stop System timer */
 80041e0:	f008 fc3e 	bl	800ca60 <knl_timer_shutdown>
	knl_shutdown_hw();	/* Hardware-dependent Finalization */
 80041e4:	f7ff ff4e 	bl	8004084 <knl_shutdown_hw>
	/**** No return ****/

	while(1);
 80041e8:	bf00      	nop
 80041ea:	e7fd      	b.n	80041e8 <knl_tkernel_exit+0xc>

080041ec <knl_isTaskIndependent>:
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
	return ( knl_taskindp > 0 )? TRUE: FALSE;
 80041f0:	4b05      	ldr	r3, [pc, #20]	@ (8004208 <knl_isTaskIndependent+0x1c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	bfcc      	ite	gt
 80041f8:	2301      	movgt	r3, #1
 80041fa:	2300      	movle	r3, #0
 80041fc:	b2db      	uxtb	r3, r3
}
 80041fe:	4618      	mov	r0, r3
 8004200:	46bd      	mov	sp, r7
 8004202:	bc80      	pop	{r7}
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	240029f8 	.word	0x240029f8

0800420c <tk_dis_dsp>:
/* ------------------------------------------------------------------------ */
/*
 * Dispatch disable
 */
SYSCALL ER tk_dis_dsp( void )
{
 800420c:	b580      	push	{r7, lr}
 800420e:	af00      	add	r7, sp, #0
	CHECK_CTX(!in_loc());
 8004210:	f009 fa71 	bl	800d6f6 <get_basepri>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d108      	bne.n	800422c <tk_dis_dsp+0x20>
 800421a:	f7ff ffe7 	bl	80041ec <knl_isTaskIndependent>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d103      	bne.n	800422c <tk_dis_dsp+0x20>
 8004224:	4b06      	ldr	r3, [pc, #24]	@ (8004240 <tk_dis_dsp+0x34>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d102      	bne.n	8004232 <tk_dis_dsp+0x26>
 800422c:	f06f 0318 	mvn.w	r3, #24
 8004230:	e003      	b.n	800423a <tk_dis_dsp+0x2e>

	knl_dispatch_disabled = DDS_DISABLE;
 8004232:	4b04      	ldr	r3, [pc, #16]	@ (8004244 <tk_dis_dsp+0x38>)
 8004234:	2202      	movs	r2, #2
 8004236:	601a      	str	r2, [r3, #0]

	return E_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	bd80      	pop	{r7, pc}
 800423e:	bf00      	nop
 8004240:	24001870 	.word	0x24001870
 8004244:	2400186c 	.word	0x2400186c

08004248 <tk_ena_dsp>:
/*
 * Dispatch enable
 */
#ifdef USE_FUNC_TK_ENA_DSP
SYSCALL ER tk_ena_dsp( void )
{
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
	CHECK_CTX(!in_loc());
 800424c:	f009 fa53 	bl	800d6f6 <get_basepri>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d108      	bne.n	8004268 <tk_ena_dsp+0x20>
 8004256:	f7ff ffc9 	bl	80041ec <knl_isTaskIndependent>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d103      	bne.n	8004268 <tk_ena_dsp+0x20>
 8004260:	4b0a      	ldr	r3, [pc, #40]	@ (800428c <tk_ena_dsp+0x44>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d102      	bne.n	800426e <tk_ena_dsp+0x26>
 8004268:	f06f 0318 	mvn.w	r3, #24
 800426c:	e00b      	b.n	8004286 <tk_ena_dsp+0x3e>

	knl_dispatch_disabled = DDS_ENABLE;
 800426e:	4b08      	ldr	r3, [pc, #32]	@ (8004290 <tk_ena_dsp+0x48>)
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]
	if ( knl_ctxtsk != knl_schedtsk ) {
 8004274:	4b05      	ldr	r3, [pc, #20]	@ (800428c <tk_ena_dsp+0x44>)
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	4b06      	ldr	r3, [pc, #24]	@ (8004294 <tk_ena_dsp+0x4c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d001      	beq.n	8004284 <tk_ena_dsp+0x3c>
		knl_dispatch();
 8004280:	f7ff fb0e 	bl	80038a0 <knl_dispatch>
	}

	return E_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	24001870 	.word	0x24001870
 8004290:	2400186c 	.word	0x2400186c
 8004294:	24001874 	.word	0x24001874

08004298 <tk_set_reg>:
/*
 * Set task register contents
 */
SYSCALL ER tk_set_reg( ID tskid,
		CONST T_REGS *pk_regs, CONST T_EIT *pk_eit, CONST T_CREGS *pk_cregs )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
 80042a4:	603b      	str	r3, [r7, #0]
	TCB		*tcb;
	ER		ercd = E_OK;
 80042a6:	2300      	movs	r3, #0
 80042a8:	61fb      	str	r3, [r7, #28]

	CHECK_INTSK();
 80042aa:	f7ff ff9f 	bl	80041ec <knl_isTaskIndependent>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d103      	bne.n	80042bc <tk_set_reg+0x24>
 80042b4:	4b30      	ldr	r3, [pc, #192]	@ (8004378 <tk_set_reg+0xe0>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d102      	bne.n	80042c2 <tk_set_reg+0x2a>
 80042bc:	f06f 0318 	mvn.w	r3, #24
 80042c0:	e056      	b.n	8004370 <tk_set_reg+0xd8>
	CHECK_TSKID(tskid);
 80042c2:	f7ff ff93 	bl	80041ec <knl_isTaskIndependent>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d109      	bne.n	80042e0 <tk_set_reg+0x48>
 80042cc:	4b2a      	ldr	r3, [pc, #168]	@ (8004378 <tk_set_reg+0xe0>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d005      	beq.n	80042e0 <tk_set_reg+0x48>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d102      	bne.n	80042e0 <tk_set_reg+0x48>
 80042da:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 80042de:	e047      	b.n	8004370 <tk_set_reg+0xd8>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	dd02      	ble.n	80042ec <tk_set_reg+0x54>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2b20      	cmp	r3, #32
 80042ea:	dd02      	ble.n	80042f2 <tk_set_reg+0x5a>
 80042ec:	f06f 0311 	mvn.w	r3, #17
 80042f0:	e03e      	b.n	8004370 <tk_set_reg+0xd8>
	CHECK_NONSELF(tskid);
 80042f2:	f7ff ff7b 	bl	80041ec <knl_isTaskIndependent>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10c      	bne.n	8004316 <tk_set_reg+0x7e>
 80042fc:	4b1e      	ldr	r3, [pc, #120]	@ (8004378 <tk_set_reg+0xe0>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d008      	beq.n	8004316 <tk_set_reg+0x7e>
 8004304:	4b1c      	ldr	r3, [pc, #112]	@ (8004378 <tk_set_reg+0xe0>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	429a      	cmp	r2, r3
 800430e:	d102      	bne.n	8004316 <tk_set_reg+0x7e>
 8004310:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 8004314:	e02c      	b.n	8004370 <tk_set_reg+0xd8>

	tcb = get_tcb(tskid);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3b01      	subs	r3, #1
 800431a:	2268      	movs	r2, #104	@ 0x68
 800431c:	fb02 f303 	mul.w	r3, r2, r3
 8004320:	4a16      	ldr	r2, [pc, #88]	@ (800437c <tk_set_reg+0xe4>)
 8004322:	4413      	add	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]

	BEGIN_CRITICAL_SECTION;
 8004326:	f009 f9f2 	bl	800d70e <disint>
 800432a:	6178      	str	r0, [r7, #20]
	if ( tcb->state == TS_NONEXIST ) {
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8004332:	2b00      	cmp	r3, #0
 8004334:	d103      	bne.n	800433e <tk_set_reg+0xa6>
		ercd = E_NOEXS;
 8004336:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 800433a:	61fb      	str	r3, [r7, #28]
 800433c:	e005      	b.n	800434a <tk_set_reg+0xb2>
	} else {
		knl_set_reg(tcb, pk_regs, pk_eit, pk_cregs);
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	68b9      	ldr	r1, [r7, #8]
 8004344:	69b8      	ldr	r0, [r7, #24]
 8004346:	f7ff f9f1 	bl	800372c <knl_set_reg>
	}
	END_CRITICAL_SECTION;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10b      	bne.n	8004368 <tk_set_reg+0xd0>
 8004350:	4b09      	ldr	r3, [pc, #36]	@ (8004378 <tk_set_reg+0xe0>)
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	4b0a      	ldr	r3, [pc, #40]	@ (8004380 <tk_set_reg+0xe8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	429a      	cmp	r2, r3
 800435a:	d005      	beq.n	8004368 <tk_set_reg+0xd0>
 800435c:	4b09      	ldr	r3, [pc, #36]	@ (8004384 <tk_set_reg+0xec>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <tk_set_reg+0xd0>
 8004364:	f7ff fa9c 	bl	80038a0 <knl_dispatch>
 8004368:	6978      	ldr	r0, [r7, #20]
 800436a:	f009 f9b8 	bl	800d6de <set_basepri>

	return ercd;
 800436e:	69fb      	ldr	r3, [r7, #28]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3720      	adds	r7, #32
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	24001870 	.word	0x24001870
 800437c:	24001988 	.word	0x24001988
 8004380:	24001874 	.word	0x24001874
 8004384:	2400186c 	.word	0x2400186c

08004388 <tk_get_reg>:
/* ------------------------------------------------------------------------ */
/*
 * Get task register contents
 */
SYSCALL ER tk_get_reg( ID tskid, T_REGS *pk_regs, T_EIT *pk_eit, T_CREGS *pk_cregs )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
 8004394:	603b      	str	r3, [r7, #0]
	TCB		*tcb;
	ER		ercd = E_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	61fb      	str	r3, [r7, #28]

	CHECK_INTSK();
 800439a:	f7ff ff27 	bl	80041ec <knl_isTaskIndependent>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d103      	bne.n	80043ac <tk_get_reg+0x24>
 80043a4:	4b30      	ldr	r3, [pc, #192]	@ (8004468 <tk_get_reg+0xe0>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d102      	bne.n	80043b2 <tk_get_reg+0x2a>
 80043ac:	f06f 0318 	mvn.w	r3, #24
 80043b0:	e056      	b.n	8004460 <tk_get_reg+0xd8>
	CHECK_TSKID(tskid);
 80043b2:	f7ff ff1b 	bl	80041ec <knl_isTaskIndependent>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d109      	bne.n	80043d0 <tk_get_reg+0x48>
 80043bc:	4b2a      	ldr	r3, [pc, #168]	@ (8004468 <tk_get_reg+0xe0>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d005      	beq.n	80043d0 <tk_get_reg+0x48>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d102      	bne.n	80043d0 <tk_get_reg+0x48>
 80043ca:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 80043ce:	e047      	b.n	8004460 <tk_get_reg+0xd8>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	dd02      	ble.n	80043dc <tk_get_reg+0x54>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2b20      	cmp	r3, #32
 80043da:	dd02      	ble.n	80043e2 <tk_get_reg+0x5a>
 80043dc:	f06f 0311 	mvn.w	r3, #17
 80043e0:	e03e      	b.n	8004460 <tk_get_reg+0xd8>
	CHECK_NONSELF(tskid);
 80043e2:	f7ff ff03 	bl	80041ec <knl_isTaskIndependent>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10c      	bne.n	8004406 <tk_get_reg+0x7e>
 80043ec:	4b1e      	ldr	r3, [pc, #120]	@ (8004468 <tk_get_reg+0xe0>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d008      	beq.n	8004406 <tk_get_reg+0x7e>
 80043f4:	4b1c      	ldr	r3, [pc, #112]	@ (8004468 <tk_get_reg+0xe0>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d102      	bne.n	8004406 <tk_get_reg+0x7e>
 8004400:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 8004404:	e02c      	b.n	8004460 <tk_get_reg+0xd8>

	tcb = get_tcb(tskid);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	3b01      	subs	r3, #1
 800440a:	2268      	movs	r2, #104	@ 0x68
 800440c:	fb02 f303 	mul.w	r3, r2, r3
 8004410:	4a16      	ldr	r2, [pc, #88]	@ (800446c <tk_get_reg+0xe4>)
 8004412:	4413      	add	r3, r2
 8004414:	61bb      	str	r3, [r7, #24]

	BEGIN_CRITICAL_SECTION;
 8004416:	f009 f97a 	bl	800d70e <disint>
 800441a:	6178      	str	r0, [r7, #20]
	if ( tcb->state == TS_NONEXIST ) {
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8004422:	2b00      	cmp	r3, #0
 8004424:	d103      	bne.n	800442e <tk_get_reg+0xa6>
		ercd = E_NOEXS;
 8004426:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 800442a:	61fb      	str	r3, [r7, #28]
 800442c:	e005      	b.n	800443a <tk_get_reg+0xb2>
	} else {
		knl_get_reg(tcb, pk_regs, pk_eit, pk_cregs);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	68b9      	ldr	r1, [r7, #8]
 8004434:	69b8      	ldr	r0, [r7, #24]
 8004436:	f7ff f9c7 	bl	80037c8 <knl_get_reg>
	}
	END_CRITICAL_SECTION;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10b      	bne.n	8004458 <tk_get_reg+0xd0>
 8004440:	4b09      	ldr	r3, [pc, #36]	@ (8004468 <tk_get_reg+0xe0>)
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	4b0a      	ldr	r3, [pc, #40]	@ (8004470 <tk_get_reg+0xe8>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	429a      	cmp	r2, r3
 800444a:	d005      	beq.n	8004458 <tk_get_reg+0xd0>
 800444c:	4b09      	ldr	r3, [pc, #36]	@ (8004474 <tk_get_reg+0xec>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <tk_get_reg+0xd0>
 8004454:	f7ff fa24 	bl	80038a0 <knl_dispatch>
 8004458:	6978      	ldr	r0, [r7, #20]
 800445a:	f009 f940 	bl	800d6de <set_basepri>

	return ercd;
 800445e:	69fb      	ldr	r3, [r7, #28]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3720      	adds	r7, #32
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	24001870 	.word	0x24001870
 800446c:	24001988 	.word	0x24001988
 8004470:	24001874 	.word	0x24001874
 8004474:	2400186c 	.word	0x2400186c

08004478 <QueInit>:

/*
 * Queue initialization 
 */
Inline void QueInit( QUEUE *que )
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	605a      	str	r2, [r3, #4]
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	bc80      	pop	{r7}
 8004494:	4770      	bx	lr

08004496 <isQueEmpty>:

/*
 * TRUE if the queue is empty 
 */
Inline BOOL isQueEmpty( QUEUE *que )
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
	return ( que->next == que )? TRUE: FALSE;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	bf0c      	ite	eq
 80044a8:	2301      	moveq	r3, #1
 80044aa:	2300      	movne	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bc80      	pop	{r7}
 80044b6:	4770      	bx	lr

080044b8 <QueInsert>:
/*
 * Insert in queue 
 *	Inserts entry directly prior to que 
 */
Inline void QueInsert( QUEUE *entry, QUEUE *que )
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	605a      	str	r2, [r3, #4]
	entry->next = que;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	605a      	str	r2, [r3, #4]
}
 80044de:	bf00      	nop
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc80      	pop	{r7}
 80044e6:	4770      	bx	lr

080044e8 <QueRemove>:
 * Delete from queue 
 *	Deletes entry from queue 
 *	No action is performed if entry is empty. 
 */
Inline void QueRemove( QUEUE *entry )
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
	if ( entry->next != entry ) {
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d009      	beq.n	800450e <QueRemove+0x26>
		entry->prev->next = (struct queue*) entry->next;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6812      	ldr	r2, [r2, #0]
 8004502:	601a      	str	r2, [r3, #0]
		entry->next->prev = (struct queue*) entry->prev;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6852      	ldr	r2, [r2, #4]
 800450c:	605a      	str	r2, [r3, #4]
	}
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr

08004518 <QueRemoveNext>:
 *	Deletes the entry directly after que from the queue,
 *	and returns the deleted entry.
 *	Returns NULL if que is empty.
 */
Inline QUEUE* QueRemoveNext( QUEUE *que )
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
	QUEUE	*entry;

	if ( que->next == que ) {
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	429a      	cmp	r2, r3
 8004528:	d101      	bne.n	800452e <QueRemoveNext+0x16>
		return NULL;
 800452a:	2300      	movs	r3, #0
 800452c:	e00b      	b.n	8004546 <QueRemoveNext+0x2e>
	}

	entry = que->next;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	60fb      	str	r3, [r7, #12]
	que->next = (struct queue*)entry->next;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	601a      	str	r2, [r3, #0]
	entry->next->prev = que;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	605a      	str	r2, [r3, #4]

	return entry;
 8004544:	68fb      	ldr	r3, [r7, #12]
}
 8004546:	4618      	mov	r0, r3
 8004548:	3714      	adds	r7, #20
 800454a:	46bd      	mov	sp, r7
 800454c:	bc80      	pop	{r7}
 800454e:	4770      	bx	lr

08004550 <knl_check_devid>:

/*
 * Verify validity of device ID
 */
Inline ER knl_check_devid( ID devid )
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
	devid >>= 8;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	121b      	asrs	r3, r3, #8
 800455c:	607b      	str	r3, [r7, #4]
	if ( devid < 1 || devid > MAX_REGDEV ) {
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	dd02      	ble.n	800456a <knl_check_devid+0x1a>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b08      	cmp	r3, #8
 8004568:	dd02      	ble.n	8004570 <knl_check_devid+0x20>
		return E_ID;
 800456a:	f06f 0311 	mvn.w	r3, #17
 800456e:	e000      	b.n	8004572 <knl_check_devid+0x22>
	}
	return E_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	370c      	adds	r7, #12
 8004576:	46bd      	mov	sp, r7
 8004578:	bc80      	pop	{r7}
 800457a:	4770      	bx	lr

0800457c <knl_searchDevCB>:

/*
 * Search registration device
 */
EXPORT DevCB* knl_searchDevCB( CONST UB *devnm )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
	QUEUE	*q;
	DevCB	*devcb;

	for ( q = knl_UsedDevCB.next; q != &knl_UsedDevCB; q = q->next ) {
 8004584:	4b11      	ldr	r3, [pc, #68]	@ (80045cc <knl_searchDevCB+0x50>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	e015      	b.n	80045b8 <knl_searchDevCB+0x3c>
		devcb = (DevCB*)q;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	60bb      	str	r3, [r7, #8]

		if ( devcb->devnm[0] == devnm[0] && knl_strcmp((char*)devcb->devnm, (char*)devnm) == 0 ) {
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	7a1a      	ldrb	r2, [r3, #8]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	429a      	cmp	r2, r3
 800459a:	d10a      	bne.n	80045b2 <knl_searchDevCB+0x36>
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	3308      	adds	r3, #8
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f008 fe53 	bl	800d24e <knl_strcmp>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <knl_searchDevCB+0x36>
			return devcb; /* Found */
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	e007      	b.n	80045c2 <knl_searchDevCB+0x46>
	for ( q = knl_UsedDevCB.next; q != &knl_UsedDevCB; q = q->next ) {
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4a04      	ldr	r2, [pc, #16]	@ (80045cc <knl_searchDevCB+0x50>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d1e5      	bne.n	800458c <knl_searchDevCB+0x10>
		}
	}

	return NULL;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	24000a14 	.word	0x24000a14

080045d0 <newDevCB>:

/*
 * Get DevCB for new registration
 */
LOCAL DevCB* newDevCB( CONST UB *devnm )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
	DevCB	*devcb;

	devcb = (DevCB*)QueRemoveNext(&knl_FreeDevCB);
 80045d8:	480f      	ldr	r0, [pc, #60]	@ (8004618 <newDevCB+0x48>)
 80045da:	f7ff ff9d 	bl	8004518 <QueRemoveNext>
 80045de:	60f8      	str	r0, [r7, #12]
	if ( devcb == NULL ) {
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <newDevCB+0x1a>
		return NULL; /* No space */
 80045e6:	2300      	movs	r3, #0
 80045e8:	e011      	b.n	800460e <newDevCB+0x3e>
	}

	knl_strncpy((char*)devcb->devnm, (char*)devnm, L_DEVNM+1);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	3308      	adds	r3, #8
 80045ee:	2209      	movs	r2, #9
 80045f0:	6879      	ldr	r1, [r7, #4]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f008 fe02 	bl	800d1fc <knl_strncpy>
	QueInit(&devcb->openq);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	3340      	adds	r3, #64	@ 0x40
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff ff3b 	bl	8004478 <QueInit>

	QueInsert(&devcb->q, &knl_UsedDevCB);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	4905      	ldr	r1, [pc, #20]	@ (800461c <newDevCB+0x4c>)
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff ff56 	bl	80044b8 <QueInsert>

	return devcb;
 800460c:	68fb      	ldr	r3, [r7, #12]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	24000a1c 	.word	0x24000a1c
 800461c:	24000a14 	.word	0x24000a14

08004620 <delDevCB>:

/*
 * Free DevCB
 */
LOCAL void delDevCB( DevCB *devcb )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b082      	sub	sp, #8
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
	QueRemove(&devcb->q);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff ff5c 	bl	80044e8 <QueRemove>
	QueInsert(&devcb->q, &knl_FreeDevCB);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4905      	ldr	r1, [pc, #20]	@ (8004648 <delDevCB+0x28>)
 8004634:	4618      	mov	r0, r3
 8004636:	f7ff ff3f 	bl	80044b8 <QueInsert>
	devcb->devnm[0] = '\0';
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	721a      	strb	r2, [r3, #8]
}
 8004640:	bf00      	nop
 8004642:	3708      	adds	r7, #8
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	24000a1c 	.word	0x24000a1c

0800464c <tk_def_dev>:

/*
 * Device registration
 */
SYSCALL ID tk_def_dev( CONST UB *devnm, CONST T_DDEV *pk_ddev, T_IDEV *pk_idev )
{
 800464c:	b5b0      	push	{r4, r5, r7, lr}
 800464e:	b088      	sub	sp, #32
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
	DevCB	*devcb;
	INT	len;
	ER	ercd;

	LockREG();
 8004658:	2101      	movs	r1, #1
 800465a:	484f      	ldr	r0, [pc, #316]	@ (8004798 <tk_def_dev+0x14c>)
 800465c:	f008 ff7d 	bl	800d55a <MLock>

	len = knl_strlen((char*)devnm);
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f008 fda3 	bl	800d1ac <knl_strlen>
 8004666:	61b8      	str	r0, [r7, #24]
	if ( len == 0 || len > L_DEVNM ) {
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <tk_def_dev+0x28>
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	2b08      	cmp	r3, #8
 8004672:	dd03      	ble.n	800467c <tk_def_dev+0x30>
		ercd = E_PAR;
 8004674:	f06f 0310 	mvn.w	r3, #16
 8004678:	617b      	str	r3, [r7, #20]
		goto err_ret1;
 800467a:	e084      	b.n	8004786 <tk_def_dev+0x13a>
	}

	if ( pk_ddev != NULL ) {
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d027      	beq.n	80046d2 <tk_def_dev+0x86>
		if ( pk_ddev->nsub < 0 || pk_ddev->nsub > MAX_UNIT ) {
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	2b00      	cmp	r3, #0
 8004688:	db03      	blt.n	8004692 <tk_def_dev+0x46>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	2bff      	cmp	r3, #255	@ 0xff
 8004690:	dd03      	ble.n	800469a <tk_def_dev+0x4e>
			ercd = E_PAR;
 8004692:	f06f 0310 	mvn.w	r3, #16
 8004696:	617b      	str	r3, [r7, #20]
			goto err_ret1;
 8004698:	e075      	b.n	8004786 <tk_def_dev+0x13a>
		}

		/* Make sure that the length of the logical device name
		   does not exceed the character limit */
		if ( pk_ddev->nsub > 0   ) {
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	dd02      	ble.n	80046a8 <tk_def_dev+0x5c>
			++len;
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	3301      	adds	r3, #1
 80046a6:	61bb      	str	r3, [r7, #24]
		}
		if ( pk_ddev->nsub > 10  ) {
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	2b0a      	cmp	r3, #10
 80046ae:	dd02      	ble.n	80046b6 <tk_def_dev+0x6a>
			++len;
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	3301      	adds	r3, #1
 80046b4:	61bb      	str	r3, [r7, #24]
		}
		if ( pk_ddev->nsub > 100 ) {
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	2b64      	cmp	r3, #100	@ 0x64
 80046bc:	dd02      	ble.n	80046c4 <tk_def_dev+0x78>
			++len;
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	3301      	adds	r3, #1
 80046c2:	61bb      	str	r3, [r7, #24]
		}
		if ( len > L_DEVNM ) {
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	2b08      	cmp	r3, #8
 80046c8:	dd03      	ble.n	80046d2 <tk_def_dev+0x86>
			ercd = E_PAR;
 80046ca:	f06f 0310 	mvn.w	r3, #16
 80046ce:	617b      	str	r3, [r7, #20]
			goto err_ret1;
 80046d0:	e059      	b.n	8004786 <tk_def_dev+0x13a>
		}
	}

	LockDM();
 80046d2:	2100      	movs	r1, #0
 80046d4:	4830      	ldr	r0, [pc, #192]	@ (8004798 <tk_def_dev+0x14c>)
 80046d6:	f008 ff40 	bl	800d55a <MLock>

	/* Search whether 'devnm' device is registered */
	devcb = knl_searchDevCB(devnm);
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f7ff ff4e 	bl	800457c <knl_searchDevCB>
 80046e0:	61f8      	str	r0, [r7, #28]
	if ( devcb == NULL ) {
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d111      	bne.n	800470c <tk_def_dev+0xc0>
		if ( pk_ddev == NULL ) {
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d103      	bne.n	80046f6 <tk_def_dev+0xaa>
			ercd = E_NOEXS;
 80046ee:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 80046f2:	617b      	str	r3, [r7, #20]
			goto err_ret2;
 80046f4:	e043      	b.n	800477e <tk_def_dev+0x132>
		}

		/* Get 'devcb' for new registration because it is not
		   registered */
		devcb = newDevCB(devnm);
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f7ff ff6a 	bl	80045d0 <newDevCB>
 80046fc:	61f8      	str	r0, [r7, #28]
		if ( devcb == NULL ) {
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d103      	bne.n	800470c <tk_def_dev+0xc0>
			ercd = E_LIMIT;
 8004704:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8004708:	617b      	str	r3, [r7, #20]
			goto err_ret2;
 800470a:	e038      	b.n	800477e <tk_def_dev+0x132>
		}
	}

	if ( pk_ddev != NULL ) {
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d014      	beq.n	800473c <tk_def_dev+0xf0>
		/* Set/update device registration information */
		devcb->ddev = *pk_ddev;
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	f103 0414 	add.w	r4, r3, #20
 800471a:	4615      	mov	r5, r2
 800471c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800471e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004720:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004724:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004728:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		if ( pk_idev != NULL ) {
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d013      	beq.n	800475a <tk_def_dev+0x10e>
			/* Device initial setting information */
			*pk_idev = knl_DefaultIDev;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a19      	ldr	r2, [pc, #100]	@ (800479c <tk_def_dev+0x150>)
 8004736:	6812      	ldr	r2, [r2, #0]
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	e00e      	b.n	800475a <tk_def_dev+0x10e>
		}
	} else {
		if ( !isQueEmpty(&devcb->openq) ) {
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	3340      	adds	r3, #64	@ 0x40
 8004740:	4618      	mov	r0, r3
 8004742:	f7ff fea8 	bl	8004496 <isQueEmpty>
 8004746:	4603      	mov	r3, r0
 8004748:	2b00      	cmp	r3, #0
 800474a:	d103      	bne.n	8004754 <tk_def_dev+0x108>
			/* In use (open) */
			ercd = E_BUSY;
 800474c:	f06f 0340 	mvn.w	r3, #64	@ 0x40
 8004750:	617b      	str	r3, [r7, #20]
			goto err_ret2;
 8004752:	e014      	b.n	800477e <tk_def_dev+0x132>
		}

		/* Device unregistration */
		delDevCB(devcb);
 8004754:	69f8      	ldr	r0, [r7, #28]
 8004756:	f7ff ff63 	bl	8004620 <delDevCB>
	}

	UnlockDM();
 800475a:	2100      	movs	r1, #0
 800475c:	480e      	ldr	r0, [pc, #56]	@ (8004798 <tk_def_dev+0x14c>)
 800475e:	f008 ff0c 	bl	800d57a <MUnlock>
	UnlockREG();
 8004762:	2101      	movs	r1, #1
 8004764:	480c      	ldr	r0, [pc, #48]	@ (8004798 <tk_def_dev+0x14c>)
 8004766:	f008 ff08 	bl	800d57a <MUnlock>

	return DID(devcb);
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	4a0c      	ldr	r2, [pc, #48]	@ (80047a0 <tk_def_dev+0x154>)
 800476e:	1a9b      	subs	r3, r3, r2
 8004770:	10db      	asrs	r3, r3, #3
 8004772:	4a0c      	ldr	r2, [pc, #48]	@ (80047a4 <tk_def_dev+0x158>)
 8004774:	fb02 f303 	mul.w	r3, r2, r3
 8004778:	3301      	adds	r3, #1
 800477a:	021b      	lsls	r3, r3, #8
 800477c:	e008      	b.n	8004790 <tk_def_dev+0x144>

err_ret2:
	UnlockDM();
 800477e:	2100      	movs	r1, #0
 8004780:	4805      	ldr	r0, [pc, #20]	@ (8004798 <tk_def_dev+0x14c>)
 8004782:	f008 fefa 	bl	800d57a <MUnlock>
err_ret1:
	UnlockREG();
 8004786:	2101      	movs	r1, #1
 8004788:	4803      	ldr	r0, [pc, #12]	@ (8004798 <tk_def_dev+0x14c>)
 800478a:	f008 fef6 	bl	800d57a <MUnlock>
	return ercd;
 800478e:	697b      	ldr	r3, [r7, #20]
}
 8004790:	4618      	mov	r0, r3
 8004792:	3720      	adds	r7, #32
 8004794:	46bd      	mov	sp, r7
 8004796:	bdb0      	pop	{r4, r5, r7, pc}
 8004798:	240007c0 	.word	0x240007c0
 800479c:	240007d0 	.word	0x240007d0
 80047a0:	240007d4 	.word	0x240007d4
 80047a4:	38e38e39 	.word	0x38e38e39

080047a8 <tk_ref_idv>:

/*
 * Check device initial information
 */
SYSCALL ER tk_ref_idv( T_IDEV *pk_idev )
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
	LockDM();
 80047b0:	2100      	movs	r1, #0
 80047b2:	4808      	ldr	r0, [pc, #32]	@ (80047d4 <tk_ref_idv+0x2c>)
 80047b4:	f008 fed1 	bl	800d55a <MLock>
	*pk_idev = knl_DefaultIDev;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a07      	ldr	r2, [pc, #28]	@ (80047d8 <tk_ref_idv+0x30>)
 80047bc:	6812      	ldr	r2, [r2, #0]
 80047be:	601a      	str	r2, [r3, #0]
	UnlockDM();
 80047c0:	2100      	movs	r1, #0
 80047c2:	4804      	ldr	r0, [pc, #16]	@ (80047d4 <tk_ref_idv+0x2c>)
 80047c4:	f008 fed9 	bl	800d57a <MUnlock>

	return E_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	240007c0 	.word	0x240007c0
 80047d8:	240007d0 	.word	0x240007d0

080047dc <knl_phydevnm>:
 *	Get the subunit number (return value) 
 *	from the logical device name (ldevnm) and the physical
 *	device name (pdevnm).
 */
EXPORT INT knl_phydevnm( UB *pdevnm, CONST UB *ldevnm )
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
	UB	c;
	INT	unitno;

	while ( (c = *ldevnm) != '\0' ) {
 80047e6:	e00d      	b.n	8004804 <knl_phydevnm+0x28>
		if ( c >= '0' && c <= '9' ) {
 80047e8:	7afb      	ldrb	r3, [r7, #11]
 80047ea:	2b2f      	cmp	r3, #47	@ 0x2f
 80047ec:	d902      	bls.n	80047f4 <knl_phydevnm+0x18>
 80047ee:	7afb      	ldrb	r3, [r7, #11]
 80047f0:	2b39      	cmp	r3, #57	@ 0x39
 80047f2:	d90e      	bls.n	8004812 <knl_phydevnm+0x36>
			break;
		}
		*pdevnm++ = c;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	1c5a      	adds	r2, r3, #1
 80047f8:	607a      	str	r2, [r7, #4]
 80047fa:	7afa      	ldrb	r2, [r7, #11]
 80047fc:	701a      	strb	r2, [r3, #0]
		ldevnm++;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	3301      	adds	r3, #1
 8004802:	603b      	str	r3, [r7, #0]
	while ( (c = *ldevnm) != '\0' ) {
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	72fb      	strb	r3, [r7, #11]
 800480a:	7afb      	ldrb	r3, [r7, #11]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1eb      	bne.n	80047e8 <knl_phydevnm+0xc>
 8004810:	e000      	b.n	8004814 <knl_phydevnm+0x38>
			break;
 8004812:	bf00      	nop
	}
	*pdevnm = '\0';
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	701a      	strb	r2, [r3, #0]

	unitno = 0;
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]
	if (c != '\0') {
 800481e:	7afb      	ldrb	r3, [r7, #11]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d016      	beq.n	8004852 <knl_phydevnm+0x76>
		while ( (c = *ldevnm) != '\0' ) {
 8004824:	e00c      	b.n	8004840 <knl_phydevnm+0x64>
			unitno = unitno * 10 + (c - '0');
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	4613      	mov	r3, r2
 800482a:	009b      	lsls	r3, r3, #2
 800482c:	4413      	add	r3, r2
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	461a      	mov	r2, r3
 8004832:	7afb      	ldrb	r3, [r7, #11]
 8004834:	3b30      	subs	r3, #48	@ 0x30
 8004836:	4413      	add	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]
			ldevnm++;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	3301      	adds	r3, #1
 800483e:	603b      	str	r3, [r7, #0]
		while ( (c = *ldevnm) != '\0' ) {
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	72fb      	strb	r3, [r7, #11]
 8004846:	7afb      	ldrb	r3, [r7, #11]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1ec      	bne.n	8004826 <knl_phydevnm+0x4a>
		}
		++unitno;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	3301      	adds	r3, #1
 8004850:	60fb      	str	r3, [r7, #12]
	}

	return unitno;
 8004852:	68fb      	ldr	r3, [r7, #12]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	bc80      	pop	{r7}
 800485c:	4770      	bx	lr
	...

08004860 <logdevnm>:
 * Get logical device name
 *	Get the logical device name from
 *	the physical device name (pdevnm) and the subunit number (unitno).
 */
LOCAL void logdevnm( UB *ldevnm, UB *pdevnm, INT unitno )
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b088      	sub	sp, #32
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
	UB	unostr[12], *cp;

	knl_strcpy((char*)ldevnm, (char*)pdevnm);
 800486c:	68b9      	ldr	r1, [r7, #8]
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f008 fcad 	bl	800d1ce <knl_strcpy>
	if ( unitno > 0 ) {
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	dd34      	ble.n	80048e4 <logdevnm+0x84>
		cp = &unostr[11];
 800487a:	f107 0310 	add.w	r3, r7, #16
 800487e:	330b      	adds	r3, #11
 8004880:	61fb      	str	r3, [r7, #28]
		*cp = '\0';
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	2200      	movs	r2, #0
 8004886:	701a      	strb	r2, [r3, #0]
		while (*ldevnm != '\0') {
 8004888:	e002      	b.n	8004890 <logdevnm+0x30>
			++ldevnm;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	3301      	adds	r3, #1
 800488e:	60fb      	str	r3, [r7, #12]
		while (*ldevnm != '\0') {
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1f8      	bne.n	800488a <logdevnm+0x2a>
		}
		--unitno;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	3b01      	subs	r3, #1
 800489c:	607b      	str	r3, [r7, #4]
		do {
			*(--cp) = (UB)('0' + (unitno % 10));
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	4b12      	ldr	r3, [pc, #72]	@ (80048ec <logdevnm+0x8c>)
 80048a2:	fb83 1302 	smull	r1, r3, r3, r2
 80048a6:	1099      	asrs	r1, r3, #2
 80048a8:	17d3      	asrs	r3, r2, #31
 80048aa:	1ac9      	subs	r1, r1, r3
 80048ac:	460b      	mov	r3, r1
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	1ad1      	subs	r1, r2, r3
 80048b6:	b2cb      	uxtb	r3, r1
 80048b8:	69fa      	ldr	r2, [r7, #28]
 80048ba:	3a01      	subs	r2, #1
 80048bc:	61fa      	str	r2, [r7, #28]
 80048be:	3330      	adds	r3, #48	@ 0x30
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	701a      	strb	r2, [r3, #0]
			unitno /= 10;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a08      	ldr	r2, [pc, #32]	@ (80048ec <logdevnm+0x8c>)
 80048ca:	fb82 1203 	smull	r1, r2, r2, r3
 80048ce:	1092      	asrs	r2, r2, #2
 80048d0:	17db      	asrs	r3, r3, #31
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	607b      	str	r3, [r7, #4]
		} while (unitno);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1e0      	bne.n	800489e <logdevnm+0x3e>
		knl_strcat((char*)ldevnm, (char*)cp);
 80048dc:	69f9      	ldr	r1, [r7, #28]
 80048de:	68f8      	ldr	r0, [r7, #12]
 80048e0:	f008 fcd8 	bl	800d294 <knl_strcat>
	}
}
 80048e4:	bf00      	nop
 80048e6:	3720      	adds	r7, #32
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	66666667 	.word	0x66666667

080048f0 <tk_get_dev>:

/*
 * Get device name
 */
SYSCALL ID tk_get_dev( ID devid, UB *devnm )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
	DevCB	*devcb;
	ER	ercd;

	ercd = knl_check_devid(devid);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7ff fe28 	bl	8004550 <knl_check_devid>
 8004900:	60f8      	str	r0, [r7, #12]
	if ( ercd < E_OK ) {
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2b00      	cmp	r3, #0
 8004906:	db37      	blt.n	8004978 <tk_get_dev+0x88>
		goto err_ret1;
	}

	LockDM();
 8004908:	2100      	movs	r1, #0
 800490a:	481e      	ldr	r0, [pc, #120]	@ (8004984 <tk_get_dev+0x94>)
 800490c:	f008 fe25 	bl	800d55a <MLock>

	devcb = DEVCB(devid);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	121b      	asrs	r3, r3, #8
 8004914:	461a      	mov	r2, r3
 8004916:	4613      	mov	r3, r2
 8004918:	00db      	lsls	r3, r3, #3
 800491a:	4413      	add	r3, r2
 800491c:	00db      	lsls	r3, r3, #3
 800491e:	3b48      	subs	r3, #72	@ 0x48
 8004920:	4a19      	ldr	r2, [pc, #100]	@ (8004988 <tk_get_dev+0x98>)
 8004922:	4413      	add	r3, r2
 8004924:	60bb      	str	r3, [r7, #8]
	if ( (devcb->devnm[0] == '\0')||(UNITNO(devid) > devcb->ddev.nsub) ) {
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	7a1b      	ldrb	r3, [r3, #8]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d005      	beq.n	800493a <tk_get_dev+0x4a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	b2da      	uxtb	r2, r3
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	429a      	cmp	r2, r3
 8004938:	dd08      	ble.n	800494c <tk_get_dev+0x5c>
		ercd = E_NOEXS;
 800493a:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 800493e:	60fb      	str	r3, [r7, #12]
		goto err_ret2;
 8004940:	bf00      	nop
	UnlockDM();

	return DID(devcb);

err_ret2:
	UnlockDM();
 8004942:	2100      	movs	r1, #0
 8004944:	480f      	ldr	r0, [pc, #60]	@ (8004984 <tk_get_dev+0x94>)
 8004946:	f008 fe18 	bl	800d57a <MUnlock>
 800494a:	e016      	b.n	800497a <tk_get_dev+0x8a>
	logdevnm(devnm, devcb->devnm, UNITNO(devid));
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	3308      	adds	r3, #8
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	4619      	mov	r1, r3
 8004956:	6838      	ldr	r0, [r7, #0]
 8004958:	f7ff ff82 	bl	8004860 <logdevnm>
	UnlockDM();
 800495c:	2100      	movs	r1, #0
 800495e:	4809      	ldr	r0, [pc, #36]	@ (8004984 <tk_get_dev+0x94>)
 8004960:	f008 fe0b 	bl	800d57a <MUnlock>
	return DID(devcb);
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	4a08      	ldr	r2, [pc, #32]	@ (8004988 <tk_get_dev+0x98>)
 8004968:	1a9b      	subs	r3, r3, r2
 800496a:	10db      	asrs	r3, r3, #3
 800496c:	4a07      	ldr	r2, [pc, #28]	@ (800498c <tk_get_dev+0x9c>)
 800496e:	fb02 f303 	mul.w	r3, r2, r3
 8004972:	3301      	adds	r3, #1
 8004974:	021b      	lsls	r3, r3, #8
 8004976:	e001      	b.n	800497c <tk_get_dev+0x8c>
		goto err_ret1;
 8004978:	bf00      	nop
err_ret1:
	return ercd;
 800497a:	68fb      	ldr	r3, [r7, #12]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	240007c0 	.word	0x240007c0
 8004988:	240007d4 	.word	0x240007d4
 800498c:	38e38e39 	.word	0x38e38e39

08004990 <tk_ref_dev>:

/*
 * Get device information
 */
SYSCALL ID tk_ref_dev( CONST UB *devnm, T_RDEV *pk_rdev )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
	UB	pdevnm[L_DEVNM + 1];
	DevCB	*devcb;
	INT	unitno;
	ER	ercd;

	unitno = knl_phydevnm(pdevnm, devnm);
 800499a:	f107 0308 	add.w	r3, r7, #8
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	4618      	mov	r0, r3
 80049a2:	f7ff ff1b 	bl	80047dc <knl_phydevnm>
 80049a6:	61f8      	str	r0, [r7, #28]

	LockDM();
 80049a8:	2100      	movs	r1, #0
 80049aa:	4820      	ldr	r0, [pc, #128]	@ (8004a2c <tk_ref_dev+0x9c>)
 80049ac:	f008 fdd5 	bl	800d55a <MLock>

	devcb = knl_searchDevCB(pdevnm);
 80049b0:	f107 0308 	add.w	r3, r7, #8
 80049b4:	4618      	mov	r0, r3
 80049b6:	f7ff fde1 	bl	800457c <knl_searchDevCB>
 80049ba:	61b8      	str	r0, [r7, #24]
	if ( devcb == NULL || unitno > devcb->ddev.nsub ) {
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d004      	beq.n	80049cc <tk_ref_dev+0x3c>
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	69fa      	ldr	r2, [r7, #28]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	dd09      	ble.n	80049e0 <tk_ref_dev+0x50>
		ercd = E_NOEXS;
 80049cc:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 80049d0:	617b      	str	r3, [r7, #20]
		goto err_ret2;
 80049d2:	bf00      	nop
	UnlockDM();

	return DEVID(devcb, unitno);

err_ret2:
	UnlockDM();
 80049d4:	2100      	movs	r1, #0
 80049d6:	4815      	ldr	r0, [pc, #84]	@ (8004a2c <tk_ref_dev+0x9c>)
 80049d8:	f008 fdcf 	bl	800d57a <MUnlock>
	return ercd;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	e020      	b.n	8004a22 <tk_ref_dev+0x92>
	if ( pk_rdev != NULL ) {
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00e      	beq.n	8004a04 <tk_ref_dev+0x74>
		pk_rdev->devatr = devcb->ddev.devatr;
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	69da      	ldr	r2, [r3, #28]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	601a      	str	r2, [r3, #0]
		pk_rdev->blksz  = devcb->ddev.blksz;
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	605a      	str	r2, [r3, #4]
		pk_rdev->nsub   = devcb->ddev.nsub;
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	6a1a      	ldr	r2, [r3, #32]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	609a      	str	r2, [r3, #8]
		pk_rdev->subno  = unitno;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	69fa      	ldr	r2, [r7, #28]
 8004a02:	60da      	str	r2, [r3, #12]
	UnlockDM();
 8004a04:	2100      	movs	r1, #0
 8004a06:	4809      	ldr	r0, [pc, #36]	@ (8004a2c <tk_ref_dev+0x9c>)
 8004a08:	f008 fdb7 	bl	800d57a <MUnlock>
	return DEVID(devcb, unitno);
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	4a08      	ldr	r2, [pc, #32]	@ (8004a30 <tk_ref_dev+0xa0>)
 8004a10:	1a9b      	subs	r3, r3, r2
 8004a12:	10db      	asrs	r3, r3, #3
 8004a14:	4a07      	ldr	r2, [pc, #28]	@ (8004a34 <tk_ref_dev+0xa4>)
 8004a16:	fb02 f303 	mul.w	r3, r2, r3
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	021a      	lsls	r2, r3, #8
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	4413      	add	r3, r2
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3720      	adds	r7, #32
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	240007c0 	.word	0x240007c0
 8004a30:	240007d4 	.word	0x240007d4
 8004a34:	38e38e39 	.word	0x38e38e39

08004a38 <tk_oref_dev>:

/*
 * Get device information
 */
SYSCALL ID tk_oref_dev( ID dd, T_RDEV *pk_rdev )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
	OpnCB	*opncb;
	DevCB	*devcb;
	INT	unitno;
	ER	ercd;

	LockDM();
 8004a42:	2100      	movs	r1, #0
 8004a44:	481f      	ldr	r0, [pc, #124]	@ (8004ac4 <tk_oref_dev+0x8c>)
 8004a46:	f008 fd88 	bl	800d55a <MLock>

	ercd = knl_check_devdesc(dd, 0, &opncb);
 8004a4a:	f107 0308 	add.w	r3, r7, #8
 8004a4e:	461a      	mov	r2, r3
 8004a50:	2100      	movs	r1, #0
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fa24 	bl	8004ea0 <knl_check_devdesc>
 8004a58:	6178      	str	r0, [r7, #20]
	if ( ercd < E_OK ) {
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	db27      	blt.n	8004ab0 <tk_oref_dev+0x78>
		goto err_ret2;
	}

	devcb  = opncb->devcb;
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	613b      	str	r3, [r7, #16]
	unitno = opncb->unitno;
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	60fb      	str	r3, [r7, #12]

	if ( pk_rdev != NULL ) {
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00e      	beq.n	8004a90 <tk_oref_dev+0x58>
		pk_rdev->devatr = devcb->ddev.devatr;
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	69da      	ldr	r2, [r3, #28]
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	601a      	str	r2, [r3, #0]
		pk_rdev->blksz  = devcb->ddev.blksz;
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	605a      	str	r2, [r3, #4]
		pk_rdev->nsub   = devcb->ddev.nsub;
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	6a1a      	ldr	r2, [r3, #32]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	609a      	str	r2, [r3, #8]
		pk_rdev->subno  = unitno;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	60da      	str	r2, [r3, #12]
	}

	UnlockDM();
 8004a90:	2100      	movs	r1, #0
 8004a92:	480c      	ldr	r0, [pc, #48]	@ (8004ac4 <tk_oref_dev+0x8c>)
 8004a94:	f008 fd71 	bl	800d57a <MUnlock>

	return DEVID(devcb, unitno);
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	4a0b      	ldr	r2, [pc, #44]	@ (8004ac8 <tk_oref_dev+0x90>)
 8004a9c:	1a9b      	subs	r3, r3, r2
 8004a9e:	10db      	asrs	r3, r3, #3
 8004aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8004acc <tk_oref_dev+0x94>)
 8004aa2:	fb02 f303 	mul.w	r3, r2, r3
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	021a      	lsls	r2, r3, #8
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	4413      	add	r3, r2
 8004aae:	e005      	b.n	8004abc <tk_oref_dev+0x84>
		goto err_ret2;
 8004ab0:	bf00      	nop

err_ret2:
	UnlockDM();
 8004ab2:	2100      	movs	r1, #0
 8004ab4:	4803      	ldr	r0, [pc, #12]	@ (8004ac4 <tk_oref_dev+0x8c>)
 8004ab6:	f008 fd60 	bl	800d57a <MUnlock>
	return ercd;
 8004aba:	697b      	ldr	r3, [r7, #20]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3718      	adds	r7, #24
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	240007c0 	.word	0x240007c0
 8004ac8:	240007d4 	.word	0x240007d4
 8004acc:	38e38e39 	.word	0x38e38e39

08004ad0 <tk_lst_dev>:

/*
 * Get registration device list
 */
SYSCALL INT tk_lst_dev( T_LDEV *pk_ldev, INT start, INT ndev )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08a      	sub	sp, #40	@ 0x28
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
	DevCB	*devcb;
	QUEUE	*q;
	INT	n, end;
	ER	ercd;

	if ( start < 0 || ndev < 0 ) {
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	db02      	blt.n	8004ae8 <tk_lst_dev+0x18>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	da03      	bge.n	8004af0 <tk_lst_dev+0x20>
		ercd = E_PAR;
 8004ae8:	f06f 0310 	mvn.w	r3, #16
 8004aec:	61fb      	str	r3, [r7, #28]
		goto err_ret;
 8004aee:	e049      	b.n	8004b84 <tk_lst_dev+0xb4>
	}
	LockDM();
 8004af0:	2100      	movs	r1, #0
 8004af2:	4827      	ldr	r0, [pc, #156]	@ (8004b90 <tk_lst_dev+0xc0>)
 8004af4:	f008 fd31 	bl	800d55a <MLock>

	end = start + ndev;
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4413      	add	r3, r2
 8004afe:	61bb      	str	r3, [r7, #24]
	n = 0;
 8004b00:	2300      	movs	r3, #0
 8004b02:	623b      	str	r3, [r7, #32]
	for ( q = knl_UsedDevCB.next; q != &knl_UsedDevCB; q = q->next ) {
 8004b04:	4b23      	ldr	r3, [pc, #140]	@ (8004b94 <tk_lst_dev+0xc4>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b0a:	e027      	b.n	8004b5c <tk_lst_dev+0x8c>
		if ( n >= start && n < end ) {
 8004b0c:	6a3a      	ldr	r2, [r7, #32]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	429a      	cmp	r2, r3
 8004b12:	db1d      	blt.n	8004b50 <tk_lst_dev+0x80>
 8004b14:	6a3a      	ldr	r2, [r7, #32]
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	da19      	bge.n	8004b50 <tk_lst_dev+0x80>
			devcb = (DevCB*)q;
 8004b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1e:	617b      	str	r3, [r7, #20]
			pk_ldev->devatr = devcb->ddev.devatr;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	69da      	ldr	r2, [r3, #28]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	601a      	str	r2, [r3, #0]
			pk_ldev->blksz  = devcb->ddev.blksz;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	605a      	str	r2, [r3, #4]
			pk_ldev->nsub   = devcb->ddev.nsub;
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	6a1a      	ldr	r2, [r3, #32]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	609a      	str	r2, [r3, #8]
			knl_strncpy((char*)pk_ldev->devnm, (char*)devcb->devnm, L_DEVNM);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f103 000c 	add.w	r0, r3, #12
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	3308      	adds	r3, #8
 8004b42:	2208      	movs	r2, #8
 8004b44:	4619      	mov	r1, r3
 8004b46:	f008 fb59 	bl	800d1fc <knl_strncpy>
			pk_ldev++;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	3314      	adds	r3, #20
 8004b4e:	60fb      	str	r3, [r7, #12]
		}
		n++;
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	3301      	adds	r3, #1
 8004b54:	623b      	str	r3, [r7, #32]
	for ( q = knl_UsedDevCB.next; q != &knl_UsedDevCB; q = q->next ) {
 8004b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5e:	4a0d      	ldr	r2, [pc, #52]	@ (8004b94 <tk_lst_dev+0xc4>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d1d3      	bne.n	8004b0c <tk_lst_dev+0x3c>
	}

	UnlockDM();
 8004b64:	2100      	movs	r1, #0
 8004b66:	480a      	ldr	r0, [pc, #40]	@ (8004b90 <tk_lst_dev+0xc0>)
 8004b68:	f008 fd07 	bl	800d57a <MUnlock>

	if ( start >= n ) {
 8004b6c:	68ba      	ldr	r2, [r7, #8]
 8004b6e:	6a3b      	ldr	r3, [r7, #32]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	db03      	blt.n	8004b7c <tk_lst_dev+0xac>
		ercd = E_NOEXS;
 8004b74:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 8004b78:	61fb      	str	r3, [r7, #28]
		goto err_ret;
 8004b7a:	e003      	b.n	8004b84 <tk_lst_dev+0xb4>
	}

	return n - start;
 8004b7c:	6a3a      	ldr	r2, [r7, #32]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	e000      	b.n	8004b86 <tk_lst_dev+0xb6>

err_ret:
	return ercd;
 8004b84:	69fb      	ldr	r3, [r7, #28]
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3728      	adds	r7, #40	@ 0x28
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	240007c0 	.word	0x240007c0
 8004b94:	24000a14 	.word	0x24000a14

08004b98 <tk_evt_dev>:

/*
 * Send driver request event
 */
SYSCALL INT tk_evt_dev( ID devid, INT evttyp, void *evtinf )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b088      	sub	sp, #32
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
	DevCB	*devcb;
	EVTFN	eventfn;
	void	*exinf;
	ER	ercd;

	ercd = knl_check_devid(devid);
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f7ff fcd3 	bl	8004550 <knl_check_devid>
 8004baa:	61f8      	str	r0, [r7, #28]
	if ( ercd < E_OK ) {
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	db56      	blt.n	8004c60 <tk_evt_dev+0xc8>
		goto err_ret1;
	}
	if ( evttyp < 0 ) {
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	da03      	bge.n	8004bc0 <tk_evt_dev+0x28>
		ercd = E_PAR;
 8004bb8:	f06f 0310 	mvn.w	r3, #16
 8004bbc:	61fb      	str	r3, [r7, #28]
		goto err_ret1;
 8004bbe:	e050      	b.n	8004c62 <tk_evt_dev+0xca>
	}

	LockDM();
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	482a      	ldr	r0, [pc, #168]	@ (8004c6c <tk_evt_dev+0xd4>)
 8004bc4:	f008 fcc9 	bl	800d55a <MLock>

	devcb = DEVCB(devid);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	121b      	asrs	r3, r3, #8
 8004bcc:	461a      	mov	r2, r3
 8004bce:	4613      	mov	r3, r2
 8004bd0:	00db      	lsls	r3, r3, #3
 8004bd2:	4413      	add	r3, r2
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	3b48      	subs	r3, #72	@ 0x48
 8004bd8:	4a25      	ldr	r2, [pc, #148]	@ (8004c70 <tk_evt_dev+0xd8>)
 8004bda:	4413      	add	r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
	if ( (devcb->devnm[0] == '\0')||(UNITNO(devid) > devcb->ddev.nsub) ) {
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	7a1b      	ldrb	r3, [r3, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d005      	beq.n	8004bf2 <tk_evt_dev+0x5a>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	dd08      	ble.n	8004c04 <tk_evt_dev+0x6c>
		ercd = E_NOEXS;
 8004bf2:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 8004bf6:	61fb      	str	r3, [r7, #28]
		goto err_ret2;
 8004bf8:	bf00      	nop
	ENABLE_INTERRUPT;

	return ercd;

err_ret2:
	UnlockDM();
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	481b      	ldr	r0, [pc, #108]	@ (8004c6c <tk_evt_dev+0xd4>)
 8004bfe:	f008 fcbc 	bl	800d57a <MUnlock>
 8004c02:	e02e      	b.n	8004c62 <tk_evt_dev+0xca>
	eventfn = (EVTFN)devcb->ddev.eventfn;
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c08:	617b      	str	r3, [r7, #20]
	exinf = devcb->ddev.exinf;
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	613b      	str	r3, [r7, #16]
	UnlockDM();
 8004c10:	2100      	movs	r1, #0
 8004c12:	4816      	ldr	r0, [pc, #88]	@ (8004c6c <tk_evt_dev+0xd4>)
 8004c14:	f008 fcb1 	bl	800d57a <MUnlock>
	DISABLE_INTERRUPT;
 8004c18:	f008 fd79 	bl	800d70e <disint>
	knl_ctxtsk->sysmode++;
 8004c1c:	4b15      	ldr	r3, [pc, #84]	@ (8004c74 <tk_evt_dev+0xdc>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 8004c24:	b292      	uxth	r2, r2
 8004c26:	3201      	adds	r2, #1
 8004c28:	b292      	uxth	r2, r2
 8004c2a:	b212      	sxth	r2, r2
 8004c2c:	845a      	strh	r2, [r3, #34]	@ 0x22
	ENABLE_INTERRUPT;
 8004c2e:	2000      	movs	r0, #0
 8004c30:	f008 fd55 	bl	800d6de <set_basepri>
	ercd = (*eventfn)(evttyp, evtinf, exinf);
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	6879      	ldr	r1, [r7, #4]
 8004c3a:	68b8      	ldr	r0, [r7, #8]
 8004c3c:	4798      	blx	r3
 8004c3e:	61f8      	str	r0, [r7, #28]
	DISABLE_INTERRUPT;
 8004c40:	f008 fd65 	bl	800d70e <disint>
	knl_ctxtsk->sysmode--;
 8004c44:	4b0b      	ldr	r3, [pc, #44]	@ (8004c74 <tk_evt_dev+0xdc>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 8004c4c:	b292      	uxth	r2, r2
 8004c4e:	3a01      	subs	r2, #1
 8004c50:	b292      	uxth	r2, r2
 8004c52:	b212      	sxth	r2, r2
 8004c54:	845a      	strh	r2, [r3, #34]	@ 0x22
	ENABLE_INTERRUPT;
 8004c56:	2000      	movs	r0, #0
 8004c58:	f008 fd41 	bl	800d6de <set_basepri>
	return ercd;
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	e001      	b.n	8004c64 <tk_evt_dev+0xcc>
		goto err_ret1;
 8004c60:	bf00      	nop
err_ret1:
	return ercd;
 8004c62:	69fb      	ldr	r3, [r7, #28]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3720      	adds	r7, #32
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	240007c0 	.word	0x240007c0
 8004c70:	240007d4 	.word	0x240007d4
 8004c74:	24001870 	.word	0x24001870

08004c78 <initDevCB>:

/*
 * Initialization of device registration information table
 */
LOCAL ER initDevCB( void )
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
	DevCB	*devcb;
	INT	num = MAX_REGDEV;
 8004c7e:	2308      	movs	r3, #8
 8004c80:	603b      	str	r3, [r7, #0]

	QueInit(&knl_UsedDevCB);
 8004c82:	480f      	ldr	r0, [pc, #60]	@ (8004cc0 <initDevCB+0x48>)
 8004c84:	f7ff fbf8 	bl	8004478 <QueInit>
	QueInit(&knl_FreeDevCB);
 8004c88:	480e      	ldr	r0, [pc, #56]	@ (8004cc4 <initDevCB+0x4c>)
 8004c8a:	f7ff fbf5 	bl	8004478 <QueInit>

	devcb = knl_DevCBtbl;
 8004c8e:	4b0e      	ldr	r3, [pc, #56]	@ (8004cc8 <initDevCB+0x50>)
 8004c90:	607b      	str	r3, [r7, #4]
	while ( num-- > 0 ) {
 8004c92:	e00a      	b.n	8004caa <initDevCB+0x32>
		QueInsert(&devcb->q, &knl_FreeDevCB);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	490b      	ldr	r1, [pc, #44]	@ (8004cc4 <initDevCB+0x4c>)
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff fc0d 	bl	80044b8 <QueInsert>
		devcb->devnm[0] = '\0';
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	721a      	strb	r2, [r3, #8]
		devcb++;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	3348      	adds	r3, #72	@ 0x48
 8004ca8:	607b      	str	r3, [r7, #4]
	while ( num-- > 0 ) {
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	1e5a      	subs	r2, r3, #1
 8004cae:	603a      	str	r2, [r7, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	dcef      	bgt.n	8004c94 <initDevCB+0x1c>
	}

	return E_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	24000a14 	.word	0x24000a14
 8004cc4:	24000a1c 	.word	0x24000a1c
 8004cc8:	240007d4 	.word	0x240007d4

08004ccc <initIDev>:

/*
 * Initialization of device initial setting information
 */
LOCAL ER initIDev( void )
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
	if ( ercd < E_OK ) {
		knl_DefaultIDev.evtmbfid = 0;
		goto err_ret;
	}
#else	/* Do not use message buffer for event notification */
	ercd = E_OK;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	607b      	str	r3, [r7, #4]
#endif
	knl_DefaultIDev.evtmbfid = ercd;
 8004cd6:	4a04      	ldr	r2, [pc, #16]	@ (8004ce8 <initIDev+0x1c>)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6013      	str	r3, [r2, #0]

#if DEVT_MBFSZ0 >= 0
err_ret:
#endif
	return ercd;
 8004cdc:	687b      	ldr	r3, [r7, #4]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bc80      	pop	{r7}
 8004ce6:	4770      	bx	lr
 8004ce8:	240007d0 	.word	0x240007d0

08004cec <knl_initialize_devmgr>:

/*
 * Initialization of Devive management
 */
EXPORT ER knl_initialize_devmgr( void )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
	ER	ercd;

	/* Generate lock for device management exclusive control */
	ercd = CreateMLock(&knl_DevMgrLock, (UB*)OBJNAME_DMLOCK);
 8004cf2:	4916      	ldr	r1, [pc, #88]	@ (8004d4c <knl_initialize_devmgr+0x60>)
 8004cf4:	4816      	ldr	r0, [pc, #88]	@ (8004d50 <knl_initialize_devmgr+0x64>)
 8004cf6:	f008 fc63 	bl	800d5c0 <CreateMLock>
 8004cfa:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	db15      	blt.n	8004d2e <knl_initialize_devmgr+0x42>
		goto err_ret;
	}

	/* Generate device registration information table */
	ercd = initDevCB();
 8004d02:	f7ff ffb9 	bl	8004c78 <initDevCB>
 8004d06:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	db11      	blt.n	8004d32 <knl_initialize_devmgr+0x46>
		goto err_ret;
	}

	/* Initialization of device input/output-related */
	ercd = knl_initDevIO();
 8004d0e:	f001 f8c9 	bl	8005ea4 <knl_initDevIO>
 8004d12:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	db0d      	blt.n	8004d36 <knl_initialize_devmgr+0x4a>
		goto err_ret;
	}

	/* Initialization of device initial setting information */
	ercd = initIDev();
 8004d1a:	f7ff ffd7 	bl	8004ccc <initIDev>
 8004d1e:	6078      	str	r0, [r7, #4]
	if ( ercd < E_OK ) {
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	db09      	blt.n	8004d3a <knl_initialize_devmgr+0x4e>
		goto err_ret;
	}

	knl_devmgr_startup();
 8004d26:	f001 f869 	bl	8005dfc <knl_devmgr_startup>

	return E_OK;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	e009      	b.n	8004d42 <knl_initialize_devmgr+0x56>
		goto err_ret;
 8004d2e:	bf00      	nop
 8004d30:	e004      	b.n	8004d3c <knl_initialize_devmgr+0x50>
		goto err_ret;
 8004d32:	bf00      	nop
 8004d34:	e002      	b.n	8004d3c <knl_initialize_devmgr+0x50>
		goto err_ret;
 8004d36:	bf00      	nop
 8004d38:	e000      	b.n	8004d3c <knl_initialize_devmgr+0x50>
		goto err_ret;
 8004d3a:	bf00      	nop

err_ret:
	knl_finish_devmgr();
 8004d3c:	f000 f816 	bl	8004d6c <knl_finish_devmgr>
	return ercd;
 8004d40:	687b      	ldr	r3, [r7, #4]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	0800eb40 	.word	0x0800eb40
 8004d50:	240007c0 	.word	0x240007c0

08004d54 <delIDev>:

/*
 * Unregister device initial setting information
 */
LOCAL ER delIDev( void )
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
	ER	ercd = E_OK;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	607b      	str	r3, [r7, #4]
	}


#endif /* DEVT_MBFSZ0 >= 0 */

	return ercd;
 8004d5e:	687b      	ldr	r3, [r7, #4]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bc80      	pop	{r7}
 8004d68:	4770      	bx	lr
	...

08004d6c <knl_finish_devmgr>:

/*
 * Finalization sequence of system management 
 */
EXPORT ER knl_finish_devmgr( void )
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
	ER	ercd;

	knl_devmgr_cleanup();
 8004d72:	f001 f859 	bl	8005e28 <knl_devmgr_cleanup>

	/* Unregister device initial setting information */
	ercd = delIDev();
 8004d76:	f7ff ffed 	bl	8004d54 <delIDev>
 8004d7a:	6078      	str	r0, [r7, #4]

	/* Finalization sequence of device input/output-related */
	ercd = knl_finishDevIO();
 8004d7c:	f001 f8dc 	bl	8005f38 <knl_finishDevIO>
 8004d80:	6078      	str	r0, [r7, #4]

	/* Delete lock for device management exclusive control */
	DeleteMLock(&knl_DevMgrLock);
 8004d82:	4804      	ldr	r0, [pc, #16]	@ (8004d94 <knl_finish_devmgr+0x28>)
 8004d84:	f008 fc5a 	bl	800d63c <DeleteMLock>

	return ercd;
 8004d88:	687b      	ldr	r3, [r7, #4]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	240007c0 	.word	0x240007c0

08004d98 <QueInit>:
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	605a      	str	r2, [r3, #4]
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bc80      	pop	{r7}
 8004db4:	4770      	bx	lr

08004db6 <isQueEmpty>:
{
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
	return ( que->next == que )? TRUE: FALSE;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	bf0c      	ite	eq
 8004dc8:	2301      	moveq	r3, #1
 8004dca:	2300      	movne	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	370c      	adds	r7, #12
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bc80      	pop	{r7}
 8004dd6:	4770      	bx	lr

08004dd8 <QueInsert>:
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	605a      	str	r2, [r3, #4]
	entry->next = que;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	683a      	ldr	r2, [r7, #0]
 8004dee:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	605a      	str	r2, [r3, #4]
}
 8004dfe:	bf00      	nop
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bc80      	pop	{r7}
 8004e06:	4770      	bx	lr

08004e08 <QueRemove>:
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
	if ( entry->next != entry ) {
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d009      	beq.n	8004e2e <QueRemove+0x26>
		entry->prev->next = (struct queue*) entry->next;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	6812      	ldr	r2, [r2, #0]
 8004e22:	601a      	str	r2, [r3, #0]
		entry->next->prev = (struct queue*) entry->prev;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6852      	ldr	r2, [r2, #4]
 8004e2c:	605a      	str	r2, [r3, #4]
}
 8004e2e:	bf00      	nop
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bc80      	pop	{r7}
 8004e36:	4770      	bx	lr

08004e38 <QueRemoveNext>:
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
	if ( que->next == que ) {
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d101      	bne.n	8004e4e <QueRemoveNext+0x16>
		return NULL;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	e00b      	b.n	8004e66 <QueRemoveNext+0x2e>
	entry = que->next;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	60fb      	str	r3, [r7, #12]
	que->next = (struct queue*)entry->next;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	601a      	str	r2, [r3, #0]
	entry->next->prev = que;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	605a      	str	r2, [r3, #4]
	return entry;
 8004e64:	68fb      	ldr	r3, [r7, #12]
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bc80      	pop	{r7}
 8004e6e:	4770      	bx	lr

08004e70 <knl_GetResCB>:

/*
 * Get resource management information
 */
EXPORT ResCB* knl_GetResCB( void )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
	LockDM();
 8004e74:	2100      	movs	r1, #0
 8004e76:	4808      	ldr	r0, [pc, #32]	@ (8004e98 <knl_GetResCB+0x28>)
 8004e78:	f008 fb6f 	bl	800d55a <MLock>

	/* If the startup function is not called, initialize at this point */
	if ( knl_resource_control_block.openq.next == NULL ) {
 8004e7c:	4b07      	ldr	r3, [pc, #28]	@ (8004e9c <knl_GetResCB+0x2c>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d102      	bne.n	8004e8a <knl_GetResCB+0x1a>
		/* Initialization of open device management queue */
		QueInit(&(knl_resource_control_block.openq));
 8004e84:	4805      	ldr	r0, [pc, #20]	@ (8004e9c <knl_GetResCB+0x2c>)
 8004e86:	f7ff ff87 	bl	8004d98 <QueInit>
	}

	UnlockDM();
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	4802      	ldr	r0, [pc, #8]	@ (8004e98 <knl_GetResCB+0x28>)
 8004e8e:	f008 fb74 	bl	800d57a <MUnlock>

	return &knl_resource_control_block;
 8004e92:	4b02      	ldr	r3, [pc, #8]	@ (8004e9c <knl_GetResCB+0x2c>)
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	240007c0 	.word	0x240007c0
 8004e9c:	24001174 	.word	0x24001174

08004ea0 <knl_check_devdesc>:

/*
 * Verify validity of device descriptor
 */
EXPORT ER knl_check_devdesc( ID dd, UINT mode, OpnCB **p_opncb )
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b087      	sub	sp, #28
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
	OpnCB	*opncb;

	if ( dd < 1 || dd > MAX_OPNDEV ) {
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	dd02      	ble.n	8004eb8 <knl_check_devdesc+0x18>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2b10      	cmp	r3, #16
 8004eb6:	dd02      	ble.n	8004ebe <knl_check_devdesc+0x1e>
		return E_ID;
 8004eb8:	f06f 0311 	mvn.w	r3, #17
 8004ebc:	e01e      	b.n	8004efc <knl_check_devdesc+0x5c>
	}
	opncb = OPNCB(dd);
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	f06f 437c 	mvn.w	r3, #4227858432	@ 0xfc000000
 8004ec4:	4413      	add	r3, r2
 8004ec6:	019b      	lsls	r3, r3, #6
 8004ec8:	4a0f      	ldr	r2, [pc, #60]	@ (8004f08 <knl_check_devdesc+0x68>)
 8004eca:	4413      	add	r3, r2
 8004ecc:	617b      	str	r3, [r7, #20]
	if ( opncb->resid == 0 ) {
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d102      	bne.n	8004edc <knl_check_devdesc+0x3c>
		return E_ID;
 8004ed6:	f06f 0311 	mvn.w	r3, #17
 8004eda:	e00f      	b.n	8004efc <knl_check_devdesc+0x5c>
	}

	if ( mode != 0 ) {
 8004edc:	68bb      	ldr	r3, [r7, #8]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d008      	beq.n	8004ef4 <knl_check_devdesc+0x54>
		if ( (opncb->omode & mode) == 0 ) {
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	69da      	ldr	r2, [r3, #28]
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d102      	bne.n	8004ef4 <knl_check_devdesc+0x54>
			return E_OACV;
 8004eee:	f06f 031a 	mvn.w	r3, #26
 8004ef2:	e003      	b.n	8004efc <knl_check_devdesc+0x5c>
		}
	}

	*p_opncb = opncb;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	601a      	str	r2, [r3, #0]
	return E_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	371c      	adds	r7, #28
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bc80      	pop	{r7}
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	24000a24 	.word	0x24000a24

08004f0c <knl_delOpnCB>:

/*
 * Free open management block
 */
EXPORT void knl_delOpnCB( OpnCB *opncb, BOOL free )
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
	QueRemove(&opncb->q);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7ff ff75 	bl	8004e08 <QueRemove>
	QueRemove(&opncb->resq);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	3308      	adds	r3, #8
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7ff ff70 	bl	8004e08 <QueRemove>

	if ( free ) {
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d004      	beq.n	8004f38 <knl_delOpnCB+0x2c>
		QueInsert(&opncb->q, &knl_FreeOpnCB);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4905      	ldr	r1, [pc, #20]	@ (8004f48 <knl_delOpnCB+0x3c>)
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff ff50 	bl	8004dd8 <QueInsert>
	}
	opncb->resid = 0;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	611a      	str	r2, [r3, #16]
}
 8004f3e:	bf00      	nop
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	24000e24 	.word	0x24000e24

08004f4c <knl_delReqCB>:

/*
 * Free request management block
 */
EXPORT void knl_delReqCB( ReqCB *reqcb )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
	QueRemove(&reqcb->q);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff ff56 	bl	8004e08 <QueRemove>

	QueInsert(&reqcb->q, &knl_FreeReqCB);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4905      	ldr	r1, [pc, #20]	@ (8004f74 <knl_delReqCB+0x28>)
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7ff ff39 	bl	8004dd8 <QueInsert>
	reqcb->opncb = NULL;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	609a      	str	r2, [r3, #8]
}
 8004f6c:	bf00      	nop
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	2400116c 	.word	0x2400116c

08004f78 <knl_chkopen>:

/*
 * TRUE if specified device is open.
 */
EXPORT BOOL knl_chkopen( DevCB *devcb, INT unitno )
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
	QUEUE	*q;

	for ( q = devcb->openq.next; q != &devcb->openq; q = q->next ) {
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	e009      	b.n	8004f9e <knl_chkopen+0x26>
		if ( ((OpnCB*)q)->unitno == unitno ) {
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	683a      	ldr	r2, [r7, #0]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d101      	bne.n	8004f98 <knl_chkopen+0x20>
			return TRUE;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e008      	b.n	8004faa <knl_chkopen+0x32>
	for ( q = devcb->openq.next; q != &devcb->openq; q = q->next ) {
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	60fb      	str	r3, [r7, #12]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	3340      	adds	r3, #64	@ 0x40
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d1f0      	bne.n	8004f8a <knl_chkopen+0x12>
		}
	}
	return FALSE;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bc80      	pop	{r7}
 8004fb2:	4770      	bx	lr

08004fb4 <newOpnCB>:

/*
 * Get open management block
 */
LOCAL OpnCB* newOpnCB( DevCB *devcb, INT unitno, UINT omode, ResCB *rescb )
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
 8004fc0:	603b      	str	r3, [r7, #0]
	OpnCB	*opncb;

	/* Get space in open management block */
	opncb = (OpnCB*)QueRemoveNext(&knl_FreeOpnCB);
 8004fc2:	481b      	ldr	r0, [pc, #108]	@ (8005030 <newOpnCB+0x7c>)
 8004fc4:	f7ff ff38 	bl	8004e38 <QueRemoveNext>
 8004fc8:	6178      	str	r0, [r7, #20]
	if ( opncb == NULL ) {
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <newOpnCB+0x20>
		return NULL; /* No space */
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	e028      	b.n	8005026 <newOpnCB+0x72>
	}

	/* Register as open device */
	QueInsert(&opncb->q, &devcb->openq);
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	3340      	adds	r3, #64	@ 0x40
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4610      	mov	r0, r2
 8004fde:	f7ff fefb 	bl	8004dd8 <QueInsert>
	QueInsert(&opncb->resq, &rescb->openq);
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	3308      	adds	r3, #8
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	4611      	mov	r1, r2
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff fef4 	bl	8004dd8 <QueInsert>

	opncb->devcb  = devcb;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	615a      	str	r2, [r3, #20]
	opncb->unitno = unitno;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	619a      	str	r2, [r3, #24]
	opncb->omode  = omode;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	61da      	str	r2, [r3, #28]
	QueInit(&opncb->requestq);
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	3320      	adds	r3, #32
 8005006:	4618      	mov	r0, r3
 8005008:	f7ff fec6 	bl	8004d98 <QueInit>
	opncb->waitone = 0;
 800500c:	697b      	ldr	r3, [r7, #20]
 800500e:	2200      	movs	r2, #0
 8005010:	851a      	strh	r2, [r3, #40]	@ 0x28
	opncb->nwaireq = 0;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	2200      	movs	r2, #0
 8005016:	631a      	str	r2, [r3, #48]	@ 0x30
	opncb->abort_tskid = 0;
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	2200      	movs	r2, #0
 800501c:	635a      	str	r2, [r3, #52]	@ 0x34

	opncb->resid  = 0; /* Indicate that open processing is not completed */
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	2200      	movs	r2, #0
 8005022:	611a      	str	r2, [r3, #16]

	return opncb;
 8005024:	697b      	ldr	r3, [r7, #20]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3718      	adds	r7, #24
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	24000e24 	.word	0x24000e24

08005034 <chkopenmode>:

/*
 * Check open mode
 */
LOCAL ER chkopenmode( DevCB *devcb, INT unitno, UINT omode )
{
 8005034:	b480      	push	{r7}
 8005036:	b08b      	sub	sp, #44	@ 0x2c
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
	QUEUE	*q;
	OpnCB	*opncb;
	INT	read, write, rexcl, wexcl;

	if ( (omode & TD_UPDATE) == 0 ) {
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f003 0303 	and.w	r3, r3, #3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d102      	bne.n	8005050 <chkopenmode+0x1c>
		return E_PAR;
 800504a:	f06f 0310 	mvn.w	r3, #16
 800504e:	e072      	b.n	8005136 <chkopenmode+0x102>
	}

	/* Check current open state */
	read = write = rexcl = wexcl = 0;
 8005050:	2300      	movs	r3, #0
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	61bb      	str	r3, [r7, #24]
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	61fb      	str	r3, [r7, #28]
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	623b      	str	r3, [r7, #32]
	for ( q = devcb->openq.next; q != &devcb->openq; q = q->next ) {
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005064:	627b      	str	r3, [r7, #36]	@ 0x24
 8005066:	e034      	b.n	80050d2 <chkopenmode+0x9e>
		opncb = (OpnCB*)q;
 8005068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506a:	613b      	str	r3, [r7, #16]

		if ( unitno == 0 || opncb->unitno == 0 || opncb->unitno == unitno ) {
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d008      	beq.n	8005084 <chkopenmode+0x50>
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d004      	beq.n	8005084 <chkopenmode+0x50>
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	429a      	cmp	r2, r3
 8005082:	d123      	bne.n	80050cc <chkopenmode+0x98>
			if ( (opncb->omode & TD_READ)  != 0 ) {
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <chkopenmode+0x62>
				read++;
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	3301      	adds	r3, #1
 8005094:	623b      	str	r3, [r7, #32]
			}
			if ( (opncb->omode & TD_WRITE) != 0 ) {
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d002      	beq.n	80050a8 <chkopenmode+0x74>
				write++;
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	3301      	adds	r3, #1
 80050a6:	61fb      	str	r3, [r7, #28]
			}
			if ( (opncb->omode & (TD_EXCL|TD_REXCL)) != 0) {
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	69db      	ldr	r3, [r3, #28]
 80050ac:	f403 63a0 	and.w	r3, r3, #1280	@ 0x500
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d002      	beq.n	80050ba <chkopenmode+0x86>
				rexcl++;
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	3301      	adds	r3, #1
 80050b8:	61bb      	str	r3, [r7, #24]
			}
			if ( (opncb->omode & (TD_EXCL|TD_WEXCL)) != 0) {
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d002      	beq.n	80050cc <chkopenmode+0x98>
				wexcl++;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	3301      	adds	r3, #1
 80050ca:	617b      	str	r3, [r7, #20]
	for ( q = devcb->openq.next; q != &devcb->openq; q = q->next ) {
 80050cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	3340      	adds	r3, #64	@ 0x40
 80050d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050d8:	429a      	cmp	r2, r3
 80050da:	d1c5      	bne.n	8005068 <chkopenmode+0x34>
			}
		}
	}

	/* Is it able to open? */
	if ( (omode & (TD_EXCL|TD_REXCL)) != 0 && read  > 0 ) {
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f403 63a0 	and.w	r3, r3, #1280	@ 0x500
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d005      	beq.n	80050f2 <chkopenmode+0xbe>
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	dd02      	ble.n	80050f2 <chkopenmode+0xbe>
		return E_BUSY;
 80050ec:	f06f 0340 	mvn.w	r3, #64	@ 0x40
 80050f0:	e021      	b.n	8005136 <chkopenmode+0x102>
	}
	if ( (omode & (TD_EXCL|TD_WEXCL)) != 0 && write > 0 ) {
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d005      	beq.n	8005108 <chkopenmode+0xd4>
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	dd02      	ble.n	8005108 <chkopenmode+0xd4>
		return E_BUSY;
 8005102:	f06f 0340 	mvn.w	r3, #64	@ 0x40
 8005106:	e016      	b.n	8005136 <chkopenmode+0x102>
	}
	if ( (omode & TD_READ)  != 0 && rexcl > 0 ) {
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d005      	beq.n	800511e <chkopenmode+0xea>
 8005112:	69bb      	ldr	r3, [r7, #24]
 8005114:	2b00      	cmp	r3, #0
 8005116:	dd02      	ble.n	800511e <chkopenmode+0xea>
		return E_BUSY;
 8005118:	f06f 0340 	mvn.w	r3, #64	@ 0x40
 800511c:	e00b      	b.n	8005136 <chkopenmode+0x102>
	}
	if ( (omode & TD_WRITE) != 0 && wexcl > 0 ) {
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d005      	beq.n	8005134 <chkopenmode+0x100>
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	2b00      	cmp	r3, #0
 800512c:	dd02      	ble.n	8005134 <chkopenmode+0x100>
		return E_BUSY;
 800512e:	f06f 0340 	mvn.w	r3, #64	@ 0x40
 8005132:	e000      	b.n	8005136 <chkopenmode+0x102>
	}

	return E_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	372c      	adds	r7, #44	@ 0x2c
 800513a:	46bd      	mov	sp, r7
 800513c:	bc80      	pop	{r7}
 800513e:	4770      	bx	lr

08005140 <tk_opn_dev>:

/*
 * Device open
 */
SYSCALL ID tk_opn_dev( CONST UB *devnm, UINT omode )
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b08e      	sub	sp, #56	@ 0x38
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
	DevCB	*devcb;
	OpnCB	*opncb;
	ER	ercd;
	ID	semid;

	unitno = knl_phydevnm(pdevnm, devnm);
 800514a:	f107 030c 	add.w	r3, r7, #12
 800514e:	6879      	ldr	r1, [r7, #4]
 8005150:	4618      	mov	r0, r3
 8005152:	f7ff fb43 	bl	80047dc <knl_phydevnm>
 8005156:	62f8      	str	r0, [r7, #44]	@ 0x2c

	/* Get resource management information */
	rescb = knl_GetResCB();
 8005158:	f7ff fe8a 	bl	8004e70 <knl_GetResCB>
 800515c:	62b8      	str	r0, [r7, #40]	@ 0x28
	if ( rescb == NULL ) {
 800515e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005160:	2b00      	cmp	r3, #0
 8005162:	d103      	bne.n	800516c <tk_opn_dev+0x2c>
		ercd = E_CTX;
 8005164:	f06f 0318 	mvn.w	r3, #24
 8005168:	633b      	str	r3, [r7, #48]	@ 0x30
		goto err_ret1;
 800516a:	e0ab      	b.n	80052c4 <tk_opn_dev+0x184>
	}

	LockDM();
 800516c:	2100      	movs	r1, #0
 800516e:	4858      	ldr	r0, [pc, #352]	@ (80052d0 <tk_opn_dev+0x190>)
 8005170:	f008 f9f3 	bl	800d55a <MLock>

	/* Search device to open */
	devcb = knl_searchDevCB(pdevnm);
 8005174:	f107 030c 	add.w	r3, r7, #12
 8005178:	4618      	mov	r0, r3
 800517a:	f7ff f9ff 	bl	800457c <knl_searchDevCB>
 800517e:	6278      	str	r0, [r7, #36]	@ 0x24
	if ( devcb == NULL || unitno > devcb->ddev.nsub ) {
 8005180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005182:	2b00      	cmp	r3, #0
 8005184:	d004      	beq.n	8005190 <tk_opn_dev+0x50>
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800518c:	429a      	cmp	r2, r3
 800518e:	dd03      	ble.n	8005198 <tk_opn_dev+0x58>
		ercd = E_NOEXS;
 8005190:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 8005194:	633b      	str	r3, [r7, #48]	@ 0x30
		goto err_ret2;
 8005196:	e091      	b.n	80052bc <tk_opn_dev+0x17c>
	}

	/* Check open mode */
	ercd = chkopenmode(devcb, unitno, omode);
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800519c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800519e:	f7ff ff49 	bl	8005034 <chkopenmode>
 80051a2:	6338      	str	r0, [r7, #48]	@ 0x30
	if ( ercd < E_OK ) {
 80051a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f2c0 8087 	blt.w	80052ba <tk_opn_dev+0x17a>
		goto err_ret2;
	}

	openfn = (OPNFN)devcb->ddev.openfn;
 80051ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b0:	637b      	str	r3, [r7, #52]	@ 0x34
	exinf = devcb->ddev.exinf;
 80051b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	623b      	str	r3, [r7, #32]

	/* Is device driver call required? */
	if ( knl_chkopen(devcb, unitno) && (devcb->ddev.drvatr & TDA_OPENREQ) == 0 ) {
 80051b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80051bc:	f7ff fedc 	bl	8004f78 <knl_chkopen>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d007      	beq.n	80051d6 <tk_opn_dev+0x96>
 80051c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c8:	699b      	ldr	r3, [r3, #24]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d101      	bne.n	80051d6 <tk_opn_dev+0x96>
		openfn = NULL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	637b      	str	r3, [r7, #52]	@ 0x34
	}

	/* Get open management block */
	opncb = newOpnCB(devcb, unitno, omode, rescb);
 80051d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d8:	683a      	ldr	r2, [r7, #0]
 80051da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80051de:	f7ff fee9 	bl	8004fb4 <newOpnCB>
 80051e2:	61f8      	str	r0, [r7, #28]
	if ( opncb == NULL ) {
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d103      	bne.n	80051f2 <tk_opn_dev+0xb2>
		ercd = E_LIMIT;
 80051ea:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 80051ee:	633b      	str	r3, [r7, #48]	@ 0x30
		goto err_ret2;
 80051f0:	e064      	b.n	80052bc <tk_opn_dev+0x17c>
	}

	semid = tk_cre_sem(&knl_pk_csem_DM);
 80051f2:	4838      	ldr	r0, [pc, #224]	@ (80052d4 <tk_opn_dev+0x194>)
 80051f4:	f004 fd8c 	bl	8009d10 <tk_cre_sem>
 80051f8:	61b8      	str	r0, [r7, #24]
	if ( semid < E_OK ) {
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	da03      	bge.n	8005208 <tk_opn_dev+0xc8>
		ercd = E_SYS;
 8005200:	f06f 0304 	mvn.w	r3, #4
 8005204:	633b      	str	r3, [r7, #48]	@ 0x30
		goto err_ret2_5;
 8005206:	e053      	b.n	80052b0 <tk_opn_dev+0x170>
	}
	opncb->abort_semid = semid;
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	63da      	str	r2, [r3, #60]	@ 0x3c

	UnlockDM();
 800520e:	2100      	movs	r1, #0
 8005210:	482f      	ldr	r0, [pc, #188]	@ (80052d0 <tk_opn_dev+0x190>)
 8005212:	f008 f9b2 	bl	800d57a <MUnlock>

	if ( openfn != NULL ) {
 8005216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005218:	2b00      	cmp	r3, #0
 800521a:	d02e      	beq.n	800527a <tk_opn_dev+0x13a>
		/* Device driver call */
		DISABLE_INTERRUPT;
 800521c:	f008 fa77 	bl	800d70e <disint>
		knl_ctxtsk->sysmode++;
 8005220:	4b2d      	ldr	r3, [pc, #180]	@ (80052d8 <tk_opn_dev+0x198>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 8005228:	b292      	uxth	r2, r2
 800522a:	3201      	adds	r2, #1
 800522c:	b292      	uxth	r2, r2
 800522e:	b212      	sxth	r2, r2
 8005230:	845a      	strh	r2, [r3, #34]	@ 0x22
		ENABLE_INTERRUPT;
 8005232:	2000      	movs	r0, #0
 8005234:	f008 fa53 	bl	800d6de <set_basepri>
		ercd = (*openfn)(DEVID(devcb, unitno), omode, exinf);
 8005238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523a:	4a28      	ldr	r2, [pc, #160]	@ (80052dc <tk_opn_dev+0x19c>)
 800523c:	1a9b      	subs	r3, r3, r2
 800523e:	10db      	asrs	r3, r3, #3
 8005240:	4a27      	ldr	r2, [pc, #156]	@ (80052e0 <tk_opn_dev+0x1a0>)
 8005242:	fb02 f303 	mul.w	r3, r2, r3
 8005246:	3301      	adds	r3, #1
 8005248:	021a      	lsls	r2, r3, #8
 800524a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800524c:	18d0      	adds	r0, r2, r3
 800524e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005250:	6a3a      	ldr	r2, [r7, #32]
 8005252:	6839      	ldr	r1, [r7, #0]
 8005254:	4798      	blx	r3
 8005256:	6338      	str	r0, [r7, #48]	@ 0x30
		DISABLE_INTERRUPT;
 8005258:	f008 fa59 	bl	800d70e <disint>
		knl_ctxtsk->sysmode--;
 800525c:	4b1e      	ldr	r3, [pc, #120]	@ (80052d8 <tk_opn_dev+0x198>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 8005264:	b292      	uxth	r2, r2
 8005266:	3a01      	subs	r2, #1
 8005268:	b292      	uxth	r2, r2
 800526a:	b212      	sxth	r2, r2
 800526c:	845a      	strh	r2, [r3, #34]	@ 0x22
		ENABLE_INTERRUPT;
 800526e:	2000      	movs	r0, #0
 8005270:	f008 fa35 	bl	800d6de <set_basepri>

		if ( ercd < E_OK ) {
 8005274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005276:	2b00      	cmp	r3, #0
 8005278:	db10      	blt.n	800529c <tk_opn_dev+0x15c>
			goto err_ret3;
		}
	}

	LockDM();
 800527a:	2100      	movs	r1, #0
 800527c:	4814      	ldr	r0, [pc, #80]	@ (80052d0 <tk_opn_dev+0x190>)
 800527e:	f008 f96c 	bl	800d55a <MLock>
	opncb->resid = 1; /* Indicate that open processing is completed */
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	2201      	movs	r2, #1
 8005286:	611a      	str	r2, [r3, #16]
	UnlockDM();
 8005288:	2100      	movs	r1, #0
 800528a:	4811      	ldr	r0, [pc, #68]	@ (80052d0 <tk_opn_dev+0x190>)
 800528c:	f008 f975 	bl	800d57a <MUnlock>

	return DD(opncb);
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	4a14      	ldr	r2, [pc, #80]	@ (80052e4 <tk_opn_dev+0x1a4>)
 8005294:	1a9b      	subs	r3, r3, r2
 8005296:	119b      	asrs	r3, r3, #6
 8005298:	3301      	adds	r3, #1
 800529a:	e014      	b.n	80052c6 <tk_opn_dev+0x186>
			goto err_ret3;
 800529c:	bf00      	nop

err_ret3:
	LockDM();
 800529e:	2100      	movs	r1, #0
 80052a0:	480b      	ldr	r0, [pc, #44]	@ (80052d0 <tk_opn_dev+0x190>)
 80052a2:	f008 f95a 	bl	800d55a <MLock>
	tk_del_sem(opncb->abort_semid);
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052aa:	4618      	mov	r0, r3
 80052ac:	f004 fdaa 	bl	8009e04 <tk_del_sem>
err_ret2_5:
	knl_delOpnCB(opncb, TRUE);
 80052b0:	2101      	movs	r1, #1
 80052b2:	69f8      	ldr	r0, [r7, #28]
 80052b4:	f7ff fe2a 	bl	8004f0c <knl_delOpnCB>
 80052b8:	e000      	b.n	80052bc <tk_opn_dev+0x17c>
		goto err_ret2;
 80052ba:	bf00      	nop
err_ret2:
	UnlockDM();
 80052bc:	2100      	movs	r1, #0
 80052be:	4804      	ldr	r0, [pc, #16]	@ (80052d0 <tk_opn_dev+0x190>)
 80052c0:	f008 f95b 	bl	800d57a <MUnlock>
err_ret1:
	return ercd;
 80052c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3738      	adds	r7, #56	@ 0x38
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	240007c0 	.word	0x240007c0
 80052d4:	0800ee00 	.word	0x0800ee00
 80052d8:	24001870 	.word	0x24001870
 80052dc:	240007d4 	.word	0x240007d4
 80052e0:	38e38e39 	.word	0x38e38e39
 80052e4:	24000a24 	.word	0x24000a24

080052e8 <abort_allrequest>:

/*
 * Abort all requests
 */
LOCAL void abort_allrequest( OpnCB *opncb )
{
 80052e8:	b590      	push	{r4, r7, lr}
 80052ea:	b089      	sub	sp, #36	@ 0x24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
	DevCB	*devcb;
	ReqCB	*reqcb;
	QUEUE	*q;

	/* If 'execfn' and 'waitfn' are called, execute abort request. */
	LockDM();
 80052f0:	2100      	movs	r1, #0
 80052f2:	4876      	ldr	r0, [pc, #472]	@ (80054cc <abort_allrequest+0x1e4>)
 80052f4:	f008 f931 	bl	800d55a <MLock>

	devcb = opncb->devcb;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	61bb      	str	r3, [r7, #24]
	abortfn = (ABTFN)devcb->ddev.abortfn;
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005302:	617b      	str	r3, [r7, #20]
	waitfn  = (WAIFN)devcb->ddev.waitfn;
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005308:	613b      	str	r3, [r7, #16]
	exinf   = devcb->ddev.exinf;
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	60fb      	str	r3, [r7, #12]

	opncb->abort_tskid = tk_get_tid();
 8005310:	f005 fec2 	bl	800b098 <tk_get_tid>
 8005314:	4602      	mov	r2, r0
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	635a      	str	r2, [r3, #52]	@ 0x34
	opncb->abort_cnt = 0;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	639a      	str	r2, [r3, #56]	@ 0x38

	if ( opncb->nwaireq > 0 ) {
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005324:	2b00      	cmp	r3, #0
 8005326:	dd2e      	ble.n	8005386 <abort_allrequest+0x9e>
		/* Multiple requests wait */
		reqcb = DEVREQ_REQCB(opncb->waireqlst);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532c:	3b10      	subs	r3, #16
 800532e:	60bb      	str	r3, [r7, #8]

		/* Device driver call */
		DISABLE_INTERRUPT;
 8005330:	f008 f9ed 	bl	800d70e <disint>
		knl_ctxtsk->sysmode++;
 8005334:	4b66      	ldr	r3, [pc, #408]	@ (80054d0 <abort_allrequest+0x1e8>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 800533c:	b292      	uxth	r2, r2
 800533e:	3201      	adds	r2, #1
 8005340:	b292      	uxth	r2, r2
 8005342:	b212      	sxth	r2, r2
 8005344:	845a      	strh	r2, [r3, #34]	@ 0x22
		ENABLE_INTERRUPT;
 8005346:	2000      	movs	r0, #0
 8005348:	f008 f9c9 	bl	800d6de <set_basepri>
		(*abortfn)(reqcb->tskid, opncb->waireqlst, opncb->nwaireq, exinf);
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	68d8      	ldr	r0, [r3, #12]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005358:	697c      	ldr	r4, [r7, #20]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	47a0      	blx	r4
		DISABLE_INTERRUPT;
 800535e:	f008 f9d6 	bl	800d70e <disint>
		knl_ctxtsk->sysmode--;
 8005362:	4b5b      	ldr	r3, [pc, #364]	@ (80054d0 <abort_allrequest+0x1e8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 800536a:	b292      	uxth	r2, r2
 800536c:	3a01      	subs	r2, #1
 800536e:	b292      	uxth	r2, r2
 8005370:	b212      	sxth	r2, r2
 8005372:	845a      	strh	r2, [r3, #34]	@ 0x22
		ENABLE_INTERRUPT;
 8005374:	2000      	movs	r0, #0
 8005376:	f008 f9b2 	bl	800d6de <set_basepri>

		opncb->abort_cnt++;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800537e:	1c5a      	adds	r2, r3, #1
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	639a      	str	r2, [r3, #56]	@ 0x38
 8005384:	e042      	b.n	800540c <abort_allrequest+0x124>
	} else {
		/* Start request or single request wait */
		for ( q = opncb->requestq.next; q != &opncb->requestq; q = q->next ) {
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	61fb      	str	r3, [r7, #28]
 800538c:	e039      	b.n	8005402 <abort_allrequest+0x11a>
			reqcb = (ReqCB*)q;
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	60bb      	str	r3, [r7, #8]
			if ( reqcb->tskid == 0 ) {
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d02f      	beq.n	80053fa <abort_allrequest+0x112>
				continue;
			}

			reqcb->req.abort = TRUE;
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	7f13      	ldrb	r3, [r2, #28]
 800539e:	f043 0310 	orr.w	r3, r3, #16
 80053a2:	7713      	strb	r3, [r2, #28]

			/* Device driver call */
			DISABLE_INTERRUPT;
 80053a4:	f008 f9b3 	bl	800d70e <disint>
			knl_ctxtsk->sysmode++;
 80053a8:	4b49      	ldr	r3, [pc, #292]	@ (80054d0 <abort_allrequest+0x1e8>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 80053b0:	b292      	uxth	r2, r2
 80053b2:	3201      	adds	r2, #1
 80053b4:	b292      	uxth	r2, r2
 80053b6:	b212      	sxth	r2, r2
 80053b8:	845a      	strh	r2, [r3, #34]	@ 0x22
			ENABLE_INTERRUPT;
 80053ba:	2000      	movs	r0, #0
 80053bc:	f008 f98f 	bl	800d6de <set_basepri>
			(*abortfn)(reqcb->tskid, &reqcb->req, 1, exinf);
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	68d8      	ldr	r0, [r3, #12]
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f103 0110 	add.w	r1, r3, #16
 80053ca:	697c      	ldr	r4, [r7, #20]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2201      	movs	r2, #1
 80053d0:	47a0      	blx	r4
			DISABLE_INTERRUPT;
 80053d2:	f008 f99c 	bl	800d70e <disint>
			knl_ctxtsk->sysmode--;
 80053d6:	4b3e      	ldr	r3, [pc, #248]	@ (80054d0 <abort_allrequest+0x1e8>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 80053de:	b292      	uxth	r2, r2
 80053e0:	3a01      	subs	r2, #1
 80053e2:	b292      	uxth	r2, r2
 80053e4:	b212      	sxth	r2, r2
 80053e6:	845a      	strh	r2, [r3, #34]	@ 0x22
			ENABLE_INTERRUPT;
 80053e8:	2000      	movs	r0, #0
 80053ea:	f008 f978 	bl	800d6de <set_basepri>

			opncb->abort_cnt++;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80053f8:	e000      	b.n	80053fc <abort_allrequest+0x114>
				continue;
 80053fa:	bf00      	nop
		for ( q = opncb->requestq.next; q != &opncb->requestq; q = q->next ) {
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	61fb      	str	r3, [r7, #28]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	3320      	adds	r3, #32
 8005406:	69fa      	ldr	r2, [r7, #28]
 8005408:	429a      	cmp	r2, r3
 800540a:	d1c0      	bne.n	800538e <abort_allrequest+0xa6>
		}
	}

	UnlockDM();
 800540c:	2100      	movs	r1, #0
 800540e:	482f      	ldr	r0, [pc, #188]	@ (80054cc <abort_allrequest+0x1e4>)
 8005410:	f008 f8b3 	bl	800d57a <MUnlock>

	if ( opncb->abort_cnt > 0 ) {
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005418:	2b00      	cmp	r3, #0
 800541a:	dd07      	ble.n	800542c <abort_allrequest+0x144>
		/* Wait for completion of abort request processing */
		tk_wai_sem(opncb->abort_semid, 1, TMO_FEVR);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005420:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005424:	2101      	movs	r1, #1
 8005426:	4618      	mov	r0, r3
 8005428:	f004 fe14 	bl	800a054 <tk_wai_sem>
	}
	opncb->abort_tskid = 0;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	635a      	str	r2, [r3, #52]	@ 0x34

	/* Abort remaining requests and wait for completion */
	LockDM();
 8005432:	2100      	movs	r1, #0
 8005434:	4825      	ldr	r0, [pc, #148]	@ (80054cc <abort_allrequest+0x1e4>)
 8005436:	f008 f890 	bl	800d55a <MLock>
	while ( !isQueEmpty(&opncb->requestq) ) {
 800543a:	e037      	b.n	80054ac <abort_allrequest+0x1c4>
		reqcb = (ReqCB*)opncb->requestq.next;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	60bb      	str	r3, [r7, #8]
		reqcb->req.abort = TRUE;
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	7f13      	ldrb	r3, [r2, #28]
 8005446:	f043 0310 	orr.w	r3, r3, #16
 800544a:	7713      	strb	r3, [r2, #28]

		UnlockDM();
 800544c:	2100      	movs	r1, #0
 800544e:	481f      	ldr	r0, [pc, #124]	@ (80054cc <abort_allrequest+0x1e4>)
 8005450:	f008 f893 	bl	800d57a <MUnlock>

		/* Device driver call */
		DISABLE_INTERRUPT;
 8005454:	f008 f95b 	bl	800d70e <disint>
		knl_ctxtsk->sysmode++;
 8005458:	4b1d      	ldr	r3, [pc, #116]	@ (80054d0 <abort_allrequest+0x1e8>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 8005460:	b292      	uxth	r2, r2
 8005462:	3201      	adds	r2, #1
 8005464:	b292      	uxth	r2, r2
 8005466:	b212      	sxth	r2, r2
 8005468:	845a      	strh	r2, [r3, #34]	@ 0x22
		ENABLE_INTERRUPT;
 800546a:	2000      	movs	r0, #0
 800546c:	f008 f937 	bl	800d6de <set_basepri>
		(*waitfn)(&reqcb->req, 1, TMO_FEVR, exinf);
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f103 0010 	add.w	r0, r3, #16
 8005476:	693c      	ldr	r4, [r7, #16]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800547e:	2101      	movs	r1, #1
 8005480:	47a0      	blx	r4
		DISABLE_INTERRUPT;
 8005482:	f008 f944 	bl	800d70e <disint>
		knl_ctxtsk->sysmode--;
 8005486:	4b12      	ldr	r3, [pc, #72]	@ (80054d0 <abort_allrequest+0x1e8>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 800548e:	b292      	uxth	r2, r2
 8005490:	3a01      	subs	r2, #1
 8005492:	b292      	uxth	r2, r2
 8005494:	b212      	sxth	r2, r2
 8005496:	845a      	strh	r2, [r3, #34]	@ 0x22
		ENABLE_INTERRUPT;
 8005498:	2000      	movs	r0, #0
 800549a:	f008 f920 	bl	800d6de <set_basepri>

		LockDM();
 800549e:	2100      	movs	r1, #0
 80054a0:	480a      	ldr	r0, [pc, #40]	@ (80054cc <abort_allrequest+0x1e4>)
 80054a2:	f008 f85a 	bl	800d55a <MLock>

		/* Unregister completed request */
		knl_delReqCB(reqcb);
 80054a6:	68b8      	ldr	r0, [r7, #8]
 80054a8:	f7ff fd50 	bl	8004f4c <knl_delReqCB>
	while ( !isQueEmpty(&opncb->requestq) ) {
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3320      	adds	r3, #32
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7ff fc80 	bl	8004db6 <isQueEmpty>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d0bf      	beq.n	800543c <abort_allrequest+0x154>
	}
	UnlockDM();
 80054bc:	2100      	movs	r1, #0
 80054be:	4803      	ldr	r0, [pc, #12]	@ (80054cc <abort_allrequest+0x1e4>)
 80054c0:	f008 f85b 	bl	800d57a <MUnlock>
}
 80054c4:	bf00      	nop
 80054c6:	3724      	adds	r7, #36	@ 0x24
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd90      	pop	{r4, r7, pc}
 80054cc:	240007c0 	.word	0x240007c0
 80054d0:	24001870 	.word	0x24001870

080054d4 <knl_close_device>:

/*
 * Device close processing
 */
EXPORT ER knl_close_device( OpnCB *opncb, UINT option )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b088      	sub	sp, #32
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
	CLSFN	closefn;
	void	*exinf;
	ID	devid;
	DevCB	*devcb;
	INT	unitno;
	ER	ercd = E_OK;
 80054de:	2300      	movs	r3, #0
 80054e0:	61bb      	str	r3, [r7, #24]

	/* Abort all requests during processing */
	abort_allrequest(opncb);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7ff ff00 	bl	80052e8 <abort_allrequest>

	LockDM();
 80054e8:	2100      	movs	r1, #0
 80054ea:	4839      	ldr	r0, [pc, #228]	@ (80055d0 <knl_close_device+0xfc>)
 80054ec:	f008 f835 	bl	800d55a <MLock>

	devcb  = opncb->devcb;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	617b      	str	r3, [r7, #20]
	unitno = opncb->unitno;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	613b      	str	r3, [r7, #16]
	closefn = (CLSFN)devcb->ddev.closefn;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005500:	61fb      	str	r3, [r7, #28]
	exinf = devcb->ddev.exinf;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	60fb      	str	r3, [r7, #12]
	devid = DEVID(devcb, unitno);
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	4a32      	ldr	r2, [pc, #200]	@ (80055d4 <knl_close_device+0x100>)
 800550c:	1a9b      	subs	r3, r3, r2
 800550e:	10db      	asrs	r3, r3, #3
 8005510:	4a31      	ldr	r2, [pc, #196]	@ (80055d8 <knl_close_device+0x104>)
 8005512:	fb02 f303 	mul.w	r3, r2, r3
 8005516:	3301      	adds	r3, #1
 8005518:	021b      	lsls	r3, r3, #8
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	4413      	add	r3, r2
 800551e:	60bb      	str	r3, [r7, #8]

	/* Delete semaphore for completion check of abortion */
	tk_del_sem(opncb->abort_semid);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005524:	4618      	mov	r0, r3
 8005526:	f004 fc6d 	bl	8009e04 <tk_del_sem>

	/* Free open management block */
	knl_delOpnCB(opncb, FALSE);
 800552a:	2100      	movs	r1, #0
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7ff fced 	bl	8004f0c <knl_delOpnCB>

	/* Is device driver call required? */
	if ( knl_chkopen(devcb, unitno) ) {
 8005532:	6939      	ldr	r1, [r7, #16]
 8005534:	6978      	ldr	r0, [r7, #20]
 8005536:	f7ff fd1f 	bl	8004f78 <knl_chkopen>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00b      	beq.n	8005558 <knl_close_device+0x84>
		option &= ~TD_EJECT;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	f023 0301 	bic.w	r3, r3, #1
 8005546:	603b      	str	r3, [r7, #0]
		if ( (devcb->ddev.drvatr & TDA_OPENREQ) == 0 ) {
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <knl_close_device+0x84>
			closefn = NULL;
 8005554:	2300      	movs	r3, #0
 8005556:	61fb      	str	r3, [r7, #28]
		}
	}

	UnlockDM();
 8005558:	2100      	movs	r1, #0
 800555a:	481d      	ldr	r0, [pc, #116]	@ (80055d0 <knl_close_device+0xfc>)
 800555c:	f008 f80d 	bl	800d57a <MUnlock>

	if ( closefn != NULL ) {
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d021      	beq.n	80055aa <knl_close_device+0xd6>
		/* Device driver call */
		DISABLE_INTERRUPT;
 8005566:	f008 f8d2 	bl	800d70e <disint>
		knl_ctxtsk->sysmode++;
 800556a:	4b1c      	ldr	r3, [pc, #112]	@ (80055dc <knl_close_device+0x108>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 8005572:	b292      	uxth	r2, r2
 8005574:	3201      	adds	r2, #1
 8005576:	b292      	uxth	r2, r2
 8005578:	b212      	sxth	r2, r2
 800557a:	845a      	strh	r2, [r3, #34]	@ 0x22
		ENABLE_INTERRUPT;
 800557c:	2000      	movs	r0, #0
 800557e:	f008 f8ae 	bl	800d6de <set_basepri>
		ercd = (*closefn)(devid, option, exinf);
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	6839      	ldr	r1, [r7, #0]
 8005588:	68b8      	ldr	r0, [r7, #8]
 800558a:	4798      	blx	r3
 800558c:	61b8      	str	r0, [r7, #24]
		DISABLE_INTERRUPT;
 800558e:	f008 f8be 	bl	800d70e <disint>
		knl_ctxtsk->sysmode--;
 8005592:	4b12      	ldr	r3, [pc, #72]	@ (80055dc <knl_close_device+0x108>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 800559a:	b292      	uxth	r2, r2
 800559c:	3a01      	subs	r2, #1
 800559e:	b292      	uxth	r2, r2
 80055a0:	b212      	sxth	r2, r2
 80055a2:	845a      	strh	r2, [r3, #34]	@ 0x22
		ENABLE_INTERRUPT;
 80055a4:	2000      	movs	r0, #0
 80055a6:	f008 f89a 	bl	800d6de <set_basepri>
	}

	LockDM();
 80055aa:	2100      	movs	r1, #0
 80055ac:	4808      	ldr	r0, [pc, #32]	@ (80055d0 <knl_close_device+0xfc>)
 80055ae:	f007 ffd4 	bl	800d55a <MLock>
	/* Return open management block to FreeQue */
	QueInsert(&opncb->q, &knl_FreeOpnCB);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	490a      	ldr	r1, [pc, #40]	@ (80055e0 <knl_close_device+0x10c>)
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7ff fc0e 	bl	8004dd8 <QueInsert>
	UnlockDM();
 80055bc:	2100      	movs	r1, #0
 80055be:	4804      	ldr	r0, [pc, #16]	@ (80055d0 <knl_close_device+0xfc>)
 80055c0:	f007 ffdb 	bl	800d57a <MUnlock>

	return ercd;
 80055c4:	69bb      	ldr	r3, [r7, #24]
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	3720      	adds	r7, #32
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	240007c0 	.word	0x240007c0
 80055d4:	240007d4 	.word	0x240007d4
 80055d8:	38e38e39 	.word	0x38e38e39
 80055dc:	24001870 	.word	0x24001870
 80055e0:	24000e24 	.word	0x24000e24

080055e4 <tk_cls_dev>:

/*
 * Device close
 */
SYSCALL ER tk_cls_dev( ID dd, UINT option )
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
	OpnCB	*opncb;
	ER	ercd;

	LockDM();
 80055ee:	2100      	movs	r1, #0
 80055f0:	4812      	ldr	r0, [pc, #72]	@ (800563c <tk_cls_dev+0x58>)
 80055f2:	f007 ffb2 	bl	800d55a <MLock>

	ercd = knl_check_devdesc(dd, 0, &opncb);
 80055f6:	f107 0308 	add.w	r3, r7, #8
 80055fa:	461a      	mov	r2, r3
 80055fc:	2100      	movs	r1, #0
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7ff fc4e 	bl	8004ea0 <knl_check_devdesc>
 8005604:	60f8      	str	r0, [r7, #12]
	if ( ercd < E_OK ) {
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2b00      	cmp	r3, #0
 800560a:	da04      	bge.n	8005616 <tk_cls_dev+0x32>
		UnlockDM();
 800560c:	2100      	movs	r1, #0
 800560e:	480b      	ldr	r0, [pc, #44]	@ (800563c <tk_cls_dev+0x58>)
 8005610:	f007 ffb3 	bl	800d57a <MUnlock>
		goto err_ret;
 8005614:	e00c      	b.n	8005630 <tk_cls_dev+0x4c>
	}

	opncb->resid = 0; /* Indicate that it is during close processing */
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2200      	movs	r2, #0
 800561a:	611a      	str	r2, [r3, #16]

	UnlockDM();
 800561c:	2100      	movs	r1, #0
 800561e:	4807      	ldr	r0, [pc, #28]	@ (800563c <tk_cls_dev+0x58>)
 8005620:	f007 ffab 	bl	800d57a <MUnlock>

	/* Device close processing */
	ercd = knl_close_device(opncb, option);
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	6839      	ldr	r1, [r7, #0]
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff ff53 	bl	80054d4 <knl_close_device>
 800562e:	60f8      	str	r0, [r7, #12]

err_ret:
	return ercd;
 8005630:	68fb      	ldr	r3, [r7, #12]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	240007c0 	.word	0x240007c0

08005640 <newReqCB>:

/*
 * Get request management block
 */
LOCAL ReqCB* newReqCB( OpnCB *opncb )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
	ReqCB	*reqcb;

	/* Get space in request management block */
	reqcb = (ReqCB*)QueRemoveNext(&knl_FreeReqCB);
 8005648:	480b      	ldr	r0, [pc, #44]	@ (8005678 <newReqCB+0x38>)
 800564a:	f7ff fbf5 	bl	8004e38 <QueRemoveNext>
 800564e:	60f8      	str	r0, [r7, #12]
	if ( reqcb == NULL ) {
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <newReqCB+0x1a>
		return NULL; /* No space */
 8005656:	2300      	movs	r3, #0
 8005658:	e00a      	b.n	8005670 <newReqCB+0x30>
	}

	/* Register as requested open device */
	QueInsert(&reqcb->q, &opncb->requestq);
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	3320      	adds	r3, #32
 8005660:	4619      	mov	r1, r3
 8005662:	4610      	mov	r0, r2
 8005664:	f7ff fbb8 	bl	8004dd8 <QueInsert>

	reqcb->opncb = opncb;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	609a      	str	r2, [r3, #8]

	return reqcb;
 800566e:	68fb      	ldr	r3, [r7, #12]
}
 8005670:	4618      	mov	r0, r3
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	2400116c 	.word	0x2400116c

0800567c <knl_request>:

/*
 * Request for starting input/output to device
 */
EXPORT ID knl_request( ID dd, W start, void *buf, W size, TMO tmout, INT cmd )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b08c      	sub	sp, #48	@ 0x30
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
 8005688:	603b      	str	r3, [r7, #0]
	DevCB	*devcb;
	ReqCB	*reqcb;
	UINT	m;
	ER	ercd;

	LockDM();
 800568a:	2100      	movs	r1, #0
 800568c:	4865      	ldr	r0, [pc, #404]	@ (8005824 <knl_request+0x1a8>)
 800568e:	f007 ff64 	bl	800d55a <MLock>

	if ( start <= -0x00010000 && start >= -0x7fffffff ) {
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005698:	dc06      	bgt.n	80056a8 <knl_request+0x2c>
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056a0:	d002      	beq.n	80056a8 <knl_request+0x2c>
		m = 0; /* Ignore open mode */
 80056a2:	2300      	movs	r3, #0
 80056a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056a6:	e006      	b.n	80056b6 <knl_request+0x3a>
	} else {
		m = ( cmd == TDC_READ )? TD_READ: TD_WRITE;
 80056a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d101      	bne.n	80056b2 <knl_request+0x36>
 80056ae:	2301      	movs	r3, #1
 80056b0:	e000      	b.n	80056b4 <knl_request+0x38>
 80056b2:	2302      	movs	r3, #2
 80056b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	}
	ercd = knl_check_devdesc(dd, m, &opncb);
 80056b6:	f107 0314 	add.w	r3, r7, #20
 80056ba:	461a      	mov	r2, r3
 80056bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	f7ff fbee 	bl	8004ea0 <knl_check_devdesc>
 80056c4:	62b8      	str	r0, [r7, #40]	@ 0x28
	if ( ercd < E_OK ) {
 80056c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f2c0 80a1 	blt.w	8005810 <knl_request+0x194>
		goto err_ret1;
	}

	devcb = opncb->devcb;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	627b      	str	r3, [r7, #36]	@ 0x24
	execfn = (EXCFN)devcb->ddev.execfn;
 80056d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d8:	623b      	str	r3, [r7, #32]
	exinf = devcb->ddev.exinf;
 80056da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	61fb      	str	r3, [r7, #28]

	/* Get request management block */
	reqcb = newReqCB(opncb);
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff ffac 	bl	8005640 <newReqCB>
 80056e8:	61b8      	str	r0, [r7, #24]
	if ( reqcb == NULL ) {
 80056ea:	69bb      	ldr	r3, [r7, #24]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d103      	bne.n	80056f8 <knl_request+0x7c>
		ercd = E_LIMIT;
 80056f0:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 80056f4:	62bb      	str	r3, [r7, #40]	@ 0x28
		goto err_ret1;
 80056f6:	e08c      	b.n	8005812 <knl_request+0x196>
	}

	/* Set request packet */
	reqcb->req.next   = NULL;
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	2200      	movs	r2, #0
 80056fc:	611a      	str	r2, [r3, #16]
	reqcb->req.exinf  = NULL;
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	2200      	movs	r2, #0
 8005702:	615a      	str	r2, [r3, #20]
	reqcb->req.devid  = DEVID(devcb, opncb->unitno);
 8005704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005706:	4a48      	ldr	r2, [pc, #288]	@ (8005828 <knl_request+0x1ac>)
 8005708:	1a9b      	subs	r3, r3, r2
 800570a:	10db      	asrs	r3, r3, #3
 800570c:	4a47      	ldr	r2, [pc, #284]	@ (800582c <knl_request+0x1b0>)
 800570e:	fb02 f303 	mul.w	r3, r2, r3
 8005712:	3301      	adds	r3, #1
 8005714:	021a      	lsls	r2, r3, #8
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	441a      	add	r2, r3
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	619a      	str	r2, [r3, #24]
	reqcb->req.cmd    = cmd;
 8005720:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005722:	011b      	lsls	r3, r3, #4
 8005724:	b25b      	sxtb	r3, r3
 8005726:	111b      	asrs	r3, r3, #4
 8005728:	b259      	sxtb	r1, r3
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	7f13      	ldrb	r3, [r2, #28]
 800572e:	f361 0303 	bfi	r3, r1, #0, #4
 8005732:	7713      	strb	r3, [r2, #28]
	reqcb->req.abort  = FALSE;
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	7f13      	ldrb	r3, [r2, #28]
 8005738:	f36f 1304 	bfc	r3, #4, #1
 800573c:	7713      	strb	r3, [r2, #28]
	reqcb->req.start  = start;
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	621a      	str	r2, [r3, #32]
	reqcb->req.size   = size;
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	625a      	str	r2, [r3, #36]	@ 0x24
	reqcb->req.buf    = buf;
 800574a:	69bb      	ldr	r3, [r7, #24]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	629a      	str	r2, [r3, #40]	@ 0x28
	reqcb->req.asize  = 0;
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	2200      	movs	r2, #0
 8005754:	62da      	str	r2, [r3, #44]	@ 0x2c
	reqcb->req.error  = 0;
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	2200      	movs	r2, #0
 800575a:	631a      	str	r2, [r3, #48]	@ 0x30

	/* Indicate that it is during processing */
	reqcb->tskid = tk_get_tid();
 800575c:	f005 fc9c 	bl	800b098 <tk_get_tid>
 8005760:	4602      	mov	r2, r0
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	60da      	str	r2, [r3, #12]

	UnlockDM();
 8005766:	2100      	movs	r1, #0
 8005768:	482e      	ldr	r0, [pc, #184]	@ (8005824 <knl_request+0x1a8>)
 800576a:	f007 ff06 	bl	800d57a <MUnlock>

	/* Device driver call */
	DISABLE_INTERRUPT;
 800576e:	f007 ffce 	bl	800d70e <disint>
	knl_ctxtsk->sysmode++;
 8005772:	4b2f      	ldr	r3, [pc, #188]	@ (8005830 <knl_request+0x1b4>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 800577a:	b292      	uxth	r2, r2
 800577c:	3201      	adds	r2, #1
 800577e:	b292      	uxth	r2, r2
 8005780:	b212      	sxth	r2, r2
 8005782:	845a      	strh	r2, [r3, #34]	@ 0x22
	ENABLE_INTERRUPT;
 8005784:	2000      	movs	r0, #0
 8005786:	f007 ffaa 	bl	800d6de <set_basepri>
	ercd = (*execfn)(&reqcb->req, tmout, exinf);
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	f103 0010 	add.w	r0, r3, #16
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	69fa      	ldr	r2, [r7, #28]
 8005794:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005796:	4798      	blx	r3
 8005798:	62b8      	str	r0, [r7, #40]	@ 0x28
	DISABLE_INTERRUPT;
 800579a:	f007 ffb8 	bl	800d70e <disint>
	knl_ctxtsk->sysmode--;
 800579e:	4b24      	ldr	r3, [pc, #144]	@ (8005830 <knl_request+0x1b4>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 80057a6:	b292      	uxth	r2, r2
 80057a8:	3a01      	subs	r2, #1
 80057aa:	b292      	uxth	r2, r2
 80057ac:	b212      	sxth	r2, r2
 80057ae:	845a      	strh	r2, [r3, #34]	@ 0x22
	ENABLE_INTERRUPT;
 80057b0:	2000      	movs	r0, #0
 80057b2:	f007 ff94 	bl	800d6de <set_basepri>

	LockDM();
 80057b6:	2100      	movs	r1, #0
 80057b8:	481a      	ldr	r0, [pc, #104]	@ (8005824 <knl_request+0x1a8>)
 80057ba:	f007 fece 	bl	800d55a <MLock>

	/* Indicate that it is not during processing */
	reqcb->tskid = 0;
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	2200      	movs	r2, #0
 80057c2:	60da      	str	r2, [r3, #12]

	/* If there is an abort completion wait task,
	   notify abort completion */
	if ( opncb->abort_tskid > 0 && --opncb->abort_cnt == 0 ) {
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	dd0c      	ble.n	80057e6 <knl_request+0x16a>
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057d0:	3a01      	subs	r2, #1
 80057d2:	639a      	str	r2, [r3, #56]	@ 0x38
 80057d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d105      	bne.n	80057e6 <knl_request+0x16a>
		tk_sig_sem(opncb->abort_semid, 1);
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057de:	2101      	movs	r1, #1
 80057e0:	4618      	mov	r0, r3
 80057e2:	f004 fb5f 	bl	8009ea4 <tk_sig_sem>
	}

	if ( ercd < E_OK ) {
 80057e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	db0c      	blt.n	8005806 <knl_request+0x18a>
		goto err_ret2;
	}

	UnlockDM();
 80057ec:	2100      	movs	r1, #0
 80057ee:	480d      	ldr	r0, [pc, #52]	@ (8005824 <knl_request+0x1a8>)
 80057f0:	f007 fec3 	bl	800d57a <MUnlock>

	return REQID(reqcb);
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	4a0f      	ldr	r2, [pc, #60]	@ (8005834 <knl_request+0x1b8>)
 80057f8:	1a9b      	subs	r3, r3, r2
 80057fa:	109b      	asrs	r3, r3, #2
 80057fc:	4a0e      	ldr	r2, [pc, #56]	@ (8005838 <knl_request+0x1bc>)
 80057fe:	fb02 f303 	mul.w	r3, r2, r3
 8005802:	3301      	adds	r3, #1
 8005804:	e00a      	b.n	800581c <knl_request+0x1a0>
		goto err_ret2;
 8005806:	bf00      	nop

err_ret2:
	knl_delReqCB(reqcb);
 8005808:	69b8      	ldr	r0, [r7, #24]
 800580a:	f7ff fb9f 	bl	8004f4c <knl_delReqCB>
 800580e:	e000      	b.n	8005812 <knl_request+0x196>
		goto err_ret1;
 8005810:	bf00      	nop
err_ret1:
	UnlockDM();
 8005812:	2100      	movs	r1, #0
 8005814:	4803      	ldr	r0, [pc, #12]	@ (8005824 <knl_request+0x1a8>)
 8005816:	f007 feb0 	bl	800d57a <MUnlock>
	return ercd;
 800581a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 800581c:	4618      	mov	r0, r3
 800581e:	3730      	adds	r7, #48	@ 0x30
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	240007c0 	.word	0x240007c0
 8005828:	240007d4 	.word	0x240007d4
 800582c:	38e38e39 	.word	0x38e38e39
 8005830:	24001870 	.word	0x24001870
 8005834:	24000e2c 	.word	0x24000e2c
 8005838:	c4ec4ec5 	.word	0xc4ec4ec5

0800583c <tk_rea_dev>:

/*
 * Start reading from device
 */
SYSCALL ID tk_rea_dev( ID dd, W start, void *buf, SZ size, TMO tmout )
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b088      	sub	sp, #32
 8005840:	af02      	add	r7, sp, #8
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
 8005848:	603b      	str	r3, [r7, #0]
	ER	ercd;

	ercd = knl_request(dd, start, buf, size, tmout, TDC_READ);
 800584a:	2301      	movs	r3, #1
 800584c:	9301      	str	r3, [sp, #4]
 800584e:	6a3b      	ldr	r3, [r7, #32]
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	68b9      	ldr	r1, [r7, #8]
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f7ff ff0f 	bl	800567c <knl_request>
 800585e:	6178      	str	r0, [r7, #20]

	return ercd;
 8005860:	697b      	ldr	r3, [r7, #20]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3718      	adds	r7, #24
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <tk_srea_dev>:

/*
 * Synchronous reading from device
 */
SYSCALL ER tk_srea_dev( ID dd, W start, void *buf, SZ size, SZ *asize )
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b088      	sub	sp, #32
 800586e:	af02      	add	r7, sp, #8
 8005870:	60f8      	str	r0, [r7, #12]
 8005872:	60b9      	str	r1, [r7, #8]
 8005874:	607a      	str	r2, [r7, #4]
 8005876:	603b      	str	r3, [r7, #0]
	ER	ercd, ioercd;

	ercd = tk_rea_dev(dd, start, buf, size, TMO_FEVR);
 8005878:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	68b9      	ldr	r1, [r7, #8]
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f7ff ffd9 	bl	800583c <tk_rea_dev>
 800588a:	6178      	str	r0, [r7, #20]
	if ( ercd < E_OK ) {
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	2b00      	cmp	r3, #0
 8005890:	db0f      	blt.n	80058b2 <tk_srea_dev+0x48>
		goto err_ret;
	}

	ercd = tk_wai_dev(dd, ercd, asize, &ioercd, TMO_FEVR);
 8005892:	f107 0310 	add.w	r3, r7, #16
 8005896:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800589a:	9200      	str	r2, [sp, #0]
 800589c:	6a3a      	ldr	r2, [r7, #32]
 800589e:	6979      	ldr	r1, [r7, #20]
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f000 f875 	bl	8005990 <tk_wai_dev>
 80058a6:	6178      	str	r0, [r7, #20]
	if ( ercd < E_OK ) {
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	db03      	blt.n	80058b6 <tk_srea_dev+0x4c>
		goto err_ret;
	}

	return ioercd;
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	e003      	b.n	80058ba <tk_srea_dev+0x50>
		goto err_ret;
 80058b2:	bf00      	nop
 80058b4:	e000      	b.n	80058b8 <tk_srea_dev+0x4e>
		goto err_ret;
 80058b6:	bf00      	nop

err_ret:
	return ercd;
 80058b8:	697b      	ldr	r3, [r7, #20]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3718      	adds	r7, #24
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <tk_wri_dev>:

/*
 * Start writing to device
 */
SYSCALL ID tk_wri_dev( ID dd, W start, CONST void *buf, SZ size, TMO tmout )
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b088      	sub	sp, #32
 80058c6:	af02      	add	r7, sp, #8
 80058c8:	60f8      	str	r0, [r7, #12]
 80058ca:	60b9      	str	r1, [r7, #8]
 80058cc:	607a      	str	r2, [r7, #4]
 80058ce:	603b      	str	r3, [r7, #0]
	ER	ercd;

	ercd = knl_request(dd, start, (void *)buf, size, tmout, TDC_WRITE);
 80058d0:	2302      	movs	r3, #2
 80058d2:	9301      	str	r3, [sp, #4]
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	68b9      	ldr	r1, [r7, #8]
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f7ff fecc 	bl	800567c <knl_request>
 80058e4:	6178      	str	r0, [r7, #20]

	return ercd;
 80058e6:	697b      	ldr	r3, [r7, #20]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3718      	adds	r7, #24
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <tk_swri_dev>:

/*
 * Synchronous writing to device
 */
SYSCALL ER tk_swri_dev( ID dd, W start, CONST void *buf, SZ size, SZ *asize )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b088      	sub	sp, #32
 80058f4:	af02      	add	r7, sp, #8
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
 80058fc:	603b      	str	r3, [r7, #0]
	ER	ercd, ioercd;

	ercd = tk_wri_dev(dd, start, buf, size, TMO_FEVR);
 80058fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005902:	9300      	str	r3, [sp, #0]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	68b9      	ldr	r1, [r7, #8]
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f7ff ffd9 	bl	80058c2 <tk_wri_dev>
 8005910:	6178      	str	r0, [r7, #20]
	if ( ercd < E_OK ) {
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2b00      	cmp	r3, #0
 8005916:	db0f      	blt.n	8005938 <tk_swri_dev+0x48>
		goto err_ret;
	}

	ercd = tk_wai_dev(dd, ercd, asize, &ioercd, TMO_FEVR);
 8005918:	f107 0310 	add.w	r3, r7, #16
 800591c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005920:	9200      	str	r2, [sp, #0]
 8005922:	6a3a      	ldr	r2, [r7, #32]
 8005924:	6979      	ldr	r1, [r7, #20]
 8005926:	68f8      	ldr	r0, [r7, #12]
 8005928:	f000 f832 	bl	8005990 <tk_wai_dev>
 800592c:	6178      	str	r0, [r7, #20]
	if ( ercd < E_OK ) {
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	2b00      	cmp	r3, #0
 8005932:	db03      	blt.n	800593c <tk_swri_dev+0x4c>
		goto err_ret;
	}

	return ioercd;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	e003      	b.n	8005940 <tk_swri_dev+0x50>
		goto err_ret;
 8005938:	bf00      	nop
 800593a:	e000      	b.n	800593e <tk_swri_dev+0x4e>
		goto err_ret;
 800593c:	bf00      	nop

err_ret:
	return ercd;
 800593e:	697b      	ldr	r3, [r7, #20]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3718      	adds	r7, #24
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <knl_check_reqid>:

/*
 * Verify validity of request ID
 */
LOCAL ReqCB* knl_check_reqid( ID reqid, OpnCB *opncb )
{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
	ReqCB	*reqcb;

	if ( reqid < 1 || reqid > MAX_REQDEV ) {
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	dd02      	ble.n	800595e <knl_check_reqid+0x16>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b10      	cmp	r3, #16
 800595c:	dd01      	ble.n	8005962 <knl_check_reqid+0x1a>
		return NULL;
 800595e:	2300      	movs	r3, #0
 8005960:	e00f      	b.n	8005982 <knl_check_reqid+0x3a>
	}
	reqcb = REQCB(reqid);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2234      	movs	r2, #52	@ 0x34
 8005966:	fb02 f303 	mul.w	r3, r2, r3
 800596a:	3b34      	subs	r3, #52	@ 0x34
 800596c:	4a07      	ldr	r2, [pc, #28]	@ (800598c <knl_check_reqid+0x44>)
 800596e:	4413      	add	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]
	if ( reqcb->opncb != opncb ) {
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	429a      	cmp	r2, r3
 800597a:	d001      	beq.n	8005980 <knl_check_reqid+0x38>
		return NULL;
 800597c:	2300      	movs	r3, #0
 800597e:	e000      	b.n	8005982 <knl_check_reqid+0x3a>
	}

	return reqcb;
 8005980:	68fb      	ldr	r3, [r7, #12]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	bc80      	pop	{r7}
 800598a:	4770      	bx	lr
 800598c:	24000e2c 	.word	0x24000e2c

08005990 <tk_wai_dev>:

/*
 * Request completion wait
 */
SYSCALL ID tk_wai_dev( ID dd, ID reqid, SZ *asize, ER *ioer, TMO tmout )
{
 8005990:	b590      	push	{r4, r7, lr}
 8005992:	b08f      	sub	sp, #60	@ 0x3c
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
 800599c:	603b      	str	r3, [r7, #0]
	T_DEVREQ *devreq;
	INT	reqno, nreq;
	ID	tskid;
	ER	ercd;

	tskid = tk_get_tid();
 800599e:	f005 fb7b 	bl	800b098 <tk_get_tid>
 80059a2:	6238      	str	r0, [r7, #32]

	LockDM();
 80059a4:	2100      	movs	r1, #0
 80059a6:	488e      	ldr	r0, [pc, #568]	@ (8005be0 <tk_wai_dev+0x250>)
 80059a8:	f007 fdd7 	bl	800d55a <MLock>

	ercd = knl_check_devdesc(dd, 0, &opncb);
 80059ac:	f107 0310 	add.w	r3, r7, #16
 80059b0:	461a      	mov	r2, r3
 80059b2:	2100      	movs	r1, #0
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f7ff fa73 	bl	8004ea0 <knl_check_devdesc>
 80059ba:	6278      	str	r0, [r7, #36]	@ 0x24
	if ( ercd < E_OK ) {
 80059bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f2c0 8102 	blt.w	8005bc8 <tk_wai_dev+0x238>
		goto err_ret2;
	}

	devcb = opncb->devcb;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	61fb      	str	r3, [r7, #28]
	waitfn = (WAIFN)devcb->ddev.waitfn;
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059ce:	61bb      	str	r3, [r7, #24]
	exinf = devcb->ddev.exinf;
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	617b      	str	r3, [r7, #20]

	if ( reqid == 0 ) {
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d142      	bne.n	8005a62 <tk_wai_dev+0xd2>
		/* When waiting for completion of any of requests for 'dd' */
		if ( opncb->nwaireq > 0 || opncb->waitone > 0 ) {
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	dc03      	bgt.n	80059ec <tk_wai_dev+0x5c>
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d003      	beq.n	80059f4 <tk_wai_dev+0x64>
			ercd = E_OBJ;
 80059ec:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 80059f0:	627b      	str	r3, [r7, #36]	@ 0x24
			goto err_ret2;
 80059f2:	e0ec      	b.n	8005bce <tk_wai_dev+0x23e>
		}
		if ( isQueEmpty(&opncb->requestq) ) {
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	3320      	adds	r3, #32
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7ff f9dc 	bl	8004db6 <isQueEmpty>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d003      	beq.n	8005a0c <tk_wai_dev+0x7c>
			ercd = E_NOEXS;
 8005a04:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 8005a08:	627b      	str	r3, [r7, #36]	@ 0x24
			goto err_ret2;
 8005a0a:	e0e0      	b.n	8005bce <tk_wai_dev+0x23e>
		}

		/* Create wait request list */
		reqcb = (ReqCB*)opncb->requestq.next;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	637b      	str	r3, [r7, #52]	@ 0x34
		for ( nreq = 1;; nreq++ ) {
 8005a12:	2301      	movs	r3, #1
 8005a14:	62bb      	str	r3, [r7, #40]	@ 0x28
			reqcb->tskid = tskid;
 8005a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a18:	6a3a      	ldr	r2, [r7, #32]
 8005a1a:	60da      	str	r2, [r3, #12]
			devreq = &reqcb->req;
 8005a1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a1e:	3310      	adds	r3, #16
 8005a20:	633b      	str	r3, [r7, #48]	@ 0x30
			reqcb = (ReqCB*)reqcb->q.next;
 8005a22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	637b      	str	r3, [r7, #52]	@ 0x34
			if ( reqcb == (ReqCB*)&opncb->requestq ) {
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	3320      	adds	r3, #32
 8005a2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d008      	beq.n	8005a44 <tk_wai_dev+0xb4>
				break;
			}
			devreq->next = &reqcb->req;
 8005a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a34:	f103 0210 	add.w	r2, r3, #16
 8005a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a3a:	601a      	str	r2, [r3, #0]
		for ( nreq = 1;; nreq++ ) {
 8005a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a3e:	3301      	adds	r3, #1
 8005a40:	62bb      	str	r3, [r7, #40]	@ 0x28
			reqcb->tskid = tskid;
 8005a42:	e7e8      	b.n	8005a16 <tk_wai_dev+0x86>
				break;
 8005a44:	bf00      	nop
		}
		devreq->next = NULL;
 8005a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a48:	2200      	movs	r2, #0
 8005a4a:	601a      	str	r2, [r3, #0]
		devreq = &((ReqCB*)opncb->requestq.next)->req;
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	3310      	adds	r3, #16
 8005a52:	633b      	str	r3, [r7, #48]	@ 0x30

		opncb->waireqlst = devreq;
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a58:	62da      	str	r2, [r3, #44]	@ 0x2c
		opncb->nwaireq = nreq;
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a60:	e028      	b.n	8005ab4 <tk_wai_dev+0x124>
	} else {
		/* Wait for completion of abort request processing */
		reqcb = knl_check_reqid(reqid, opncb);
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	4619      	mov	r1, r3
 8005a66:	68b8      	ldr	r0, [r7, #8]
 8005a68:	f7ff ff6e 	bl	8005948 <knl_check_reqid>
 8005a6c:	6378      	str	r0, [r7, #52]	@ 0x34
		if ( reqcb == NULL ) {
 8005a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d103      	bne.n	8005a7c <tk_wai_dev+0xec>
			ercd = E_ID;
 8005a74:	f06f 0311 	mvn.w	r3, #17
 8005a78:	627b      	str	r3, [r7, #36]	@ 0x24
			goto err_ret2;
 8005a7a:	e0a8      	b.n	8005bce <tk_wai_dev+0x23e>
		}
		if ( opncb->nwaireq > 0 || reqcb->tskid > 0 ) {
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	dc03      	bgt.n	8005a8c <tk_wai_dev+0xfc>
 8005a84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	dd03      	ble.n	8005a94 <tk_wai_dev+0x104>
			ercd = E_OBJ;
 8005a8c:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 8005a90:	627b      	str	r3, [r7, #36]	@ 0x24
			goto err_ret2;
 8005a92:	e09c      	b.n	8005bce <tk_wai_dev+0x23e>
		}

		/* Create waiting request list */
		reqcb->tskid = tskid;
 8005a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a96:	6a3a      	ldr	r2, [r7, #32]
 8005a98:	60da      	str	r2, [r3, #12]
		devreq = &reqcb->req;
 8005a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a9c:	3310      	adds	r3, #16
 8005a9e:	633b      	str	r3, [r7, #48]	@ 0x30
		devreq->next = NULL;
 8005aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	601a      	str	r2, [r3, #0]
		nreq = 1;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	62bb      	str	r3, [r7, #40]	@ 0x28

		opncb->waitone++;
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8005aae:	3201      	adds	r2, #1
 8005ab0:	b292      	uxth	r2, r2
 8005ab2:	851a      	strh	r2, [r3, #40]	@ 0x28
	}

	UnlockDM();
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	484a      	ldr	r0, [pc, #296]	@ (8005be0 <tk_wai_dev+0x250>)
 8005ab8:	f007 fd5f 	bl	800d57a <MUnlock>

	/* Device driver call */
	DISABLE_INTERRUPT;
 8005abc:	f007 fe27 	bl	800d70e <disint>
	knl_ctxtsk->sysmode++;
 8005ac0:	4b48      	ldr	r3, [pc, #288]	@ (8005be4 <tk_wai_dev+0x254>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 8005ac8:	b292      	uxth	r2, r2
 8005aca:	3201      	adds	r2, #1
 8005acc:	b292      	uxth	r2, r2
 8005ace:	b212      	sxth	r2, r2
 8005ad0:	845a      	strh	r2, [r3, #34]	@ 0x22
	ENABLE_INTERRUPT;
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	f007 fe03 	bl	800d6de <set_basepri>
	reqno = (*waitfn)(devreq, nreq, tmout, exinf);
 8005ad8:	69bc      	ldr	r4, [r7, #24]
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ade:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ae0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ae2:	47a0      	blx	r4
 8005ae4:	62f8      	str	r0, [r7, #44]	@ 0x2c
	DISABLE_INTERRUPT;
 8005ae6:	f007 fe12 	bl	800d70e <disint>
	knl_ctxtsk->sysmode--;
 8005aea:	4b3e      	ldr	r3, [pc, #248]	@ (8005be4 <tk_wai_dev+0x254>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 8005af2:	b292      	uxth	r2, r2
 8005af4:	3a01      	subs	r2, #1
 8005af6:	b292      	uxth	r2, r2
 8005af8:	b212      	sxth	r2, r2
 8005afa:	845a      	strh	r2, [r3, #34]	@ 0x22
	ENABLE_INTERRUPT;
 8005afc:	2000      	movs	r0, #0
 8005afe:	f007 fdee 	bl	800d6de <set_basepri>

	if ( reqno <  E_OK ) {
 8005b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	da01      	bge.n	8005b0c <tk_wai_dev+0x17c>
		ercd = reqno;
 8005b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b0a:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	if ( reqno >= nreq ) {
 8005b0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b10:	429a      	cmp	r2, r3
 8005b12:	db02      	blt.n	8005b1a <tk_wai_dev+0x18a>
		ercd = E_SYS;
 8005b14:	f06f 0304 	mvn.w	r3, #4
 8005b18:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	LockDM();
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	4830      	ldr	r0, [pc, #192]	@ (8005be0 <tk_wai_dev+0x250>)
 8005b1e:	f007 fd1c 	bl	800d55a <MLock>

	/* Free wait processing */
	if ( reqid == 0 ) {
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d103      	bne.n	8005b30 <tk_wai_dev+0x1a0>
		opncb->nwaireq = 0;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b2e:	e004      	b.n	8005b3a <tk_wai_dev+0x1aa>
	} else {
		opncb->waitone--;
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8005b34:	3a01      	subs	r2, #1
 8005b36:	b292      	uxth	r2, r2
 8005b38:	851a      	strh	r2, [r3, #40]	@ 0x28
	}

	/* If there is an abort completion wait task,
	   notify abort completion */
	if ( opncb->abort_tskid > 0 && --opncb->abort_cnt == 0 ) {
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	dd2c      	ble.n	8005b9c <tk_wai_dev+0x20c>
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b46:	3a01      	subs	r2, #1
 8005b48:	639a      	str	r2, [r3, #56]	@ 0x38
 8005b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d125      	bne.n	8005b9c <tk_wai_dev+0x20c>
		tk_sig_sem(opncb->abort_semid, 1);
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b54:	2101      	movs	r1, #1
 8005b56:	4618      	mov	r0, r3
 8005b58:	f004 f9a4 	bl	8009ea4 <tk_sig_sem>
	}

	/* Get processing result */
	while ( devreq != NULL ) {
 8005b5c:	e01e      	b.n	8005b9c <tk_wai_dev+0x20c>
		reqcb = DEVREQ_REQCB(devreq);
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b60:	3b10      	subs	r3, #16
 8005b62:	637b      	str	r3, [r7, #52]	@ 0x34
		if ( reqno-- == 0 ) {
 8005b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b66:	1e5a      	subs	r2, r3, #1
 8005b68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d110      	bne.n	8005b90 <tk_wai_dev+0x200>
			reqid = REQID(reqcb);
 8005b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b70:	4a1d      	ldr	r2, [pc, #116]	@ (8005be8 <tk_wai_dev+0x258>)
 8005b72:	1a9b      	subs	r3, r3, r2
 8005b74:	109b      	asrs	r3, r3, #2
 8005b76:	4a1d      	ldr	r2, [pc, #116]	@ (8005bec <tk_wai_dev+0x25c>)
 8005b78:	fb02 f303 	mul.w	r3, r2, r3
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	60bb      	str	r3, [r7, #8]
			*asize = devreq->asize;
 8005b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b82:	69da      	ldr	r2, [r3, #28]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	601a      	str	r2, [r3, #0]
			*ioer  = devreq->error;
 8005b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8a:	6a1a      	ldr	r2, [r3, #32]
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	601a      	str	r2, [r3, #0]
		}
		reqcb->tskid = 0;
 8005b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b92:	2200      	movs	r2, #0
 8005b94:	60da      	str	r2, [r3, #12]
		devreq = devreq->next;
 8005b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	633b      	str	r3, [r7, #48]	@ 0x30
	while ( devreq != NULL ) {
 8005b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1dd      	bne.n	8005b5e <tk_wai_dev+0x1ce>
	}

	if ( ercd < E_OK ) {
 8005ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	db11      	blt.n	8005bcc <tk_wai_dev+0x23c>
		goto err_ret2;
	}

	/* Unregister completed request */
	knl_delReqCB(REQCB(reqid));
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	2234      	movs	r2, #52	@ 0x34
 8005bac:	fb02 f303 	mul.w	r3, r2, r3
 8005bb0:	3b34      	subs	r3, #52	@ 0x34
 8005bb2:	4a0d      	ldr	r2, [pc, #52]	@ (8005be8 <tk_wai_dev+0x258>)
 8005bb4:	4413      	add	r3, r2
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7ff f9c8 	bl	8004f4c <knl_delReqCB>

	UnlockDM();
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	4808      	ldr	r0, [pc, #32]	@ (8005be0 <tk_wai_dev+0x250>)
 8005bc0:	f007 fcdb 	bl	800d57a <MUnlock>

	return reqid;
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	e007      	b.n	8005bd8 <tk_wai_dev+0x248>
		goto err_ret2;
 8005bc8:	bf00      	nop
 8005bca:	e000      	b.n	8005bce <tk_wai_dev+0x23e>
		goto err_ret2;
 8005bcc:	bf00      	nop

err_ret2:
	UnlockDM();
 8005bce:	2100      	movs	r1, #0
 8005bd0:	4803      	ldr	r0, [pc, #12]	@ (8005be0 <tk_wai_dev+0x250>)
 8005bd2:	f007 fcd2 	bl	800d57a <MUnlock>
	return ercd;
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	373c      	adds	r7, #60	@ 0x3c
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd90      	pop	{r4, r7, pc}
 8005be0:	240007c0 	.word	0x240007c0
 8005be4:	24001870 	.word	0x24001870
 8005be8:	24000e2c 	.word	0x24000e2c
 8005bec:	c4ec4ec5 	.word	0xc4ec4ec5

08005bf0 <sendevt_alldevice>:

/*
 * Send driver request event to each device
 */
LOCAL ER sendevt_alldevice( INT evttyp, BOOL disk )
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b088      	sub	sp, #32
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
	EVTFN	eventfn;
	QUEUE	*q;
	DevCB	*devcb;
	BOOL	d;
	ER	ercd = E_OK;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	61bb      	str	r3, [r7, #24]

	for ( q = knl_UsedDevCB.next; q != &knl_UsedDevCB; q = q->next ) {
 8005bfe:	4b24      	ldr	r3, [pc, #144]	@ (8005c90 <sendevt_alldevice+0xa0>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	61fb      	str	r3, [r7, #28]
 8005c04:	e03a      	b.n	8005c7c <sendevt_alldevice+0x8c>
		devcb = (DevCB*)q;
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	617b      	str	r3, [r7, #20]

		d = ( (devcb->ddev.devatr & TD_DEVTYPE) == TDK_DISK )?
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
							TRUE: FALSE;
 8005c12:	2b10      	cmp	r3, #16
 8005c14:	bf0c      	ite	eq
 8005c16:	2301      	moveq	r3, #1
 8005c18:	2300      	movne	r3, #0
 8005c1a:	b2db      	uxtb	r3, r3
		d = ( (devcb->ddev.devatr & TD_DEVTYPE) == TDK_DISK )?
 8005c1c:	613b      	str	r3, [r7, #16]
		if ( disk != d ) {
 8005c1e:	683a      	ldr	r2, [r7, #0]
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d126      	bne.n	8005c74 <sendevt_alldevice+0x84>
			continue;
		}

		/* Device driver call */
		eventfn = (EVTFN)devcb->ddev.eventfn;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c2a:	60fb      	str	r3, [r7, #12]
		DISABLE_INTERRUPT;
 8005c2c:	f007 fd6f 	bl	800d70e <disint>
		knl_ctxtsk->sysmode++;
 8005c30:	4b18      	ldr	r3, [pc, #96]	@ (8005c94 <sendevt_alldevice+0xa4>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 8005c38:	b292      	uxth	r2, r2
 8005c3a:	3201      	adds	r2, #1
 8005c3c:	b292      	uxth	r2, r2
 8005c3e:	b212      	sxth	r2, r2
 8005c40:	845a      	strh	r2, [r3, #34]	@ 0x22
		ENABLE_INTERRUPT;
 8005c42:	2000      	movs	r0, #0
 8005c44:	f007 fd4b 	bl	800d6de <set_basepri>
		ercd = (*eventfn)(evttyp, NULL, devcb->ddev.exinf);
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	695a      	ldr	r2, [r3, #20]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2100      	movs	r1, #0
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	4798      	blx	r3
 8005c54:	61b8      	str	r0, [r7, #24]
		DISABLE_INTERRUPT;
 8005c56:	f007 fd5a 	bl	800d70e <disint>
		knl_ctxtsk->sysmode--;
 8005c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8005c94 <sendevt_alldevice+0xa4>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	@ 0x22
 8005c62:	b292      	uxth	r2, r2
 8005c64:	3a01      	subs	r2, #1
 8005c66:	b292      	uxth	r2, r2
 8005c68:	b212      	sxth	r2, r2
 8005c6a:	845a      	strh	r2, [r3, #34]	@ 0x22
		ENABLE_INTERRUPT;
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	f007 fd36 	bl	800d6de <set_basepri>
 8005c72:	e000      	b.n	8005c76 <sendevt_alldevice+0x86>
			continue;
 8005c74:	bf00      	nop
	for ( q = knl_UsedDevCB.next; q != &knl_UsedDevCB; q = q->next ) {
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	61fb      	str	r3, [r7, #28]
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	4a04      	ldr	r2, [pc, #16]	@ (8005c90 <sendevt_alldevice+0xa0>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d1c0      	bne.n	8005c06 <sendevt_alldevice+0x16>
	}

	return ercd;
 8005c84:	69bb      	ldr	r3, [r7, #24]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3720      	adds	r7, #32
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	24000a14 	.word	0x24000a14
 8005c94:	24001870 	.word	0x24001870

08005c98 <do_suspend>:

/*
 * Suspend
 */
LOCAL ER do_suspend( void )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
	ER	ercd;

	/* Stop accepting device registration/unregistration */
	LockREG();
 8005c9e:	2101      	movs	r1, #1
 8005ca0:	4815      	ldr	r0, [pc, #84]	@ (8005cf8 <do_suspend+0x60>)
 8005ca2:	f007 fc5a 	bl	800d55a <MLock>

	/* Suspend processing of device except for disks */
	ercd = sendevt_alldevice(TDV_SUSPEND, FALSE);
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005cac:	f7ff ffa0 	bl	8005bf0 <sendevt_alldevice>
 8005cb0:	6078      	str	r0, [r7, #4]

	/* Suspend processing of disk device */
	ercd = sendevt_alldevice(TDV_SUSPEND, TRUE);
 8005cb2:	2101      	movs	r1, #1
 8005cb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005cb8:	f7ff ff9a 	bl	8005bf0 <sendevt_alldevice>
 8005cbc:	6078      	str	r0, [r7, #4]

	/* Stop accepting new requests */
	LockDM();
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	480d      	ldr	r0, [pc, #52]	@ (8005cf8 <do_suspend+0x60>)
 8005cc2:	f007 fc4a 	bl	800d55a <MLock>
	 * Insert code executed on returning from suspend state
	 */


	/* Resume accepting requests */
	UnlockDM();
 8005cc6:	2100      	movs	r1, #0
 8005cc8:	480b      	ldr	r0, [pc, #44]	@ (8005cf8 <do_suspend+0x60>)
 8005cca:	f007 fc56 	bl	800d57a <MUnlock>

	/* Resume processing of disk device */
	ercd = sendevt_alldevice(TDV_RESUME, TRUE);
 8005cce:	2101      	movs	r1, #1
 8005cd0:	f06f 0001 	mvn.w	r0, #1
 8005cd4:	f7ff ff8c 	bl	8005bf0 <sendevt_alldevice>
 8005cd8:	6078      	str	r0, [r7, #4]

	/* Resume processing of device except for disks */
	ercd = sendevt_alldevice(TDV_RESUME, FALSE);
 8005cda:	2100      	movs	r1, #0
 8005cdc:	f06f 0001 	mvn.w	r0, #1
 8005ce0:	f7ff ff86 	bl	8005bf0 <sendevt_alldevice>
 8005ce4:	6078      	str	r0, [r7, #4]

	/* Resume accepting device registration/unregistration */
	UnlockREG();
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	4803      	ldr	r0, [pc, #12]	@ (8005cf8 <do_suspend+0x60>)
 8005cea:	f007 fc46 	bl	800d57a <MUnlock>

	return ercd;
 8005cee:	687b      	ldr	r3, [r7, #4]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	240007c0 	.word	0x240007c0

08005cfc <tk_sus_dev>:

/*
 * Suspend processing
 */
SYSCALL INT tk_sus_dev( UINT mode )
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b086      	sub	sp, #24
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
	ResCB	*rescb;
	BOOL	suspend = FALSE;
 8005d04:	2300      	movs	r3, #0
 8005d06:	617b      	str	r3, [r7, #20]
	ER	ercd;

	/* Get resource management information */
	rescb = knl_GetResCB();
 8005d08:	f7ff f8b2 	bl	8004e70 <knl_GetResCB>
 8005d0c:	60f8      	str	r0, [r7, #12]
	if ( rescb == NULL ) {
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d103      	bne.n	8005d1c <tk_sus_dev+0x20>
		ercd = E_CTX;
 8005d14:	f06f 0318 	mvn.w	r3, #24
 8005d18:	613b      	str	r3, [r7, #16]
		goto err_ret1;
 8005d1a:	e066      	b.n	8005dea <tk_sus_dev+0xee>
	}

	LockDM();
 8005d1c:	2100      	movs	r1, #0
 8005d1e:	4835      	ldr	r0, [pc, #212]	@ (8005df4 <tk_sus_dev+0xf8>)
 8005d20:	f007 fc1b 	bl	800d55a <MLock>

	switch ( mode & 0xf ) {
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f003 030f 	and.w	r3, r3, #15
 8005d2a:	3b01      	subs	r3, #1
 8005d2c:	2b03      	cmp	r3, #3
 8005d2e:	d83f      	bhi.n	8005db0 <tk_sus_dev+0xb4>
 8005d30:	a201      	add	r2, pc, #4	@ (adr r2, 8005d38 <tk_sus_dev+0x3c>)
 8005d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d36:	bf00      	nop
 8005d38:	08005d49 	.word	0x08005d49
 8005d3c:	08005d69 	.word	0x08005d69
 8005d40:	08005d93 	.word	0x08005d93
 8005d44:	08005db9 	.word	0x08005db9
	  case TD_SUSPEND:	/* Suspend */
		if ( knl_DisSusCnt > 0 && (mode & TD_FORCE) == 0 ) {
 8005d48:	4b2b      	ldr	r3, [pc, #172]	@ (8005df8 <tk_sus_dev+0xfc>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	dd08      	ble.n	8005d62 <tk_sus_dev+0x66>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d103      	bne.n	8005d62 <tk_sus_dev+0x66>
			ercd = E_BUSY;
 8005d5a:	f06f 0340 	mvn.w	r3, #64	@ 0x40
 8005d5e:	613b      	str	r3, [r7, #16]
			goto err_ret2;
 8005d60:	e03d      	b.n	8005dde <tk_sus_dev+0xe2>
		}
		suspend = TRUE;
 8005d62:	2301      	movs	r3, #1
 8005d64:	617b      	str	r3, [r7, #20]
		break;
 8005d66:	e02a      	b.n	8005dbe <tk_sus_dev+0xc2>

	  case TD_DISSUS:	/* Disable suspend */
		if ( knl_DisSusCnt >= MAX_DISSUS ) {
 8005d68:	4b23      	ldr	r3, [pc, #140]	@ (8005df8 <tk_sus_dev+0xfc>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d103      	bne.n	8005d7c <tk_sus_dev+0x80>
			ercd = E_QOVR;
 8005d74:	f06f 032a 	mvn.w	r3, #42	@ 0x2a
 8005d78:	613b      	str	r3, [r7, #16]
			goto err_ret2;
 8005d7a:	e030      	b.n	8005dde <tk_sus_dev+0xe2>
		}
		knl_DisSusCnt++;
 8005d7c:	4b1e      	ldr	r3, [pc, #120]	@ (8005df8 <tk_sus_dev+0xfc>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	3301      	adds	r3, #1
 8005d82:	4a1d      	ldr	r2, [pc, #116]	@ (8005df8 <tk_sus_dev+0xfc>)
 8005d84:	6013      	str	r3, [r2, #0]
		rescb->dissus++;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	1c5a      	adds	r2, r3, #1
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	609a      	str	r2, [r3, #8]
		break;
 8005d90:	e015      	b.n	8005dbe <tk_sus_dev+0xc2>
	  case TD_ENASUS:	/* Enable suspend */
		if ( rescb->dissus > 0 ) {
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	dd10      	ble.n	8005dbc <tk_sus_dev+0xc0>
			rescb->dissus--;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	1e5a      	subs	r2, r3, #1
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	609a      	str	r2, [r3, #8]
			knl_DisSusCnt--;
 8005da4:	4b14      	ldr	r3, [pc, #80]	@ (8005df8 <tk_sus_dev+0xfc>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	3b01      	subs	r3, #1
 8005daa:	4a13      	ldr	r2, [pc, #76]	@ (8005df8 <tk_sus_dev+0xfc>)
 8005dac:	6013      	str	r3, [r2, #0]
		}
		break;
 8005dae:	e005      	b.n	8005dbc <tk_sus_dev+0xc0>

	  case TD_CHECK:	/* Get suspend disable request count */
		break;

	  default:
		ercd = E_PAR;
 8005db0:	f06f 0310 	mvn.w	r3, #16
 8005db4:	613b      	str	r3, [r7, #16]
		goto err_ret2;
 8005db6:	e012      	b.n	8005dde <tk_sus_dev+0xe2>
		break;
 8005db8:	bf00      	nop
 8005dba:	e000      	b.n	8005dbe <tk_sus_dev+0xc2>
		break;
 8005dbc:	bf00      	nop
	}

	UnlockDM();
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	480c      	ldr	r0, [pc, #48]	@ (8005df4 <tk_sus_dev+0xf8>)
 8005dc2:	f007 fbda 	bl	800d57a <MUnlock>

	if ( suspend ) {
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d005      	beq.n	8005dd8 <tk_sus_dev+0xdc>
		/* Suspend */
		ercd = do_suspend();
 8005dcc:	f7ff ff64 	bl	8005c98 <do_suspend>
 8005dd0:	6138      	str	r0, [r7, #16]
		if ( ercd < E_OK ) {
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	db07      	blt.n	8005de8 <tk_sus_dev+0xec>
			goto err_ret1;
		}
	}

	return knl_DisSusCnt;
 8005dd8:	4b07      	ldr	r3, [pc, #28]	@ (8005df8 <tk_sus_dev+0xfc>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	e006      	b.n	8005dec <tk_sus_dev+0xf0>

err_ret2:
	UnlockDM();
 8005dde:	2100      	movs	r1, #0
 8005de0:	4804      	ldr	r0, [pc, #16]	@ (8005df4 <tk_sus_dev+0xf8>)
 8005de2:	f007 fbca 	bl	800d57a <MUnlock>
 8005de6:	e000      	b.n	8005dea <tk_sus_dev+0xee>
			goto err_ret1;
 8005de8:	bf00      	nop
err_ret1:
	return ercd;
 8005dea:	693b      	ldr	r3, [r7, #16]
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3718      	adds	r7, #24
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	240007c0 	.word	0x240007c0
 8005df8:	24002a04 	.word	0x24002a04

08005dfc <knl_devmgr_startup>:

/*
 * Device management startup function
 */
EXPORT void knl_devmgr_startup( void )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	af00      	add	r7, sp, #0
	LockDM();
 8005e00:	2100      	movs	r1, #0
 8005e02:	4807      	ldr	r0, [pc, #28]	@ (8005e20 <knl_devmgr_startup+0x24>)
 8005e04:	f007 fba9 	bl	800d55a <MLock>

	/* Initialization of open device management queue */
	QueInit(&(knl_resource_control_block.openq));
 8005e08:	4806      	ldr	r0, [pc, #24]	@ (8005e24 <knl_devmgr_startup+0x28>)
 8005e0a:	f7fe ffc5 	bl	8004d98 <QueInit>
	knl_resource_control_block.dissus = 0;
 8005e0e:	4b05      	ldr	r3, [pc, #20]	@ (8005e24 <knl_devmgr_startup+0x28>)
 8005e10:	2200      	movs	r2, #0
 8005e12:	609a      	str	r2, [r3, #8]
	
	UnlockDM();
 8005e14:	2100      	movs	r1, #0
 8005e16:	4802      	ldr	r0, [pc, #8]	@ (8005e20 <knl_devmgr_startup+0x24>)
 8005e18:	f007 fbaf 	bl	800d57a <MUnlock>

	return;
 8005e1c:	bf00      	nop
}
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	240007c0 	.word	0x240007c0
 8005e24:	24001174 	.word	0x24001174

08005e28 <knl_devmgr_cleanup>:

/*
 * Device management cleanup function
 */
EXPORT void knl_devmgr_cleanup( void )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
	OpnCB	*opncb;

	/* Do nothing if it is not used even once */
	if ( knl_resource_control_block.openq.next == NULL ) {
 8005e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8005e98 <knl_devmgr_cleanup+0x70>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d02c      	beq.n	8005e90 <knl_devmgr_cleanup+0x68>
		return;
	}

	LockDM();
 8005e36:	2100      	movs	r1, #0
 8005e38:	4818      	ldr	r0, [pc, #96]	@ (8005e9c <knl_devmgr_cleanup+0x74>)
 8005e3a:	f007 fb8e 	bl	800d55a <MLock>

	/* Free suspend disable request */
	knl_DisSusCnt -= knl_resource_control_block.dissus;
 8005e3e:	4b18      	ldr	r3, [pc, #96]	@ (8005ea0 <knl_devmgr_cleanup+0x78>)
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	4b15      	ldr	r3, [pc, #84]	@ (8005e98 <knl_devmgr_cleanup+0x70>)
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	4a15      	ldr	r2, [pc, #84]	@ (8005ea0 <knl_devmgr_cleanup+0x78>)
 8005e4a:	6013      	str	r3, [r2, #0]
	knl_resource_control_block.dissus = 0;
 8005e4c:	4b12      	ldr	r3, [pc, #72]	@ (8005e98 <knl_devmgr_cleanup+0x70>)
 8005e4e:	2200      	movs	r2, #0
 8005e50:	609a      	str	r2, [r3, #8]

	/* Close all open devices */
	while ( !isQueEmpty(&(knl_resource_control_block.openq)) ) {
 8005e52:	e012      	b.n	8005e7a <knl_devmgr_cleanup+0x52>
		opncb = RESQ_OPNCB(knl_resource_control_block.openq.next);
 8005e54:	4b10      	ldr	r3, [pc, #64]	@ (8005e98 <knl_devmgr_cleanup+0x70>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3b08      	subs	r3, #8
 8005e5a:	607b      	str	r3, [r7, #4]

		/* Indicate that it is during close processing */
		opncb->resid = 0;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	611a      	str	r2, [r3, #16]

		UnlockDM();
 8005e62:	2100      	movs	r1, #0
 8005e64:	480d      	ldr	r0, [pc, #52]	@ (8005e9c <knl_devmgr_cleanup+0x74>)
 8005e66:	f007 fb88 	bl	800d57a <MUnlock>

		/* Device close processing */
		knl_close_device(opncb, 0);
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f7ff fb31 	bl	80054d4 <knl_close_device>

		LockDM();
 8005e72:	2100      	movs	r1, #0
 8005e74:	4809      	ldr	r0, [pc, #36]	@ (8005e9c <knl_devmgr_cleanup+0x74>)
 8005e76:	f007 fb70 	bl	800d55a <MLock>
	while ( !isQueEmpty(&(knl_resource_control_block.openq)) ) {
 8005e7a:	4807      	ldr	r0, [pc, #28]	@ (8005e98 <knl_devmgr_cleanup+0x70>)
 8005e7c:	f7fe ff9b 	bl	8004db6 <isQueEmpty>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d0e6      	beq.n	8005e54 <knl_devmgr_cleanup+0x2c>
	}
	UnlockDM();
 8005e86:	2100      	movs	r1, #0
 8005e88:	4804      	ldr	r0, [pc, #16]	@ (8005e9c <knl_devmgr_cleanup+0x74>)
 8005e8a:	f007 fb76 	bl	800d57a <MUnlock>

	return;
 8005e8e:	e000      	b.n	8005e92 <knl_devmgr_cleanup+0x6a>
		return;
 8005e90:	bf00      	nop
}
 8005e92:	3708      	adds	r7, #8
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	24001174 	.word	0x24001174
 8005e9c:	240007c0 	.word	0x240007c0
 8005ea0:	24002a04 	.word	0x24002a04

08005ea4 <knl_initDevIO>:

/*
 * Initialization sequence of device input/output-related
 */
EXPORT ER knl_initDevIO( void )
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
	INT	i;

	QueInit(&knl_FreeOpnCB);
 8005eaa:	481f      	ldr	r0, [pc, #124]	@ (8005f28 <knl_initDevIO+0x84>)
 8005eac:	f7fe ff74 	bl	8004d98 <QueInit>
	for ( i = 0; i < MAX_OPNDEV; ++i ) {
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	607b      	str	r3, [r7, #4]
 8005eb4:	e011      	b.n	8005eda <knl_initDevIO+0x36>
		knl_OpnCBtbl[i].resid = 0;
 8005eb6:	4a1d      	ldr	r2, [pc, #116]	@ (8005f2c <knl_initDevIO+0x88>)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	019b      	lsls	r3, r3, #6
 8005ebc:	4413      	add	r3, r2
 8005ebe:	3310      	adds	r3, #16
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	601a      	str	r2, [r3, #0]
		QueInsert(&knl_OpnCBtbl[i].q, &knl_FreeOpnCB);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	019b      	lsls	r3, r3, #6
 8005ec8:	4a18      	ldr	r2, [pc, #96]	@ (8005f2c <knl_initDevIO+0x88>)
 8005eca:	4413      	add	r3, r2
 8005ecc:	4916      	ldr	r1, [pc, #88]	@ (8005f28 <knl_initDevIO+0x84>)
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fe ff82 	bl	8004dd8 <QueInsert>
	for ( i = 0; i < MAX_OPNDEV; ++i ) {
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	607b      	str	r3, [r7, #4]
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b0f      	cmp	r3, #15
 8005ede:	ddea      	ble.n	8005eb6 <knl_initDevIO+0x12>
	}

	QueInit(&knl_FreeReqCB);
 8005ee0:	4813      	ldr	r0, [pc, #76]	@ (8005f30 <knl_initDevIO+0x8c>)
 8005ee2:	f7fe ff59 	bl	8004d98 <QueInit>
	for ( i = 0; i < MAX_REQDEV; ++i ) {
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	607b      	str	r3, [r7, #4]
 8005eea:	e015      	b.n	8005f18 <knl_initDevIO+0x74>
		knl_ReqCBtbl[i].opncb = NULL;
 8005eec:	4a11      	ldr	r2, [pc, #68]	@ (8005f34 <knl_initDevIO+0x90>)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2134      	movs	r1, #52	@ 0x34
 8005ef2:	fb01 f303 	mul.w	r3, r1, r3
 8005ef6:	4413      	add	r3, r2
 8005ef8:	3308      	adds	r3, #8
 8005efa:	2200      	movs	r2, #0
 8005efc:	601a      	str	r2, [r3, #0]
		QueInsert(&knl_ReqCBtbl[i].q, &knl_FreeReqCB);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2234      	movs	r2, #52	@ 0x34
 8005f02:	fb02 f303 	mul.w	r3, r2, r3
 8005f06:	4a0b      	ldr	r2, [pc, #44]	@ (8005f34 <knl_initDevIO+0x90>)
 8005f08:	4413      	add	r3, r2
 8005f0a:	4909      	ldr	r1, [pc, #36]	@ (8005f30 <knl_initDevIO+0x8c>)
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7fe ff63 	bl	8004dd8 <QueInsert>
	for ( i = 0; i < MAX_REQDEV; ++i ) {
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	3301      	adds	r3, #1
 8005f16:	607b      	str	r3, [r7, #4]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b0f      	cmp	r3, #15
 8005f1c:	dde6      	ble.n	8005eec <knl_initDevIO+0x48>
	}

	return E_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	24000e24 	.word	0x24000e24
 8005f2c:	24000a24 	.word	0x24000a24
 8005f30:	2400116c 	.word	0x2400116c
 8005f34:	24000e2c 	.word	0x24000e2c

08005f38 <knl_finishDevIO>:

/*
 * Finalization sequence of device input/output-related
 */
EXPORT ER knl_finishDevIO( void )
{
 8005f38:	b480      	push	{r7}
 8005f3a:	af00      	add	r7, sp, #0
	return E_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bc80      	pop	{r7}
 8005f44:	4770      	bx	lr

08005f46 <QueInit>:
{
 8005f46:	b480      	push	{r7}
 8005f48:	b083      	sub	sp, #12
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	605a      	str	r2, [r3, #4]
}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bc80      	pop	{r7}
 8005f62:	4770      	bx	lr

08005f64 <isQueEmpty>:
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
	return ( que->next == que )? TRUE: FALSE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	bf0c      	ite	eq
 8005f76:	2301      	moveq	r3, #1
 8005f78:	2300      	movne	r3, #0
 8005f7a:	b2db      	uxtb	r3, r3
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bc80      	pop	{r7}
 8005f84:	4770      	bx	lr

08005f86 <QueInsert>:
{
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
 8005f8e:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	605a      	str	r2, [r3, #4]
	entry->next = que;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	605a      	str	r2, [r3, #4]
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bc80      	pop	{r7}
 8005fb4:	4770      	bx	lr

08005fb6 <QueRemoveNext>:
{
 8005fb6:	b480      	push	{r7}
 8005fb8:	b085      	sub	sp, #20
 8005fba:	af00      	add	r7, sp, #0
 8005fbc:	6078      	str	r0, [r7, #4]
	if ( que->next == que ) {
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d101      	bne.n	8005fcc <QueRemoveNext+0x16>
		return NULL;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	e00b      	b.n	8005fe4 <QueRemoveNext+0x2e>
	entry = que->next;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	60fb      	str	r3, [r7, #12]
	que->next = (struct queue*)entry->next;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681a      	ldr	r2, [r3, #0]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	601a      	str	r2, [r3, #0]
	entry->next->prev = que;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	605a      	str	r2, [r3, #4]
	return entry;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bc80      	pop	{r7}
 8005fec:	4770      	bx	lr
	...

08005ff0 <knl_isTaskIndependent>:
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	af00      	add	r7, sp, #0
	return ( knl_taskindp > 0 )? TRUE: FALSE;
 8005ff4:	4b05      	ldr	r3, [pc, #20]	@ (800600c <knl_isTaskIndependent+0x1c>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	bfcc      	ite	gt
 8005ffc:	2301      	movgt	r3, #1
 8005ffe:	2300      	movle	r3, #0
 8006000:	b2db      	uxtb	r3, r3
}
 8006002:	4618      	mov	r0, r3
 8006004:	46bd      	mov	sp, r7
 8006006:	bc80      	pop	{r7}
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	240029f8 	.word	0x240029f8

08006010 <knl_eventflag_cond>:

/*
 * Check for event flag wait release condition
 */
Inline BOOL knl_eventflag_cond( FLGCB *flgcb, UINT waiptn, UINT wfmode )
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
	if ( (wfmode & TWF_ORW) != 0 ) {
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f003 0301 	and.w	r3, r3, #1
 8006022:	2b00      	cmp	r3, #0
 8006024:	d009      	beq.n	800603a <knl_eventflag_cond+0x2a>
		return ( (flgcb->flgptn & waiptn) != 0 );
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	695a      	ldr	r2, [r3, #20]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	4013      	ands	r3, r2
 800602e:	2b00      	cmp	r3, #0
 8006030:	bf14      	ite	ne
 8006032:	2301      	movne	r3, #1
 8006034:	2300      	moveq	r3, #0
 8006036:	b2db      	uxtb	r3, r3
 8006038:	e009      	b.n	800604e <knl_eventflag_cond+0x3e>
	} else {
		return ( (flgcb->flgptn & waiptn) == waiptn );
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	695a      	ldr	r2, [r3, #20]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	4013      	ands	r3, r2
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	429a      	cmp	r2, r3
 8006046:	bf0c      	ite	eq
 8006048:	2301      	moveq	r3, #1
 800604a:	2300      	movne	r3, #0
 800604c:	b2db      	uxtb	r3, r3
	}
}
 800604e:	4618      	mov	r0, r3
 8006050:	3714      	adds	r7, #20
 8006052:	46bd      	mov	sp, r7
 8006054:	bc80      	pop	{r7}
 8006056:	4770      	bx	lr

08006058 <knl_eventflag_initialize>:

/*
 * Initialization of event flag control block 
 */
EXPORT ER knl_eventflag_initialize( void )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
	if ( NUM_FLGID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_flgcb);
 800605e:	480e      	ldr	r0, [pc, #56]	@ (8006098 <knl_eventflag_initialize+0x40>)
 8006060:	f7ff ff71 	bl	8005f46 <QueInit>
	end = knl_flgcb_table + NUM_FLGID;
 8006064:	4b0d      	ldr	r3, [pc, #52]	@ (800609c <knl_eventflag_initialize+0x44>)
 8006066:	603b      	str	r3, [r7, #0]
	for ( flgcb = knl_flgcb_table; flgcb < end; flgcb++ ) {
 8006068:	4b0d      	ldr	r3, [pc, #52]	@ (80060a0 <knl_eventflag_initialize+0x48>)
 800606a:	607b      	str	r3, [r7, #4]
 800606c:	e00a      	b.n	8006084 <knl_eventflag_initialize+0x2c>
		flgcb->flgid = 0;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	609a      	str	r2, [r3, #8]
		QueInsert(&flgcb->wait_queue, &knl_free_flgcb);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4908      	ldr	r1, [pc, #32]	@ (8006098 <knl_eventflag_initialize+0x40>)
 8006078:	4618      	mov	r0, r3
 800607a:	f7ff ff84 	bl	8005f86 <QueInsert>
	for ( flgcb = knl_flgcb_table; flgcb < end; flgcb++ ) {
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	3318      	adds	r3, #24
 8006082:	607b      	str	r3, [r7, #4]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	429a      	cmp	r2, r3
 800608a:	d3f0      	bcc.n	800606e <knl_eventflag_initialize+0x16>
	}

	return E_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3708      	adds	r7, #8
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
 8006096:	bf00      	nop
 8006098:	24001300 	.word	0x24001300
 800609c:	24001300 	.word	0x24001300
 80060a0:	24001180 	.word	0x24001180

080060a4 <tk_cre_flg>:

/*
 * Create event flag
 */
SYSCALL ID tk_cre_flg( CONST T_CFLG *pk_cflg )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b088      	sub	sp, #32
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
#if CHK_RSATR
	const ATR VALID_FLGATR = {
 80060ac:	2309      	movs	r3, #9
 80060ae:	61bb      	str	r3, [r7, #24]
#endif
	FLGCB	*flgcb;
	ID	flgid;
	ER	ercd;

	CHECK_RSATR(pk_cflg->flgatr, VALID_FLGATR);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	43db      	mvns	r3, r3
 80060b8:	4013      	ands	r3, r2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d002      	beq.n	80060c4 <tk_cre_flg+0x20>
 80060be:	f06f 030a 	mvn.w	r3, #10
 80060c2:	e03e      	b.n	8006142 <tk_cre_flg+0x9e>

	BEGIN_CRITICAL_SECTION;
 80060c4:	f007 fb23 	bl	800d70e <disint>
 80060c8:	6178      	str	r0, [r7, #20]
	/* Get control block from FreeQue */
	flgcb = (FLGCB*)QueRemoveNext(&knl_free_flgcb);
 80060ca:	4820      	ldr	r0, [pc, #128]	@ (800614c <tk_cre_flg+0xa8>)
 80060cc:	f7ff ff73 	bl	8005fb6 <QueRemoveNext>
 80060d0:	6138      	str	r0, [r7, #16]
	if ( flgcb == NULL ) {
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d103      	bne.n	80060e0 <tk_cre_flg+0x3c>
		ercd = E_LIMIT;
 80060d8:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 80060dc:	61fb      	str	r3, [r7, #28]
 80060de:	e01d      	b.n	800611c <tk_cre_flg+0x78>
	} else {
		flgid = ID_FLG(flgcb - knl_flgcb_table);
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	4a1b      	ldr	r2, [pc, #108]	@ (8006150 <tk_cre_flg+0xac>)
 80060e4:	1a9b      	subs	r3, r3, r2
 80060e6:	10db      	asrs	r3, r3, #3
 80060e8:	4a1a      	ldr	r2, [pc, #104]	@ (8006154 <tk_cre_flg+0xb0>)
 80060ea:	fb02 f303 	mul.w	r3, r2, r3
 80060ee:	3301      	adds	r3, #1
 80060f0:	60fb      	str	r3, [r7, #12]

		/* Initialize control block */
		QueInit(&flgcb->wait_queue);
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7ff ff26 	bl	8005f46 <QueInit>
		flgcb->flgid = flgid;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	609a      	str	r2, [r3, #8]
		flgcb->exinf = pk_cflg->exinf;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	60da      	str	r2, [r3, #12]
		flgcb->flgatr = pk_cflg->flgatr;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685a      	ldr	r2, [r3, #4]
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	611a      	str	r2, [r3, #16]
		flgcb->flgptn = pk_cflg->iflgptn;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	689a      	ldr	r2, [r3, #8]
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	615a      	str	r2, [r3, #20]
		if ( (pk_cflg->flgatr & TA_DSNAME) != 0 ) {
			knl_strncpy((char*)flgcb->name, (char*)pk_cflg->dsname,
				OBJECT_NAME_LENGTH);
		}
#endif
		ercd = flgid;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	61fb      	str	r3, [r7, #28]
	}
	END_CRITICAL_SECTION;
 800611c:	697b      	ldr	r3, [r7, #20]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10b      	bne.n	800613a <tk_cre_flg+0x96>
 8006122:	4b0d      	ldr	r3, [pc, #52]	@ (8006158 <tk_cre_flg+0xb4>)
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	4b0d      	ldr	r3, [pc, #52]	@ (800615c <tk_cre_flg+0xb8>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	429a      	cmp	r2, r3
 800612c:	d005      	beq.n	800613a <tk_cre_flg+0x96>
 800612e:	4b0c      	ldr	r3, [pc, #48]	@ (8006160 <tk_cre_flg+0xbc>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <tk_cre_flg+0x96>
 8006136:	f7fd fbb3 	bl	80038a0 <knl_dispatch>
 800613a:	6978      	ldr	r0, [r7, #20]
 800613c:	f007 facf 	bl	800d6de <set_basepri>

	return ercd;
 8006140:	69fb      	ldr	r3, [r7, #28]
}
 8006142:	4618      	mov	r0, r3
 8006144:	3720      	adds	r7, #32
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}
 800614a:	bf00      	nop
 800614c:	24001300 	.word	0x24001300
 8006150:	24001180 	.word	0x24001180
 8006154:	aaaaaaab 	.word	0xaaaaaaab
 8006158:	24001870 	.word	0x24001870
 800615c:	24001874 	.word	0x24001874
 8006160:	2400186c 	.word	0x2400186c

08006164 <tk_del_flg>:
#ifdef USE_FUNC_TK_DEL_FLG
/*
 * Delete event flag
 */
SYSCALL ER tk_del_flg( ID flgid )
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
	FLGCB	*flgcb;
	ER	ercd = E_OK;
 800616c:	2300      	movs	r3, #0
 800616e:	617b      	str	r3, [r7, #20]

	CHECK_FLGID(flgid);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	dd02      	ble.n	800617c <tk_del_flg+0x18>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b10      	cmp	r3, #16
 800617a:	dd02      	ble.n	8006182 <tk_del_flg+0x1e>
 800617c:	f06f 0311 	mvn.w	r3, #17
 8006180:	e032      	b.n	80061e8 <tk_del_flg+0x84>

	flgcb = get_flgcb(flgid);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	1e5a      	subs	r2, r3, #1
 8006186:	4613      	mov	r3, r2
 8006188:	005b      	lsls	r3, r3, #1
 800618a:	4413      	add	r3, r2
 800618c:	00db      	lsls	r3, r3, #3
 800618e:	4a18      	ldr	r2, [pc, #96]	@ (80061f0 <tk_del_flg+0x8c>)
 8006190:	4413      	add	r3, r2
 8006192:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 8006194:	f007 fabb 	bl	800d70e <disint>
 8006198:	60f8      	str	r0, [r7, #12]
	if ( flgcb->flgid == 0 ) {
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d103      	bne.n	80061aa <tk_del_flg+0x46>
		ercd = E_NOEXS;
 80061a2:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 80061a6:	617b      	str	r3, [r7, #20]
 80061a8:	e00b      	b.n	80061c2 <tk_del_flg+0x5e>
	} else {
		/* Release wait state of task (E_DLT) */
		knl_wait_delete(&flgcb->wait_queue);
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	4618      	mov	r0, r3
 80061ae:	f006 fef9 	bl	800cfa4 <knl_wait_delete>

		/* Return to FreeQue */
		QueInsert(&flgcb->wait_queue, &knl_free_flgcb);
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	490f      	ldr	r1, [pc, #60]	@ (80061f4 <tk_del_flg+0x90>)
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7ff fee5 	bl	8005f86 <QueInsert>
		flgcb->flgid = 0;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	2200      	movs	r2, #0
 80061c0:	609a      	str	r2, [r3, #8]
	}
	END_CRITICAL_SECTION;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10b      	bne.n	80061e0 <tk_del_flg+0x7c>
 80061c8:	4b0b      	ldr	r3, [pc, #44]	@ (80061f8 <tk_del_flg+0x94>)
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	4b0b      	ldr	r3, [pc, #44]	@ (80061fc <tk_del_flg+0x98>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d005      	beq.n	80061e0 <tk_del_flg+0x7c>
 80061d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006200 <tk_del_flg+0x9c>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <tk_del_flg+0x7c>
 80061dc:	f7fd fb60 	bl	80038a0 <knl_dispatch>
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f007 fa7c 	bl	800d6de <set_basepri>

	return ercd;
 80061e6:	697b      	ldr	r3, [r7, #20]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3718      	adds	r7, #24
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}
 80061f0:	24001180 	.word	0x24001180
 80061f4:	24001300 	.word	0x24001300
 80061f8:	24001870 	.word	0x24001870
 80061fc:	24001874 	.word	0x24001874
 8006200:	2400186c 	.word	0x2400186c

08006204 <tk_set_flg>:

/*
 * Event flag set
 */
SYSCALL ER tk_set_flg( ID flgid, UINT setptn )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b08a      	sub	sp, #40	@ 0x28
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
	FLGCB	*flgcb;
	TCB	*tcb;
	QUEUE	*queue;
	UINT	wfmode, waiptn;
	ER	ercd = E_OK;
 800620e:	2300      	movs	r3, #0
 8006210:	623b      	str	r3, [r7, #32]

	CHECK_FLGID(flgid);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	dd02      	ble.n	800621e <tk_set_flg+0x1a>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2b10      	cmp	r3, #16
 800621c:	dd02      	ble.n	8006224 <tk_set_flg+0x20>
 800621e:	f06f 0311 	mvn.w	r3, #17
 8006222:	e06a      	b.n	80062fa <tk_set_flg+0xf6>

	flgcb = get_flgcb(flgid);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	1e5a      	subs	r2, r3, #1
 8006228:	4613      	mov	r3, r2
 800622a:	005b      	lsls	r3, r3, #1
 800622c:	4413      	add	r3, r2
 800622e:	00db      	lsls	r3, r3, #3
 8006230:	4a34      	ldr	r2, [pc, #208]	@ (8006304 <tk_set_flg+0x100>)
 8006232:	4413      	add	r3, r2
 8006234:	61fb      	str	r3, [r7, #28]

	BEGIN_CRITICAL_SECTION;
 8006236:	f007 fa6a 	bl	800d70e <disint>
 800623a:	61b8      	str	r0, [r7, #24]
	if ( flgcb->flgid == 0 ) {
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d103      	bne.n	800624c <tk_set_flg+0x48>
		ercd = E_NOEXS;
 8006244:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 8006248:	623b      	str	r3, [r7, #32]
		goto error_exit;
 800624a:	e043      	b.n	80062d4 <tk_set_flg+0xd0>
	}

	/* Set event flag */
	flgcb->flgptn |= setptn;
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	695a      	ldr	r2, [r3, #20]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	431a      	orrs	r2, r3
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	615a      	str	r2, [r3, #20]

	/* Search task which should be released */
	queue = flgcb->wait_queue.next;
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	627b      	str	r3, [r7, #36]	@ 0x24
	while ( queue != &flgcb->wait_queue ) {
 800625e:	e033      	b.n	80062c8 <tk_set_flg+0xc4>
		tcb = (TCB*)queue;
 8006260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006262:	617b      	str	r3, [r7, #20]
		queue = queue->next;
 8006264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Meet condition for release wait? */
		waiptn = tcb->winfo.flg.waiptn;
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800626e:	613b      	str	r3, [r7, #16]
		wfmode = tcb->winfo.flg.wfmode;
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006274:	60fb      	str	r3, [r7, #12]
		if ( knl_eventflag_cond(flgcb, waiptn, wfmode) ) {
 8006276:	68fa      	ldr	r2, [r7, #12]
 8006278:	6939      	ldr	r1, [r7, #16]
 800627a:	69f8      	ldr	r0, [r7, #28]
 800627c:	f7ff fec8 	bl	8006010 <knl_eventflag_cond>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d020      	beq.n	80062c8 <tk_set_flg+0xc4>

			/* Release wait */
			*tcb->winfo.flg.p_flgptn = flgcb->flgptn;
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800628a:	69fa      	ldr	r2, [r7, #28]
 800628c:	6952      	ldr	r2, [r2, #20]
 800628e:	601a      	str	r2, [r3, #0]
			knl_wait_release_ok(tcb);
 8006290:	6978      	ldr	r0, [r7, #20]
 8006292:	f006 fdd1 	bl	800ce38 <knl_wait_release_ok>

			/* Clear event flag */
			if ( (wfmode & TWF_BITCLR) != 0 ) {
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f003 0320 	and.w	r3, r3, #32
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00a      	beq.n	80062b6 <tk_set_flg+0xb2>
				if ( (flgcb->flgptn &= ~waiptn) == 0 ) {
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	695a      	ldr	r2, [r3, #20]
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	43db      	mvns	r3, r3
 80062a8:	401a      	ands	r2, r3
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	615a      	str	r2, [r3, #20]
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00d      	beq.n	80062d2 <tk_set_flg+0xce>
					break;
				}
			}
			if ( (wfmode & TWF_CLR) != 0 ) {
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f003 0310 	and.w	r3, r3, #16
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d003      	beq.n	80062c8 <tk_set_flg+0xc4>
				flgcb->flgptn = 0;
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	2200      	movs	r2, #0
 80062c4:	615a      	str	r2, [r3, #20]
				break;
 80062c6:	e005      	b.n	80062d4 <tk_set_flg+0xd0>
	while ( queue != &flgcb->wait_queue ) {
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d1c7      	bne.n	8006260 <tk_set_flg+0x5c>
			}
		}
	}

    error_exit:
 80062d0:	e000      	b.n	80062d4 <tk_set_flg+0xd0>
					break;
 80062d2:	bf00      	nop
	END_CRITICAL_SECTION;
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10b      	bne.n	80062f2 <tk_set_flg+0xee>
 80062da:	4b0b      	ldr	r3, [pc, #44]	@ (8006308 <tk_set_flg+0x104>)
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	4b0b      	ldr	r3, [pc, #44]	@ (800630c <tk_set_flg+0x108>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d005      	beq.n	80062f2 <tk_set_flg+0xee>
 80062e6:	4b0a      	ldr	r3, [pc, #40]	@ (8006310 <tk_set_flg+0x10c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <tk_set_flg+0xee>
 80062ee:	f7fd fad7 	bl	80038a0 <knl_dispatch>
 80062f2:	69b8      	ldr	r0, [r7, #24]
 80062f4:	f007 f9f3 	bl	800d6de <set_basepri>

	return ercd;
 80062f8:	6a3b      	ldr	r3, [r7, #32]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3728      	adds	r7, #40	@ 0x28
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	24001180 	.word	0x24001180
 8006308:	24001870 	.word	0x24001870
 800630c:	24001874 	.word	0x24001874
 8006310:	2400186c 	.word	0x2400186c

08006314 <tk_clr_flg>:

/*
 * Clear event flag 
 */
SYSCALL ER tk_clr_flg( ID flgid, UINT clrptn )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
	FLGCB	*flgcb;
	ER	ercd = E_OK;
 800631e:	2300      	movs	r3, #0
 8006320:	617b      	str	r3, [r7, #20]

	CHECK_FLGID(flgid);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	dd02      	ble.n	800632e <tk_clr_flg+0x1a>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2b10      	cmp	r3, #16
 800632c:	dd02      	ble.n	8006334 <tk_clr_flg+0x20>
 800632e:	f06f 0311 	mvn.w	r3, #17
 8006332:	e02c      	b.n	800638e <tk_clr_flg+0x7a>

	flgcb = get_flgcb(flgid);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	1e5a      	subs	r2, r3, #1
 8006338:	4613      	mov	r3, r2
 800633a:	005b      	lsls	r3, r3, #1
 800633c:	4413      	add	r3, r2
 800633e:	00db      	lsls	r3, r3, #3
 8006340:	4a15      	ldr	r2, [pc, #84]	@ (8006398 <tk_clr_flg+0x84>)
 8006342:	4413      	add	r3, r2
 8006344:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 8006346:	f007 f9e2 	bl	800d70e <disint>
 800634a:	60f8      	str	r0, [r7, #12]
	if ( flgcb->flgid == 0 ) {
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d103      	bne.n	800635c <tk_clr_flg+0x48>
		ercd = E_NOEXS;
 8006354:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 8006358:	617b      	str	r3, [r7, #20]
 800635a:	e005      	b.n	8006368 <tk_clr_flg+0x54>
	} else {
		flgcb->flgptn &= clrptn;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	695a      	ldr	r2, [r3, #20]
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	401a      	ands	r2, r3
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	615a      	str	r2, [r3, #20]
	}
	END_CRITICAL_SECTION;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10b      	bne.n	8006386 <tk_clr_flg+0x72>
 800636e:	4b0b      	ldr	r3, [pc, #44]	@ (800639c <tk_clr_flg+0x88>)
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	4b0b      	ldr	r3, [pc, #44]	@ (80063a0 <tk_clr_flg+0x8c>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	429a      	cmp	r2, r3
 8006378:	d005      	beq.n	8006386 <tk_clr_flg+0x72>
 800637a:	4b0a      	ldr	r3, [pc, #40]	@ (80063a4 <tk_clr_flg+0x90>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <tk_clr_flg+0x72>
 8006382:	f7fd fa8d 	bl	80038a0 <knl_dispatch>
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f007 f9a9 	bl	800d6de <set_basepri>

	return ercd;
 800638c:	697b      	ldr	r3, [r7, #20]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3718      	adds	r7, #24
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	24001180 	.word	0x24001180
 800639c:	24001870 	.word	0x24001870
 80063a0:	24001874 	.word	0x24001874
 80063a4:	2400186c 	.word	0x2400186c

080063a8 <flg_chg_pri>:

/*
 * Processing if the priority of wait task changes
 */
LOCAL void flg_chg_pri( TCB *tcb, INT oldpri )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
	FLGCB	*flgcb;

	flgcb = get_flgcb(tcb->wid);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b6:	1e5a      	subs	r2, r3, #1
 80063b8:	4613      	mov	r3, r2
 80063ba:	005b      	lsls	r3, r3, #1
 80063bc:	4413      	add	r3, r2
 80063be:	00db      	lsls	r3, r3, #3
 80063c0:	4a05      	ldr	r2, [pc, #20]	@ (80063d8 <flg_chg_pri+0x30>)
 80063c2:	4413      	add	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]
	knl_gcb_change_priority((GCB*)flgcb, tcb);
 80063c6:	6879      	ldr	r1, [r7, #4]
 80063c8:	68f8      	ldr	r0, [r7, #12]
 80063ca:	f006 fe4f 	bl	800d06c <knl_gcb_change_priority>
}
 80063ce:	bf00      	nop
 80063d0:	3710      	adds	r7, #16
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	24001180 	.word	0x24001180

080063dc <tk_wai_flg>:

/*
 * Event flag wait
 */
SYSCALL ER tk_wai_flg( ID flgid, UINT waiptn, UINT wfmode, UINT *p_flgptn, TMO tmout )
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b088      	sub	sp, #32
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
 80063e8:	603b      	str	r3, [r7, #0]
	FLGCB	*flgcb;
	ER	ercd = E_OK;
 80063ea:	2300      	movs	r3, #0
 80063ec:	617b      	str	r3, [r7, #20]

	CHECK_FLGID(flgid);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	dd02      	ble.n	80063fa <tk_wai_flg+0x1e>
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2b10      	cmp	r3, #16
 80063f8:	dd02      	ble.n	8006400 <tk_wai_flg+0x24>
 80063fa:	f06f 0311 	mvn.w	r3, #17
 80063fe:	e0a3      	b.n	8006548 <tk_wai_flg+0x16c>
	CHECK_PAR(waiptn != 0);
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d102      	bne.n	800640c <tk_wai_flg+0x30>
 8006406:	f06f 0310 	mvn.w	r3, #16
 800640a:	e09d      	b.n	8006548 <tk_wai_flg+0x16c>
	CHECK_PAR((wfmode & ~(TWF_ORW|TWF_CLR|TWF_BITCLR)) == 0);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f023 0331 	bic.w	r3, r3, #49	@ 0x31
 8006412:	2b00      	cmp	r3, #0
 8006414:	d002      	beq.n	800641c <tk_wai_flg+0x40>
 8006416:	f06f 0310 	mvn.w	r3, #16
 800641a:	e095      	b.n	8006548 <tk_wai_flg+0x16c>
	CHECK_TMOUT(tmout);
 800641c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006422:	da02      	bge.n	800642a <tk_wai_flg+0x4e>
 8006424:	f06f 0310 	mvn.w	r3, #16
 8006428:	e08e      	b.n	8006548 <tk_wai_flg+0x16c>
	CHECK_DISPATCH();
 800642a:	4b49      	ldr	r3, [pc, #292]	@ (8006550 <tk_wai_flg+0x174>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10d      	bne.n	800644e <tk_wai_flg+0x72>
 8006432:	f7ff fddd 	bl	8005ff0 <knl_isTaskIndependent>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d108      	bne.n	800644e <tk_wai_flg+0x72>
 800643c:	4b45      	ldr	r3, [pc, #276]	@ (8006554 <tk_wai_flg+0x178>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d004      	beq.n	800644e <tk_wai_flg+0x72>
 8006444:	f007 f957 	bl	800d6f6 <get_basepri>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	d002      	beq.n	8006454 <tk_wai_flg+0x78>
 800644e:	f06f 0318 	mvn.w	r3, #24
 8006452:	e079      	b.n	8006548 <tk_wai_flg+0x16c>

	flgcb = get_flgcb(flgid);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	1e5a      	subs	r2, r3, #1
 8006458:	4613      	mov	r3, r2
 800645a:	005b      	lsls	r3, r3, #1
 800645c:	4413      	add	r3, r2
 800645e:	00db      	lsls	r3, r3, #3
 8006460:	4a3d      	ldr	r2, [pc, #244]	@ (8006558 <tk_wai_flg+0x17c>)
 8006462:	4413      	add	r3, r2
 8006464:	61fb      	str	r3, [r7, #28]

	BEGIN_CRITICAL_SECTION;
 8006466:	f007 f952 	bl	800d70e <disint>
 800646a:	61b8      	str	r0, [r7, #24]
	if ( flgcb->flgid == 0 ) {
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d103      	bne.n	800647c <tk_wai_flg+0xa0>
		ercd = E_NOEXS;
 8006474:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 8006478:	617b      	str	r3, [r7, #20]
		goto error_exit;
 800647a:	e052      	b.n	8006522 <tk_wai_flg+0x146>
	}
	if ( (flgcb->flgatr & TA_WMUL) == 0 && !isQueEmpty(&flgcb->wait_queue) ) {
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	f003 0308 	and.w	r3, r3, #8
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10a      	bne.n	800649e <tk_wai_flg+0xc2>
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	4618      	mov	r0, r3
 800648c:	f7ff fd6a 	bl	8005f64 <isQueEmpty>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d103      	bne.n	800649e <tk_wai_flg+0xc2>
		/* Disable multiple tasks wait */
		ercd = E_OBJ;
 8006496:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 800649a:	617b      	str	r3, [r7, #20]
		goto error_exit;
 800649c:	e041      	b.n	8006522 <tk_wai_flg+0x146>
	}

	/* Meet condition for release wait? */
	if ( knl_eventflag_cond(flgcb, waiptn, wfmode) ) {
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	68b9      	ldr	r1, [r7, #8]
 80064a2:	69f8      	ldr	r0, [r7, #28]
 80064a4:	f7ff fdb4 	bl	8006010 <knl_eventflag_cond>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d018      	beq.n	80064e0 <tk_wai_flg+0x104>
		*p_flgptn = flgcb->flgptn;
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	695a      	ldr	r2, [r3, #20]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	601a      	str	r2, [r3, #0]

		/* Clear event flag */
		if ( (wfmode & TWF_BITCLR) != 0 ) {
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f003 0320 	and.w	r3, r3, #32
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d006      	beq.n	80064ce <tk_wai_flg+0xf2>
			flgcb->flgptn &= ~waiptn;
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	695a      	ldr	r2, [r3, #20]
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	43db      	mvns	r3, r3
 80064c8:	401a      	ands	r2, r3
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	615a      	str	r2, [r3, #20]
		}
		if ( (wfmode & TWF_CLR) != 0 ) {
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f003 0310 	and.w	r3, r3, #16
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d024      	beq.n	8006522 <tk_wai_flg+0x146>
			flgcb->flgptn = 0;
 80064d8:	69fb      	ldr	r3, [r7, #28]
 80064da:	2200      	movs	r2, #0
 80064dc:	615a      	str	r2, [r3, #20]
 80064de:	e020      	b.n	8006522 <tk_wai_flg+0x146>
		}
	} else {
		/* Ready for wait */
		knl_ctxtsk->wspec = ( (flgcb->flgatr & TA_TPRI) != 0 )?
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	f003 0301 	and.w	r3, r3, #1
					&knl_wspec_flg_tpri: &knl_wspec_flg_tfifo;
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <tk_wai_flg+0x114>
 80064ec:	4a1b      	ldr	r2, [pc, #108]	@ (800655c <tk_wai_flg+0x180>)
 80064ee:	e000      	b.n	80064f2 <tk_wai_flg+0x116>
 80064f0:	4a1b      	ldr	r2, [pc, #108]	@ (8006560 <tk_wai_flg+0x184>)
		knl_ctxtsk->wspec = ( (flgcb->flgatr & TA_TPRI) != 0 )?
 80064f2:	4b18      	ldr	r3, [pc, #96]	@ (8006554 <tk_wai_flg+0x178>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	62da      	str	r2, [r3, #44]	@ 0x2c
		knl_ctxtsk->wercd = &ercd;
 80064f8:	4b16      	ldr	r3, [pc, #88]	@ (8006554 <tk_wai_flg+0x178>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f107 0214 	add.w	r2, r7, #20
 8006500:	63da      	str	r2, [r3, #60]	@ 0x3c
		knl_ctxtsk->winfo.flg.waiptn = waiptn;
 8006502:	4b14      	ldr	r3, [pc, #80]	@ (8006554 <tk_wai_flg+0x178>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	641a      	str	r2, [r3, #64]	@ 0x40
		knl_ctxtsk->winfo.flg.wfmode = wfmode;
 800650a:	4b12      	ldr	r3, [pc, #72]	@ (8006554 <tk_wai_flg+0x178>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	645a      	str	r2, [r3, #68]	@ 0x44
		knl_ctxtsk->winfo.flg.p_flgptn = p_flgptn;
 8006512:	4b10      	ldr	r3, [pc, #64]	@ (8006554 <tk_wai_flg+0x178>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	649a      	str	r2, [r3, #72]	@ 0x48
		knl_gcb_make_wait((GCB*)flgcb, tmout);
 800651a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800651c:	69f8      	ldr	r0, [r7, #28]
 800651e:	f006 fd6f 	bl	800d000 <knl_gcb_make_wait>
	}

    error_exit:
	END_CRITICAL_SECTION;
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10b      	bne.n	8006540 <tk_wai_flg+0x164>
 8006528:	4b0a      	ldr	r3, [pc, #40]	@ (8006554 <tk_wai_flg+0x178>)
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	4b0d      	ldr	r3, [pc, #52]	@ (8006564 <tk_wai_flg+0x188>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	429a      	cmp	r2, r3
 8006532:	d005      	beq.n	8006540 <tk_wai_flg+0x164>
 8006534:	4b06      	ldr	r3, [pc, #24]	@ (8006550 <tk_wai_flg+0x174>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <tk_wai_flg+0x164>
 800653c:	f7fd f9b0 	bl	80038a0 <knl_dispatch>
 8006540:	69b8      	ldr	r0, [r7, #24]
 8006542:	f007 f8cc 	bl	800d6de <set_basepri>

	return ercd;
 8006546:	697b      	ldr	r3, [r7, #20]
}
 8006548:	4618      	mov	r0, r3
 800654a:	3720      	adds	r7, #32
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	2400186c 	.word	0x2400186c
 8006554:	24001870 	.word	0x24001870
 8006558:	24001180 	.word	0x24001180
 800655c:	0800ee1c 	.word	0x0800ee1c
 8006560:	0800ee10 	.word	0x0800ee10
 8006564:	24001874 	.word	0x24001874

08006568 <tk_ref_flg>:
#ifdef USE_FUNC_TK_REF_FLG
/*
 * Check event flag state
 */
SYSCALL ER tk_ref_flg( ID flgid, T_RFLG *pk_rflg )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
	FLGCB	*flgcb;
	ER	ercd = E_OK;
 8006572:	2300      	movs	r3, #0
 8006574:	617b      	str	r3, [r7, #20]

	CHECK_FLGID(flgid);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	dd02      	ble.n	8006582 <tk_ref_flg+0x1a>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b10      	cmp	r3, #16
 8006580:	dd02      	ble.n	8006588 <tk_ref_flg+0x20>
 8006582:	f06f 0311 	mvn.w	r3, #17
 8006586:	e035      	b.n	80065f4 <tk_ref_flg+0x8c>

	flgcb = get_flgcb(flgid);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	1e5a      	subs	r2, r3, #1
 800658c:	4613      	mov	r3, r2
 800658e:	005b      	lsls	r3, r3, #1
 8006590:	4413      	add	r3, r2
 8006592:	00db      	lsls	r3, r3, #3
 8006594:	4a19      	ldr	r2, [pc, #100]	@ (80065fc <tk_ref_flg+0x94>)
 8006596:	4413      	add	r3, r2
 8006598:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 800659a:	f007 f8b8 	bl	800d70e <disint>
 800659e:	60f8      	str	r0, [r7, #12]
	if ( flgcb->flgid == 0 ) {
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d103      	bne.n	80065b0 <tk_ref_flg+0x48>
		ercd = E_NOEXS;
 80065a8:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 80065ac:	617b      	str	r3, [r7, #20]
 80065ae:	e00e      	b.n	80065ce <tk_ref_flg+0x66>
	} else {
		pk_rflg->exinf = flgcb->exinf;
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	68da      	ldr	r2, [r3, #12]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	601a      	str	r2, [r3, #0]
		pk_rflg->wtsk = knl_wait_tskid(&flgcb->wait_queue);
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f006 fd0d 	bl	800cfda <knl_wait_tskid>
 80065c0:	4602      	mov	r2, r0
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	605a      	str	r2, [r3, #4]
		pk_rflg->flgptn = flgcb->flgptn;
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	695a      	ldr	r2, [r3, #20]
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	609a      	str	r2, [r3, #8]
	}
	END_CRITICAL_SECTION;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10b      	bne.n	80065ec <tk_ref_flg+0x84>
 80065d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006600 <tk_ref_flg+0x98>)
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006604 <tk_ref_flg+0x9c>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d005      	beq.n	80065ec <tk_ref_flg+0x84>
 80065e0:	4b09      	ldr	r3, [pc, #36]	@ (8006608 <tk_ref_flg+0xa0>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d101      	bne.n	80065ec <tk_ref_flg+0x84>
 80065e8:	f7fd f95a 	bl	80038a0 <knl_dispatch>
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f007 f876 	bl	800d6de <set_basepri>

	return ercd;
 80065f2:	697b      	ldr	r3, [r7, #20]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3718      	adds	r7, #24
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	24001180 	.word	0x24001180
 8006600:	24001870 	.word	0x24001870
 8006604:	24001874 	.word	0x24001874
 8006608:	2400186c 	.word	0x2400186c

0800660c <tk_def_int>:
/* ------------------------------------------------------------------------ */
/*
 * Interrupt handler definition
 */
SYSCALL ER tk_def_int( UINT intno, CONST T_DINT *pk_dint )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
#else
	ATR	intatr;
	FP	inthdr;
	ER	ercd;

	CHECK_PAR(intno < N_INTVEC);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2bbd      	cmp	r3, #189	@ 0xbd
 800661a:	d902      	bls.n	8006622 <tk_def_int+0x16>
 800661c:	f06f 0310 	mvn.w	r3, #16
 8006620:	e031      	b.n	8006686 <tk_def_int+0x7a>
	if(pk_dint != NULL) {
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00d      	beq.n	8006644 <tk_def_int+0x38>
		CHECK_RSATR(pk_dint->intatr, TA_HLNG|TA_ASM);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d902      	bls.n	8006636 <tk_def_int+0x2a>
 8006630:	f06f 030a 	mvn.w	r3, #10
 8006634:	e027      	b.n	8006686 <tk_def_int+0x7a>
		intatr	= pk_dint->intatr;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	617b      	str	r3, [r7, #20]
		inthdr	= pk_dint->inthdr;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	613b      	str	r3, [r7, #16]
 8006642:	e003      	b.n	800664c <tk_def_int+0x40>
	} else {
		intatr	= 0;
 8006644:	2300      	movs	r3, #0
 8006646:	617b      	str	r3, [r7, #20]
		inthdr	= NULL;
 8006648:	2300      	movs	r3, #0
 800664a:	613b      	str	r3, [r7, #16]
	}

	BEGIN_CRITICAL_SECTION;
 800664c:	f007 f85f 	bl	800d70e <disint>
 8006650:	60f8      	str	r0, [r7, #12]
	ercd = knl_define_inthdr(intno, intatr, inthdr);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	6979      	ldr	r1, [r7, #20]
 8006658:	4618      	mov	r0, r3
 800665a:	f7fd fa0d 	bl	8003a78 <knl_define_inthdr>
 800665e:	60b8      	str	r0, [r7, #8]
	END_CRITICAL_SECTION;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10b      	bne.n	800667e <tk_def_int+0x72>
 8006666:	4b0a      	ldr	r3, [pc, #40]	@ (8006690 <tk_def_int+0x84>)
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	4b0a      	ldr	r3, [pc, #40]	@ (8006694 <tk_def_int+0x88>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	429a      	cmp	r2, r3
 8006670:	d005      	beq.n	800667e <tk_def_int+0x72>
 8006672:	4b09      	ldr	r3, [pc, #36]	@ (8006698 <tk_def_int+0x8c>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d101      	bne.n	800667e <tk_def_int+0x72>
 800667a:	f7fd f911 	bl	80038a0 <knl_dispatch>
 800667e:	68f8      	ldr	r0, [r7, #12]
 8006680:	f007 f82d 	bl	800d6de <set_basepri>

	return ercd;
 8006684:	68bb      	ldr	r3, [r7, #8]
#endif
}
 8006686:	4618      	mov	r0, r3
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	24001870 	.word	0x24001870
 8006694:	24001874 	.word	0x24001874
 8006698:	2400186c 	.word	0x2400186c

0800669c <tk_ret_int>:
/* ------------------------------------------------------------------------ */
/*
 * return Interrupt handler
 */
SYSCALL void tk_ret_int( void )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	af00      	add	r7, sp, #0
	knl_return_inthdr();
 80066a0:	f7fd fa18 	bl	8003ad4 <knl_return_inthdr>
	return;
 80066a4:	bf00      	nop
}
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <QueInit>:
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	605a      	str	r2, [r3, #4]
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bc80      	pop	{r7}
 80066c4:	4770      	bx	lr

080066c6 <isQueEmpty>:
{
 80066c6:	b480      	push	{r7}
 80066c8:	b083      	sub	sp, #12
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
	return ( que->next == que )? TRUE: FALSE;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	bf0c      	ite	eq
 80066d8:	2301      	moveq	r3, #1
 80066da:	2300      	movne	r3, #0
 80066dc:	b2db      	uxtb	r3, r3
}
 80066de:	4618      	mov	r0, r3
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bc80      	pop	{r7}
 80066e6:	4770      	bx	lr

080066e8 <QueInsert>:
{
 80066e8:	b480      	push	{r7}
 80066ea:	b083      	sub	sp, #12
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	605a      	str	r2, [r3, #4]
	entry->next = que;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	605a      	str	r2, [r3, #4]
}
 800670e:	bf00      	nop
 8006710:	370c      	adds	r7, #12
 8006712:	46bd      	mov	sp, r7
 8006714:	bc80      	pop	{r7}
 8006716:	4770      	bx	lr

08006718 <QueRemove>:
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
	if ( entry->next != entry ) {
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	429a      	cmp	r2, r3
 8006728:	d009      	beq.n	800673e <QueRemove+0x26>
		entry->prev->next = (struct queue*) entry->next;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	6812      	ldr	r2, [r2, #0]
 8006732:	601a      	str	r2, [r3, #0]
		entry->next->prev = (struct queue*) entry->prev;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	6852      	ldr	r2, [r2, #4]
 800673c:	605a      	str	r2, [r3, #4]
}
 800673e:	bf00      	nop
 8006740:	370c      	adds	r7, #12
 8006742:	46bd      	mov	sp, r7
 8006744:	bc80      	pop	{r7}
 8006746:	4770      	bx	lr

08006748 <QueRemoveNext>:
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
	if ( que->next == que ) {
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	429a      	cmp	r2, r3
 8006758:	d101      	bne.n	800675e <QueRemoveNext+0x16>
		return NULL;
 800675a:	2300      	movs	r3, #0
 800675c:	e00b      	b.n	8006776 <QueRemoveNext+0x2e>
	entry = que->next;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	60fb      	str	r3, [r7, #12]
	que->next = (struct queue*)entry->next;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	601a      	str	r2, [r3, #0]
	entry->next->prev = que;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	605a      	str	r2, [r3, #4]
	return entry;
 8006774:	68fb      	ldr	r3, [r7, #12]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	bc80      	pop	{r7}
 800677e:	4770      	bx	lr

08006780 <knl_ready_queue_calc_top_priority>:

IMPORT RDYQUE	knl_ready_queue;

#if NUM_TSKPRI <= INT_BITWIDTH
Inline INT knl_ready_queue_calc_top_priority( UINT bitmap, INT pos )
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]
	for ( ; pos < NUM_TSKPRI; pos++ ) {
 800678a:	e00b      	b.n	80067a4 <knl_ready_queue_calc_top_priority+0x24>
		if ( bitmap & (1U << pos) ) {
 800678c:	2201      	movs	r2, #1
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	409a      	lsls	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4013      	ands	r3, r2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d001      	beq.n	800679e <knl_ready_queue_calc_top_priority+0x1e>
			return pos;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	e006      	b.n	80067ac <knl_ready_queue_calc_top_priority+0x2c>
	for ( ; pos < NUM_TSKPRI; pos++ ) {
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	3301      	adds	r3, #1
 80067a2:	603b      	str	r3, [r7, #0]
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	2b1f      	cmp	r3, #31
 80067a8:	ddf0      	ble.n	800678c <knl_ready_queue_calc_top_priority+0xc>
		}
	}
	return NUM_TSKPRI;
 80067aa:	2320      	movs	r3, #32
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	370c      	adds	r7, #12
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bc80      	pop	{r7}
 80067b4:	4770      	bx	lr

080067b6 <knl_ready_queue_top>:

/*
 * Return the highest priority task in ready queue
 */
Inline TCB* knl_ready_queue_top( RDYQUE *rq )
{
 80067b6:	b480      	push	{r7}
 80067b8:	b083      	sub	sp, #12
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
	/* If there is a task at kernel lock, that is the highest priority task */
	if ( rq->klocktsk != NULL ) {
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d003      	beq.n	80067d0 <knl_ready_queue_top+0x1a>
		return rq->klocktsk;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80067ce:	e005      	b.n	80067dc <knl_ready_queue_top+0x26>
	}

	return (TCB*)rq->tskque[rq->top_priority].next;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	00db      	lsls	r3, r3, #3
 80067d8:	4413      	add	r3, r2
 80067da:	685b      	ldr	r3, [r3, #4]
}
 80067dc:	4618      	mov	r0, r3
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bc80      	pop	{r7}
 80067e4:	4770      	bx	lr

080067e6 <knl_ready_queue_insert_top>:

/*
 * Insert task at head in ready queue 
 */
Inline void knl_ready_queue_insert_top( RDYQUE *rq, TCB *tcb )
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b084      	sub	sp, #16
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
 80067ee:	6039      	str	r1, [r7, #0]
	INT	priority = tcb->priority;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80067f6:	60fb      	str	r3, [r7, #12]

	QueInsert(&tcb->tskque, rq->tskque[priority].next);
 80067f8:	6838      	ldr	r0, [r7, #0]
 80067fa:	687a      	ldr	r2, [r7, #4]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	00db      	lsls	r3, r3, #3
 8006800:	4413      	add	r3, r2
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	4619      	mov	r1, r3
 8006806:	f7ff ff6f 	bl	80066e8 <QueInsert>
#if NUM_TSKPRI <= INT_BITWIDTH
	rq->bitmap[0] |= (1U << priority);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8006810:	2101      	movs	r1, #1
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	fa01 f303 	lsl.w	r3, r1, r3
 8006818:	431a      	orrs	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
#else
	knl_bitset(rq->bitmap, priority);
#endif

	if ( tcb->klocked ) {
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	b2db      	uxtb	r3, r3
 800682c:	2b00      	cmp	r3, #0
 800682e:	d003      	beq.n	8006838 <knl_ready_queue_insert_top+0x52>
		rq->klocktsk = tcb;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
	}

	if ( priority < rq->top_priority ) {
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	429a      	cmp	r2, r3
 8006840:	da02      	bge.n	8006848 <knl_ready_queue_insert_top+0x62>
		rq->top_priority = priority;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	601a      	str	r2, [r3, #0]
	}
}
 8006848:	bf00      	nop
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <knl_ready_queue_delete>:
 *	In addition, update 'top_priority' if the deleted task had the highest 
 *	priority. In such case, use the bitmap area to search the second
 *	highest priority task.
 */
Inline void knl_ready_queue_delete( RDYQUE *rq, TCB *tcb )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
	INT	priority = tcb->priority;
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8006860:	60fb      	str	r3, [r7, #12]
#if NUM_TSKPRI > INT_BITWIDTH
	INT	i;
#endif

	if ( rq->klocktsk == tcb ) {
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	429a      	cmp	r2, r3
 800686c:	d103      	bne.n	8006876 <knl_ready_queue_delete+0x26>
		rq->klocktsk = NULL;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
	}

	QueRemove(&tcb->tskque);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	4618      	mov	r0, r3
 800687a:	f7ff ff4d 	bl	8006718 <QueRemove>
	if ( tcb->klockwait ) {
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d007      	beq.n	800689e <knl_ready_queue_delete+0x4e>
		/* Delete from kernel lock wait queue */
		tcb->klockwait = FALSE;
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8006894:	f36f 0300 	bfc	r3, #0, #1
 8006898:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
		return;
 800689c:	e029      	b.n	80068f2 <knl_ready_queue_delete+0xa2>
	}
	if ( !isQueEmpty(&rq->tskque[priority]) ) {
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	00db      	lsls	r3, r3, #3
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	4413      	add	r3, r2
 80068a6:	3304      	adds	r3, #4
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7ff ff0c 	bl	80066c6 <isQueEmpty>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d01b      	beq.n	80068ec <knl_ready_queue_delete+0x9c>
		return;
	}

#if NUM_TSKPRI <= INT_BITWIDTH
	rq->bitmap[0] &= ~(1U << priority);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80068ba:	2101      	movs	r1, #1
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	fa01 f303 	lsl.w	r3, r1, r3
 80068c2:	43db      	mvns	r3, r3
 80068c4:	401a      	ands	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
#else
	knl_bitclr(rq->bitmap, priority);
#endif
	if ( priority != rq->top_priority ) {
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d10c      	bne.n	80068f0 <knl_ready_queue_delete+0xa0>
		return;
	}

#if NUM_TSKPRI <= INT_BITWIDTH
	rq->top_priority = knl_ready_queue_calc_top_priority(rq->bitmap[0], priority);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80068dc:	68f9      	ldr	r1, [r7, #12]
 80068de:	4618      	mov	r0, r3
 80068e0:	f7ff ff4e 	bl	8006780 <knl_ready_queue_calc_top_priority>
 80068e4:	4602      	mov	r2, r0
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	601a      	str	r2, [r3, #0]
 80068ea:	e002      	b.n	80068f2 <knl_ready_queue_delete+0xa2>
		return;
 80068ec:	bf00      	nop
 80068ee:	e000      	b.n	80068f2 <knl_ready_queue_delete+0xa2>
		return;
 80068f0:	bf00      	nop
		rq->top_priority = priority + i;
	} else {
		rq->top_priority = NUM_TSKPRI;
	}
#endif
}
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <knl_LockOBJ>:
/*
 * Object lock
 *	Do not call from critical section
 */
EXPORT void knl_LockOBJ( OBJLOCK *loc )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
	BOOL	klocked;

  retry:
	BEGIN_CRITICAL_SECTION;
 8006900:	f006 ff05 	bl	800d70e <disint>
 8006904:	60b8      	str	r0, [r7, #8]
	klocked = knl_ctxtsk->klocked;
 8006906:	4b2c      	ldr	r3, [pc, #176]	@ (80069b8 <knl_LockOBJ+0xc0>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800690e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006912:	b2db      	uxtb	r3, r3
 8006914:	60fb      	str	r3, [r7, #12]
	if ( !klocked ) {
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d133      	bne.n	8006984 <knl_LockOBJ+0x8c>
		if ( loc->wtskq.next == NULL ) {
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d113      	bne.n	800694c <knl_LockOBJ+0x54>
			/* Lock */
			QueInit(&loc->wtskq);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4618      	mov	r0, r3
 8006928:	f7ff febe 	bl	80066a8 <QueInit>

			knl_ctxtsk->klocked = klocked = TRUE;
 800692c:	2301      	movs	r3, #1
 800692e:	60fb      	str	r3, [r7, #12]
 8006930:	4b21      	ldr	r3, [pc, #132]	@ (80069b8 <knl_LockOBJ+0xc0>)
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8006938:	f043 0302 	orr.w	r3, r3, #2
 800693c:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
			knl_ready_queue.klocktsk = knl_ctxtsk;
 8006940:	4b1d      	ldr	r3, [pc, #116]	@ (80069b8 <knl_LockOBJ+0xc0>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a1d      	ldr	r2, [pc, #116]	@ (80069bc <knl_LockOBJ+0xc4>)
 8006946:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
 800694a:	e01b      	b.n	8006984 <knl_LockOBJ+0x8c>
		} else {
			/* Ready for lock */
			knl_ready_queue_delete(&knl_ready_queue, knl_ctxtsk);
 800694c:	4b1a      	ldr	r3, [pc, #104]	@ (80069b8 <knl_LockOBJ+0xc0>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4619      	mov	r1, r3
 8006952:	481a      	ldr	r0, [pc, #104]	@ (80069bc <knl_LockOBJ+0xc4>)
 8006954:	f7ff ff7c 	bl	8006850 <knl_ready_queue_delete>
			knl_ctxtsk->klockwait = TRUE;
 8006958:	4b17      	ldr	r3, [pc, #92]	@ (80069b8 <knl_LockOBJ+0xc0>)
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8006960:	f043 0301 	orr.w	r3, r3, #1
 8006964:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
			QueInsert(&knl_ctxtsk->tskque, &loc->wtskq);
 8006968:	4b13      	ldr	r3, [pc, #76]	@ (80069b8 <knl_LockOBJ+0xc0>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	461a      	mov	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4619      	mov	r1, r3
 8006972:	4610      	mov	r0, r2
 8006974:	f7ff feb8 	bl	80066e8 <QueInsert>

			knl_schedtsk = knl_ready_queue_top(&knl_ready_queue);
 8006978:	4810      	ldr	r0, [pc, #64]	@ (80069bc <knl_LockOBJ+0xc4>)
 800697a:	f7ff ff1c 	bl	80067b6 <knl_ready_queue_top>
 800697e:	4603      	mov	r3, r0
 8006980:	4a0f      	ldr	r2, [pc, #60]	@ (80069c0 <knl_LockOBJ+0xc8>)
 8006982:	6013      	str	r3, [r2, #0]
		}
	}
	END_CRITICAL_SECTION;
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10b      	bne.n	80069a2 <knl_LockOBJ+0xaa>
 800698a:	4b0b      	ldr	r3, [pc, #44]	@ (80069b8 <knl_LockOBJ+0xc0>)
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	4b0c      	ldr	r3, [pc, #48]	@ (80069c0 <knl_LockOBJ+0xc8>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	429a      	cmp	r2, r3
 8006994:	d005      	beq.n	80069a2 <knl_LockOBJ+0xaa>
 8006996:	4b0b      	ldr	r3, [pc, #44]	@ (80069c4 <knl_LockOBJ+0xcc>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d101      	bne.n	80069a2 <knl_LockOBJ+0xaa>
 800699e:	f7fc ff7f 	bl	80038a0 <knl_dispatch>
 80069a2:	68b8      	ldr	r0, [r7, #8]
 80069a4:	f006 fe9b 	bl	800d6de <set_basepri>
	/* Since wait could be freed without getting lock, 
	   need to re-try if lock is not got */
	if ( !klocked ) {
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d100      	bne.n	80069b0 <knl_LockOBJ+0xb8>
		goto retry;
 80069ae:	e7a7      	b.n	8006900 <knl_LockOBJ+0x8>
	}
}
 80069b0:	bf00      	nop
 80069b2:	3710      	adds	r7, #16
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	24001870 	.word	0x24001870
 80069bc:	24001878 	.word	0x24001878
 80069c0:	24001874 	.word	0x24001874
 80069c4:	2400186c 	.word	0x2400186c

080069c8 <knl_UnlockOBJ>:
/*
 * Object unlock
 *	It may be called from a critical section.
 */
EXPORT void knl_UnlockOBJ( OBJLOCK *loc )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
	TCB	*tcb;

	BEGIN_CRITICAL_SECTION;
 80069d0:	f006 fe9d 	bl	800d70e <disint>
 80069d4:	60f8      	str	r0, [r7, #12]
	knl_ctxtsk->klocked = FALSE;
 80069d6:	4b23      	ldr	r3, [pc, #140]	@ (8006a64 <knl_UnlockOBJ+0x9c>)
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 80069de:	f36f 0341 	bfc	r3, #1, #1
 80069e2:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
	knl_ready_queue.klocktsk = NULL;
 80069e6:	4b20      	ldr	r3, [pc, #128]	@ (8006a68 <knl_UnlockOBJ+0xa0>)
 80069e8:	2200      	movs	r2, #0
 80069ea:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

	tcb = (TCB*)QueRemoveNext(&loc->wtskq);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7ff fea9 	bl	8006748 <QueRemoveNext>
 80069f6:	60b8      	str	r0, [r7, #8]
	if ( tcb == NULL ) {
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d103      	bne.n	8006a06 <knl_UnlockOBJ+0x3e>
		/* Free lock */
		loc->wtskq.next = NULL;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2200      	movs	r2, #0
 8006a02:	601a      	str	r2, [r3, #0]
 8006a04:	e011      	b.n	8006a2a <knl_UnlockOBJ+0x62>
	} else {
		/* Wake lock wait task */
		tcb->klockwait = FALSE;
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8006a0c:	f36f 0300 	bfc	r3, #0, #1
 8006a10:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
		tcb->klocked = TRUE;
 8006a14:	68ba      	ldr	r2, [r7, #8]
 8006a16:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 8006a1a:	f043 0302 	orr.w	r3, r3, #2
 8006a1e:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
		knl_ready_queue_insert_top(&knl_ready_queue, tcb);
 8006a22:	68b9      	ldr	r1, [r7, #8]
 8006a24:	4810      	ldr	r0, [pc, #64]	@ (8006a68 <knl_UnlockOBJ+0xa0>)
 8006a26:	f7ff fede 	bl	80067e6 <knl_ready_queue_insert_top>
	}

	knl_schedtsk = knl_ready_queue_top(&knl_ready_queue);
 8006a2a:	480f      	ldr	r0, [pc, #60]	@ (8006a68 <knl_UnlockOBJ+0xa0>)
 8006a2c:	f7ff fec3 	bl	80067b6 <knl_ready_queue_top>
 8006a30:	4603      	mov	r3, r0
 8006a32:	4a0e      	ldr	r2, [pc, #56]	@ (8006a6c <knl_UnlockOBJ+0xa4>)
 8006a34:	6013      	str	r3, [r2, #0]
	END_CRITICAL_SECTION;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10b      	bne.n	8006a54 <knl_UnlockOBJ+0x8c>
 8006a3c:	4b09      	ldr	r3, [pc, #36]	@ (8006a64 <knl_UnlockOBJ+0x9c>)
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	4b0a      	ldr	r3, [pc, #40]	@ (8006a6c <knl_UnlockOBJ+0xa4>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d005      	beq.n	8006a54 <knl_UnlockOBJ+0x8c>
 8006a48:	4b09      	ldr	r3, [pc, #36]	@ (8006a70 <knl_UnlockOBJ+0xa8>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d101      	bne.n	8006a54 <knl_UnlockOBJ+0x8c>
 8006a50:	f7fc ff26 	bl	80038a0 <knl_dispatch>
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f006 fe42 	bl	800d6de <set_basepri>
}
 8006a5a:	bf00      	nop
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	24001870 	.word	0x24001870
 8006a68:	24001878 	.word	0x24001878
 8006a6c:	24001874 	.word	0x24001874
 8006a70:	2400186c 	.word	0x2400186c

08006a74 <QueInit>:
{
 8006a74:	b480      	push	{r7}
 8006a76:	b083      	sub	sp, #12
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	605a      	str	r2, [r3, #4]
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bc80      	pop	{r7}
 8006a90:	4770      	bx	lr

08006a92 <isQueEmpty>:
{
 8006a92:	b480      	push	{r7}
 8006a94:	b083      	sub	sp, #12
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
	return ( que->next == que )? TRUE: FALSE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	bf0c      	ite	eq
 8006aa4:	2301      	moveq	r3, #1
 8006aa6:	2300      	movne	r3, #0
 8006aa8:	b2db      	uxtb	r3, r3
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bc80      	pop	{r7}
 8006ab2:	4770      	bx	lr

08006ab4 <QueInsert>:
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	685a      	ldr	r2, [r3, #4]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	605a      	str	r2, [r3, #4]
	entry->next = que;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	683a      	ldr	r2, [r7, #0]
 8006aca:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	605a      	str	r2, [r3, #4]
}
 8006ada:	bf00      	nop
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bc80      	pop	{r7}
 8006ae2:	4770      	bx	lr

08006ae4 <QueRemoveNext>:
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
	if ( que->next == que ) {
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d101      	bne.n	8006afa <QueRemoveNext+0x16>
		return NULL;
 8006af6:	2300      	movs	r3, #0
 8006af8:	e00b      	b.n	8006b12 <QueRemoveNext+0x2e>
	entry = que->next;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	60fb      	str	r3, [r7, #12]
	que->next = (struct queue*)entry->next;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	601a      	str	r2, [r3, #0]
	entry->next->prev = que;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	605a      	str	r2, [r3, #4]
	return entry;
 8006b10:	68fb      	ldr	r3, [r7, #12]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3714      	adds	r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bc80      	pop	{r7}
 8006b1a:	4770      	bx	lr

08006b1c <knl_isTaskIndependent>:
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	af00      	add	r7, sp, #0
	return ( knl_taskindp > 0 )? TRUE: FALSE;
 8006b20:	4b05      	ldr	r3, [pc, #20]	@ (8006b38 <knl_isTaskIndependent+0x1c>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	bfcc      	ite	gt
 8006b28:	2301      	movgt	r3, #1
 8006b2a:	2300      	movle	r3, #0
 8006b2c:	b2db      	uxtb	r3, r3
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bc80      	pop	{r7}
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	240029f8 	.word	0x240029f8

08006b3c <knl_queue_insert_mpri>:

/*
 * Insert a message queue following priority
 */
Inline void knl_queue_insert_mpri( T_MSG_PRI *pk_msg, T_MSG *head )
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b085      	sub	sp, #20
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
	T_MSG_PRI	*msg;
	T_MSG		*prevmsg = head;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	60fb      	str	r3, [r7, #12]

	while ( (msg = (T_MSG_PRI*)nextmsg(prevmsg)) != NULL ) {
 8006b4a:	e007      	b.n	8006b5c <knl_queue_insert_mpri+0x20>
		if ( msg->msgpri > pk_msg->msgpri ) {
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	685a      	ldr	r2, [r3, #4]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	dc08      	bgt.n	8006b6a <knl_queue_insert_mpri+0x2e>
			break;
		}
		prevmsg = (T_MSG*)msg;
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	60fb      	str	r3, [r7, #12]
	while ( (msg = (T_MSG_PRI*)nextmsg(prevmsg)) != NULL ) {
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	60bb      	str	r3, [r7, #8]
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d1f1      	bne.n	8006b4c <knl_queue_insert_mpri+0x10>
 8006b68:	e000      	b.n	8006b6c <knl_queue_insert_mpri+0x30>
			break;
 8006b6a:	bf00      	nop
	}
	nextmsg(pk_msg) = msg;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	601a      	str	r2, [r3, #0]
	nextmsg(prevmsg) = pk_msg;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	601a      	str	r2, [r3, #0]
}
 8006b78:	bf00      	nop
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bc80      	pop	{r7}
 8006b80:	4770      	bx	lr
	...

08006b84 <knl_mailbox_initialize>:

/*
 * Initialization of mailbox control block 
 */
EXPORT ER knl_mailbox_initialize( void )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
	if ( NUM_MBXID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_mbxcb);
 8006b8a:	480e      	ldr	r0, [pc, #56]	@ (8006bc4 <knl_mailbox_initialize+0x40>)
 8006b8c:	f7ff ff72 	bl	8006a74 <QueInit>
	end = knl_mbxcb_table + NUM_MBXID;
 8006b90:	4b0d      	ldr	r3, [pc, #52]	@ (8006bc8 <knl_mailbox_initialize+0x44>)
 8006b92:	603b      	str	r3, [r7, #0]
	for ( mbxcb = knl_mbxcb_table; mbxcb < end; mbxcb++ ) {
 8006b94:	4b0d      	ldr	r3, [pc, #52]	@ (8006bcc <knl_mailbox_initialize+0x48>)
 8006b96:	607b      	str	r3, [r7, #4]
 8006b98:	e00a      	b.n	8006bb0 <knl_mailbox_initialize+0x2c>
		mbxcb->mbxid = 0;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	609a      	str	r2, [r3, #8]
		QueInsert(&mbxcb->wait_queue, &knl_free_mbxcb);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4908      	ldr	r1, [pc, #32]	@ (8006bc4 <knl_mailbox_initialize+0x40>)
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	f7ff ff85 	bl	8006ab4 <QueInsert>
	for ( mbxcb = knl_mbxcb_table; mbxcb < end; mbxcb++ ) {
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	331c      	adds	r3, #28
 8006bae:	607b      	str	r3, [r7, #4]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d3f0      	bcc.n	8006b9a <knl_mailbox_initialize+0x16>
	}

	return E_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	24001378 	.word	0x24001378
 8006bc8:	24001378 	.word	0x24001378
 8006bcc:	24001308 	.word	0x24001308

08006bd0 <tk_cre_mbx>:

/*
 * Create mailbox
 */
SYSCALL ID tk_cre_mbx( CONST T_CMBX *pk_cmbx )
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b088      	sub	sp, #32
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
#if CHK_RSATR
	const ATR VALID_MBXATR = {
 8006bd8:	2303      	movs	r3, #3
 8006bda:	61bb      	str	r3, [r7, #24]
#endif
	MBXCB	*mbxcb;
	ID	mbxid;
	ER	ercd;

	CHECK_RSATR(pk_cmbx->mbxatr, VALID_MBXATR);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	43db      	mvns	r3, r3
 8006be4:	4013      	ands	r3, r2
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d002      	beq.n	8006bf0 <tk_cre_mbx+0x20>
 8006bea:	f06f 030a 	mvn.w	r3, #10
 8006bee:	e03d      	b.n	8006c6c <tk_cre_mbx+0x9c>

	BEGIN_CRITICAL_SECTION;
 8006bf0:	f006 fd8d 	bl	800d70e <disint>
 8006bf4:	6178      	str	r0, [r7, #20]
	/* Get control block from FreeQue */
	mbxcb = (MBXCB*)QueRemoveNext(&knl_free_mbxcb);
 8006bf6:	481f      	ldr	r0, [pc, #124]	@ (8006c74 <tk_cre_mbx+0xa4>)
 8006bf8:	f7ff ff74 	bl	8006ae4 <QueRemoveNext>
 8006bfc:	6138      	str	r0, [r7, #16]
	if ( mbxcb == NULL ) {
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d103      	bne.n	8006c0c <tk_cre_mbx+0x3c>
		ercd = E_LIMIT;
 8006c04:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8006c08:	61fb      	str	r3, [r7, #28]
 8006c0a:	e01c      	b.n	8006c46 <tk_cre_mbx+0x76>
	} else {
		mbxid = ID_MBX(mbxcb - knl_mbxcb_table);
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	4a1a      	ldr	r2, [pc, #104]	@ (8006c78 <tk_cre_mbx+0xa8>)
 8006c10:	1a9b      	subs	r3, r3, r2
 8006c12:	109b      	asrs	r3, r3, #2
 8006c14:	4a19      	ldr	r2, [pc, #100]	@ (8006c7c <tk_cre_mbx+0xac>)
 8006c16:	fb02 f303 	mul.w	r3, r2, r3
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	60fb      	str	r3, [r7, #12]

		/* Initialize control block */
		QueInit(&mbxcb->wait_queue);
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7ff ff27 	bl	8006a74 <QueInit>
		mbxcb->mbxid  = mbxid;
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	68fa      	ldr	r2, [r7, #12]
 8006c2a:	609a      	str	r2, [r3, #8]
		mbxcb->exinf  = pk_cmbx->exinf;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	60da      	str	r2, [r3, #12]
		mbxcb->mbxatr = pk_cmbx->mbxatr;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685a      	ldr	r2, [r3, #4]
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	611a      	str	r2, [r3, #16]
		mbxcb->mq_head.msgque[0] = NULL;
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	615a      	str	r2, [r3, #20]
		if ( (pk_cmbx->mbxatr & TA_DSNAME) != 0 ) {
			knl_strncpy((char*)mbxcb->name, (char*)pk_cmbx->dsname,
				OBJECT_NAME_LENGTH);
		}
#endif
		ercd = mbxid;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	61fb      	str	r3, [r7, #28]
	}
	END_CRITICAL_SECTION;
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10b      	bne.n	8006c64 <tk_cre_mbx+0x94>
 8006c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8006c80 <tk_cre_mbx+0xb0>)
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	4b0c      	ldr	r3, [pc, #48]	@ (8006c84 <tk_cre_mbx+0xb4>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d005      	beq.n	8006c64 <tk_cre_mbx+0x94>
 8006c58:	4b0b      	ldr	r3, [pc, #44]	@ (8006c88 <tk_cre_mbx+0xb8>)
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d101      	bne.n	8006c64 <tk_cre_mbx+0x94>
 8006c60:	f7fc fe1e 	bl	80038a0 <knl_dispatch>
 8006c64:	6978      	ldr	r0, [r7, #20]
 8006c66:	f006 fd3a 	bl	800d6de <set_basepri>

	return ercd;
 8006c6a:	69fb      	ldr	r3, [r7, #28]
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3720      	adds	r7, #32
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	24001378 	.word	0x24001378
 8006c78:	24001308 	.word	0x24001308
 8006c7c:	b6db6db7 	.word	0xb6db6db7
 8006c80:	24001870 	.word	0x24001870
 8006c84:	24001874 	.word	0x24001874
 8006c88:	2400186c 	.word	0x2400186c

08006c8c <tk_del_mbx>:
#ifdef USE_FUNC_TK_DEL_MBX
/*
 * Delete mailbox
 */
SYSCALL ER tk_del_mbx( ID mbxid )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b086      	sub	sp, #24
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
	MBXCB	*mbxcb;
	ER	ercd = E_OK;
 8006c94:	2300      	movs	r3, #0
 8006c96:	617b      	str	r3, [r7, #20]

	CHECK_MBXID(mbxid);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	dd02      	ble.n	8006ca4 <tk_del_mbx+0x18>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2b04      	cmp	r3, #4
 8006ca2:	dd02      	ble.n	8006caa <tk_del_mbx+0x1e>
 8006ca4:	f06f 0311 	mvn.w	r3, #17
 8006ca8:	e032      	b.n	8006d10 <tk_del_mbx+0x84>

	mbxcb = get_mbxcb(mbxid);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	1e5a      	subs	r2, r3, #1
 8006cae:	4613      	mov	r3, r2
 8006cb0:	00db      	lsls	r3, r3, #3
 8006cb2:	1a9b      	subs	r3, r3, r2
 8006cb4:	009b      	lsls	r3, r3, #2
 8006cb6:	4a18      	ldr	r2, [pc, #96]	@ (8006d18 <tk_del_mbx+0x8c>)
 8006cb8:	4413      	add	r3, r2
 8006cba:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 8006cbc:	f006 fd27 	bl	800d70e <disint>
 8006cc0:	60f8      	str	r0, [r7, #12]
	if ( mbxcb->mbxid == 0 ) {
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d103      	bne.n	8006cd2 <tk_del_mbx+0x46>
		ercd = E_NOEXS;
 8006cca:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 8006cce:	617b      	str	r3, [r7, #20]
 8006cd0:	e00b      	b.n	8006cea <tk_del_mbx+0x5e>
	} else {
		/* Release wait state of task (E_DLT) */
		knl_wait_delete(&mbxcb->wait_queue);
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f006 f965 	bl	800cfa4 <knl_wait_delete>

		/* Return to FreeQue */
		QueInsert(&mbxcb->wait_queue, &knl_free_mbxcb);
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	490f      	ldr	r1, [pc, #60]	@ (8006d1c <tk_del_mbx+0x90>)
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f7ff fee8 	bl	8006ab4 <QueInsert>
		mbxcb->mbxid = 0;
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	609a      	str	r2, [r3, #8]
	}
	END_CRITICAL_SECTION;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10b      	bne.n	8006d08 <tk_del_mbx+0x7c>
 8006cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8006d20 <tk_del_mbx+0x94>)
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8006d24 <tk_del_mbx+0x98>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d005      	beq.n	8006d08 <tk_del_mbx+0x7c>
 8006cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8006d28 <tk_del_mbx+0x9c>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <tk_del_mbx+0x7c>
 8006d04:	f7fc fdcc 	bl	80038a0 <knl_dispatch>
 8006d08:	68f8      	ldr	r0, [r7, #12]
 8006d0a:	f006 fce8 	bl	800d6de <set_basepri>

	return ercd;
 8006d0e:	697b      	ldr	r3, [r7, #20]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3718      	adds	r7, #24
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	24001308 	.word	0x24001308
 8006d1c:	24001378 	.word	0x24001378
 8006d20:	24001870 	.word	0x24001870
 8006d24:	24001874 	.word	0x24001874
 8006d28:	2400186c 	.word	0x2400186c

08006d2c <tk_snd_mbx>:

/*
 * Send to mailbox
 */
SYSCALL ER tk_snd_mbx( ID mbxid, T_MSG *pk_msg )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
	MBXCB	*mbxcb;
	TCB	*tcb;
	ER	ercd = E_OK;
 8006d36:	2300      	movs	r3, #0
 8006d38:	617b      	str	r3, [r7, #20]

	CHECK_MBXID(mbxid);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	dd02      	ble.n	8006d46 <tk_snd_mbx+0x1a>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2b04      	cmp	r3, #4
 8006d44:	dd02      	ble.n	8006d4c <tk_snd_mbx+0x20>
 8006d46:	f06f 0311 	mvn.w	r3, #17
 8006d4a:	e065      	b.n	8006e18 <tk_snd_mbx+0xec>

	mbxcb = get_mbxcb(mbxid);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	1e5a      	subs	r2, r3, #1
 8006d50:	4613      	mov	r3, r2
 8006d52:	00db      	lsls	r3, r3, #3
 8006d54:	1a9b      	subs	r3, r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4a31      	ldr	r2, [pc, #196]	@ (8006e20 <tk_snd_mbx+0xf4>)
 8006d5a:	4413      	add	r3, r2
 8006d5c:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 8006d5e:	f006 fcd6 	bl	800d70e <disint>
 8006d62:	60f8      	str	r0, [r7, #12]
	if (mbxcb->mbxid == 0) {
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d103      	bne.n	8006d74 <tk_snd_mbx+0x48>
		ercd = E_NOEXS;
 8006d6c:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 8006d70:	617b      	str	r3, [r7, #20]
		goto error_exit;
 8006d72:	e03e      	b.n	8006df2 <tk_snd_mbx+0xc6>
	}

	if ( (mbxcb->mbxatr & TA_MPRI) != 0 ) {
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	f003 0302 	and.w	r3, r3, #2
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d007      	beq.n	8006d90 <tk_snd_mbx+0x64>
		if ( ((T_MSG_PRI*)pk_msg)->msgpri <= 0 ) {
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	dc03      	bgt.n	8006d90 <tk_snd_mbx+0x64>
			ercd = E_PAR;
 8006d88:	f06f 0310 	mvn.w	r3, #16
 8006d8c:	617b      	str	r3, [r7, #20]
			goto error_exit;
 8006d8e:	e030      	b.n	8006df2 <tk_snd_mbx+0xc6>
		}
	}

	if ( !isQueEmpty(&mbxcb->wait_queue) ) {
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7ff fe7d 	bl	8006a92 <isQueEmpty>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10a      	bne.n	8006db4 <tk_snd_mbx+0x88>
		/* Directly send to receive wait task */
		tcb = (TCB*)(mbxcb->wait_queue.next);
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	60bb      	str	r3, [r7, #8]
		*tcb->winfo.mbx.ppk_msg = pk_msg;
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	601a      	str	r2, [r3, #0]
		knl_wait_release_ok(tcb);
 8006dac:	68b8      	ldr	r0, [r7, #8]
 8006dae:	f006 f843 	bl	800ce38 <knl_wait_release_ok>
 8006db2:	e01e      	b.n	8006df2 <tk_snd_mbx+0xc6>

	} else {
		/* Connect message to queue */
		if ( (mbxcb->mbxatr & TA_MPRI) != 0 ) {
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	f003 0302 	and.w	r3, r3, #2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d006      	beq.n	8006dce <tk_snd_mbx+0xa2>
			/* Connect message to queue following priority */
			knl_queue_insert_mpri((T_MSG_PRI*)pk_msg, &mbxcb->mq_head);
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	3314      	adds	r3, #20
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	6838      	ldr	r0, [r7, #0]
 8006dc8:	f7ff feb8 	bl	8006b3c <knl_queue_insert_mpri>
 8006dcc:	e011      	b.n	8006df2 <tk_snd_mbx+0xc6>
		} else {
			/* Connect to end of queue */
			nextmsg(pk_msg) = NULL;
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	601a      	str	r2, [r3, #0]
			if ( headmsg(mbxcb) == NULL ) {
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	695b      	ldr	r3, [r3, #20]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d103      	bne.n	8006de4 <tk_snd_mbx+0xb8>
				headmsg(mbxcb) = pk_msg;
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	615a      	str	r2, [r3, #20]
 8006de2:	e003      	b.n	8006dec <tk_snd_mbx+0xc0>
			} else {
				nextmsg(mbxcb->mq_tail) = pk_msg;
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	683a      	ldr	r2, [r7, #0]
 8006dea:	601a      	str	r2, [r3, #0]
			}
			mbxcb->mq_tail = pk_msg;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	619a      	str	r2, [r3, #24]
		}
	}

    error_exit:
	END_CRITICAL_SECTION;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10b      	bne.n	8006e10 <tk_snd_mbx+0xe4>
 8006df8:	4b0a      	ldr	r3, [pc, #40]	@ (8006e24 <tk_snd_mbx+0xf8>)
 8006dfa:	681a      	ldr	r2, [r3, #0]
 8006dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8006e28 <tk_snd_mbx+0xfc>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	d005      	beq.n	8006e10 <tk_snd_mbx+0xe4>
 8006e04:	4b09      	ldr	r3, [pc, #36]	@ (8006e2c <tk_snd_mbx+0x100>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d101      	bne.n	8006e10 <tk_snd_mbx+0xe4>
 8006e0c:	f7fc fd48 	bl	80038a0 <knl_dispatch>
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f006 fc64 	bl	800d6de <set_basepri>

	return ercd;
 8006e16:	697b      	ldr	r3, [r7, #20]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3718      	adds	r7, #24
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	24001308 	.word	0x24001308
 8006e24:	24001870 	.word	0x24001870
 8006e28:	24001874 	.word	0x24001874
 8006e2c:	2400186c 	.word	0x2400186c

08006e30 <mbx_chg_pri>:

/*
 * Processing if the priority of wait task changes
 */
LOCAL void mbx_chg_pri( TCB *tcb, INT oldpri )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
	MBXCB	*mbxcb;

	mbxcb = get_mbxcb(tcb->wid);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e3e:	1e5a      	subs	r2, r3, #1
 8006e40:	4613      	mov	r3, r2
 8006e42:	00db      	lsls	r3, r3, #3
 8006e44:	1a9b      	subs	r3, r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	4a05      	ldr	r2, [pc, #20]	@ (8006e60 <mbx_chg_pri+0x30>)
 8006e4a:	4413      	add	r3, r2
 8006e4c:	60fb      	str	r3, [r7, #12]
	knl_gcb_change_priority((GCB*)mbxcb, tcb);
 8006e4e:	6879      	ldr	r1, [r7, #4]
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f006 f90b 	bl	800d06c <knl_gcb_change_priority>
}
 8006e56:	bf00      	nop
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	24001308 	.word	0x24001308

08006e64 <tk_rcv_mbx>:

/*
 * Receive from mailbox
 */
SYSCALL ER tk_rcv_mbx( ID mbxid, T_MSG **ppk_msg, TMO tmout )
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b088      	sub	sp, #32
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]
	MBXCB	*mbxcb;
	ER	ercd = E_OK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	617b      	str	r3, [r7, #20]

	CHECK_MBXID(mbxid);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	dd02      	ble.n	8006e80 <tk_rcv_mbx+0x1c>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2b04      	cmp	r3, #4
 8006e7e:	dd02      	ble.n	8006e86 <tk_rcv_mbx+0x22>
 8006e80:	f06f 0311 	mvn.w	r3, #17
 8006e84:	e069      	b.n	8006f5a <tk_rcv_mbx+0xf6>
	CHECK_TMOUT(tmout);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e8c:	da02      	bge.n	8006e94 <tk_rcv_mbx+0x30>
 8006e8e:	f06f 0310 	mvn.w	r3, #16
 8006e92:	e062      	b.n	8006f5a <tk_rcv_mbx+0xf6>
	CHECK_DISPATCH();
 8006e94:	4b33      	ldr	r3, [pc, #204]	@ (8006f64 <tk_rcv_mbx+0x100>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10d      	bne.n	8006eb8 <tk_rcv_mbx+0x54>
 8006e9c:	f7ff fe3e 	bl	8006b1c <knl_isTaskIndependent>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d108      	bne.n	8006eb8 <tk_rcv_mbx+0x54>
 8006ea6:	4b30      	ldr	r3, [pc, #192]	@ (8006f68 <tk_rcv_mbx+0x104>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d004      	beq.n	8006eb8 <tk_rcv_mbx+0x54>
 8006eae:	f006 fc22 	bl	800d6f6 <get_basepri>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d002      	beq.n	8006ebe <tk_rcv_mbx+0x5a>
 8006eb8:	f06f 0318 	mvn.w	r3, #24
 8006ebc:	e04d      	b.n	8006f5a <tk_rcv_mbx+0xf6>

	mbxcb = get_mbxcb(mbxid);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	1e5a      	subs	r2, r3, #1
 8006ec2:	4613      	mov	r3, r2
 8006ec4:	00db      	lsls	r3, r3, #3
 8006ec6:	1a9b      	subs	r3, r3, r2
 8006ec8:	009b      	lsls	r3, r3, #2
 8006eca:	4a28      	ldr	r2, [pc, #160]	@ (8006f6c <tk_rcv_mbx+0x108>)
 8006ecc:	4413      	add	r3, r2
 8006ece:	61fb      	str	r3, [r7, #28]

	BEGIN_CRITICAL_SECTION;
 8006ed0:	f006 fc1d 	bl	800d70e <disint>
 8006ed4:	61b8      	str	r0, [r7, #24]
	if ( mbxcb->mbxid == 0 ) {
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d103      	bne.n	8006ee6 <tk_rcv_mbx+0x82>
		ercd = E_NOEXS;
 8006ede:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 8006ee2:	617b      	str	r3, [r7, #20]
		goto error_exit;
 8006ee4:	e026      	b.n	8006f34 <tk_rcv_mbx+0xd0>
	}

	if ( headmsg(mbxcb) != NULL ) {
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	695b      	ldr	r3, [r3, #20]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d009      	beq.n	8006f02 <tk_rcv_mbx+0x9e>
		/* Get message from head of queue */
		*ppk_msg = headmsg(mbxcb);
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	695a      	ldr	r2, [r3, #20]
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	601a      	str	r2, [r3, #0]
		headmsg(mbxcb) = nextmsg(*ppk_msg);
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	615a      	str	r2, [r3, #20]
 8006f00:	e018      	b.n	8006f34 <tk_rcv_mbx+0xd0>
	} else {
		/* Ready for receive wait */
		knl_ctxtsk->wspec = ( (mbxcb->mbxatr & TA_TPRI) != 0 )?
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	691b      	ldr	r3, [r3, #16]
 8006f06:	f003 0301 	and.w	r3, r3, #1
					&knl_wspec_mbx_tpri: &knl_wspec_mbx_tfifo;
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <tk_rcv_mbx+0xae>
 8006f0e:	4a18      	ldr	r2, [pc, #96]	@ (8006f70 <tk_rcv_mbx+0x10c>)
 8006f10:	e000      	b.n	8006f14 <tk_rcv_mbx+0xb0>
 8006f12:	4a18      	ldr	r2, [pc, #96]	@ (8006f74 <tk_rcv_mbx+0x110>)
		knl_ctxtsk->wspec = ( (mbxcb->mbxatr & TA_TPRI) != 0 )?
 8006f14:	4b14      	ldr	r3, [pc, #80]	@ (8006f68 <tk_rcv_mbx+0x104>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	62da      	str	r2, [r3, #44]	@ 0x2c
		knl_ctxtsk->wercd = &ercd;
 8006f1a:	4b13      	ldr	r3, [pc, #76]	@ (8006f68 <tk_rcv_mbx+0x104>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f107 0214 	add.w	r2, r7, #20
 8006f22:	63da      	str	r2, [r3, #60]	@ 0x3c
		knl_ctxtsk->winfo.mbx.ppk_msg = ppk_msg;
 8006f24:	4b10      	ldr	r3, [pc, #64]	@ (8006f68 <tk_rcv_mbx+0x104>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	641a      	str	r2, [r3, #64]	@ 0x40
		knl_gcb_make_wait((GCB*)mbxcb, tmout);
 8006f2c:	6879      	ldr	r1, [r7, #4]
 8006f2e:	69f8      	ldr	r0, [r7, #28]
 8006f30:	f006 f866 	bl	800d000 <knl_gcb_make_wait>
	}

    error_exit:
	END_CRITICAL_SECTION;
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d10b      	bne.n	8006f52 <tk_rcv_mbx+0xee>
 8006f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8006f68 <tk_rcv_mbx+0x104>)
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8006f78 <tk_rcv_mbx+0x114>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d005      	beq.n	8006f52 <tk_rcv_mbx+0xee>
 8006f46:	4b07      	ldr	r3, [pc, #28]	@ (8006f64 <tk_rcv_mbx+0x100>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d101      	bne.n	8006f52 <tk_rcv_mbx+0xee>
 8006f4e:	f7fc fca7 	bl	80038a0 <knl_dispatch>
 8006f52:	69b8      	ldr	r0, [r7, #24]
 8006f54:	f006 fbc3 	bl	800d6de <set_basepri>

	return ercd;
 8006f58:	697b      	ldr	r3, [r7, #20]
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3720      	adds	r7, #32
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	2400186c 	.word	0x2400186c
 8006f68:	24001870 	.word	0x24001870
 8006f6c:	24001308 	.word	0x24001308
 8006f70:	0800ee34 	.word	0x0800ee34
 8006f74:	0800ee28 	.word	0x0800ee28
 8006f78:	24001874 	.word	0x24001874

08006f7c <tk_ref_mbx>:
#ifdef USE_FUNC_TK_REF_MBX
/*
 * Refer mailbox state 
 */
SYSCALL ER tk_ref_mbx( ID mbxid, T_RMBX *pk_rmbx )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
	MBXCB	*mbxcb;
	ER	ercd = E_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	617b      	str	r3, [r7, #20]

	CHECK_MBXID(mbxid);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	dd02      	ble.n	8006f96 <tk_ref_mbx+0x1a>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2b04      	cmp	r3, #4
 8006f94:	dd02      	ble.n	8006f9c <tk_ref_mbx+0x20>
 8006f96:	f06f 0311 	mvn.w	r3, #17
 8006f9a:	e035      	b.n	8007008 <tk_ref_mbx+0x8c>

	mbxcb = get_mbxcb(mbxid);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	1e5a      	subs	r2, r3, #1
 8006fa0:	4613      	mov	r3, r2
 8006fa2:	00db      	lsls	r3, r3, #3
 8006fa4:	1a9b      	subs	r3, r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	4a19      	ldr	r2, [pc, #100]	@ (8007010 <tk_ref_mbx+0x94>)
 8006faa:	4413      	add	r3, r2
 8006fac:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 8006fae:	f006 fbae 	bl	800d70e <disint>
 8006fb2:	60f8      	str	r0, [r7, #12]
	if ( mbxcb->mbxid == 0 ) {
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d103      	bne.n	8006fc4 <tk_ref_mbx+0x48>
		ercd = E_NOEXS;
 8006fbc:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 8006fc0:	617b      	str	r3, [r7, #20]
 8006fc2:	e00e      	b.n	8006fe2 <tk_ref_mbx+0x66>
	} else {
		pk_rmbx->exinf = mbxcb->exinf;
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	68da      	ldr	r2, [r3, #12]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	601a      	str	r2, [r3, #0]
		pk_rmbx->wtsk = knl_wait_tskid(&mbxcb->wait_queue);
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f006 f803 	bl	800cfda <knl_wait_tskid>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	605a      	str	r2, [r3, #4]
		pk_rmbx->pk_msg = headmsg(mbxcb);
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	695a      	ldr	r2, [r3, #20]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	609a      	str	r2, [r3, #8]
	}
	END_CRITICAL_SECTION;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d10b      	bne.n	8007000 <tk_ref_mbx+0x84>
 8006fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8007014 <tk_ref_mbx+0x98>)
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	4b0a      	ldr	r3, [pc, #40]	@ (8007018 <tk_ref_mbx+0x9c>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d005      	beq.n	8007000 <tk_ref_mbx+0x84>
 8006ff4:	4b09      	ldr	r3, [pc, #36]	@ (800701c <tk_ref_mbx+0xa0>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d101      	bne.n	8007000 <tk_ref_mbx+0x84>
 8006ffc:	f7fc fc50 	bl	80038a0 <knl_dispatch>
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f006 fb6c 	bl	800d6de <set_basepri>

	return ercd;
 8007006:	697b      	ldr	r3, [r7, #20]
}
 8007008:	4618      	mov	r0, r3
 800700a:	3718      	adds	r7, #24
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}
 8007010:	24001308 	.word	0x24001308
 8007014:	24001870 	.word	0x24001870
 8007018:	24001874 	.word	0x24001874
 800701c:	2400186c 	.word	0x2400186c

08007020 <QueInit>:
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	605a      	str	r2, [r3, #4]
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	bc80      	pop	{r7}
 800703c:	4770      	bx	lr

0800703e <QueInsert>:
{
 800703e:	b480      	push	{r7}
 8007040:	b083      	sub	sp, #12
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	685a      	ldr	r2, [r3, #4]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	605a      	str	r2, [r3, #4]
	entry->next = que;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	605a      	str	r2, [r3, #4]
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	bc80      	pop	{r7}
 800706c:	4770      	bx	lr

0800706e <QueRemove>:
{
 800706e:	b480      	push	{r7}
 8007070:	b083      	sub	sp, #12
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
	if ( entry->next != entry ) {
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	429a      	cmp	r2, r3
 800707e:	d009      	beq.n	8007094 <QueRemove+0x26>
		entry->prev->next = (struct queue*) entry->next;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	6812      	ldr	r2, [r2, #0]
 8007088:	601a      	str	r2, [r3, #0]
		entry->next->prev = (struct queue*) entry->prev;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	6852      	ldr	r2, [r2, #4]
 8007092:	605a      	str	r2, [r3, #4]
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	bc80      	pop	{r7}
 800709c:	4770      	bx	lr

0800709e <knl_searchFreeArea>:
 *	or larger than
 *      'blksz' but closest.
 *	If it does not exist, return '&imacb->freeque'.
 */
EXPORT QUEUE* knl_searchFreeArea( IMACB *imacb, W blksz )
{
 800709e:	b480      	push	{r7}
 80070a0:	b085      	sub	sp, #20
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	6039      	str	r1, [r7, #0]
	QUEUE	*q = &imacb->freeque;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	330c      	adds	r3, #12
 80070ac:	60fb      	str	r3, [r7, #12]

	/* For area whose memory pool size is less than 1/4,
	   search from smaller size.
	   Otherwise, search from larger size. */
	if ( blksz > imacb->memsz / 4 ) {
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	da00      	bge.n	80070b8 <knl_searchFreeArea+0x1a>
 80070b6:	3303      	adds	r3, #3
 80070b8:	109b      	asrs	r3, r3, #2
 80070ba:	461a      	mov	r2, r3
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	4293      	cmp	r3, r2
 80070c0:	dd2b      	ble.n	800711a <knl_searchFreeArea+0x7c>
		/* Search from larger size. */
		W fsz = 0;
 80070c2:	2300      	movs	r3, #0
 80070c4:	60bb      	str	r3, [r7, #8]
		while ( (q = q->prev) != &imacb->freeque ) {
 80070c6:	e010      	b.n	80070ea <knl_searchFreeArea+0x4c>
			fsz = FreeSize(q);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	3308      	adds	r3, #8
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	60bb      	str	r3, [r7, #8]
			if ( fsz <= blksz ) {
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	dc08      	bgt.n	80070ea <knl_searchFreeArea+0x4c>
				return ( fsz < blksz )? q->next: q;
 80070d8:	68ba      	ldr	r2, [r7, #8]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	429a      	cmp	r2, r3
 80070de:	da02      	bge.n	80070e6 <knl_searchFreeArea+0x48>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	e024      	b.n	8007130 <knl_searchFreeArea+0x92>
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	e022      	b.n	8007130 <knl_searchFreeArea+0x92>
		while ( (q = q->prev) != &imacb->freeque ) {
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	60fb      	str	r3, [r7, #12]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	330c      	adds	r3, #12
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d1e6      	bne.n	80070c8 <knl_searchFreeArea+0x2a>
			}
		}
		return ( fsz >= blksz )? q->next: q;
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	429a      	cmp	r2, r3
 8007100:	db02      	blt.n	8007108 <knl_searchFreeArea+0x6a>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	e013      	b.n	8007130 <knl_searchFreeArea+0x92>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	e011      	b.n	8007130 <knl_searchFreeArea+0x92>
	} else {
		/* Search from smaller size. */
		while ( (q = q->next) != &imacb->freeque ) {
			if ( FreeSize(q) >= blksz ) {
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	3308      	adds	r3, #8
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	461a      	mov	r2, r3
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	4293      	cmp	r3, r2
 8007118:	dd08      	ble.n	800712c <knl_searchFreeArea+0x8e>
		while ( (q = q->next) != &imacb->freeque ) {
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	60fb      	str	r3, [r7, #12]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	330c      	adds	r3, #12
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	429a      	cmp	r2, r3
 8007128:	d1f0      	bne.n	800710c <knl_searchFreeArea+0x6e>
 800712a:	e000      	b.n	800712e <knl_searchFreeArea+0x90>
				break;
 800712c:	bf00      	nop
			}
		}
		return q;
 800712e:	68fb      	ldr	r3, [r7, #12]
	}
}
 8007130:	4618      	mov	r0, r3
 8007132:	3714      	adds	r7, #20
 8007134:	46bd      	mov	sp, r7
 8007136:	bc80      	pop	{r7}
 8007138:	4770      	bx	lr

0800713a <knl_appendFreeArea>:
 *	|   +-----------------------+	    +-----------------------+
 *	|   | AreaQue		    |	    | AreaQue		    |
 *	v   +-----------------------+	    +-----------------------+
 */
EXPORT void knl_appendFreeArea( IMACB *imacb, QUEUE *aq )
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b084      	sub	sp, #16
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
 8007142:	6039      	str	r1, [r7, #0]
	QUEUE	*fq;
	W	size = AreaSize(aq);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	3308      	adds	r3, #8
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	60fb      	str	r3, [r7, #12]
	/* Registration position search */
	/*  Search the free area whose size is equal to 'blksz',
	 *  or larger than 'blksz' but closest.
	 *  If it does not exist, return '&imacb->freeque'.
	 */
	fq = knl_searchFreeArea(imacb, size);
 8007150:	68f9      	ldr	r1, [r7, #12]
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f7ff ffa3 	bl	800709e <knl_searchFreeArea>
 8007158:	60b8      	str	r0, [r7, #8]

	/* Register */
	clrAreaFlag(aq, AREA_USE);
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	f023 0301 	bic.w	r3, r3, #1
 8007162:	461a      	mov	r2, r3
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	605a      	str	r2, [r3, #4]
	if ( fq != &imacb->freeque && FreeSize(fq) == size ) {
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	330c      	adds	r3, #12
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	429a      	cmp	r2, r3
 8007170:	d027      	beq.n	80071c2 <knl_appendFreeArea+0x88>
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	3308      	adds	r3, #8
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	461a      	mov	r2, r3
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	4293      	cmp	r3, r2
 800717e:	d120      	bne.n	80071c2 <knl_appendFreeArea+0x88>
		/* FreeQue Same size */
		(aq + 2)->next = (fq + 1)->next;
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	f103 0208 	add.w	r2, r3, #8
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	3310      	adds	r3, #16
 800718a:	6812      	ldr	r2, [r2, #0]
 800718c:	601a      	str	r2, [r3, #0]
		(fq + 1)->next = aq + 2;
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	3308      	adds	r3, #8
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	3210      	adds	r2, #16
 8007196:	601a      	str	r2, [r3, #0]
		(aq + 2)->prev = fq + 1;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	3310      	adds	r3, #16
 800719c:	68ba      	ldr	r2, [r7, #8]
 800719e:	3208      	adds	r2, #8
 80071a0:	605a      	str	r2, [r3, #4]
		if( (aq + 2)->next != NULL ) {
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	3310      	adds	r3, #16
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d005      	beq.n	80071b8 <knl_appendFreeArea+0x7e>
			(aq + 2)->next->prev = aq + 2;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	3310      	adds	r3, #16
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	683a      	ldr	r2, [r7, #0]
 80071b4:	3210      	adds	r2, #16
 80071b6:	605a      	str	r2, [r3, #4]
		}
		(aq + 1)->next = NULL;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	3308      	adds	r3, #8
 80071bc:	2200      	movs	r2, #0
 80071be:	601a      	str	r2, [r3, #0]
 80071c0:	e00e      	b.n	80071e0 <knl_appendFreeArea+0xa6>
	} else {
		/* FreeQue Size order */
		QueInsert(aq + 1, fq);
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	3308      	adds	r3, #8
 80071c6:	68b9      	ldr	r1, [r7, #8]
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7ff ff38 	bl	800703e <QueInsert>
		(aq + 2)->next = NULL;
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	3310      	adds	r3, #16
 80071d2:	2200      	movs	r2, #0
 80071d4:	601a      	str	r2, [r3, #0]
		(aq + 2)->prev = (QUEUE*)size;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	3310      	adds	r3, #16
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	605a      	str	r2, [r3, #4]
	}
}
 80071de:	bf00      	nop
 80071e0:	bf00      	nop
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <knl_removeFreeQue>:

/*
 * Delete from FreeQue
 */
EXPORT void knl_removeFreeQue( QUEUE *fq )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
	if ( fq->next == NULL ) {	/* FreeQue Same size */
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d115      	bne.n	8007224 <knl_removeFreeQue+0x3c>
		(fq + 1)->prev->next = (fq + 1)->next;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f103 0208 	add.w	r2, r3, #8
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	3308      	adds	r3, #8
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	6812      	ldr	r2, [r2, #0]
 8007206:	601a      	str	r2, [r3, #0]
		if ( (fq + 1)->next != NULL ) {
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	3308      	adds	r3, #8
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d020      	beq.n	8007254 <knl_removeFreeQue+0x6c>
			(fq + 1)->next->prev = (fq + 1)->prev;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f103 0208 	add.w	r2, r3, #8
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	3308      	adds	r3, #8
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	6852      	ldr	r2, [r2, #4]
 8007220:	605a      	str	r2, [r3, #4]
			QueInsert((fq + 1)->next - 1, fq);
			(fq + 1)->next->prev = (fq + 1)->prev;
		}
		QueRemove(fq);
	}
}
 8007222:	e017      	b.n	8007254 <knl_removeFreeQue+0x6c>
		if ( (fq + 1)->next != NULL ) {		/* having FreeQue Same size */
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	3308      	adds	r3, #8
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00f      	beq.n	800724e <knl_removeFreeQue+0x66>
			QueInsert((fq + 1)->next - 1, fq);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	3308      	adds	r3, #8
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	3b08      	subs	r3, #8
 8007236:	6879      	ldr	r1, [r7, #4]
 8007238:	4618      	mov	r0, r3
 800723a:	f7ff ff00 	bl	800703e <QueInsert>
			(fq + 1)->next->prev = (fq + 1)->prev;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f103 0208 	add.w	r2, r3, #8
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	3308      	adds	r3, #8
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	6852      	ldr	r2, [r2, #4]
 800724c:	605a      	str	r2, [r3, #4]
		QueRemove(fq);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f7ff ff0d 	bl	800706e <QueRemove>
}
 8007254:	bf00      	nop
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <knl_insertAreaQue>:
/*
 * Register area
 *	Insert 'ent' just after 'que.'
 */
EXPORT void knl_insertAreaQue( QUEUE *que, QUEUE *ent )
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
	ent->prev = que;
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	605a      	str	r2, [r3, #4]
	ent->next = que->next;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	601a      	str	r2, [r3, #0]
	Assign(que->next->prev, ent);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f003 0201 	and.w	r2, r3, #1
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	431a      	orrs	r2, r3
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	605a      	str	r2, [r3, #4]
	que->next = ent;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	601a      	str	r2, [r3, #0]
}
 800728e:	bf00      	nop
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	bc80      	pop	{r7}
 8007296:	4770      	bx	lr

08007298 <knl_removeAreaQue>:

/*
 * Delete area
 */
EXPORT void knl_removeAreaQue( QUEUE *aq )
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
	Mask(aq->prev)->next = aq->next;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	f023 0301 	bic.w	r3, r3, #1
 80072a8:	461a      	mov	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	6013      	str	r3, [r2, #0]
	Assign(aq->next->prev, Mask(aq->prev));
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	f003 0201 	and.w	r2, r3, #1
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	f023 0301 	bic.w	r3, r3, #1
 80072c2:	431a      	orrs	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	605a      	str	r2, [r3, #4]
}
 80072ca:	bf00      	nop
 80072cc:	370c      	adds	r7, #12
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bc80      	pop	{r7}
 80072d2:	4770      	bx	lr

080072d4 <knl_Imalloc>:

/*
 * Memory allocate
 */
EXPORT void* knl_Imalloc( SZ size )
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b086      	sub	sp, #24
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
	QUEUE	*q, *aq, *aq2;
	UINT	imask;

	/* If it is smaller than the minimum fragment size,
	   allocate the minimum size to it. */
	if( size <= 0 ) {
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	dc01      	bgt.n	80072e6 <knl_Imalloc+0x12>
		return (void *)NULL;
 80072e2:	2300      	movs	r3, #0
 80072e4:	e045      	b.n	8007372 <knl_Imalloc+0x9e>
	} else 	if ( size < MIN_FRAGMENT ) {
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2b0f      	cmp	r3, #15
 80072ea:	d802      	bhi.n	80072f2 <knl_Imalloc+0x1e>
		size = MIN_FRAGMENT;
 80072ec:	2310      	movs	r3, #16
 80072ee:	607b      	str	r3, [r7, #4]
 80072f0:	e004      	b.n	80072fc <knl_Imalloc+0x28>
	} else {
		size = ROUND(size);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	3307      	adds	r3, #7
 80072f6:	f023 0307 	bic.w	r3, r3, #7
 80072fa:	607b      	str	r3, [r7, #4]
	}

	DI(imask);  /* Exclusive control by interrupt disable */
 80072fc:	f006 fa07 	bl	800d70e <disint>
 8007300:	6138      	str	r0, [r7, #16]

	/* Search FreeQue */
	q = knl_searchFreeArea(knl_imacb, size);
 8007302:	4b1e      	ldr	r3, [pc, #120]	@ (800737c <knl_Imalloc+0xa8>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	6879      	ldr	r1, [r7, #4]
 8007308:	4618      	mov	r0, r3
 800730a:	f7ff fec8 	bl	800709e <knl_searchFreeArea>
 800730e:	6178      	str	r0, [r7, #20]
	if ( q == &(knl_imacb->freeque) ) {
 8007310:	4b1a      	ldr	r3, [pc, #104]	@ (800737c <knl_Imalloc+0xa8>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	330c      	adds	r3, #12
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	429a      	cmp	r2, r3
 800731a:	d102      	bne.n	8007322 <knl_Imalloc+0x4e>
		q = NULL; /* Insufficient memory */
 800731c:	2300      	movs	r3, #0
 800731e:	617b      	str	r3, [r7, #20]
		goto err_ret;
 8007320:	e023      	b.n	800736a <knl_Imalloc+0x96>
	}

	/* There is free area: Split from FreeQue once */
	knl_removeFreeQue(q);
 8007322:	6978      	ldr	r0, [r7, #20]
 8007324:	f7ff ff60 	bl	80071e8 <knl_removeFreeQue>

	aq = q - 1;
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	3b08      	subs	r3, #8
 800732c:	60fb      	str	r3, [r7, #12]

	/* If there are fragments smaller than the minimum fragment size,
	   allocate them also */
	if ( FreeSize(q) - size >= MIN_FRAGMENT + sizeof(QUEUE) ) {
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	3308      	adds	r3, #8
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	461a      	mov	r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	1ad3      	subs	r3, r2, r3
 800733a:	2b17      	cmp	r3, #23
 800733c:	d90e      	bls.n	800735c <knl_Imalloc+0x88>

		/* Divide area into 2 */
		aq2 = (QUEUE*)((VB*)(aq + 1) + size);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	3308      	adds	r3, #8
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	4413      	add	r3, r2
 8007346:	60bb      	str	r3, [r7, #8]
		knl_insertAreaQue(aq, aq2);
 8007348:	68b9      	ldr	r1, [r7, #8]
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f7ff ff86 	bl	800725c <knl_insertAreaQue>

		/* Register remaining area to FreeQue */
		knl_appendFreeArea(knl_imacb, aq2);
 8007350:	4b0a      	ldr	r3, [pc, #40]	@ (800737c <knl_Imalloc+0xa8>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68b9      	ldr	r1, [r7, #8]
 8007356:	4618      	mov	r0, r3
 8007358:	f7ff feef 	bl	800713a <knl_appendFreeArea>
	}
	setAreaFlag(aq, AREA_USE);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	f043 0301 	orr.w	r3, r3, #1
 8007364:	461a      	mov	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	605a      	str	r2, [r3, #4]

err_ret:
	EI(imask);
 800736a:	6938      	ldr	r0, [r7, #16]
 800736c:	f006 f9b7 	bl	800d6de <set_basepri>

	return (void *)q;
 8007370:	697b      	ldr	r3, [r7, #20]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3718      	adds	r7, #24
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	24001380 	.word	0x24001380

08007380 <knl_Icalloc>:

/*
 * Memory allocate  and clear
 */
EXPORT void* knl_Icalloc( SZ nmemb, SZ size )
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
	SZ	sz = nmemb * size;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	683a      	ldr	r2, [r7, #0]
 800738e:	fb02 f303 	mul.w	r3, r2, r3
 8007392:	60fb      	str	r3, [r7, #12]
	void	*mem;

	mem = knl_Imalloc(sz);
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f7ff ff9d 	bl	80072d4 <knl_Imalloc>
 800739a:	60b8      	str	r0, [r7, #8]
	if ( mem == NULL ) {
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d101      	bne.n	80073a6 <knl_Icalloc+0x26>
		return NULL;
 80073a2:	2300      	movs	r3, #0
 80073a4:	e005      	b.n	80073b2 <knl_Icalloc+0x32>
	}

	knl_memset(mem, 0, sz);
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	2100      	movs	r1, #0
 80073aa:	68b8      	ldr	r0, [r7, #8]
 80073ac:	f005 fe98 	bl	800d0e0 <knl_memset>

	return mem;
 80073b0:	68bb      	ldr	r3, [r7, #8]
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <knl_Irealloc>:

/*
 * Memory allocation size change
 */
EXPORT void* knl_Irealloc( void *ptr, SZ size )
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b086      	sub	sp, #24
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	6039      	str	r1, [r7, #0]
	void	*newptr;
	QUEUE	*aq;
	SZ	oldsz;

	if(size != 0) {
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d008      	beq.n	80073dc <knl_Irealloc+0x22>
		newptr = knl_Imalloc(size);
 80073ca:	6838      	ldr	r0, [r7, #0]
 80073cc:	f7ff ff82 	bl	80072d4 <knl_Imalloc>
 80073d0:	6178      	str	r0, [r7, #20]
		if(newptr == NULL) {
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d103      	bne.n	80073e0 <knl_Irealloc+0x26>
			return NULL;
 80073d8:	2300      	movs	r3, #0
 80073da:	e01e      	b.n	800741a <knl_Irealloc+0x60>
		}
	} else {
		newptr = NULL;
 80073dc:	2300      	movs	r3, #0
 80073de:	617b      	str	r3, [r7, #20]
	}

	if(ptr != NULL) {
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d018      	beq.n	8007418 <knl_Irealloc+0x5e>
		if(newptr != NULL) {
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d012      	beq.n	8007412 <knl_Irealloc+0x58>
			aq = (QUEUE*)ptr - 1;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	3b08      	subs	r3, #8
 80073f0:	613b      	str	r3, [r7, #16]
			oldsz = (SZ)AreaSize(aq);
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	3308      	adds	r3, #8
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	60fb      	str	r3, [r7, #12]
			knl_memcpy(newptr, ptr, (size > oldsz)?oldsz:size);
 80073fe:	683a      	ldr	r2, [r7, #0]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	4293      	cmp	r3, r2
 8007404:	bfa8      	it	ge
 8007406:	4613      	movge	r3, r2
 8007408:	461a      	mov	r2, r3
 800740a:	6879      	ldr	r1, [r7, #4]
 800740c:	6978      	ldr	r0, [r7, #20]
 800740e:	f005 feb3 	bl	800d178 <knl_memcpy>
		}
		knl_Ifree(ptr);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 f806 	bl	8007424 <knl_Ifree>
	}

	return newptr;
 8007418:	697b      	ldr	r3, [r7, #20]
}
 800741a:	4618      	mov	r0, r3
 800741c:	3718      	adds	r7, #24
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
	...

08007424 <knl_Ifree>:

/*
 * Free memory
 */
EXPORT void  knl_Ifree( void *ptr )
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b084      	sub	sp, #16
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
	QUEUE	*aq;
	UINT	imask;

	DI(imask);  /* Exclusive control by interrupt disable */
 800742c:	f006 f96f 	bl	800d70e <disint>
 8007430:	60b8      	str	r0, [r7, #8]

	aq = (QUEUE*)ptr - 1;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	3b08      	subs	r3, #8
 8007436:	60fb      	str	r3, [r7, #12]
	clrAreaFlag(aq, AREA_USE);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	f023 0301 	bic.w	r3, r3, #1
 8007440:	461a      	mov	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	605a      	str	r2, [r3, #4]

	if ( !chkAreaFlag(aq->next, AREA_USE) ) {
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10a      	bne.n	800746a <knl_Ifree+0x46>
		/* Merge with free area in after location */
		knl_removeFreeQue(aq->next + 1);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	3308      	adds	r3, #8
 800745a:	4618      	mov	r0, r3
 800745c:	f7ff fec4 	bl	80071e8 <knl_removeFreeQue>
		knl_removeAreaQue(aq->next);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4618      	mov	r0, r3
 8007466:	f7ff ff17 	bl	8007298 <knl_removeAreaQue>
	}

	if ( !chkAreaFlag(aq->prev, AREA_USE) ) {
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	2b00      	cmp	r3, #0
 8007476:	d10c      	bne.n	8007492 <knl_Ifree+0x6e>
		/* Merge with free area in front location */
		aq = aq->prev;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	60fb      	str	r3, [r7, #12]
		knl_removeFreeQue(aq + 1);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	3308      	adds	r3, #8
 8007482:	4618      	mov	r0, r3
 8007484:	f7ff feb0 	bl	80071e8 <knl_removeFreeQue>
		knl_removeAreaQue(aq->next);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4618      	mov	r0, r3
 800748e:	f7ff ff03 	bl	8007298 <knl_removeAreaQue>
	}

	knl_appendFreeArea(knl_imacb, aq);
 8007492:	4b06      	ldr	r3, [pc, #24]	@ (80074ac <knl_Ifree+0x88>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68f9      	ldr	r1, [r7, #12]
 8007498:	4618      	mov	r0, r3
 800749a:	f7ff fe4e 	bl	800713a <knl_appendFreeArea>

	EI(imask);
 800749e:	68b8      	ldr	r0, [r7, #8]
 80074a0:	f006 f91d 	bl	800d6de <set_basepri>
}
 80074a4:	bf00      	nop
 80074a6:	3710      	adds	r7, #16
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	24001380 	.word	0x24001380

080074b0 <initIMACB>:

/*
 * IMACB Initialization 
 */
LOCAL void initIMACB( void )
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	af00      	add	r7, sp, #0
	QueInit(&(knl_imacb->areaque));
 80074b4:	4b06      	ldr	r3, [pc, #24]	@ (80074d0 <initIMACB+0x20>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	3304      	adds	r3, #4
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7ff fdb0 	bl	8007020 <QueInit>
	QueInit(&(knl_imacb->freeque));
 80074c0:	4b03      	ldr	r3, [pc, #12]	@ (80074d0 <initIMACB+0x20>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	330c      	adds	r3, #12
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7ff fdaa 	bl	8007020 <QueInit>
}
 80074cc:	bf00      	nop
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	24001380 	.word	0x24001380

080074d4 <knl_init_Imalloc>:

/*
 * Imalloc initial setting 
 */
EXPORT ER knl_init_Imalloc( void )
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
	QUEUE	*top, *end;

	/* Align top with 4 byte unit alignment for IMACB */
	knl_lowmem_top = (void *)(((UW)knl_lowmem_top + 3) & ~0x00000003UL);
 80074da:	4b2e      	ldr	r3, [pc, #184]	@ (8007594 <knl_init_Imalloc+0xc0>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	3303      	adds	r3, #3
 80074e0:	f023 0303 	bic.w	r3, r3, #3
 80074e4:	461a      	mov	r2, r3
 80074e6:	4b2b      	ldr	r3, [pc, #172]	@ (8007594 <knl_init_Imalloc+0xc0>)
 80074e8:	601a      	str	r2, [r3, #0]
	knl_imacb = (IMACB*)knl_lowmem_top;
 80074ea:	4b2a      	ldr	r3, [pc, #168]	@ (8007594 <knl_init_Imalloc+0xc0>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a2a      	ldr	r2, [pc, #168]	@ (8007598 <knl_init_Imalloc+0xc4>)
 80074f0:	6013      	str	r3, [r2, #0]
	knl_lowmem_top = (void *)((UW)knl_lowmem_top + sizeof(IMACB));
 80074f2:	4b28      	ldr	r3, [pc, #160]	@ (8007594 <knl_init_Imalloc+0xc0>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	3314      	adds	r3, #20
 80074f8:	461a      	mov	r2, r3
 80074fa:	4b26      	ldr	r3, [pc, #152]	@ (8007594 <knl_init_Imalloc+0xc0>)
 80074fc:	601a      	str	r2, [r3, #0]

	/* Align top with 8 byte unit alignment */
	knl_lowmem_top = (void *)(((UW)knl_lowmem_top + 7) & ~0x00000007UL);
 80074fe:	4b25      	ldr	r3, [pc, #148]	@ (8007594 <knl_init_Imalloc+0xc0>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	3307      	adds	r3, #7
 8007504:	f023 0307 	bic.w	r3, r3, #7
 8007508:	461a      	mov	r2, r3
 800750a:	4b22      	ldr	r3, [pc, #136]	@ (8007594 <knl_init_Imalloc+0xc0>)
 800750c:	601a      	str	r2, [r3, #0]
	top = (QUEUE*)knl_lowmem_top;
 800750e:	4b21      	ldr	r3, [pc, #132]	@ (8007594 <knl_init_Imalloc+0xc0>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	607b      	str	r3, [r7, #4]
	knl_imacb->memsz = (W)((UW)knl_lowmem_limit - (UW)knl_lowmem_top - sizeof(QUEUE)*2);
 8007514:	4b21      	ldr	r3, [pc, #132]	@ (800759c <knl_init_Imalloc+0xc8>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	461a      	mov	r2, r3
 800751a:	4b1e      	ldr	r3, [pc, #120]	@ (8007594 <knl_init_Imalloc+0xc0>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	1ad3      	subs	r3, r2, r3
 8007520:	f1a3 0210 	sub.w	r2, r3, #16
 8007524:	4b1c      	ldr	r3, [pc, #112]	@ (8007598 <knl_init_Imalloc+0xc4>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	601a      	str	r2, [r3, #0]

	knl_lowmem_top = knl_lowmem_limit;  /* Update memory free space */
 800752a:	4b1c      	ldr	r3, [pc, #112]	@ (800759c <knl_init_Imalloc+0xc8>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	4a19      	ldr	r2, [pc, #100]	@ (8007594 <knl_init_Imalloc+0xc0>)
 8007530:	6013      	str	r3, [r2, #0]

	initIMACB();
 8007532:	f7ff ffbd 	bl	80074b0 <initIMACB>

	/* Register on AreaQue */
	end = (QUEUE*)((VB*)top + knl_imacb->memsz) + 1;
 8007536:	4b18      	ldr	r3, [pc, #96]	@ (8007598 <knl_init_Imalloc+0xc4>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	3308      	adds	r3, #8
 800753e:	687a      	ldr	r2, [r7, #4]
 8007540:	4413      	add	r3, r2
 8007542:	603b      	str	r3, [r7, #0]
	knl_insertAreaQue(&knl_imacb->areaque, end);
 8007544:	4b14      	ldr	r3, [pc, #80]	@ (8007598 <knl_init_Imalloc+0xc4>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	3304      	adds	r3, #4
 800754a:	6839      	ldr	r1, [r7, #0]
 800754c:	4618      	mov	r0, r3
 800754e:	f7ff fe85 	bl	800725c <knl_insertAreaQue>
	knl_insertAreaQue(&knl_imacb->areaque, top);
 8007552:	4b11      	ldr	r3, [pc, #68]	@ (8007598 <knl_init_Imalloc+0xc4>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	3304      	adds	r3, #4
 8007558:	6879      	ldr	r1, [r7, #4]
 800755a:	4618      	mov	r0, r3
 800755c:	f7ff fe7e 	bl	800725c <knl_insertAreaQue>
	setAreaFlag(end, AREA_USE);
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	685b      	ldr	r3, [r3, #4]
 8007564:	f043 0301 	orr.w	r3, r3, #1
 8007568:	461a      	mov	r2, r3
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	605a      	str	r2, [r3, #4]
	setAreaFlag(&knl_imacb->areaque, AREA_USE);
 800756e:	4b0a      	ldr	r3, [pc, #40]	@ (8007598 <knl_init_Imalloc+0xc4>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f043 0201 	orr.w	r2, r3, #1
 8007578:	4b07      	ldr	r3, [pc, #28]	@ (8007598 <knl_init_Imalloc+0xc4>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	609a      	str	r2, [r3, #8]

	knl_appendFreeArea(knl_imacb, top);
 800757e:	4b06      	ldr	r3, [pc, #24]	@ (8007598 <knl_init_Imalloc+0xc4>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	6879      	ldr	r1, [r7, #4]
 8007584:	4618      	mov	r0, r3
 8007586:	f7ff fdd8 	bl	800713a <knl_appendFreeArea>

	return E_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	240029fc 	.word	0x240029fc
 8007598:	24001380 	.word	0x24001380
 800759c:	24002a00 	.word	0x24002a00

080075a0 <QueInit>:
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	687a      	ldr	r2, [r7, #4]
 80075ac:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	687a      	ldr	r2, [r7, #4]
 80075b2:	605a      	str	r2, [r3, #4]
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bc80      	pop	{r7}
 80075bc:	4770      	bx	lr

080075be <isQueEmpty>:
{
 80075be:	b480      	push	{r7}
 80075c0:	b083      	sub	sp, #12
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
	return ( que->next == que )? TRUE: FALSE;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	bf0c      	ite	eq
 80075d0:	2301      	moveq	r3, #1
 80075d2:	2300      	movne	r3, #0
 80075d4:	b2db      	uxtb	r3, r3
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	370c      	adds	r7, #12
 80075da:	46bd      	mov	sp, r7
 80075dc:	bc80      	pop	{r7}
 80075de:	4770      	bx	lr

080075e0 <QueInsert>:
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	605a      	str	r2, [r3, #4]
	entry->next = que;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	683a      	ldr	r2, [r7, #0]
 80075f6:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	605a      	str	r2, [r3, #4]
}
 8007606:	bf00      	nop
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	bc80      	pop	{r7}
 800760e:	4770      	bx	lr

08007610 <QueRemoveNext>:
{
 8007610:	b480      	push	{r7}
 8007612:	b085      	sub	sp, #20
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
	if ( que->next == que ) {
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	429a      	cmp	r2, r3
 8007620:	d101      	bne.n	8007626 <QueRemoveNext+0x16>
		return NULL;
 8007622:	2300      	movs	r3, #0
 8007624:	e00b      	b.n	800763e <QueRemoveNext+0x2e>
	entry = que->next;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	60fb      	str	r3, [r7, #12]
	que->next = (struct queue*)entry->next;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	601a      	str	r2, [r3, #0]
	entry->next->prev = que;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	605a      	str	r2, [r3, #4]
	return entry;
 800763c:	68fb      	ldr	r3, [r7, #12]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	bc80      	pop	{r7}
 8007646:	4770      	bx	lr

08007648 <knl_isTaskIndependent>:
{
 8007648:	b480      	push	{r7}
 800764a:	af00      	add	r7, sp, #0
	return ( knl_taskindp > 0 )? TRUE: FALSE;
 800764c:	4b05      	ldr	r3, [pc, #20]	@ (8007664 <knl_isTaskIndependent+0x1c>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	bfcc      	ite	gt
 8007654:	2301      	movgt	r3, #1
 8007656:	2300      	movle	r3, #0
 8007658:	b2db      	uxtb	r3, r3
}
 800765a:	4618      	mov	r0, r3
 800765c:	46bd      	mov	sp, r7
 800765e:	bc80      	pop	{r7}
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	240029f8 	.word	0x240029f8

08007668 <knl_InitOBJLOCK>:
typedef struct objlock {
	QUEUE		wtskq;		/* Wait task queue */
} OBJLOCK;

Inline void knl_InitOBJLOCK( OBJLOCK *loc )
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
	loc->wtskq.next = NULL;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	601a      	str	r2, [r3, #0]
}
 8007676:	bf00      	nop
 8007678:	370c      	adds	r7, #12
 800767a:	46bd      	mov	sp, r7
 800767c:	bc80      	pop	{r7}
 800767e:	4770      	bx	lr

08007680 <knl_mempool_end>:

/*
 * Return end address in memory pool area
 */
Inline void *knl_mempool_end( MPFCB *mpfcb )
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
	return (VB*)mpfcb->mempool + mpfcb->mpfsz;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	69d2      	ldr	r2, [r2, #28]
 8007690:	4413      	add	r3, r2
}
 8007692:	4618      	mov	r0, r3
 8007694:	370c      	adds	r7, #12
 8007696:	46bd      	mov	sp, r7
 8007698:	bc80      	pop	{r7}
 800769a:	4770      	bx	lr

0800769c <knl_fix_memorypool_initialize>:

/*
 * Initialization of fixed size memory pool control block
 */
EXPORT ER knl_fix_memorypool_initialize( void )
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	af00      	add	r7, sp, #0
	if ( NUM_MPFID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_mpfcb);
 80076a2:	4810      	ldr	r0, [pc, #64]	@ (80076e4 <knl_fix_memorypool_initialize+0x48>)
 80076a4:	f7ff ff7c 	bl	80075a0 <QueInit>
	end = knl_mpfcb_table + NUM_MPFID;
 80076a8:	4b0f      	ldr	r3, [pc, #60]	@ (80076e8 <knl_fix_memorypool_initialize+0x4c>)
 80076aa:	603b      	str	r3, [r7, #0]
	for ( mpfcb = knl_mpfcb_table; mpfcb < end; mpfcb++ ) {
 80076ac:	4b0f      	ldr	r3, [pc, #60]	@ (80076ec <knl_fix_memorypool_initialize+0x50>)
 80076ae:	607b      	str	r3, [r7, #4]
 80076b0:	e00f      	b.n	80076d2 <knl_fix_memorypool_initialize+0x36>
		mpfcb->mpfid = 0;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	609a      	str	r2, [r3, #8]
		knl_InitOBJLOCK(&mpfcb->lock);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	3330      	adds	r3, #48	@ 0x30
 80076bc:	4618      	mov	r0, r3
 80076be:	f7ff ffd3 	bl	8007668 <knl_InitOBJLOCK>
		QueInsert(&mpfcb->wait_queue, &knl_free_mpfcb);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4907      	ldr	r1, [pc, #28]	@ (80076e4 <knl_fix_memorypool_initialize+0x48>)
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7ff ff8a 	bl	80075e0 <QueInsert>
	for ( mpfcb = knl_mpfcb_table; mpfcb < end; mpfcb++ ) {
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	3338      	adds	r3, #56	@ 0x38
 80076d0:	607b      	str	r3, [r7, #4]
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d3eb      	bcc.n	80076b2 <knl_fix_memorypool_initialize+0x16>
	}

	return E_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3708      	adds	r7, #8
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	24001464 	.word	0x24001464
 80076e8:	24001464 	.word	0x24001464
 80076ec:	24001384 	.word	0x24001384

080076f0 <tk_cre_mpf>:

/*
 * Create fixed size memory pool
 */
SYSCALL ID tk_cre_mpf( CONST T_CMPF *pk_cmpf )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b088      	sub	sp, #32
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
#if CHK_RSATR
	const ATR VALID_MPFATR = {
 80076f8:	f240 3321 	movw	r3, #801	@ 0x321
 80076fc:	61bb      	str	r3, [r7, #24]
	MPFCB	*mpfcb;
	ID	mpfid;
	W	blfsz, mpfsz;
	void	*mempool;

	CHECK_RSATR(pk_cmpf->mpfatr, VALID_MPFATR);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	43db      	mvns	r3, r3
 8007706:	4013      	ands	r3, r2
 8007708:	2b00      	cmp	r3, #0
 800770a:	d002      	beq.n	8007712 <tk_cre_mpf+0x22>
 800770c:	f06f 030a 	mvn.w	r3, #10
 8007710:	e09d      	b.n	800784e <tk_cre_mpf+0x15e>
	CHECK_PAR(pk_cmpf->mpfcnt > 0);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	2b00      	cmp	r3, #0
 8007718:	dc02      	bgt.n	8007720 <tk_cre_mpf+0x30>
 800771a:	f06f 0310 	mvn.w	r3, #16
 800771e:	e096      	b.n	800784e <tk_cre_mpf+0x15e>
	CHECK_PAR(pk_cmpf->blfsz > 0);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	2b00      	cmp	r3, #0
 8007726:	dc02      	bgt.n	800772e <tk_cre_mpf+0x3e>
 8007728:	f06f 0310 	mvn.w	r3, #16
 800772c:	e08f      	b.n	800784e <tk_cre_mpf+0x15e>
#if !USE_IMALLOC
	/* TA_USERBUF must be specified if configured in no Imalloc */
	CHECK_PAR((pk_cmpf->mpfatr & TA_USERBUF) != 0);
#endif
	CHECK_DISPATCH();
 800772e:	4b4a      	ldr	r3, [pc, #296]	@ (8007858 <tk_cre_mpf+0x168>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d10d      	bne.n	8007752 <tk_cre_mpf+0x62>
 8007736:	f7ff ff87 	bl	8007648 <knl_isTaskIndependent>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d108      	bne.n	8007752 <tk_cre_mpf+0x62>
 8007740:	4b46      	ldr	r3, [pc, #280]	@ (800785c <tk_cre_mpf+0x16c>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d004      	beq.n	8007752 <tk_cre_mpf+0x62>
 8007748:	f005 ffd5 	bl	800d6f6 <get_basepri>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d002      	beq.n	8007758 <tk_cre_mpf+0x68>
 8007752:	f06f 0318 	mvn.w	r3, #24
 8007756:	e07a      	b.n	800784e <tk_cre_mpf+0x15e>

	blfsz = (W)MINSZ(pk_cmpf->blfsz);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	3303      	adds	r3, #3
 800775e:	f023 0303 	bic.w	r3, r3, #3
 8007762:	617b      	str	r3, [r7, #20]
	mpfsz = blfsz * pk_cmpf->mpfcnt;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	689a      	ldr	r2, [r3, #8]
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	fb02 f303 	mul.w	r3, r2, r3
 800776e:	613b      	str	r3, [r7, #16]

#if USE_IMALLOC
	if ( (pk_cmpf->mpfatr & TA_USERBUF) != 0 ) {
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	f003 0320 	and.w	r3, r3, #32
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00b      	beq.n	8007794 <tk_cre_mpf+0xa4>
		/* Size of user buffer must be multiples of sizeof(FREEL) */
		if ( blfsz != pk_cmpf->blfsz ) {
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	429a      	cmp	r2, r3
 8007784:	d002      	beq.n	800778c <tk_cre_mpf+0x9c>
			return E_PAR;
 8007786:	f06f 0310 	mvn.w	r3, #16
 800778a:	e060      	b.n	800784e <tk_cre_mpf+0x15e>
		}
		/* Use user buffer */
		mempool = pk_cmpf->bufptr;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	61fb      	str	r3, [r7, #28]
 8007792:	e009      	b.n	80077a8 <tk_cre_mpf+0xb8>
	} else {
		/* Allocate memory for memory pool */
		mempool = knl_Imalloc((UW)mpfsz);
 8007794:	6938      	ldr	r0, [r7, #16]
 8007796:	f7ff fd9d 	bl	80072d4 <knl_Imalloc>
 800779a:	61f8      	str	r0, [r7, #28]
		if ( mempool == NULL ) {
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d102      	bne.n	80077a8 <tk_cre_mpf+0xb8>
			return E_NOMEM;
 80077a2:	f06f 0320 	mvn.w	r3, #32
 80077a6:	e052      	b.n	800784e <tk_cre_mpf+0x15e>
	/* Use user buffer */
	mempool = pk_cmpf->bufptr;
#endif

	/* Get control block from FreeQue */
	DISABLE_INTERRUPT;
 80077a8:	f005 ffb1 	bl	800d70e <disint>
	mpfcb = (MPFCB*)QueRemoveNext(&knl_free_mpfcb);
 80077ac:	482c      	ldr	r0, [pc, #176]	@ (8007860 <tk_cre_mpf+0x170>)
 80077ae:	f7ff ff2f 	bl	8007610 <QueRemoveNext>
 80077b2:	60f8      	str	r0, [r7, #12]
	ENABLE_INTERRUPT;
 80077b4:	2000      	movs	r0, #0
 80077b6:	f005 ff92 	bl	800d6de <set_basepri>

	if ( mpfcb == NULL ) {
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d10b      	bne.n	80077d8 <tk_cre_mpf+0xe8>
#if USE_IMALLOC
		if ( (pk_cmpf->mpfatr & TA_USERBUF) == 0 ) {
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	f003 0320 	and.w	r3, r3, #32
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d102      	bne.n	80077d2 <tk_cre_mpf+0xe2>
			knl_Ifree(mempool);
 80077cc:	69f8      	ldr	r0, [r7, #28]
 80077ce:	f7ff fe29 	bl	8007424 <knl_Ifree>
		}
#endif
		return E_LIMIT;
 80077d2:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 80077d6:	e03a      	b.n	800784e <tk_cre_mpf+0x15e>
	}

	knl_LockOBJ(&mpfcb->lock);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	3330      	adds	r3, #48	@ 0x30
 80077dc:	4618      	mov	r0, r3
 80077de:	f7ff f88b 	bl	80068f8 <knl_LockOBJ>
	mpfid = ID_MPF(mpfcb - knl_mpfcb_table);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	4a1f      	ldr	r2, [pc, #124]	@ (8007864 <tk_cre_mpf+0x174>)
 80077e6:	1a9b      	subs	r3, r3, r2
 80077e8:	10db      	asrs	r3, r3, #3
 80077ea:	4a1f      	ldr	r2, [pc, #124]	@ (8007868 <tk_cre_mpf+0x178>)
 80077ec:	fb02 f303 	mul.w	r3, r2, r3
 80077f0:	3301      	adds	r3, #1
 80077f2:	60bb      	str	r3, [r7, #8]

	/* Initialize control block */
	QueInit(&mpfcb->wait_queue);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7ff fed2 	bl	80075a0 <QueInit>
	mpfcb->exinf    = pk_cmpf->exinf;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681a      	ldr	r2, [r3, #0]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	60da      	str	r2, [r3, #12]
	mpfcb->mpfatr   = pk_cmpf->mpfatr;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	685a      	ldr	r2, [r3, #4]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	611a      	str	r2, [r3, #16]
	mpfcb->mpfcnt   = mpfcb->frbcnt = pk_cmpf->mpfcnt;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	689a      	ldr	r2, [r3, #8]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	621a      	str	r2, [r3, #32]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6a1a      	ldr	r2, [r3, #32]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	615a      	str	r2, [r3, #20]
	mpfcb->blfsz    = blfsz;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	619a      	str	r2, [r3, #24]
	mpfcb->mpfsz    = mpfsz;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	693a      	ldr	r2, [r7, #16]
 8007826:	61da      	str	r2, [r3, #28]
	mpfcb->unused   = mpfcb->mempool = mempool;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	69fa      	ldr	r2, [r7, #28]
 800782c:	625a      	str	r2, [r3, #36]	@ 0x24
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	629a      	str	r2, [r3, #40]	@ 0x28
	mpfcb->freelist = NULL;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if ( (pk_cmpf->mpfatr & TA_DSNAME) != 0 ) {
		knl_strncpy((char*)mpfcb->name, (char*)pk_cmpf->dsname, OBJECT_NAME_LENGTH);
	}
#endif

	mpfcb->mpfid    = mpfid;  /* Set ID after completion */
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	609a      	str	r2, [r3, #8]
	knl_UnlockOBJ(&mpfcb->lock);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	3330      	adds	r3, #48	@ 0x30
 8007846:	4618      	mov	r0, r3
 8007848:	f7ff f8be 	bl	80069c8 <knl_UnlockOBJ>

	return mpfid;
 800784c:	68bb      	ldr	r3, [r7, #8]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3720      	adds	r7, #32
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	2400186c 	.word	0x2400186c
 800785c:	24001870 	.word	0x24001870
 8007860:	24001464 	.word	0x24001464
 8007864:	24001384 	.word	0x24001384
 8007868:	b6db6db7 	.word	0xb6db6db7

0800786c <tk_del_mpf>:
#ifdef USE_FUNC_TK_DEL_MPF
/*
 * Delete fixed size memory pool 
 */
SYSCALL ER tk_del_mpf( ID mpfid )
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b086      	sub	sp, #24
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
	MPFCB	*mpfcb;
	void	*mempool = NULL;
 8007874:	2300      	movs	r3, #0
 8007876:	617b      	str	r3, [r7, #20]
	ATR	memattr = 0;
 8007878:	2300      	movs	r3, #0
 800787a:	613b      	str	r3, [r7, #16]
	ER	ercd = E_OK;
 800787c:	2300      	movs	r3, #0
 800787e:	60fb      	str	r3, [r7, #12]

	CHECK_MPFID(mpfid);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	dd02      	ble.n	800788c <tk_del_mpf+0x20>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2b04      	cmp	r3, #4
 800788a:	dd02      	ble.n	8007892 <tk_del_mpf+0x26>
 800788c:	f06f 0311 	mvn.w	r3, #17
 8007890:	e052      	b.n	8007938 <tk_del_mpf+0xcc>
	CHECK_DISPATCH();
 8007892:	4b2b      	ldr	r3, [pc, #172]	@ (8007940 <tk_del_mpf+0xd4>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10d      	bne.n	80078b6 <tk_del_mpf+0x4a>
 800789a:	f7ff fed5 	bl	8007648 <knl_isTaskIndependent>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d108      	bne.n	80078b6 <tk_del_mpf+0x4a>
 80078a4:	4b27      	ldr	r3, [pc, #156]	@ (8007944 <tk_del_mpf+0xd8>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d004      	beq.n	80078b6 <tk_del_mpf+0x4a>
 80078ac:	f005 ff23 	bl	800d6f6 <get_basepri>
 80078b0:	4603      	mov	r3, r0
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d002      	beq.n	80078bc <tk_del_mpf+0x50>
 80078b6:	f06f 0318 	mvn.w	r3, #24
 80078ba:	e03d      	b.n	8007938 <tk_del_mpf+0xcc>

	mpfcb = get_mpfcb(mpfid);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	1e5a      	subs	r2, r3, #1
 80078c0:	4613      	mov	r3, r2
 80078c2:	00db      	lsls	r3, r3, #3
 80078c4:	1a9b      	subs	r3, r3, r2
 80078c6:	00db      	lsls	r3, r3, #3
 80078c8:	4a1f      	ldr	r2, [pc, #124]	@ (8007948 <tk_del_mpf+0xdc>)
 80078ca:	4413      	add	r3, r2
 80078cc:	60bb      	str	r3, [r7, #8]

	knl_LockOBJ(&mpfcb->lock);
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	3330      	adds	r3, #48	@ 0x30
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7ff f810 	bl	80068f8 <knl_LockOBJ>
	if ( mpfcb->mpfid == 0 ) {
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d103      	bne.n	80078e8 <tk_del_mpf+0x7c>
		ercd = E_NOEXS;
 80078e0:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 80078e4:	60fb      	str	r3, [r7, #12]
 80078e6:	e016      	b.n	8007916 <tk_del_mpf+0xaa>
	} else {
		DISABLE_INTERRUPT;
 80078e8:	f005 ff11 	bl	800d70e <disint>
		mempool = mpfcb->mempool;
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f0:	617b      	str	r3, [r7, #20]
		memattr = mpfcb->mpfatr;
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	613b      	str	r3, [r7, #16]

		/* Release wait state of task (E_DLT) */
		knl_wait_delete(&mpfcb->wait_queue);
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	4618      	mov	r0, r3
 80078fc:	f005 fb52 	bl	800cfa4 <knl_wait_delete>

		/* Return to FreeQue */
		QueInsert(&mpfcb->wait_queue, &knl_free_mpfcb);
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	4912      	ldr	r1, [pc, #72]	@ (800794c <tk_del_mpf+0xe0>)
 8007904:	4618      	mov	r0, r3
 8007906:	f7ff fe6b 	bl	80075e0 <QueInsert>
		mpfcb->mpfid = 0;
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	2200      	movs	r2, #0
 800790e:	609a      	str	r2, [r3, #8]
		ENABLE_INTERRUPT;
 8007910:	2000      	movs	r0, #0
 8007912:	f005 fee4 	bl	800d6de <set_basepri>
	}
	knl_UnlockOBJ(&mpfcb->lock);
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	3330      	adds	r3, #48	@ 0x30
 800791a:	4618      	mov	r0, r3
 800791c:	f7ff f854 	bl	80069c8 <knl_UnlockOBJ>

#if USE_IMALLOC
	if ( (mempool != NULL) && ((memattr & TA_USERBUF) == 0) ) {
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d007      	beq.n	8007936 <tk_del_mpf+0xca>
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	f003 0320 	and.w	r3, r3, #32
 800792c:	2b00      	cmp	r3, #0
 800792e:	d102      	bne.n	8007936 <tk_del_mpf+0xca>
		knl_Ifree(mempool);
 8007930:	6978      	ldr	r0, [r7, #20]
 8007932:	f7ff fd77 	bl	8007424 <knl_Ifree>
	}
#endif

	return ercd;
 8007936:	68fb      	ldr	r3, [r7, #12]
}
 8007938:	4618      	mov	r0, r3
 800793a:	3718      	adds	r7, #24
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	2400186c 	.word	0x2400186c
 8007944:	24001870 	.word	0x24001870
 8007948:	24001384 	.word	0x24001384
 800794c:	24001464 	.word	0x24001464

08007950 <knl_mpf_chg_pri>:

/*
 * Processing if the priority of wait task changes
 */
LOCAL void knl_mpf_chg_pri( TCB *tcb, INT oldpri )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
	MPFCB	*mpfcb;

	mpfcb = get_mpfcb(tcb->wid);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800795e:	1e5a      	subs	r2, r3, #1
 8007960:	4613      	mov	r3, r2
 8007962:	00db      	lsls	r3, r3, #3
 8007964:	1a9b      	subs	r3, r3, r2
 8007966:	00db      	lsls	r3, r3, #3
 8007968:	4a05      	ldr	r2, [pc, #20]	@ (8007980 <knl_mpf_chg_pri+0x30>)
 800796a:	4413      	add	r3, r2
 800796c:	60fb      	str	r3, [r7, #12]
	knl_gcb_change_priority((GCB*)mpfcb, tcb);
 800796e:	6879      	ldr	r1, [r7, #4]
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f005 fb7b 	bl	800d06c <knl_gcb_change_priority>
}
 8007976:	bf00      	nop
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	24001384 	.word	0x24001384

08007984 <tk_get_mpf>:

/*
 * Get fixed size memory block 
 */
SYSCALL ER tk_get_mpf( ID mpfid, void **p_blf, TMO tmout )
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b088      	sub	sp, #32
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
	MPFCB	*mpfcb;
	FREEL	*free;
	ER	ercd = E_OK;
 8007990:	2300      	movs	r3, #0
 8007992:	613b      	str	r3, [r7, #16]

	CHECK_MPFID(mpfid);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2b00      	cmp	r3, #0
 8007998:	dd02      	ble.n	80079a0 <tk_get_mpf+0x1c>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2b04      	cmp	r3, #4
 800799e:	dd02      	ble.n	80079a6 <tk_get_mpf+0x22>
 80079a0:	f06f 0311 	mvn.w	r3, #17
 80079a4:	e090      	b.n	8007ac8 <tk_get_mpf+0x144>
	CHECK_TMOUT(tmout);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079ac:	da02      	bge.n	80079b4 <tk_get_mpf+0x30>
 80079ae:	f06f 0310 	mvn.w	r3, #16
 80079b2:	e089      	b.n	8007ac8 <tk_get_mpf+0x144>
	CHECK_DISPATCH();
 80079b4:	4b46      	ldr	r3, [pc, #280]	@ (8007ad0 <tk_get_mpf+0x14c>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10d      	bne.n	80079d8 <tk_get_mpf+0x54>
 80079bc:	f7ff fe44 	bl	8007648 <knl_isTaskIndependent>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d108      	bne.n	80079d8 <tk_get_mpf+0x54>
 80079c6:	4b43      	ldr	r3, [pc, #268]	@ (8007ad4 <tk_get_mpf+0x150>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d004      	beq.n	80079d8 <tk_get_mpf+0x54>
 80079ce:	f005 fe92 	bl	800d6f6 <get_basepri>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d002      	beq.n	80079de <tk_get_mpf+0x5a>
 80079d8:	f06f 0318 	mvn.w	r3, #24
 80079dc:	e074      	b.n	8007ac8 <tk_get_mpf+0x144>

	mpfcb = get_mpfcb(mpfid);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	1e5a      	subs	r2, r3, #1
 80079e2:	4613      	mov	r3, r2
 80079e4:	00db      	lsls	r3, r3, #3
 80079e6:	1a9b      	subs	r3, r3, r2
 80079e8:	00db      	lsls	r3, r3, #3
 80079ea:	4a3b      	ldr	r2, [pc, #236]	@ (8007ad8 <tk_get_mpf+0x154>)
 80079ec:	4413      	add	r3, r2
 80079ee:	61fb      	str	r3, [r7, #28]

	knl_LockOBJ(&mpfcb->lock);
 80079f0:	69fb      	ldr	r3, [r7, #28]
 80079f2:	3330      	adds	r3, #48	@ 0x30
 80079f4:	4618      	mov	r0, r3
 80079f6:	f7fe ff7f 	bl	80068f8 <knl_LockOBJ>
	if ( mpfcb->mpfid == 0 ) {
 80079fa:	69fb      	ldr	r3, [r7, #28]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d103      	bne.n	8007a0a <tk_get_mpf+0x86>
		ercd = E_NOEXS;
 8007a02:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 8007a06:	613b      	str	r3, [r7, #16]
		goto error_exit;
 8007a08:	e022      	b.n	8007a50 <tk_get_mpf+0xcc>
	}

	/* If there is no space, ready for wait */
	if ( mpfcb->frbcnt <= 0 ) {
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	6a1b      	ldr	r3, [r3, #32]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	dd25      	ble.n	8007a5e <tk_get_mpf+0xda>
		goto wait_mpf;
	} else {
		/* Get memory block */
		if ( mpfcb->freelist != NULL ) {
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00a      	beq.n	8007a30 <tk_get_mpf+0xac>
			free = mpfcb->freelist;
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a1e:	61bb      	str	r3, [r7, #24]
			mpfcb->freelist = free->next;
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	62da      	str	r2, [r3, #44]	@ 0x2c
			*p_blf = free;
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	69ba      	ldr	r2, [r7, #24]
 8007a2c:	601a      	str	r2, [r3, #0]
 8007a2e:	e00a      	b.n	8007a46 <tk_get_mpf+0xc2>
		} else {
			*p_blf = mpfcb->unused;
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	601a      	str	r2, [r3, #0]
			mpfcb->unused = (VB*)mpfcb->unused + mpfcb->blfsz;
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a3c:	69fa      	ldr	r2, [r7, #28]
 8007a3e:	6992      	ldr	r2, [r2, #24]
 8007a40:	441a      	add	r2, r3
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	629a      	str	r2, [r3, #40]	@ 0x28
		}
		mpfcb->frbcnt--;
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	6a1b      	ldr	r3, [r3, #32]
 8007a4a:	1e5a      	subs	r2, r3, #1
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	621a      	str	r2, [r3, #32]
	}

    error_exit:
	knl_UnlockOBJ(&mpfcb->lock);
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	3330      	adds	r3, #48	@ 0x30
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7fe ffb7 	bl	80069c8 <knl_UnlockOBJ>

	return ercd;
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	e034      	b.n	8007ac8 <tk_get_mpf+0x144>
		goto wait_mpf;
 8007a5e:	bf00      	nop

wait_mpf:
	/* Ready for wait */
	BEGIN_CRITICAL_SECTION;
 8007a60:	f005 fe55 	bl	800d70e <disint>
 8007a64:	6178      	str	r0, [r7, #20]
	knl_ctxtsk->wspec = ( (mpfcb->mpfatr & TA_TPRI) != 0 )?
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	f003 0301 	and.w	r3, r3, #1
				&knl_wspec_mpf_tpri: &knl_wspec_mpf_tfifo;
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <tk_get_mpf+0xf2>
 8007a72:	4a1a      	ldr	r2, [pc, #104]	@ (8007adc <tk_get_mpf+0x158>)
 8007a74:	e000      	b.n	8007a78 <tk_get_mpf+0xf4>
 8007a76:	4a1a      	ldr	r2, [pc, #104]	@ (8007ae0 <tk_get_mpf+0x15c>)
	knl_ctxtsk->wspec = ( (mpfcb->mpfatr & TA_TPRI) != 0 )?
 8007a78:	4b16      	ldr	r3, [pc, #88]	@ (8007ad4 <tk_get_mpf+0x150>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	62da      	str	r2, [r3, #44]	@ 0x2c
	knl_ctxtsk->wercd = &ercd;
 8007a7e:	4b15      	ldr	r3, [pc, #84]	@ (8007ad4 <tk_get_mpf+0x150>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f107 0210 	add.w	r2, r7, #16
 8007a86:	63da      	str	r2, [r3, #60]	@ 0x3c
	knl_ctxtsk->winfo.mpf.p_blf = p_blf;
 8007a88:	4b12      	ldr	r3, [pc, #72]	@ (8007ad4 <tk_get_mpf+0x150>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	641a      	str	r2, [r3, #64]	@ 0x40
	knl_gcb_make_wait((GCB*)mpfcb, tmout);
 8007a90:	6879      	ldr	r1, [r7, #4]
 8007a92:	69f8      	ldr	r0, [r7, #28]
 8007a94:	f005 fab4 	bl	800d000 <knl_gcb_make_wait>

	knl_UnlockOBJ(&mpfcb->lock);
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	3330      	adds	r3, #48	@ 0x30
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7fe ff93 	bl	80069c8 <knl_UnlockOBJ>
	END_CRITICAL_SECTION;
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10b      	bne.n	8007ac0 <tk_get_mpf+0x13c>
 8007aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8007ad4 <tk_get_mpf+0x150>)
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae4 <tk_get_mpf+0x160>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d005      	beq.n	8007ac0 <tk_get_mpf+0x13c>
 8007ab4:	4b06      	ldr	r3, [pc, #24]	@ (8007ad0 <tk_get_mpf+0x14c>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d101      	bne.n	8007ac0 <tk_get_mpf+0x13c>
 8007abc:	f7fb fef0 	bl	80038a0 <knl_dispatch>
 8007ac0:	6978      	ldr	r0, [r7, #20]
 8007ac2:	f005 fe0c 	bl	800d6de <set_basepri>

	return ercd;
 8007ac6:	693b      	ldr	r3, [r7, #16]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3720      	adds	r7, #32
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	2400186c 	.word	0x2400186c
 8007ad4:	24001870 	.word	0x24001870
 8007ad8:	24001384 	.word	0x24001384
 8007adc:	0800ee4c 	.word	0x0800ee4c
 8007ae0:	0800ee40 	.word	0x0800ee40
 8007ae4:	24001874 	.word	0x24001874

08007ae8 <tk_rel_mpf>:

/*
 * Return fixed size memory block 
 */
SYSCALL ER tk_rel_mpf( ID mpfid, void *blf )
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b086      	sub	sp, #24
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
	MPFCB	*mpfcb;
	TCB	*tcb;
	FREEL	*free;
	ER	ercd = E_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	617b      	str	r3, [r7, #20]

	CHECK_MPFID(mpfid);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	dd02      	ble.n	8007b02 <tk_rel_mpf+0x1a>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b04      	cmp	r3, #4
 8007b00:	dd02      	ble.n	8007b08 <tk_rel_mpf+0x20>
 8007b02:	f06f 0311 	mvn.w	r3, #17
 8007b06:	e075      	b.n	8007bf4 <tk_rel_mpf+0x10c>
	CHECK_DISPATCH();
 8007b08:	4b3c      	ldr	r3, [pc, #240]	@ (8007bfc <tk_rel_mpf+0x114>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d10d      	bne.n	8007b2c <tk_rel_mpf+0x44>
 8007b10:	f7ff fd9a 	bl	8007648 <knl_isTaskIndependent>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d108      	bne.n	8007b2c <tk_rel_mpf+0x44>
 8007b1a:	4b39      	ldr	r3, [pc, #228]	@ (8007c00 <tk_rel_mpf+0x118>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d004      	beq.n	8007b2c <tk_rel_mpf+0x44>
 8007b22:	f005 fde8 	bl	800d6f6 <get_basepri>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d002      	beq.n	8007b32 <tk_rel_mpf+0x4a>
 8007b2c:	f06f 0318 	mvn.w	r3, #24
 8007b30:	e060      	b.n	8007bf4 <tk_rel_mpf+0x10c>

	mpfcb = get_mpfcb(mpfid);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	1e5a      	subs	r2, r3, #1
 8007b36:	4613      	mov	r3, r2
 8007b38:	00db      	lsls	r3, r3, #3
 8007b3a:	1a9b      	subs	r3, r3, r2
 8007b3c:	00db      	lsls	r3, r3, #3
 8007b3e:	4a31      	ldr	r2, [pc, #196]	@ (8007c04 <tk_rel_mpf+0x11c>)
 8007b40:	4413      	add	r3, r2
 8007b42:	613b      	str	r3, [r7, #16]

	knl_LockOBJ(&mpfcb->lock);
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	3330      	adds	r3, #48	@ 0x30
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fe fed5 	bl	80068f8 <knl_LockOBJ>
	if ( mpfcb->mpfid == 0 ) {
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d103      	bne.n	8007b5e <tk_rel_mpf+0x76>
		ercd = E_NOEXS;
 8007b56:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 8007b5a:	617b      	str	r3, [r7, #20]
		goto error_exit;
 8007b5c:	e044      	b.n	8007be8 <tk_rel_mpf+0x100>
	}
#if CHK_PAR
	if ( blf < mpfcb->mempool || blf >= knl_mempool_end(mpfcb) || (((VB*)blf - (VB*)mpfcb->mempool) % mpfcb->blfsz) != 0 ) {
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b62:	683a      	ldr	r2, [r7, #0]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d313      	bcc.n	8007b90 <tk_rel_mpf+0xa8>
 8007b68:	6938      	ldr	r0, [r7, #16]
 8007b6a:	f7ff fd89 	bl	8007680 <knl_mempool_end>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d20c      	bcs.n	8007b90 <tk_rel_mpf+0xa8>
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b7a:	683a      	ldr	r2, [r7, #0]
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	693a      	ldr	r2, [r7, #16]
 8007b80:	6992      	ldr	r2, [r2, #24]
 8007b82:	fb93 f1f2 	sdiv	r1, r3, r2
 8007b86:	fb01 f202 	mul.w	r2, r1, r2
 8007b8a:	1a9b      	subs	r3, r3, r2
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d003      	beq.n	8007b98 <tk_rel_mpf+0xb0>
		ercd = E_PAR;
 8007b90:	f06f 0310 	mvn.w	r3, #16
 8007b94:	617b      	str	r3, [r7, #20]
		goto error_exit;
 8007b96:	e027      	b.n	8007be8 <tk_rel_mpf+0x100>
	}
#endif

	DISABLE_INTERRUPT;
 8007b98:	f005 fdb9 	bl	800d70e <disint>
	if ( !isQueEmpty(&mpfcb->wait_queue) ) {
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f7ff fd0d 	bl	80075be <isQueEmpty>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10d      	bne.n	8007bc6 <tk_rel_mpf+0xde>
		/* Send memory block to waiting task,
		   and then release the task */
		tcb = (TCB*)mpfcb->wait_queue.next;
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	60bb      	str	r3, [r7, #8]
		*tcb->winfo.mpf.p_blf = blf;
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bb4:	683a      	ldr	r2, [r7, #0]
 8007bb6:	601a      	str	r2, [r3, #0]
		knl_wait_release_ok(tcb);
 8007bb8:	68b8      	ldr	r0, [r7, #8]
 8007bba:	f005 f93d 	bl	800ce38 <knl_wait_release_ok>
		ENABLE_INTERRUPT;
 8007bbe:	2000      	movs	r0, #0
 8007bc0:	f005 fd8d 	bl	800d6de <set_basepri>
 8007bc4:	e010      	b.n	8007be8 <tk_rel_mpf+0x100>
	} else {
		ENABLE_INTERRUPT;
 8007bc6:	2000      	movs	r0, #0
 8007bc8:	f005 fd89 	bl	800d6de <set_basepri>
		/* Free memory block */
		free = (FREEL*)blf;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	60fb      	str	r3, [r7, #12]
		free->next = mpfcb->freelist;
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	601a      	str	r2, [r3, #0]
		mpfcb->freelist = free;
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	62da      	str	r2, [r3, #44]	@ 0x2c
		mpfcb->frbcnt++;
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	1c5a      	adds	r2, r3, #1
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	621a      	str	r2, [r3, #32]
	}

error_exit:
	knl_UnlockOBJ(&mpfcb->lock);
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	3330      	adds	r3, #48	@ 0x30
 8007bec:	4618      	mov	r0, r3
 8007bee:	f7fe feeb 	bl	80069c8 <knl_UnlockOBJ>

	return ercd;
 8007bf2:	697b      	ldr	r3, [r7, #20]
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3718      	adds	r7, #24
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	2400186c 	.word	0x2400186c
 8007c00:	24001870 	.word	0x24001870
 8007c04:	24001384 	.word	0x24001384

08007c08 <tk_ref_mpf>:
#ifdef USE_FUNC_TK_REF_MPF
/*
 * Check fixed size pool state
 */
SYSCALL ER tk_ref_mpf( ID mpfid, T_RMPF *pk_rmpf )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
	MPFCB	*mpfcb;
	ER	ercd = E_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	60fb      	str	r3, [r7, #12]

	CHECK_MPFID(mpfid);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	dd02      	ble.n	8007c22 <tk_ref_mpf+0x1a>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b04      	cmp	r3, #4
 8007c20:	dd02      	ble.n	8007c28 <tk_ref_mpf+0x20>
 8007c22:	f06f 0311 	mvn.w	r3, #17
 8007c26:	e044      	b.n	8007cb2 <tk_ref_mpf+0xaa>
	CHECK_DISPATCH();
 8007c28:	4b24      	ldr	r3, [pc, #144]	@ (8007cbc <tk_ref_mpf+0xb4>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d10d      	bne.n	8007c4c <tk_ref_mpf+0x44>
 8007c30:	f7ff fd0a 	bl	8007648 <knl_isTaskIndependent>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d108      	bne.n	8007c4c <tk_ref_mpf+0x44>
 8007c3a:	4b21      	ldr	r3, [pc, #132]	@ (8007cc0 <tk_ref_mpf+0xb8>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d004      	beq.n	8007c4c <tk_ref_mpf+0x44>
 8007c42:	f005 fd58 	bl	800d6f6 <get_basepri>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d002      	beq.n	8007c52 <tk_ref_mpf+0x4a>
 8007c4c:	f06f 0318 	mvn.w	r3, #24
 8007c50:	e02f      	b.n	8007cb2 <tk_ref_mpf+0xaa>

	mpfcb = get_mpfcb(mpfid);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	1e5a      	subs	r2, r3, #1
 8007c56:	4613      	mov	r3, r2
 8007c58:	00db      	lsls	r3, r3, #3
 8007c5a:	1a9b      	subs	r3, r3, r2
 8007c5c:	00db      	lsls	r3, r3, #3
 8007c5e:	4a19      	ldr	r2, [pc, #100]	@ (8007cc4 <tk_ref_mpf+0xbc>)
 8007c60:	4413      	add	r3, r2
 8007c62:	60bb      	str	r3, [r7, #8]

	knl_LockOBJ(&mpfcb->lock);
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	3330      	adds	r3, #48	@ 0x30
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f7fe fe45 	bl	80068f8 <knl_LockOBJ>
	if ( mpfcb->mpfid == 0 ) {
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d103      	bne.n	8007c7e <tk_ref_mpf+0x76>
		ercd = E_NOEXS;
 8007c76:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 8007c7a:	60fb      	str	r3, [r7, #12]
 8007c7c:	e013      	b.n	8007ca6 <tk_ref_mpf+0x9e>
	} else {
		DISABLE_INTERRUPT;
 8007c7e:	f005 fd46 	bl	800d70e <disint>
		pk_rmpf->wtsk = knl_wait_tskid(&mpfcb->wait_queue);
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	4618      	mov	r0, r3
 8007c86:	f005 f9a8 	bl	800cfda <knl_wait_tskid>
 8007c8a:	4602      	mov	r2, r0
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	605a      	str	r2, [r3, #4]
		ENABLE_INTERRUPT;
 8007c90:	2000      	movs	r0, #0
 8007c92:	f005 fd24 	bl	800d6de <set_basepri>
		pk_rmpf->exinf = mpfcb->exinf;
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	68da      	ldr	r2, [r3, #12]
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	601a      	str	r2, [r3, #0]
		pk_rmpf->frbcnt = mpfcb->frbcnt;
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	6a1a      	ldr	r2, [r3, #32]
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	609a      	str	r2, [r3, #8]
	}
	knl_UnlockOBJ(&mpfcb->lock);
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	3330      	adds	r3, #48	@ 0x30
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fe fe8c 	bl	80069c8 <knl_UnlockOBJ>

	return ercd;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	2400186c 	.word	0x2400186c
 8007cc0:	24001870 	.word	0x24001870
 8007cc4:	24001384 	.word	0x24001384

08007cc8 <QueInit>:
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	605a      	str	r2, [r3, #4]
}
 8007cdc:	bf00      	nop
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bc80      	pop	{r7}
 8007ce4:	4770      	bx	lr

08007ce6 <isQueEmpty>:
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b083      	sub	sp, #12
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
	return ( que->next == que )? TRUE: FALSE;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	bf0c      	ite	eq
 8007cf8:	2301      	moveq	r3, #1
 8007cfa:	2300      	movne	r3, #0
 8007cfc:	b2db      	uxtb	r3, r3
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	370c      	adds	r7, #12
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bc80      	pop	{r7}
 8007d06:	4770      	bx	lr

08007d08 <QueInsert>:
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	685a      	ldr	r2, [r3, #4]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	605a      	str	r2, [r3, #4]
	entry->next = que;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	683a      	ldr	r2, [r7, #0]
 8007d1e:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	685b      	ldr	r3, [r3, #4]
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	605a      	str	r2, [r3, #4]
}
 8007d2e:	bf00      	nop
 8007d30:	370c      	adds	r7, #12
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bc80      	pop	{r7}
 8007d36:	4770      	bx	lr

08007d38 <QueRemoveNext>:
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b085      	sub	sp, #20
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
	if ( que->next == que ) {
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	687a      	ldr	r2, [r7, #4]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d101      	bne.n	8007d4e <QueRemoveNext+0x16>
		return NULL;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	e00b      	b.n	8007d66 <QueRemoveNext+0x2e>
	entry = que->next;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	60fb      	str	r3, [r7, #12]
	que->next = (struct queue*)entry->next;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	601a      	str	r2, [r3, #0]
	entry->next->prev = que;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	605a      	str	r2, [r3, #4]
	return entry;
 8007d64:	68fb      	ldr	r3, [r7, #12]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3714      	adds	r7, #20
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bc80      	pop	{r7}
 8007d6e:	4770      	bx	lr

08007d70 <knl_isTaskIndependent>:
{
 8007d70:	b480      	push	{r7}
 8007d72:	af00      	add	r7, sp, #0
	return ( knl_taskindp > 0 )? TRUE: FALSE;
 8007d74:	4b05      	ldr	r3, [pc, #20]	@ (8007d8c <knl_isTaskIndependent+0x1c>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	bfcc      	ite	gt
 8007d7c:	2301      	movgt	r3, #1
 8007d7e:	2300      	movle	r3, #0
 8007d80:	b2db      	uxtb	r3, r3
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bc80      	pop	{r7}
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	240029f8 	.word	0x240029f8

08007d90 <roundSize>:

/*
 * Adjusting the size which can be allocated 
 */
Inline W roundSize( W sz )
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
	if ( sz < (W)MIN_FRAGMENT ) {
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2b0f      	cmp	r3, #15
 8007d9c:	dc01      	bgt.n	8007da2 <roundSize+0x12>
		sz = (W)MIN_FRAGMENT;
 8007d9e:	2310      	movs	r3, #16
 8007da0:	607b      	str	r3, [r7, #4]
	}
	return (W)(((UW)sz + (UW)(ROUNDSZ-1)) & ~(UW)(ROUNDSZ-1));
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	3307      	adds	r3, #7
 8007da6:	f023 0307 	bic.w	r3, r3, #7
}
 8007daa:	4618      	mov	r0, r3
 8007dac:	370c      	adds	r7, #12
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bc80      	pop	{r7}
 8007db2:	4770      	bx	lr

08007db4 <knl_MaxFreeSize>:

/*
 * Maximum free area size
 */
Inline W knl_MaxFreeSize( MPLCB *mplcb )
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
	if ( isQueEmpty(&mplcb->freeque) ) {
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	3320      	adds	r3, #32
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7ff ff90 	bl	8007ce6 <isQueEmpty>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d001      	beq.n	8007dd0 <knl_MaxFreeSize+0x1c>
		return 0;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	e003      	b.n	8007dd8 <knl_MaxFreeSize+0x24>
	}
	return FreeSize(mplcb->freeque.prev);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dd4:	3308      	adds	r3, #8
 8007dd6:	685b      	ldr	r3, [r3, #4]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <knl_memorypool_initialize>:

/*
 * Initialization of variable size memory pool control block
 */
EXPORT ER knl_memorypool_initialize( void )
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
	if ( NUM_MPLID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_mplcb);
 8007de6:	480e      	ldr	r0, [pc, #56]	@ (8007e20 <knl_memorypool_initialize+0x40>)
 8007de8:	f7ff ff6e 	bl	8007cc8 <QueInit>
	end = knl_mplcb_table + NUM_MPLID;
 8007dec:	4b0d      	ldr	r3, [pc, #52]	@ (8007e24 <knl_memorypool_initialize+0x44>)
 8007dee:	603b      	str	r3, [r7, #0]
	for ( mplcb = knl_mplcb_table; mplcb < end; mplcb++ ) {
 8007df0:	4b0d      	ldr	r3, [pc, #52]	@ (8007e28 <knl_memorypool_initialize+0x48>)
 8007df2:	607b      	str	r3, [r7, #4]
 8007df4:	e00a      	b.n	8007e0c <knl_memorypool_initialize+0x2c>
		mplcb->mplid = 0;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	609a      	str	r2, [r3, #8]
		QueInsert(&mplcb->wait_queue, &knl_free_mplcb);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4908      	ldr	r1, [pc, #32]	@ (8007e20 <knl_memorypool_initialize+0x40>)
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7ff ff81 	bl	8007d08 <QueInsert>
	for ( mplcb = knl_mplcb_table; mplcb < end; mplcb++ ) {
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	3334      	adds	r3, #52	@ 0x34
 8007e0a:	607b      	str	r3, [r7, #4]
 8007e0c:	687a      	ldr	r2, [r7, #4]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d3f0      	bcc.n	8007df6 <knl_memorypool_initialize+0x16>
	}

	return E_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	2400153c 	.word	0x2400153c
 8007e24:	2400153c 	.word	0x2400153c
 8007e28:	2400146c 	.word	0x2400146c

08007e2c <knl_appendFreeAreaBound>:
/*
 * Registration of free area on FreeQue
 *   Specialized version for merging with top/end area
 */
LOCAL void knl_appendFreeAreaBound( MPLCB *mplcb, QUEUE *aq )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b088      	sub	sp, #32
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
	IMACB	*imacb = (IMACB*)&(mplcb->mplsz);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	3314      	adds	r3, #20
 8007e3a:	617b      	str	r3, [r7, #20]
	QUEUE	*fq, *top, *end;
	W	size;

	if ( aq == &(mplcb->areaque) ) {
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	3318      	adds	r3, #24
 8007e40:	683a      	ldr	r2, [r7, #0]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d103      	bne.n	8007e4e <knl_appendFreeAreaBound+0x22>
		top = (QUEUE*)mplcb->mempool;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e4a:	61fb      	str	r3, [r7, #28]
 8007e4c:	e002      	b.n	8007e54 <knl_appendFreeAreaBound+0x28>
	} else {
		top = aq + 1;
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	3308      	adds	r3, #8
 8007e52:	61fb      	str	r3, [r7, #28]
	}

	if ( aq->next == &(mplcb->areaque_end) ) {
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	3328      	adds	r3, #40	@ 0x28
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d106      	bne.n	8007e6e <knl_appendFreeAreaBound+0x42>
		end = (QUEUE*)((VB*)mplcb->mempool + mplcb->mplsz);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	6952      	ldr	r2, [r2, #20]
 8007e68:	4413      	add	r3, r2
 8007e6a:	61bb      	str	r3, [r7, #24]
 8007e6c:	e002      	b.n	8007e74 <knl_appendFreeAreaBound+0x48>
	} else {
		end = aq->next;
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	61bb      	str	r3, [r7, #24]
	}

	size = (W)((VB*)end - (VB*)top);
 8007e74:	69ba      	ldr	r2, [r7, #24]
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	613b      	str	r3, [r7, #16]
	/* Registration position search */
	/*  Search the free area whose size is equal to 'blksz',
	 *  or larger than 'blksz' but closest.
	 *  If it does not exist, return '&imacb->freeque'.
	 */
	fq = knl_searchFreeArea(imacb, size);
 8007e7c:	6939      	ldr	r1, [r7, #16]
 8007e7e:	6978      	ldr	r0, [r7, #20]
 8007e80:	f7ff f90d 	bl	800709e <knl_searchFreeArea>
 8007e84:	60f8      	str	r0, [r7, #12]

	/* Register */
	clrAreaFlag(aq, AREA_USE);
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	f023 0301 	bic.w	r3, r3, #1
 8007e8e:	461a      	mov	r2, r3
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	605a      	str	r2, [r3, #4]
	if ( fq != &imacb->freeque && FreeSize(fq) == size ) {
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	330c      	adds	r3, #12
 8007e98:	68fa      	ldr	r2, [r7, #12]
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d026      	beq.n	8007eec <knl_appendFreeAreaBound+0xc0>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	3308      	adds	r3, #8
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d11f      	bne.n	8007eec <knl_appendFreeAreaBound+0xc0>
		/* FreeQue Same size */
		(top + 1)->next = (fq + 1)->next;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f103 0208 	add.w	r2, r3, #8
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	3308      	adds	r3, #8
 8007eb6:	6812      	ldr	r2, [r2, #0]
 8007eb8:	601a      	str	r2, [r3, #0]
		(fq  + 1)->next = top + 1;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	3308      	adds	r3, #8
 8007ebe:	69fa      	ldr	r2, [r7, #28]
 8007ec0:	3208      	adds	r2, #8
 8007ec2:	601a      	str	r2, [r3, #0]
		(top + 1)->prev = fq + 1;
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	3308      	adds	r3, #8
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	3208      	adds	r2, #8
 8007ecc:	605a      	str	r2, [r3, #4]
		if( (top + 1)->next != NULL ) {
 8007ece:	69fb      	ldr	r3, [r7, #28]
 8007ed0:	3308      	adds	r3, #8
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d005      	beq.n	8007ee4 <knl_appendFreeAreaBound+0xb8>
			(top + 1)->next->prev = top + 1;
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	3308      	adds	r3, #8
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	69fa      	ldr	r2, [r7, #28]
 8007ee0:	3208      	adds	r2, #8
 8007ee2:	605a      	str	r2, [r3, #4]
		}
		top->next = NULL;
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	601a      	str	r2, [r3, #0]
 8007eea:	e00c      	b.n	8007f06 <knl_appendFreeAreaBound+0xda>
	} else {
		/* FreeQue Size order */
		QueInsert(top, fq);
 8007eec:	68f9      	ldr	r1, [r7, #12]
 8007eee:	69f8      	ldr	r0, [r7, #28]
 8007ef0:	f7ff ff0a 	bl	8007d08 <QueInsert>
		(top + 1)->next = NULL;
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	3308      	adds	r3, #8
 8007ef8:	2200      	movs	r2, #0
 8007efa:	601a      	str	r2, [r3, #0]
		(top + 1)->prev = (QUEUE*)size;
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	3308      	adds	r3, #8
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	605a      	str	r2, [r3, #4]
	}
}
 8007f04:	bf00      	nop
 8007f06:	bf00      	nop
 8007f08:	3720      	adds	r7, #32
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <knl_get_blk>:
 * Get memory block 
 *	'blksz' must be larger than minimum fragment size
 *	and adjusted by ROUNDSZ unit.
 */
LOCAL void *knl_get_blk( MPLCB *mplcb, W blksz )
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b086      	sub	sp, #24
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
 8007f16:	6039      	str	r1, [r7, #0]
	QUEUE	*q, *aq, *aq2;
	IMACB*	imacb = (IMACB*)&(mplcb->mplsz);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	3314      	adds	r3, #20
 8007f1c:	617b      	str	r3, [r7, #20]

	/* Search FreeQue */
	q = knl_searchFreeArea(imacb, blksz);
 8007f1e:	6839      	ldr	r1, [r7, #0]
 8007f20:	6978      	ldr	r0, [r7, #20]
 8007f22:	f7ff f8bc 	bl	800709e <knl_searchFreeArea>
 8007f26:	6138      	str	r0, [r7, #16]
	if ( q == &(imacb->freeque) ) {
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	330c      	adds	r3, #12
 8007f2c:	693a      	ldr	r2, [r7, #16]
 8007f2e:	429a      	cmp	r2, r3
 8007f30:	d101      	bne.n	8007f36 <knl_get_blk+0x28>
		return NULL;
 8007f32:	2300      	movs	r3, #0
 8007f34:	e034      	b.n	8007fa0 <knl_get_blk+0x92>
	}

	/* remove free area from FreeQue */
	knl_removeFreeQue(q);
 8007f36:	6938      	ldr	r0, [r7, #16]
 8007f38:	f7ff f956 	bl	80071e8 <knl_removeFreeQue>
	aq = ((void *)q == mplcb->mempool) ? &(mplcb->areaque) :  q - 1;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f40:	693a      	ldr	r2, [r7, #16]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d102      	bne.n	8007f4c <knl_get_blk+0x3e>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	3318      	adds	r3, #24
 8007f4a:	e001      	b.n	8007f50 <knl_get_blk+0x42>
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	3b08      	subs	r3, #8
 8007f50:	60fb      	str	r3, [r7, #12]

	/* If there is a fragment smaller than the minimum fragment size,
	   allocate them together */
	if ( FreeSize(q) - (UW)blksz >= MIN_FRAGMENT + sizeof(QUEUE) ) {
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	3308      	adds	r3, #8
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	461a      	mov	r2, r3
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	1ad3      	subs	r3, r2, r3
 8007f5e:	2b17      	cmp	r3, #23
 8007f60:	d916      	bls.n	8007f90 <knl_get_blk+0x82>

		/* Divide the area into 2. */
		aq2 = (QUEUE*)((VB*)q + blksz);
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	693a      	ldr	r2, [r7, #16]
 8007f66:	4413      	add	r3, r2
 8007f68:	60bb      	str	r3, [r7, #8]
		knl_insertAreaQue(aq, aq2);
 8007f6a:	68b9      	ldr	r1, [r7, #8]
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f7ff f975 	bl	800725c <knl_insertAreaQue>

		/* Register the remaining area onto FreeQue */
		if ( aq2->next == &(mplcb->areaque_end) ) {
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	681a      	ldr	r2, [r3, #0]
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	3328      	adds	r3, #40	@ 0x28
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d104      	bne.n	8007f88 <knl_get_blk+0x7a>
			knl_appendFreeAreaBound(mplcb, aq2);
 8007f7e:	68b9      	ldr	r1, [r7, #8]
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f7ff ff53 	bl	8007e2c <knl_appendFreeAreaBound>
 8007f86:	e003      	b.n	8007f90 <knl_get_blk+0x82>
		} else {
			knl_appendFreeArea(imacb, aq2);
 8007f88:	68b9      	ldr	r1, [r7, #8]
 8007f8a:	6978      	ldr	r0, [r7, #20]
 8007f8c:	f7ff f8d5 	bl	800713a <knl_appendFreeArea>
		}
	}
	setAreaFlag(aq, AREA_USE);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	f043 0301 	orr.w	r3, r3, #1
 8007f98:	461a      	mov	r2, r3
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	605a      	str	r2, [r3, #4]

	return (void *)q;
 8007f9e:	693b      	ldr	r3, [r7, #16]
}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	3718      	adds	r7, #24
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}

08007fa8 <knl_rel_blk>:

/*
 * Free memory block 
 */
LOCAL ER knl_rel_blk( MPLCB *mplcb, void *blk )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b086      	sub	sp, #24
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	6039      	str	r1, [r7, #0]
	QUEUE	*aq;
	IMACB*	imacb = (IMACB*)&(mplcb->mplsz);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	3314      	adds	r3, #20
 8007fb6:	613b      	str	r3, [r7, #16]

	aq = (blk == mplcb->mempool) ? &(mplcb->areaque) : (QUEUE*)blk - 1;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fbc:	683a      	ldr	r2, [r7, #0]
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d102      	bne.n	8007fc8 <knl_rel_blk+0x20>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	3318      	adds	r3, #24
 8007fc6:	e001      	b.n	8007fcc <knl_rel_blk+0x24>
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	3b08      	subs	r3, #8
 8007fcc:	617b      	str	r3, [r7, #20]

#if CHK_PAR
	if ( !chkAreaFlag(aq, AREA_USE) ) {
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	f003 0301 	and.w	r3, r3, #1
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d102      	bne.n	8007fe0 <knl_rel_blk+0x38>
		return E_PAR;
 8007fda:	f06f 0310 	mvn.w	r3, #16
 8007fde:	e04a      	b.n	8008076 <knl_rel_blk+0xce>
	}
#endif
	clrAreaFlag(aq, AREA_USE);
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	f023 0301 	bic.w	r3, r3, #1
 8007fe8:	461a      	mov	r2, r3
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	605a      	str	r2, [r3, #4]

	if ( !chkAreaFlag(aq->next, AREA_USE) ) {
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	f003 0301 	and.w	r3, r3, #1
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d10a      	bne.n	8008012 <knl_rel_blk+0x6a>
		/* Merge to the next area */
		knl_removeFreeQue(aq->next + 1);
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	3308      	adds	r3, #8
 8008002:	4618      	mov	r0, r3
 8008004:	f7ff f8f0 	bl	80071e8 <knl_removeFreeQue>
		knl_removeAreaQue(aq->next);
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4618      	mov	r0, r3
 800800e:	f7ff f943 	bl	8007298 <knl_removeAreaQue>
	}
	if ( !chkAreaFlag(aq->prev, AREA_USE) ) {
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	f003 0301 	and.w	r3, r3, #1
 800801c:	2b00      	cmp	r3, #0
 800801e:	d115      	bne.n	800804c <knl_rel_blk+0xa4>
		/* Merge to the previous area */
		QUEUE *fq;
		aq = aq->prev;
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	617b      	str	r3, [r7, #20]
		fq = (aq == &(mplcb->areaque)) ? (QUEUE*)(mplcb->mempool) : aq + 1;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	3318      	adds	r3, #24
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	429a      	cmp	r2, r3
 800802e:	d102      	bne.n	8008036 <knl_rel_blk+0x8e>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008034:	e001      	b.n	800803a <knl_rel_blk+0x92>
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	3308      	adds	r3, #8
 800803a:	60fb      	str	r3, [r7, #12]

		knl_removeFreeQue(fq);
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f7ff f8d3 	bl	80071e8 <knl_removeFreeQue>
		knl_removeAreaQue(aq->next);
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4618      	mov	r0, r3
 8008048:	f7ff f926 	bl	8007298 <knl_removeAreaQue>
	}

	/* Register free area onto FreeQue */
	if ( aq == &(mplcb->areaque) || aq->next == &(mplcb->areaque_end) ) {
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	3318      	adds	r3, #24
 8008050:	697a      	ldr	r2, [r7, #20]
 8008052:	429a      	cmp	r2, r3
 8008054:	d005      	beq.n	8008062 <knl_rel_blk+0xba>
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	3328      	adds	r3, #40	@ 0x28
 800805e:	429a      	cmp	r2, r3
 8008060:	d104      	bne.n	800806c <knl_rel_blk+0xc4>
		knl_appendFreeAreaBound(mplcb, aq);
 8008062:	6979      	ldr	r1, [r7, #20]
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f7ff fee1 	bl	8007e2c <knl_appendFreeAreaBound>
 800806a:	e003      	b.n	8008074 <knl_rel_blk+0xcc>
	} else {
		knl_appendFreeArea(imacb, aq);
 800806c:	6979      	ldr	r1, [r7, #20]
 800806e:	6938      	ldr	r0, [r7, #16]
 8008070:	f7ff f863 	bl	800713a <knl_appendFreeArea>
	}

	return E_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3718      	adds	r7, #24
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <knl_mpl_wakeup>:
/*
 * Allocate memory and release wait task,
 * as long as there are enough free memory.
 */
EXPORT void knl_mpl_wakeup( MPLCB *mplcb )
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b086      	sub	sp, #24
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
	TCB	*top;
	void	*blk;
	W	blksz;

	while ( !isQueEmpty(&mplcb->wait_queue) ) {
 8008086:	e018      	b.n	80080ba <knl_mpl_wakeup+0x3c>
		top = (TCB*)mplcb->wait_queue.next;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	617b      	str	r3, [r7, #20]
		blksz = top->winfo.mpl.blksz;
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008092:	613b      	str	r3, [r7, #16]

		/* Check free space */
		if ( blksz > knl_MaxFreeSize(mplcb) ) {
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7ff fe8d 	bl	8007db4 <knl_MaxFreeSize>
 800809a:	4602      	mov	r2, r0
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	4293      	cmp	r3, r2
 80080a0:	dc13      	bgt.n	80080ca <knl_mpl_wakeup+0x4c>
			break;
		}

		/* Get memory block */
		blk = knl_get_blk(mplcb, blksz);
 80080a2:	6939      	ldr	r1, [r7, #16]
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7ff ff32 	bl	8007f0e <knl_get_blk>
 80080aa:	60f8      	str	r0, [r7, #12]
		*top->winfo.mpl.p_blk = blk;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080b0:	68fa      	ldr	r2, [r7, #12]
 80080b2:	601a      	str	r2, [r3, #0]

		/* Release wait task */
		knl_wait_release_ok(top);
 80080b4:	6978      	ldr	r0, [r7, #20]
 80080b6:	f004 febf 	bl	800ce38 <knl_wait_release_ok>
	while ( !isQueEmpty(&mplcb->wait_queue) ) {
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4618      	mov	r0, r3
 80080be:	f7ff fe12 	bl	8007ce6 <isQueEmpty>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d0df      	beq.n	8008088 <knl_mpl_wakeup+0xa>
	}
}
 80080c8:	e000      	b.n	80080cc <knl_mpl_wakeup+0x4e>
			break;
 80080ca:	bf00      	nop
}
 80080cc:	bf00      	nop
 80080ce:	3718      	adds	r7, #24
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <init_mempool>:

/*
 * Memory pool initial setting
 */
LOCAL void init_mempool( MPLCB *mplcb )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b082      	sub	sp, #8
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
	QueInit(&mplcb->areaque);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	3318      	adds	r3, #24
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7ff fdf1 	bl	8007cc8 <QueInit>
	QueInit(&mplcb->freeque);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	3320      	adds	r3, #32
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7ff fdec 	bl	8007cc8 <QueInit>

	/* Register onto AreaQue */
	knl_insertAreaQue(&mplcb->areaque, &mplcb->areaque_end);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f103 0218 	add.w	r2, r3, #24
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	3328      	adds	r3, #40	@ 0x28
 80080fa:	4619      	mov	r1, r3
 80080fc:	4610      	mov	r0, r2
 80080fe:	f7ff f8ad 	bl	800725c <knl_insertAreaQue>

	/* Set AREA_USE for locations that must not be free area */
	setAreaFlag(&mplcb->areaque_end, AREA_USE);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008106:	f043 0301 	orr.w	r3, r3, #1
 800810a:	461a      	mov	r2, r3
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	62da      	str	r2, [r3, #44]	@ 0x2c

	/* Register onto FreeQue */
	knl_appendFreeAreaBound(mplcb, &mplcb->areaque);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	3318      	adds	r3, #24
 8008114:	4619      	mov	r1, r3
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f7ff fe88 	bl	8007e2c <knl_appendFreeAreaBound>
}
 800811c:	bf00      	nop
 800811e:	3708      	adds	r7, #8
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <tk_cre_mpl>:

/*
 * Create variable size memory pool 
 */
SYSCALL ID tk_cre_mpl( CONST T_CMPL *pk_cmpl )
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b08a      	sub	sp, #40	@ 0x28
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
#if CHK_RSATR
	const ATR VALID_MPLATR = {
 800812c:	f240 3321 	movw	r3, #801	@ 0x321
 8008130:	61fb      	str	r3, [r7, #28]
	ID	mplid;
	W	mplsz;
	void	*mempool;
	ER	ercd;

	CHECK_RSATR(pk_cmpl->mplatr, VALID_MPLATR);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	685a      	ldr	r2, [r3, #4]
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	43db      	mvns	r3, r3
 800813a:	4013      	ands	r3, r2
 800813c:	2b00      	cmp	r3, #0
 800813e:	d002      	beq.n	8008146 <tk_cre_mpl+0x22>
 8008140:	f06f 030a 	mvn.w	r3, #10
 8008144:	e093      	b.n	800826e <tk_cre_mpl+0x14a>
	CHECK_PAR(pk_cmpl->mplsz > 0 && pk_cmpl->mplsz <= MAX_ALLOCATE);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	2b00      	cmp	r3, #0
 800814c:	dd05      	ble.n	800815a <tk_cre_mpl+0x36>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	461a      	mov	r2, r3
 8008154:	4b48      	ldr	r3, [pc, #288]	@ (8008278 <tk_cre_mpl+0x154>)
 8008156:	429a      	cmp	r2, r3
 8008158:	d902      	bls.n	8008160 <tk_cre_mpl+0x3c>
 800815a:	f06f 0310 	mvn.w	r3, #16
 800815e:	e086      	b.n	800826e <tk_cre_mpl+0x14a>
#if !USE_IMALLOC
	/* TA_USERBUF must be specified if configured in no Imalloc */
	CHECK_PAR((pk_cmpl->mplatr & TA_USERBUF) != 0);
#endif
	CHECK_DISPATCH();
 8008160:	4b46      	ldr	r3, [pc, #280]	@ (800827c <tk_cre_mpl+0x158>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d10d      	bne.n	8008184 <tk_cre_mpl+0x60>
 8008168:	f7ff fe02 	bl	8007d70 <knl_isTaskIndependent>
 800816c:	4603      	mov	r3, r0
 800816e:	2b00      	cmp	r3, #0
 8008170:	d108      	bne.n	8008184 <tk_cre_mpl+0x60>
 8008172:	4b43      	ldr	r3, [pc, #268]	@ (8008280 <tk_cre_mpl+0x15c>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d004      	beq.n	8008184 <tk_cre_mpl+0x60>
 800817a:	f005 fabc 	bl	800d6f6 <get_basepri>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d002      	beq.n	800818a <tk_cre_mpl+0x66>
 8008184:	f06f 0318 	mvn.w	r3, #24
 8008188:	e071      	b.n	800826e <tk_cre_mpl+0x14a>

	mplsz = roundSize(pk_cmpl->mplsz);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	4618      	mov	r0, r3
 8008190:	f7ff fdfe 	bl	8007d90 <roundSize>
 8008194:	61b8      	str	r0, [r7, #24]

#if USE_IMALLOC
	if ( (pk_cmpl->mplatr & TA_USERBUF) != 0 ) {
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	f003 0320 	and.w	r3, r3, #32
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00b      	beq.n	80081ba <tk_cre_mpl+0x96>
		/* Size of user buffer must be multiples of sizeof(QUEUE)
			and larger than sizeof(QUEUE)*2 */
		if ( mplsz != pk_cmpl->mplsz ) {
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	69ba      	ldr	r2, [r7, #24]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d002      	beq.n	80081b2 <tk_cre_mpl+0x8e>
			return E_PAR;
 80081ac:	f06f 0310 	mvn.w	r3, #16
 80081b0:	e05d      	b.n	800826e <tk_cre_mpl+0x14a>
		}
		/* Use user buffer */
		mempool = pk_cmpl->bufptr;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80081b8:	e009      	b.n	80081ce <tk_cre_mpl+0xaa>
	} else {
		/* Allocate memory for memory pool */
		mempool = knl_Imalloc((UW)mplsz);
 80081ba:	69b8      	ldr	r0, [r7, #24]
 80081bc:	f7ff f88a 	bl	80072d4 <knl_Imalloc>
 80081c0:	6278      	str	r0, [r7, #36]	@ 0x24
		if ( mempool == NULL ) {
 80081c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d102      	bne.n	80081ce <tk_cre_mpl+0xaa>
			return E_NOMEM;
 80081c8:	f06f 0320 	mvn.w	r3, #32
 80081cc:	e04f      	b.n	800826e <tk_cre_mpl+0x14a>
	}
	/* Use user buffer */
	mempool = pk_cmpl->bufptr;
#endif

	BEGIN_CRITICAL_SECTION;
 80081ce:	f005 fa9e 	bl	800d70e <disint>
 80081d2:	6178      	str	r0, [r7, #20]
	/* Get control block from FreeQue */
	mplcb = (MPLCB*)QueRemoveNext(&knl_free_mplcb);
 80081d4:	482b      	ldr	r0, [pc, #172]	@ (8008284 <tk_cre_mpl+0x160>)
 80081d6:	f7ff fdaf 	bl	8007d38 <QueRemoveNext>
 80081da:	6138      	str	r0, [r7, #16]
	if ( mplcb == NULL ) {
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d103      	bne.n	80081ea <tk_cre_mpl+0xc6>
		ercd = E_LIMIT;
 80081e2:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 80081e6:	623b      	str	r3, [r7, #32]
 80081e8:	e022      	b.n	8008230 <tk_cre_mpl+0x10c>
	} else {
		mplid = ID_MPL(mplcb - knl_mplcb_table);
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	4a26      	ldr	r2, [pc, #152]	@ (8008288 <tk_cre_mpl+0x164>)
 80081ee:	1a9b      	subs	r3, r3, r2
 80081f0:	109b      	asrs	r3, r3, #2
 80081f2:	4a26      	ldr	r2, [pc, #152]	@ (800828c <tk_cre_mpl+0x168>)
 80081f4:	fb02 f303 	mul.w	r3, r2, r3
 80081f8:	3301      	adds	r3, #1
 80081fa:	60fb      	str	r3, [r7, #12]

		/* Initialize control block */
		QueInit(&mplcb->wait_queue);
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	4618      	mov	r0, r3
 8008200:	f7ff fd62 	bl	8007cc8 <QueInit>
		mplcb->mplid  = mplid;
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	609a      	str	r2, [r3, #8]
		mplcb->exinf  = pk_cmpl->exinf;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	60da      	str	r2, [r3, #12]
		mplcb->mplatr = pk_cmpl->mplatr;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	685a      	ldr	r2, [r3, #4]
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	611a      	str	r2, [r3, #16]
		mplcb->mplsz  = mplsz;
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	69ba      	ldr	r2, [r7, #24]
 800821e:	615a      	str	r2, [r3, #20]
		if ( (pk_cmpl->mplatr & TA_DSNAME) != 0 ) {
			knl_strncpy((char*)mplcb->name, (char*)pk_cmpl->dsname, OBJECT_NAME_LENGTH);
		}
#endif

		mplcb->mempool = mempool;
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008224:	631a      	str	r2, [r3, #48]	@ 0x30

		/* Initialize memory pool */
		init_mempool(mplcb);
 8008226:	6938      	ldr	r0, [r7, #16]
 8008228:	f7ff ff54 	bl	80080d4 <init_mempool>

		ercd = mplid;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	623b      	str	r3, [r7, #32]
	}
	END_CRITICAL_SECTION;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d10b      	bne.n	800824e <tk_cre_mpl+0x12a>
 8008236:	4b12      	ldr	r3, [pc, #72]	@ (8008280 <tk_cre_mpl+0x15c>)
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	4b15      	ldr	r3, [pc, #84]	@ (8008290 <tk_cre_mpl+0x16c>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	429a      	cmp	r2, r3
 8008240:	d005      	beq.n	800824e <tk_cre_mpl+0x12a>
 8008242:	4b0e      	ldr	r3, [pc, #56]	@ (800827c <tk_cre_mpl+0x158>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d101      	bne.n	800824e <tk_cre_mpl+0x12a>
 800824a:	f7fb fb29 	bl	80038a0 <knl_dispatch>
 800824e:	6978      	ldr	r0, [r7, #20]
 8008250:	f005 fa45 	bl	800d6de <set_basepri>

#if USE_IMALLOC
	if ( (ercd < E_OK) && ((pk_cmpl->mplatr & TA_USERBUF) == 0) ) {
 8008254:	6a3b      	ldr	r3, [r7, #32]
 8008256:	2b00      	cmp	r3, #0
 8008258:	da08      	bge.n	800826c <tk_cre_mpl+0x148>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	685b      	ldr	r3, [r3, #4]
 800825e:	f003 0320 	and.w	r3, r3, #32
 8008262:	2b00      	cmp	r3, #0
 8008264:	d102      	bne.n	800826c <tk_cre_mpl+0x148>
		knl_Ifree(mempool);
 8008266:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008268:	f7ff f8dc 	bl	8007424 <knl_Ifree>
	}
#endif

	return ercd;
 800826c:	6a3b      	ldr	r3, [r7, #32]
}
 800826e:	4618      	mov	r0, r3
 8008270:	3728      	adds	r7, #40	@ 0x28
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	7ffffff8 	.word	0x7ffffff8
 800827c:	2400186c 	.word	0x2400186c
 8008280:	24001870 	.word	0x24001870
 8008284:	2400153c 	.word	0x2400153c
 8008288:	2400146c 	.word	0x2400146c
 800828c:	c4ec4ec5 	.word	0xc4ec4ec5
 8008290:	24001874 	.word	0x24001874

08008294 <tk_del_mpl>:
#ifdef USE_FUNC_TK_DEL_MPL
/*
 * Delete variable size memory pool 
 */
SYSCALL ER tk_del_mpl( ID mplid )
{
 8008294:	b580      	push	{r7, lr}
 8008296:	b088      	sub	sp, #32
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
	MPLCB	*mplcb;
	void	*mempool = NULL;
 800829c:	2300      	movs	r3, #0
 800829e:	61fb      	str	r3, [r7, #28]
	ATR	memattr = 0;
 80082a0:	2300      	movs	r3, #0
 80082a2:	61bb      	str	r3, [r7, #24]
	ER	ercd = E_OK;
 80082a4:	2300      	movs	r3, #0
 80082a6:	617b      	str	r3, [r7, #20]

	CHECK_MPLID(mplid);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	dd02      	ble.n	80082b4 <tk_del_mpl+0x20>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2b04      	cmp	r3, #4
 80082b2:	dd02      	ble.n	80082ba <tk_del_mpl+0x26>
 80082b4:	f06f 0311 	mvn.w	r3, #17
 80082b8:	e057      	b.n	800836a <tk_del_mpl+0xd6>
	CHECK_DISPATCH();
 80082ba:	4b2e      	ldr	r3, [pc, #184]	@ (8008374 <tk_del_mpl+0xe0>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d10d      	bne.n	80082de <tk_del_mpl+0x4a>
 80082c2:	f7ff fd55 	bl	8007d70 <knl_isTaskIndependent>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d108      	bne.n	80082de <tk_del_mpl+0x4a>
 80082cc:	4b2a      	ldr	r3, [pc, #168]	@ (8008378 <tk_del_mpl+0xe4>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d004      	beq.n	80082de <tk_del_mpl+0x4a>
 80082d4:	f005 fa0f 	bl	800d6f6 <get_basepri>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d002      	beq.n	80082e4 <tk_del_mpl+0x50>
 80082de:	f06f 0318 	mvn.w	r3, #24
 80082e2:	e042      	b.n	800836a <tk_del_mpl+0xd6>

	mplcb = get_mplcb(mplid);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	3b01      	subs	r3, #1
 80082e8:	2234      	movs	r2, #52	@ 0x34
 80082ea:	fb02 f303 	mul.w	r3, r2, r3
 80082ee:	4a23      	ldr	r2, [pc, #140]	@ (800837c <tk_del_mpl+0xe8>)
 80082f0:	4413      	add	r3, r2
 80082f2:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 80082f4:	f005 fa0b 	bl	800d70e <disint>
 80082f8:	60f8      	str	r0, [r7, #12]
	if ( mplcb->mplid == 0 ) {
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d103      	bne.n	800830a <tk_del_mpl+0x76>
		ercd = E_NOEXS;
 8008302:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 8008306:	617b      	str	r3, [r7, #20]
 8008308:	e011      	b.n	800832e <tk_del_mpl+0x9a>
	} else {
		mempool = mplcb->mempool;
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800830e:	61fb      	str	r3, [r7, #28]
		memattr = mplcb->mplatr;
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	61bb      	str	r3, [r7, #24]

		/* Free wait state of task (E_DLT) */
		knl_wait_delete(&mplcb->wait_queue);
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	4618      	mov	r0, r3
 800831a:	f004 fe43 	bl	800cfa4 <knl_wait_delete>

		/* Return to FreeQue */
		QueInsert(&mplcb->wait_queue, &knl_free_mplcb);
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	4917      	ldr	r1, [pc, #92]	@ (8008380 <tk_del_mpl+0xec>)
 8008322:	4618      	mov	r0, r3
 8008324:	f7ff fcf0 	bl	8007d08 <QueInsert>
		mplcb->mplid = 0;
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	2200      	movs	r2, #0
 800832c:	609a      	str	r2, [r3, #8]
	}
	END_CRITICAL_SECTION;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d10b      	bne.n	800834c <tk_del_mpl+0xb8>
 8008334:	4b10      	ldr	r3, [pc, #64]	@ (8008378 <tk_del_mpl+0xe4>)
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	4b12      	ldr	r3, [pc, #72]	@ (8008384 <tk_del_mpl+0xf0>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	429a      	cmp	r2, r3
 800833e:	d005      	beq.n	800834c <tk_del_mpl+0xb8>
 8008340:	4b0c      	ldr	r3, [pc, #48]	@ (8008374 <tk_del_mpl+0xe0>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d101      	bne.n	800834c <tk_del_mpl+0xb8>
 8008348:	f7fb faaa 	bl	80038a0 <knl_dispatch>
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f005 f9c6 	bl	800d6de <set_basepri>

#if USE_IMALLOC
	if ( (ercd == E_OK) && ((memattr & TA_USERBUF) == 0) ) {
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d107      	bne.n	8008368 <tk_del_mpl+0xd4>
 8008358:	69bb      	ldr	r3, [r7, #24]
 800835a:	f003 0320 	and.w	r3, r3, #32
 800835e:	2b00      	cmp	r3, #0
 8008360:	d102      	bne.n	8008368 <tk_del_mpl+0xd4>
		knl_Ifree(mempool);
 8008362:	69f8      	ldr	r0, [r7, #28]
 8008364:	f7ff f85e 	bl	8007424 <knl_Ifree>
	}
#endif

	return ercd;
 8008368:	697b      	ldr	r3, [r7, #20]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3720      	adds	r7, #32
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	2400186c 	.word	0x2400186c
 8008378:	24001870 	.word	0x24001870
 800837c:	2400146c 	.word	0x2400146c
 8008380:	2400153c 	.word	0x2400153c
 8008384:	24001874 	.word	0x24001874

08008388 <mpl_chg_pri>:
/*
 * Processing if the priority of wait task changes.
 *	You need to execute with interrupt disable.
 */
LOCAL void mpl_chg_pri( TCB *tcb, INT oldpri )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
	MPLCB	*mplcb;

	mplcb = get_mplcb(tcb->wid);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008396:	3b01      	subs	r3, #1
 8008398:	2234      	movs	r2, #52	@ 0x34
 800839a:	fb02 f303 	mul.w	r3, r2, r3
 800839e:	4a08      	ldr	r2, [pc, #32]	@ (80083c0 <mpl_chg_pri+0x38>)
 80083a0:	4413      	add	r3, r2
 80083a2:	60fb      	str	r3, [r7, #12]
	if ( oldpri >= 0 ) {
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	db03      	blt.n	80083b2 <mpl_chg_pri+0x2a>
		/* Reorder wait line */
		knl_gcb_change_priority((GCB*)mplcb, tcb);
 80083aa:	6879      	ldr	r1, [r7, #4]
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f004 fe5d 	bl	800d06c <knl_gcb_change_priority>
	}

	/* From the new top task of a wait queue, free the assign
	   wait of memory blocks as much as possible. */
	knl_mpl_wakeup(mplcb);
 80083b2:	68f8      	ldr	r0, [r7, #12]
 80083b4:	f7ff fe63 	bl	800807e <knl_mpl_wakeup>
}
 80083b8:	bf00      	nop
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	2400146c 	.word	0x2400146c

080083c4 <mpl_rel_wai>:

/*
 * Processing if the wait task is freed
 */
LOCAL void mpl_rel_wai( TCB *tcb )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b082      	sub	sp, #8
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
	mpl_chg_pri(tcb, -1);
 80083cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f7ff ffd9 	bl	8008388 <mpl_chg_pri>
}
 80083d6:	bf00      	nop
 80083d8:	3708      	adds	r7, #8
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
	...

080083e0 <tk_get_mpl>:

/*
 * Get variable size memory block 
 */
SYSCALL ER tk_get_mpl( ID mplid, SZ blksz, void **p_blk, TMO tmout )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b088      	sub	sp, #32
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
 80083ec:	603b      	str	r3, [r7, #0]
	MPLCB	*mplcb;
	void	*blk = NULL;
 80083ee:	2300      	movs	r3, #0
 80083f0:	61fb      	str	r3, [r7, #28]
	ER	ercd = E_OK;
 80083f2:	2300      	movs	r3, #0
 80083f4:	613b      	str	r3, [r7, #16]

	CHECK_MPLID(mplid);
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	dd02      	ble.n	8008402 <tk_get_mpl+0x22>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2b04      	cmp	r3, #4
 8008400:	dd02      	ble.n	8008408 <tk_get_mpl+0x28>
 8008402:	f06f 0311 	mvn.w	r3, #17
 8008406:	e08c      	b.n	8008522 <tk_get_mpl+0x142>
	CHECK_PAR(blksz > 0 && blksz <= MAX_ALLOCATE);
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	2b00      	cmp	r3, #0
 800840c:	dd03      	ble.n	8008416 <tk_get_mpl+0x36>
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	4a46      	ldr	r2, [pc, #280]	@ (800852c <tk_get_mpl+0x14c>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d902      	bls.n	800841c <tk_get_mpl+0x3c>
 8008416:	f06f 0310 	mvn.w	r3, #16
 800841a:	e082      	b.n	8008522 <tk_get_mpl+0x142>
	CHECK_TMOUT(tmout);
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008422:	da02      	bge.n	800842a <tk_get_mpl+0x4a>
 8008424:	f06f 0310 	mvn.w	r3, #16
 8008428:	e07b      	b.n	8008522 <tk_get_mpl+0x142>
	CHECK_DISPATCH();
 800842a:	4b41      	ldr	r3, [pc, #260]	@ (8008530 <tk_get_mpl+0x150>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d10d      	bne.n	800844e <tk_get_mpl+0x6e>
 8008432:	f7ff fc9d 	bl	8007d70 <knl_isTaskIndependent>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d108      	bne.n	800844e <tk_get_mpl+0x6e>
 800843c:	4b3d      	ldr	r3, [pc, #244]	@ (8008534 <tk_get_mpl+0x154>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d004      	beq.n	800844e <tk_get_mpl+0x6e>
 8008444:	f005 f957 	bl	800d6f6 <get_basepri>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d002      	beq.n	8008454 <tk_get_mpl+0x74>
 800844e:	f06f 0318 	mvn.w	r3, #24
 8008452:	e066      	b.n	8008522 <tk_get_mpl+0x142>

	mplcb = get_mplcb(mplid);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	3b01      	subs	r3, #1
 8008458:	2234      	movs	r2, #52	@ 0x34
 800845a:	fb02 f303 	mul.w	r3, r2, r3
 800845e:	4a36      	ldr	r2, [pc, #216]	@ (8008538 <tk_get_mpl+0x158>)
 8008460:	4413      	add	r3, r2
 8008462:	61bb      	str	r3, [r7, #24]
	blksz = roundSize(blksz);
 8008464:	68b8      	ldr	r0, [r7, #8]
 8008466:	f7ff fc93 	bl	8007d90 <roundSize>
 800846a:	60b8      	str	r0, [r7, #8]

	BEGIN_CRITICAL_SECTION;
 800846c:	f005 f94f 	bl	800d70e <disint>
 8008470:	6178      	str	r0, [r7, #20]
	if ( mplcb->mplid == 0 ) {
 8008472:	69bb      	ldr	r3, [r7, #24]
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d103      	bne.n	8008482 <tk_get_mpl+0xa2>
		ercd = E_NOEXS;
 800847a:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 800847e:	613b      	str	r3, [r7, #16]
		goto error_exit;
 8008480:	e03c      	b.n	80084fc <tk_get_mpl+0x11c>
	}

#if CHK_PAR
	if ( blksz > mplcb->mplsz ) {
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	695b      	ldr	r3, [r3, #20]
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	429a      	cmp	r2, r3
 800848a:	dd03      	ble.n	8008494 <tk_get_mpl+0xb4>
		ercd = E_PAR;
 800848c:	f06f 0310 	mvn.w	r3, #16
 8008490:	613b      	str	r3, [r7, #16]
		goto error_exit;
 8008492:	e033      	b.n	80084fc <tk_get_mpl+0x11c>
	}
#endif

	if ( knl_gcb_top_of_wait_queue((GCB*)mplcb, knl_ctxtsk) == knl_ctxtsk
 8008494:	4b27      	ldr	r3, [pc, #156]	@ (8008534 <tk_get_mpl+0x154>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4619      	mov	r1, r3
 800849a:	69b8      	ldr	r0, [r7, #24]
 800849c:	f004 fdf8 	bl	800d090 <knl_gcb_top_of_wait_queue>
 80084a0:	4602      	mov	r2, r0
 80084a2:	4b24      	ldr	r3, [pc, #144]	@ (8008534 <tk_get_mpl+0x154>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d10b      	bne.n	80084c2 <tk_get_mpl+0xe2>
	  && (blk = knl_get_blk(mplcb, blksz)) != NULL ) {
 80084aa:	68b9      	ldr	r1, [r7, #8]
 80084ac:	69b8      	ldr	r0, [r7, #24]
 80084ae:	f7ff fd2e 	bl	8007f0e <knl_get_blk>
 80084b2:	61f8      	str	r0, [r7, #28]
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d003      	beq.n	80084c2 <tk_get_mpl+0xe2>
		/* Get memory block */
		*p_blk = blk;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	69fa      	ldr	r2, [r7, #28]
 80084be:	601a      	str	r2, [r3, #0]
 80084c0:	e01c      	b.n	80084fc <tk_get_mpl+0x11c>
	} else {
		/* Ready for wait */
		knl_ctxtsk->wspec = ( (mplcb->mplatr & TA_TPRI) != 0 )?
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	f003 0301 	and.w	r3, r3, #1
					&knl_wspec_mpl_tpri: &knl_wspec_mpl_tfifo;
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d001      	beq.n	80084d2 <tk_get_mpl+0xf2>
 80084ce:	4a1b      	ldr	r2, [pc, #108]	@ (800853c <tk_get_mpl+0x15c>)
 80084d0:	e000      	b.n	80084d4 <tk_get_mpl+0xf4>
 80084d2:	4a1b      	ldr	r2, [pc, #108]	@ (8008540 <tk_get_mpl+0x160>)
		knl_ctxtsk->wspec = ( (mplcb->mplatr & TA_TPRI) != 0 )?
 80084d4:	4b17      	ldr	r3, [pc, #92]	@ (8008534 <tk_get_mpl+0x154>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	62da      	str	r2, [r3, #44]	@ 0x2c
		knl_ctxtsk->wercd = &ercd;
 80084da:	4b16      	ldr	r3, [pc, #88]	@ (8008534 <tk_get_mpl+0x154>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f107 0210 	add.w	r2, r7, #16
 80084e2:	63da      	str	r2, [r3, #60]	@ 0x3c
		knl_ctxtsk->winfo.mpl.blksz = blksz;
 80084e4:	4b13      	ldr	r3, [pc, #76]	@ (8008534 <tk_get_mpl+0x154>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	68ba      	ldr	r2, [r7, #8]
 80084ea:	641a      	str	r2, [r3, #64]	@ 0x40
		knl_ctxtsk->winfo.mpl.p_blk = p_blk;
 80084ec:	4b11      	ldr	r3, [pc, #68]	@ (8008534 <tk_get_mpl+0x154>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	645a      	str	r2, [r3, #68]	@ 0x44
		knl_gcb_make_wait((GCB*)mplcb, tmout);
 80084f4:	6839      	ldr	r1, [r7, #0]
 80084f6:	69b8      	ldr	r0, [r7, #24]
 80084f8:	f004 fd82 	bl	800d000 <knl_gcb_make_wait>
	}

    error_exit:
	END_CRITICAL_SECTION;
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d10b      	bne.n	800851a <tk_get_mpl+0x13a>
 8008502:	4b0c      	ldr	r3, [pc, #48]	@ (8008534 <tk_get_mpl+0x154>)
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	4b0f      	ldr	r3, [pc, #60]	@ (8008544 <tk_get_mpl+0x164>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	429a      	cmp	r2, r3
 800850c:	d005      	beq.n	800851a <tk_get_mpl+0x13a>
 800850e:	4b08      	ldr	r3, [pc, #32]	@ (8008530 <tk_get_mpl+0x150>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d101      	bne.n	800851a <tk_get_mpl+0x13a>
 8008516:	f7fb f9c3 	bl	80038a0 <knl_dispatch>
 800851a:	6978      	ldr	r0, [r7, #20]
 800851c:	f005 f8df 	bl	800d6de <set_basepri>

	return ercd;
 8008520:	693b      	ldr	r3, [r7, #16]
}
 8008522:	4618      	mov	r0, r3
 8008524:	3720      	adds	r7, #32
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	7ffffff8 	.word	0x7ffffff8
 8008530:	2400186c 	.word	0x2400186c
 8008534:	24001870 	.word	0x24001870
 8008538:	2400146c 	.word	0x2400146c
 800853c:	0800ee64 	.word	0x0800ee64
 8008540:	0800ee58 	.word	0x0800ee58
 8008544:	24001874 	.word	0x24001874

08008548 <tk_rel_mpl>:

/*
 * Return variable size memory block 
 */
SYSCALL ER tk_rel_mpl( ID mplid, void *blk )
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
	MPLCB	*mplcb;
	ER	ercd = E_OK;
 8008552:	2300      	movs	r3, #0
 8008554:	617b      	str	r3, [r7, #20]

	CHECK_MPLID(mplid);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2b00      	cmp	r3, #0
 800855a:	dd02      	ble.n	8008562 <tk_rel_mpl+0x1a>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2b04      	cmp	r3, #4
 8008560:	dd02      	ble.n	8008568 <tk_rel_mpl+0x20>
 8008562:	f06f 0311 	mvn.w	r3, #17
 8008566:	e058      	b.n	800861a <tk_rel_mpl+0xd2>
	CHECK_DISPATCH();
 8008568:	4b2e      	ldr	r3, [pc, #184]	@ (8008624 <tk_rel_mpl+0xdc>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10d      	bne.n	800858c <tk_rel_mpl+0x44>
 8008570:	f7ff fbfe 	bl	8007d70 <knl_isTaskIndependent>
 8008574:	4603      	mov	r3, r0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d108      	bne.n	800858c <tk_rel_mpl+0x44>
 800857a:	4b2b      	ldr	r3, [pc, #172]	@ (8008628 <tk_rel_mpl+0xe0>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d004      	beq.n	800858c <tk_rel_mpl+0x44>
 8008582:	f005 f8b8 	bl	800d6f6 <get_basepri>
 8008586:	4603      	mov	r3, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	d002      	beq.n	8008592 <tk_rel_mpl+0x4a>
 800858c:	f06f 0318 	mvn.w	r3, #24
 8008590:	e043      	b.n	800861a <tk_rel_mpl+0xd2>

	mplcb = get_mplcb(mplid);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	3b01      	subs	r3, #1
 8008596:	2234      	movs	r2, #52	@ 0x34
 8008598:	fb02 f303 	mul.w	r3, r2, r3
 800859c:	4a23      	ldr	r2, [pc, #140]	@ (800862c <tk_rel_mpl+0xe4>)
 800859e:	4413      	add	r3, r2
 80085a0:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 80085a2:	f005 f8b4 	bl	800d70e <disint>
 80085a6:	60f8      	str	r0, [r7, #12]
	if ( mplcb->mplid == 0 ) {
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d103      	bne.n	80085b8 <tk_rel_mpl+0x70>
		ercd = E_NOEXS;
 80085b0:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 80085b4:	617b      	str	r3, [r7, #20]
		goto error_exit;
 80085b6:	e01d      	b.n	80085f4 <tk_rel_mpl+0xac>
	}
#if CHK_PAR
	if ( (B*)blk < (B*)mplcb->mempool || (B*)blk > (B*)mplcb->mempool + mplcb->mplsz ) {
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085bc:	683a      	ldr	r2, [r7, #0]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d307      	bcc.n	80085d2 <tk_rel_mpl+0x8a>
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085c6:	693a      	ldr	r2, [r7, #16]
 80085c8:	6952      	ldr	r2, [r2, #20]
 80085ca:	4413      	add	r3, r2
 80085cc:	683a      	ldr	r2, [r7, #0]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d903      	bls.n	80085da <tk_rel_mpl+0x92>
		ercd = E_PAR;
 80085d2:	f06f 0310 	mvn.w	r3, #16
 80085d6:	617b      	str	r3, [r7, #20]
		goto error_exit;
 80085d8:	e00c      	b.n	80085f4 <tk_rel_mpl+0xac>
	}
#endif

	/* Free memory block */
	ercd = knl_rel_blk(mplcb, blk);
 80085da:	6839      	ldr	r1, [r7, #0]
 80085dc:	6938      	ldr	r0, [r7, #16]
 80085de:	f7ff fce3 	bl	8007fa8 <knl_rel_blk>
 80085e2:	6178      	str	r0, [r7, #20]
	if ( ercd < E_OK ) {
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	db03      	blt.n	80085f2 <tk_rel_mpl+0xaa>
		goto error_exit;
	}

	/* Assign memory block to waiting task */
	knl_mpl_wakeup(mplcb);
 80085ea:	6938      	ldr	r0, [r7, #16]
 80085ec:	f7ff fd47 	bl	800807e <knl_mpl_wakeup>
 80085f0:	e000      	b.n	80085f4 <tk_rel_mpl+0xac>
		goto error_exit;
 80085f2:	bf00      	nop

    error_exit:
	END_CRITICAL_SECTION;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d10b      	bne.n	8008612 <tk_rel_mpl+0xca>
 80085fa:	4b0b      	ldr	r3, [pc, #44]	@ (8008628 <tk_rel_mpl+0xe0>)
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	4b0c      	ldr	r3, [pc, #48]	@ (8008630 <tk_rel_mpl+0xe8>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	429a      	cmp	r2, r3
 8008604:	d005      	beq.n	8008612 <tk_rel_mpl+0xca>
 8008606:	4b07      	ldr	r3, [pc, #28]	@ (8008624 <tk_rel_mpl+0xdc>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d101      	bne.n	8008612 <tk_rel_mpl+0xca>
 800860e:	f7fb f947 	bl	80038a0 <knl_dispatch>
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f005 f863 	bl	800d6de <set_basepri>

	return ercd;
 8008618:	697b      	ldr	r3, [r7, #20]
}
 800861a:	4618      	mov	r0, r3
 800861c:	3718      	adds	r7, #24
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	2400186c 	.word	0x2400186c
 8008628:	24001870 	.word	0x24001870
 800862c:	2400146c 	.word	0x2400146c
 8008630:	24001874 	.word	0x24001874

08008634 <tk_ref_mpl>:
#ifdef USE_FUNC_TK_REF_MPL
/*
 * Refer variable size memory pool state
 */
SYSCALL ER tk_ref_mpl( ID mplid, T_RMPL *pk_rmpl )
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b08a      	sub	sp, #40	@ 0x28
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
	MPLCB	*mplcb;
	QUEUE	*fq, *q;
	W	frsz, blksz;
	ER	ercd = E_OK;
 800863e:	2300      	movs	r3, #0
 8008640:	61bb      	str	r3, [r7, #24]

	CHECK_MPLID(mplid);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2b00      	cmp	r3, #0
 8008646:	dd02      	ble.n	800864e <tk_ref_mpl+0x1a>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2b04      	cmp	r3, #4
 800864c:	dd02      	ble.n	8008654 <tk_ref_mpl+0x20>
 800864e:	f06f 0311 	mvn.w	r3, #17
 8008652:	e073      	b.n	800873c <tk_ref_mpl+0x108>
	CHECK_DISPATCH();
 8008654:	4b3b      	ldr	r3, [pc, #236]	@ (8008744 <tk_ref_mpl+0x110>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d10d      	bne.n	8008678 <tk_ref_mpl+0x44>
 800865c:	f7ff fb88 	bl	8007d70 <knl_isTaskIndependent>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d108      	bne.n	8008678 <tk_ref_mpl+0x44>
 8008666:	4b38      	ldr	r3, [pc, #224]	@ (8008748 <tk_ref_mpl+0x114>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d004      	beq.n	8008678 <tk_ref_mpl+0x44>
 800866e:	f005 f842 	bl	800d6f6 <get_basepri>
 8008672:	4603      	mov	r3, r0
 8008674:	2b00      	cmp	r3, #0
 8008676:	d002      	beq.n	800867e <tk_ref_mpl+0x4a>
 8008678:	f06f 0318 	mvn.w	r3, #24
 800867c:	e05e      	b.n	800873c <tk_ref_mpl+0x108>

	mplcb = get_mplcb(mplid);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	3b01      	subs	r3, #1
 8008682:	2234      	movs	r2, #52	@ 0x34
 8008684:	fb02 f303 	mul.w	r3, r2, r3
 8008688:	4a30      	ldr	r2, [pc, #192]	@ (800874c <tk_ref_mpl+0x118>)
 800868a:	4413      	add	r3, r2
 800868c:	617b      	str	r3, [r7, #20]

	BEGIN_CRITICAL_SECTION;
 800868e:	f005 f83e 	bl	800d70e <disint>
 8008692:	6138      	str	r0, [r7, #16]
	if ( mplcb->mplid == 0 ) {
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	689b      	ldr	r3, [r3, #8]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d103      	bne.n	80086a4 <tk_ref_mpl+0x70>
		ercd = E_NOEXS;
 800869c:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 80086a0:	61bb      	str	r3, [r7, #24]
 80086a2:	e038      	b.n	8008716 <tk_ref_mpl+0xe2>
	} else {
		pk_rmpl->exinf = mplcb->exinf;
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	68da      	ldr	r2, [r3, #12]
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	601a      	str	r2, [r3, #0]
		pk_rmpl->wtsk  = knl_wait_tskid(&mplcb->wait_queue);
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	4618      	mov	r0, r3
 80086b0:	f004 fc93 	bl	800cfda <knl_wait_tskid>
 80086b4:	4602      	mov	r2, r0
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	605a      	str	r2, [r3, #4]
		frsz = 0;
 80086ba:	2300      	movs	r3, #0
 80086bc:	61fb      	str	r3, [r7, #28]
		for ( fq = mplcb->freeque.next; fq != &mplcb->freeque; fq = fq->next ) {
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	6a1b      	ldr	r3, [r3, #32]
 80086c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80086c4:	e019      	b.n	80086fa <tk_ref_mpl+0xc6>
			blksz = FreeSize(fq);
 80086c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c8:	3308      	adds	r3, #8
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	60fb      	str	r3, [r7, #12]
			frsz += blksz;
 80086ce:	69fa      	ldr	r2, [r7, #28]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	4413      	add	r3, r2
 80086d4:	61fb      	str	r3, [r7, #28]
			for ( q = (fq+1)->next; q != NULL; q = q->next ) {
 80086d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d8:	3308      	adds	r3, #8
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	623b      	str	r3, [r7, #32]
 80086de:	e006      	b.n	80086ee <tk_ref_mpl+0xba>
				frsz += blksz;
 80086e0:	69fa      	ldr	r2, [r7, #28]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	4413      	add	r3, r2
 80086e6:	61fb      	str	r3, [r7, #28]
			for ( q = (fq+1)->next; q != NULL; q = q->next ) {
 80086e8:	6a3b      	ldr	r3, [r7, #32]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	623b      	str	r3, [r7, #32]
 80086ee:	6a3b      	ldr	r3, [r7, #32]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d1f5      	bne.n	80086e0 <tk_ref_mpl+0xac>
		for ( fq = mplcb->freeque.next; fq != &mplcb->freeque; fq = fq->next ) {
 80086f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	3320      	adds	r3, #32
 80086fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008700:	429a      	cmp	r2, r3
 8008702:	d1e0      	bne.n	80086c6 <tk_ref_mpl+0x92>
			}
		}
		pk_rmpl->frsz  = frsz;
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	69fa      	ldr	r2, [r7, #28]
 8008708:	609a      	str	r2, [r3, #8]
		pk_rmpl->maxsz = knl_MaxFreeSize(mplcb);
 800870a:	6978      	ldr	r0, [r7, #20]
 800870c:	f7ff fb52 	bl	8007db4 <knl_MaxFreeSize>
 8008710:	4602      	mov	r2, r0
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	60da      	str	r2, [r3, #12]
	}
	END_CRITICAL_SECTION;
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d10b      	bne.n	8008734 <tk_ref_mpl+0x100>
 800871c:	4b0a      	ldr	r3, [pc, #40]	@ (8008748 <tk_ref_mpl+0x114>)
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	4b0b      	ldr	r3, [pc, #44]	@ (8008750 <tk_ref_mpl+0x11c>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	429a      	cmp	r2, r3
 8008726:	d005      	beq.n	8008734 <tk_ref_mpl+0x100>
 8008728:	4b06      	ldr	r3, [pc, #24]	@ (8008744 <tk_ref_mpl+0x110>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d101      	bne.n	8008734 <tk_ref_mpl+0x100>
 8008730:	f7fb f8b6 	bl	80038a0 <knl_dispatch>
 8008734:	6938      	ldr	r0, [r7, #16]
 8008736:	f004 ffd2 	bl	800d6de <set_basepri>

	return ercd;
 800873a:	69bb      	ldr	r3, [r7, #24]
}
 800873c:	4618      	mov	r0, r3
 800873e:	3728      	adds	r7, #40	@ 0x28
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	2400186c 	.word	0x2400186c
 8008748:	24001870 	.word	0x24001870
 800874c:	2400146c 	.word	0x2400146c
 8008750:	24001874 	.word	0x24001874

08008754 <QueInit>:
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	605a      	str	r2, [r3, #4]
}
 8008768:	bf00      	nop
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	bc80      	pop	{r7}
 8008770:	4770      	bx	lr

08008772 <isQueEmpty>:
{
 8008772:	b480      	push	{r7}
 8008774:	b083      	sub	sp, #12
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
	return ( que->next == que )? TRUE: FALSE;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	429a      	cmp	r2, r3
 8008782:	bf0c      	ite	eq
 8008784:	2301      	moveq	r3, #1
 8008786:	2300      	movne	r3, #0
 8008788:	b2db      	uxtb	r3, r3
}
 800878a:	4618      	mov	r0, r3
 800878c:	370c      	adds	r7, #12
 800878e:	46bd      	mov	sp, r7
 8008790:	bc80      	pop	{r7}
 8008792:	4770      	bx	lr

08008794 <QueInsert>:
{
 8008794:	b480      	push	{r7}
 8008796:	b083      	sub	sp, #12
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	685a      	ldr	r2, [r3, #4]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	605a      	str	r2, [r3, #4]
	entry->next = que;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	683a      	ldr	r2, [r7, #0]
 80087aa:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	605a      	str	r2, [r3, #4]
}
 80087ba:	bf00      	nop
 80087bc:	370c      	adds	r7, #12
 80087be:	46bd      	mov	sp, r7
 80087c0:	bc80      	pop	{r7}
 80087c2:	4770      	bx	lr

080087c4 <QueRemoveNext>:
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
	if ( que->next == que ) {
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	687a      	ldr	r2, [r7, #4]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d101      	bne.n	80087da <QueRemoveNext+0x16>
		return NULL;
 80087d6:	2300      	movs	r3, #0
 80087d8:	e00b      	b.n	80087f2 <QueRemoveNext+0x2e>
	entry = que->next;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	60fb      	str	r3, [r7, #12]
	que->next = (struct queue*)entry->next;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	601a      	str	r2, [r3, #0]
	entry->next->prev = que;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	605a      	str	r2, [r3, #4]
	return entry;
 80087f0:	68fb      	ldr	r3, [r7, #12]
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3714      	adds	r7, #20
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bc80      	pop	{r7}
 80087fa:	4770      	bx	lr

080087fc <knl_isTaskIndependent>:
{
 80087fc:	b480      	push	{r7}
 80087fe:	af00      	add	r7, sp, #0
	return ( knl_taskindp > 0 )? TRUE: FALSE;
 8008800:	4b05      	ldr	r3, [pc, #20]	@ (8008818 <knl_isTaskIndependent+0x1c>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	bfcc      	ite	gt
 8008808:	2301      	movgt	r3, #1
 800880a:	2300      	movle	r3, #0
 800880c:	b2db      	uxtb	r3, r3
}
 800880e:	4618      	mov	r0, r3
 8008810:	46bd      	mov	sp, r7
 8008812:	bc80      	pop	{r7}
 8008814:	4770      	bx	lr
 8008816:	bf00      	nop
 8008818:	240029f8 	.word	0x240029f8

0800881c <knl_mbf_free>:
/*
 * Check message buffer free space
 *	If 'msgsz' message is able to be stored, return TRUE.
 */
Inline BOOL knl_mbf_free( MBFCB *mbfcb, INT msgsz )
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
	return ( HEADERSZ + (UW)msgsz <= (UW)mbfcb->frbufsz );
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	3304      	adds	r3, #4
 800882a:	687a      	ldr	r2, [r7, #4]
 800882c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800882e:	4293      	cmp	r3, r2
 8008830:	bf94      	ite	ls
 8008832:	2301      	movls	r3, #1
 8008834:	2300      	movhi	r3, #0
 8008836:	b2db      	uxtb	r3, r3
}
 8008838:	4618      	mov	r0, r3
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	bc80      	pop	{r7}
 8008840:	4770      	bx	lr

08008842 <knl_mbf_empty>:

/*
 * If message buffer is empty, return TRUE.
 */
Inline BOOL knl_mbf_empty( MBFCB *mbfcb )
{
 8008842:	b480      	push	{r7}
 8008844:	b083      	sub	sp, #12
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
	return ( mbfcb->frbufsz == mbfcb->bufsz );
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	69db      	ldr	r3, [r3, #28]
 8008852:	429a      	cmp	r2, r3
 8008854:	bf0c      	ite	eq
 8008856:	2301      	moveq	r3, #1
 8008858:	2300      	movne	r3, #0
 800885a:	b2db      	uxtb	r3, r3
}
 800885c:	4618      	mov	r0, r3
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	bc80      	pop	{r7}
 8008864:	4770      	bx	lr
	...

08008868 <knl_messagebuffer_initialize>:

/*
 * Initialization of message buffer control block 
 */
EXPORT ER knl_messagebuffer_initialize( void )
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
	if ( NUM_MBFID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_mbfcb);
 800886e:	480e      	ldr	r0, [pc, #56]	@ (80088a8 <knl_messagebuffer_initialize+0x40>)
 8008870:	f7ff ff70 	bl	8008754 <QueInit>
	end = knl_mbfcb_table + NUM_MBFID;
 8008874:	4b0d      	ldr	r3, [pc, #52]	@ (80088ac <knl_messagebuffer_initialize+0x44>)
 8008876:	603b      	str	r3, [r7, #0]
	for ( mbfcb = knl_mbfcb_table; mbfcb < end; mbfcb++ ) {
 8008878:	4b0d      	ldr	r3, [pc, #52]	@ (80088b0 <knl_messagebuffer_initialize+0x48>)
 800887a:	607b      	str	r3, [r7, #4]
 800887c:	e00a      	b.n	8008894 <knl_messagebuffer_initialize+0x2c>
		mbfcb->mbfid = 0;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	609a      	str	r2, [r3, #8]
		QueInsert(&mbfcb->send_queue, &knl_free_mbfcb);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4908      	ldr	r1, [pc, #32]	@ (80088a8 <knl_messagebuffer_initialize+0x40>)
 8008888:	4618      	mov	r0, r3
 800888a:	f7ff ff83 	bl	8008794 <QueInsert>
	for ( mbfcb = knl_mbfcb_table; mbfcb < end; mbfcb++ ) {
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	3334      	adds	r3, #52	@ 0x34
 8008892:	607b      	str	r3, [r7, #4]
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	429a      	cmp	r2, r3
 800889a:	d3f0      	bcc.n	800887e <knl_messagebuffer_initialize+0x16>
	}

	return E_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	24001614 	.word	0x24001614
 80088ac:	24001614 	.word	0x24001614
 80088b0:	24001544 	.word	0x24001544

080088b4 <knl_msg_to_mbf>:

/*
 * Store the message to message buffer.
 */
LOCAL void knl_msg_to_mbf( MBFCB *mbfcb, CONST void *msg, INT msgsz )
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b088      	sub	sp, #32
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	60f8      	str	r0, [r7, #12]
 80088bc:	60b9      	str	r1, [r7, #8]
 80088be:	607a      	str	r2, [r7, #4]
	W	tail = mbfcb->tail;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088c4:	61fb      	str	r3, [r7, #28]
	VB	*buffer = mbfcb->buffer;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088ca:	61bb      	str	r3, [r7, #24]
	W	remsz;

	mbfcb->frbufsz -= (W)(HEADERSZ + ROUNDSZ(msgsz));
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088d0:	461a      	mov	r2, r3
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	3303      	adds	r3, #3
 80088d6:	f023 0303 	bic.w	r3, r3, #3
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	3b04      	subs	r3, #4
 80088de:	461a      	mov	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	625a      	str	r2, [r3, #36]	@ 0x24

	*(HEADER*)&buffer[tail] = msgsz;
 80088e4:	69fb      	ldr	r3, [r7, #28]
 80088e6:	69ba      	ldr	r2, [r7, #24]
 80088e8:	4413      	add	r3, r2
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	601a      	str	r2, [r3, #0]
	tail += HEADERSZ;
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	3304      	adds	r3, #4
 80088f2:	61fb      	str	r3, [r7, #28]
	if ( tail >= mbfcb->bufsz ) {
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	69db      	ldr	r3, [r3, #28]
 80088f8:	69fa      	ldr	r2, [r7, #28]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	db01      	blt.n	8008902 <knl_msg_to_mbf+0x4e>
		tail = 0;
 80088fe:	2300      	movs	r3, #0
 8008900:	61fb      	str	r3, [r7, #28]
	}

	if ( (remsz = mbfcb->bufsz - tail) < (W)msgsz ) {
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	69da      	ldr	r2, [r3, #28]
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	617b      	str	r3, [r7, #20]
 800890c:	697a      	ldr	r2, [r7, #20]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	429a      	cmp	r2, r3
 8008912:	da11      	bge.n	8008938 <knl_msg_to_mbf+0x84>
		knl_memcpy(&buffer[tail], msg, (SZ)remsz);
 8008914:	69fb      	ldr	r3, [r7, #28]
 8008916:	69ba      	ldr	r2, [r7, #24]
 8008918:	4413      	add	r3, r2
 800891a:	697a      	ldr	r2, [r7, #20]
 800891c:	68b9      	ldr	r1, [r7, #8]
 800891e:	4618      	mov	r0, r3
 8008920:	f004 fc2a 	bl	800d178 <knl_memcpy>
		msg = (VB*)msg + remsz;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	68ba      	ldr	r2, [r7, #8]
 8008928:	4413      	add	r3, r2
 800892a:	60bb      	str	r3, [r7, #8]
		msgsz -= (INT)remsz;
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	607b      	str	r3, [r7, #4]
		tail = 0;
 8008934:	2300      	movs	r3, #0
 8008936:	61fb      	str	r3, [r7, #28]
	}
	knl_memcpy(&buffer[tail], msg, (SZ)msgsz);
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	69ba      	ldr	r2, [r7, #24]
 800893c:	4413      	add	r3, r2
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	68b9      	ldr	r1, [r7, #8]
 8008942:	4618      	mov	r0, r3
 8008944:	f004 fc18 	bl	800d178 <knl_memcpy>
	tail += (W)ROUNDSZ(msgsz);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	3303      	adds	r3, #3
 800894c:	f023 0303 	bic.w	r3, r3, #3
 8008950:	69fa      	ldr	r2, [r7, #28]
 8008952:	4413      	add	r3, r2
 8008954:	61fb      	str	r3, [r7, #28]
	if ( tail >= mbfcb->bufsz ) {
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	69db      	ldr	r3, [r3, #28]
 800895a:	69fa      	ldr	r2, [r7, #28]
 800895c:	429a      	cmp	r2, r3
 800895e:	db01      	blt.n	8008964 <knl_msg_to_mbf+0xb0>
		tail = 0;
 8008960:	2300      	movs	r3, #0
 8008962:	61fb      	str	r3, [r7, #28]
	}

	mbfcb->tail = tail;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	69fa      	ldr	r2, [r7, #28]
 8008968:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800896a:	bf00      	nop
 800896c:	3720      	adds	r7, #32
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <knl_mbf_wakeup>:
/*
 * Accept message and release wait task,
 * as long as there are free message area.
 */
LOCAL void knl_mbf_wakeup( MBFCB *mbfcb )
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b084      	sub	sp, #16
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
	TCB	*top;
	INT	msgsz;

	while ( !isQueEmpty(&mbfcb->send_queue) ) {
 800897a:	e016      	b.n	80089aa <knl_mbf_wakeup+0x38>
		top = (TCB*)mbfcb->send_queue.next;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	60fb      	str	r3, [r7, #12]
		msgsz = top->winfo.smbf.msgsz;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008986:	60bb      	str	r3, [r7, #8]
		if ( !knl_mbf_free(mbfcb, msgsz) ) {
 8008988:	68b9      	ldr	r1, [r7, #8]
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f7ff ff46 	bl	800881c <knl_mbf_free>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d011      	beq.n	80089ba <knl_mbf_wakeup+0x48>
			break;
		}

		/* Store a message from waiting task and release it */
		knl_msg_to_mbf(mbfcb, top->winfo.smbf.msg, msgsz);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800899a:	68ba      	ldr	r2, [r7, #8]
 800899c:	4619      	mov	r1, r3
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f7ff ff88 	bl	80088b4 <knl_msg_to_mbf>
		knl_wait_release_ok(top);
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f004 fa47 	bl	800ce38 <knl_wait_release_ok>
	while ( !isQueEmpty(&mbfcb->send_queue) ) {
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7ff fee0 	bl	8008772 <isQueEmpty>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d0e1      	beq.n	800897c <knl_mbf_wakeup+0xa>
	}
}
 80089b8:	e000      	b.n	80089bc <knl_mbf_wakeup+0x4a>
			break;
 80089ba:	bf00      	nop
}
 80089bc:	bf00      	nop
 80089be:	3710      	adds	r7, #16
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <tk_cre_mbf>:

/*
 * Create message buffer
 */
SYSCALL ID tk_cre_mbf( CONST T_CMBF *pk_cmbf )
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b08a      	sub	sp, #40	@ 0x28
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
#if CHK_RSATR
	const ATR VALID_MBFATR = {
 80089cc:	2321      	movs	r3, #33	@ 0x21
 80089ce:	61fb      	str	r3, [r7, #28]
	ID	mbfid;
	W	bufsz;
	VB	*msgbuf;
	ER	ercd;

	CHECK_RSATR(pk_cmbf->mbfatr, VALID_MBFATR);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	685a      	ldr	r2, [r3, #4]
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	43db      	mvns	r3, r3
 80089d8:	4013      	ands	r3, r2
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d002      	beq.n	80089e4 <tk_cre_mbf+0x20>
 80089de:	f06f 030a 	mvn.w	r3, #10
 80089e2:	e098      	b.n	8008b16 <tk_cre_mbf+0x152>
	CHECK_PAR(pk_cmbf->bufsz >= 0);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	da02      	bge.n	80089f2 <tk_cre_mbf+0x2e>
 80089ec:	f06f 0310 	mvn.w	r3, #16
 80089f0:	e091      	b.n	8008b16 <tk_cre_mbf+0x152>
	CHECK_PAR(pk_cmbf->maxmsz > 0);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	dc02      	bgt.n	8008a00 <tk_cre_mbf+0x3c>
 80089fa:	f06f 0310 	mvn.w	r3, #16
 80089fe:	e08a      	b.n	8008b16 <tk_cre_mbf+0x152>
#if !USE_IMALLOC
	/* TA_USERBUF must be specified if configured in no Imalloc */
	CHECK_PAR((pk_cmbf->mbfatr & TA_USERBUF) != 0);
#endif
	bufsz = (W)ROUNDSZ(pk_cmbf->bufsz);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	3303      	adds	r3, #3
 8008a06:	f023 0303 	bic.w	r3, r3, #3
 8008a0a:	61bb      	str	r3, [r7, #24]

	if ( bufsz > 0 ) {
 8008a0c:	69bb      	ldr	r3, [r7, #24]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	dd1b      	ble.n	8008a4a <tk_cre_mbf+0x86>
#if USE_IMALLOC
		if ( (pk_cmbf->mbfatr & TA_USERBUF) != 0 ) {
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	f003 0320 	and.w	r3, r3, #32
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00b      	beq.n	8008a36 <tk_cre_mbf+0x72>
			/* Size of user buffer must be multiples of sizeof(HEADER) */
			if ( bufsz != pk_cmbf->bufsz ) {
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	69ba      	ldr	r2, [r7, #24]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d002      	beq.n	8008a2e <tk_cre_mbf+0x6a>
				return E_PAR;
 8008a28:	f06f 0310 	mvn.w	r3, #16
 8008a2c:	e073      	b.n	8008b16 <tk_cre_mbf+0x152>
			}
			/* Use user buffer */
			msgbuf = (VB*) pk_cmbf->bufptr;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	627b      	str	r3, [r7, #36]	@ 0x24
 8008a34:	e00b      	b.n	8008a4e <tk_cre_mbf+0x8a>
		} else {
			/* Allocate by kernel */
			msgbuf = knl_Imalloc((UW)bufsz);
 8008a36:	69b8      	ldr	r0, [r7, #24]
 8008a38:	f7fe fc4c 	bl	80072d4 <knl_Imalloc>
 8008a3c:	6278      	str	r0, [r7, #36]	@ 0x24
			if ( msgbuf == NULL ) {
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d104      	bne.n	8008a4e <tk_cre_mbf+0x8a>
				return E_NOMEM;
 8008a44:	f06f 0320 	mvn.w	r3, #32
 8008a48:	e065      	b.n	8008b16 <tk_cre_mbf+0x152>
		}
		/* Use user buffer */
		msgbuf = (VB*) pk_cmbf->bufptr;
#endif
	} else {
		msgbuf = NULL;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	BEGIN_CRITICAL_SECTION;
 8008a4e:	f004 fe5e 	bl	800d70e <disint>
 8008a52:	6178      	str	r0, [r7, #20]
	/* Get control block from FreeQue */
	mbfcb = (MBFCB*)QueRemoveNext(&knl_free_mbfcb);
 8008a54:	4832      	ldr	r0, [pc, #200]	@ (8008b20 <tk_cre_mbf+0x15c>)
 8008a56:	f7ff feb5 	bl	80087c4 <QueRemoveNext>
 8008a5a:	6138      	str	r0, [r7, #16]
	if ( mbfcb == NULL ) {
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d103      	bne.n	8008a6a <tk_cre_mbf+0xa6>
		ercd = E_LIMIT;
 8008a62:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8008a66:	623b      	str	r3, [r7, #32]
 8008a68:	e033      	b.n	8008ad2 <tk_cre_mbf+0x10e>
	} else {
		mbfid = ID_MBF(mbfcb - knl_mbfcb_table);
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	4a2d      	ldr	r2, [pc, #180]	@ (8008b24 <tk_cre_mbf+0x160>)
 8008a6e:	1a9b      	subs	r3, r3, r2
 8008a70:	109b      	asrs	r3, r3, #2
 8008a72:	4a2d      	ldr	r2, [pc, #180]	@ (8008b28 <tk_cre_mbf+0x164>)
 8008a74:	fb02 f303 	mul.w	r3, r2, r3
 8008a78:	3301      	adds	r3, #1
 8008a7a:	60fb      	str	r3, [r7, #12]

		/* Initialize control block */
		QueInit(&mbfcb->send_queue);
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7ff fe68 	bl	8008754 <QueInit>
		mbfcb->mbfid = mbfid;
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	68fa      	ldr	r2, [r7, #12]
 8008a88:	609a      	str	r2, [r3, #8]
		mbfcb->exinf = pk_cmbf->exinf;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	60da      	str	r2, [r3, #12]
		mbfcb->mbfatr = pk_cmbf->mbfatr;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	685a      	ldr	r2, [r3, #4]
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	611a      	str	r2, [r3, #16]
		QueInit(&mbfcb->recv_queue);
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	3314      	adds	r3, #20
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7ff fe58 	bl	8008754 <QueInit>
		mbfcb->buffer = msgbuf;
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008aa8:	631a      	str	r2, [r3, #48]	@ 0x30
		mbfcb->bufsz = mbfcb->frbufsz = bufsz;
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	69ba      	ldr	r2, [r7, #24]
 8008aae:	625a      	str	r2, [r3, #36]	@ 0x24
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	61da      	str	r2, [r3, #28]
		mbfcb->maxmsz = pk_cmbf->maxmsz;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	68da      	ldr	r2, [r3, #12]
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	621a      	str	r2, [r3, #32]
		mbfcb->head = mbfcb->tail = 0;
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	629a      	str	r2, [r3, #40]	@ 0x28
		if ( (pk_cmbf->mbfatr & TA_DSNAME) != 0 ) {
			knl_strncpy((char*)mbfcb->name, (char*)pk_cmbf->dsname,
				OBJECT_NAME_LENGTH);
		}
#endif
		ercd = mbfid;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	623b      	str	r3, [r7, #32]
	}
	END_CRITICAL_SECTION;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d10b      	bne.n	8008af0 <tk_cre_mbf+0x12c>
 8008ad8:	4b14      	ldr	r3, [pc, #80]	@ (8008b2c <tk_cre_mbf+0x168>)
 8008ada:	681a      	ldr	r2, [r3, #0]
 8008adc:	4b14      	ldr	r3, [pc, #80]	@ (8008b30 <tk_cre_mbf+0x16c>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d005      	beq.n	8008af0 <tk_cre_mbf+0x12c>
 8008ae4:	4b13      	ldr	r3, [pc, #76]	@ (8008b34 <tk_cre_mbf+0x170>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d101      	bne.n	8008af0 <tk_cre_mbf+0x12c>
 8008aec:	f7fa fed8 	bl	80038a0 <knl_dispatch>
 8008af0:	6978      	ldr	r0, [r7, #20]
 8008af2:	f004 fdf4 	bl	800d6de <set_basepri>

#if USE_IMALLOC
	if ( (ercd < E_OK) && (msgbuf != NULL) && ((pk_cmbf->mbfatr & TA_USERBUF) == 0 ) ) {
 8008af6:	6a3b      	ldr	r3, [r7, #32]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	da0b      	bge.n	8008b14 <tk_cre_mbf+0x150>
 8008afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d008      	beq.n	8008b14 <tk_cre_mbf+0x150>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	f003 0320 	and.w	r3, r3, #32
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d102      	bne.n	8008b14 <tk_cre_mbf+0x150>
		knl_Ifree(msgbuf);
 8008b0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008b10:	f7fe fc88 	bl	8007424 <knl_Ifree>
	}
#endif

	return ercd;
 8008b14:	6a3b      	ldr	r3, [r7, #32]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3728      	adds	r7, #40	@ 0x28
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	24001614 	.word	0x24001614
 8008b24:	24001544 	.word	0x24001544
 8008b28:	c4ec4ec5 	.word	0xc4ec4ec5
 8008b2c:	24001870 	.word	0x24001870
 8008b30:	24001874 	.word	0x24001874
 8008b34:	2400186c 	.word	0x2400186c

08008b38 <tk_del_mbf>:
#ifdef USE_FUNC_TK_DEL_MBF
/*
 * Delete message buffer
 */
SYSCALL ER tk_del_mbf( ID mbfid )
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b086      	sub	sp, #24
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
	MBFCB	*mbfcb;
	VB	*msgbuf = NULL;
 8008b40:	2300      	movs	r3, #0
 8008b42:	617b      	str	r3, [r7, #20]
	ER	ercd = E_OK;
 8008b44:	2300      	movs	r3, #0
 8008b46:	613b      	str	r3, [r7, #16]

	CHECK_MBFID(mbfid);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	dd02      	ble.n	8008b54 <tk_del_mbf+0x1c>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2b04      	cmp	r3, #4
 8008b52:	dd02      	ble.n	8008b5a <tk_del_mbf+0x22>
 8008b54:	f06f 0311 	mvn.w	r3, #17
 8008b58:	e045      	b.n	8008be6 <tk_del_mbf+0xae>

	mbfcb = get_mbfcb(mbfid);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	2234      	movs	r2, #52	@ 0x34
 8008b60:	fb02 f303 	mul.w	r3, r2, r3
 8008b64:	4a22      	ldr	r2, [pc, #136]	@ (8008bf0 <tk_del_mbf+0xb8>)
 8008b66:	4413      	add	r3, r2
 8008b68:	60fb      	str	r3, [r7, #12]

	BEGIN_CRITICAL_SECTION;
 8008b6a:	f004 fdd0 	bl	800d70e <disint>
 8008b6e:	60b8      	str	r0, [r7, #8]
	if ( mbfcb->mbfid == 0 ) {
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d103      	bne.n	8008b80 <tk_del_mbf+0x48>
		ercd = E_NOEXS;
 8008b78:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 8008b7c:	613b      	str	r3, [r7, #16]
 8008b7e:	e013      	b.n	8008ba8 <tk_del_mbf+0x70>
	} else {
		msgbuf = mbfcb->buffer;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b84:	617b      	str	r3, [r7, #20]

		/* Release wait state of task (E_DLT) */
		knl_wait_delete(&mbfcb->recv_queue);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	3314      	adds	r3, #20
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f004 fa0a 	bl	800cfa4 <knl_wait_delete>
		knl_wait_delete(&mbfcb->send_queue);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	4618      	mov	r0, r3
 8008b94:	f004 fa06 	bl	800cfa4 <knl_wait_delete>

		/* Return to FreeQue */
		QueInsert(&mbfcb->send_queue, &knl_free_mbfcb);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	4916      	ldr	r1, [pc, #88]	@ (8008bf4 <tk_del_mbf+0xbc>)
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7ff fdf9 	bl	8008794 <QueInsert>
		mbfcb->mbfid = 0;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	609a      	str	r2, [r3, #8]
	}
	END_CRITICAL_SECTION;
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d10b      	bne.n	8008bc6 <tk_del_mbf+0x8e>
 8008bae:	4b12      	ldr	r3, [pc, #72]	@ (8008bf8 <tk_del_mbf+0xc0>)
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	4b12      	ldr	r3, [pc, #72]	@ (8008bfc <tk_del_mbf+0xc4>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d005      	beq.n	8008bc6 <tk_del_mbf+0x8e>
 8008bba:	4b11      	ldr	r3, [pc, #68]	@ (8008c00 <tk_del_mbf+0xc8>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d101      	bne.n	8008bc6 <tk_del_mbf+0x8e>
 8008bc2:	f7fa fe6d 	bl	80038a0 <knl_dispatch>
 8008bc6:	68b8      	ldr	r0, [r7, #8]
 8008bc8:	f004 fd89 	bl	800d6de <set_basepri>

#if USE_IMALLOC
	if ( msgbuf != NULL && ((mbfcb->mbfatr & TA_USERBUF) == 0 ) ) {
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d008      	beq.n	8008be4 <tk_del_mbf+0xac>
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	f003 0320 	and.w	r3, r3, #32
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d102      	bne.n	8008be4 <tk_del_mbf+0xac>
		knl_Ifree(msgbuf);
 8008bde:	6978      	ldr	r0, [r7, #20]
 8008be0:	f7fe fc20 	bl	8007424 <knl_Ifree>
	}
#endif

	return ercd;
 8008be4:	693b      	ldr	r3, [r7, #16]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3718      	adds	r7, #24
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	24001544 	.word	0x24001544
 8008bf4:	24001614 	.word	0x24001614
 8008bf8:	24001870 	.word	0x24001870
 8008bfc:	24001874 	.word	0x24001874
 8008c00:	2400186c 	.word	0x2400186c

08008c04 <knl_mbf_chg_pri>:

/*
 * Processing if the priority of wait task changes
 */
LOCAL void knl_mbf_chg_pri( TCB *tcb, INT oldpri )
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
	MBFCB	*mbfcb;

	mbfcb = get_mbfcb(tcb->wid);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c12:	3b01      	subs	r3, #1
 8008c14:	2234      	movs	r2, #52	@ 0x34
 8008c16:	fb02 f303 	mul.w	r3, r2, r3
 8008c1a:	4a08      	ldr	r2, [pc, #32]	@ (8008c3c <knl_mbf_chg_pri+0x38>)
 8008c1c:	4413      	add	r3, r2
 8008c1e:	60fb      	str	r3, [r7, #12]
	if ( oldpri >= 0 ) {
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	db03      	blt.n	8008c2e <knl_mbf_chg_pri+0x2a>
		/* Reorder wait queue */
		knl_gcb_change_priority((GCB*)mbfcb, tcb);
 8008c26:	6879      	ldr	r1, [r7, #4]
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	f004 fa1f 	bl	800d06c <knl_gcb_change_priority>
	}

	/* If the new head task in a send wait queue is able to sent, 
	   send its message */
	knl_mbf_wakeup(mbfcb);
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f7ff fe9f 	bl	8008972 <knl_mbf_wakeup>
}
 8008c34:	bf00      	nop
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	24001544 	.word	0x24001544

08008c40 <knl_mbf_rel_wai>:

/*
 * Processing if the wait task is released
 */
LOCAL void knl_mbf_rel_wai( TCB *tcb )
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
	knl_mbf_chg_pri(tcb, -1);
 8008c48:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f7ff ffd9 	bl	8008c04 <knl_mbf_chg_pri>
}
 8008c52:	bf00      	nop
 8008c54:	3708      	adds	r7, #8
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
	...

08008c5c <tk_snd_mbf>:

/*
 * Send to message buffer
 */
SYSCALL ER tk_snd_mbf( ID mbfid, CONST void *msg, INT msgsz, TMO tmout )
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b088      	sub	sp, #32
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	607a      	str	r2, [r7, #4]
 8008c68:	603b      	str	r3, [r7, #0]
	MBFCB	*mbfcb;
	TCB	*tcb;
	ER	ercd = E_OK;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	613b      	str	r3, [r7, #16]

	CHECK_MBFID(mbfid);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	dd02      	ble.n	8008c7a <tk_snd_mbf+0x1e>
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2b04      	cmp	r3, #4
 8008c78:	dd02      	ble.n	8008c80 <tk_snd_mbf+0x24>
 8008c7a:	f06f 0311 	mvn.w	r3, #17
 8008c7e:	e0b3      	b.n	8008de8 <tk_snd_mbf+0x18c>
	CHECK_PAR(msgsz > 0);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	dc02      	bgt.n	8008c8c <tk_snd_mbf+0x30>
 8008c86:	f06f 0310 	mvn.w	r3, #16
 8008c8a:	e0ad      	b.n	8008de8 <tk_snd_mbf+0x18c>
	CHECK_TMOUT(tmout);
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c92:	da02      	bge.n	8008c9a <tk_snd_mbf+0x3e>
 8008c94:	f06f 0310 	mvn.w	r3, #16
 8008c98:	e0a6      	b.n	8008de8 <tk_snd_mbf+0x18c>
	CHECK_DISPATCH_POL(tmout);
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d014      	beq.n	8008cca <tk_snd_mbf+0x6e>
 8008ca0:	4b53      	ldr	r3, [pc, #332]	@ (8008df0 <tk_snd_mbf+0x194>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d10d      	bne.n	8008cc4 <tk_snd_mbf+0x68>
 8008ca8:	f7ff fda8 	bl	80087fc <knl_isTaskIndependent>
 8008cac:	4603      	mov	r3, r0
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d108      	bne.n	8008cc4 <tk_snd_mbf+0x68>
 8008cb2:	4b50      	ldr	r3, [pc, #320]	@ (8008df4 <tk_snd_mbf+0x198>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d004      	beq.n	8008cc4 <tk_snd_mbf+0x68>
 8008cba:	f004 fd1c 	bl	800d6f6 <get_basepri>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d002      	beq.n	8008cca <tk_snd_mbf+0x6e>
 8008cc4:	f06f 0318 	mvn.w	r3, #24
 8008cc8:	e08e      	b.n	8008de8 <tk_snd_mbf+0x18c>

	mbfcb = get_mbfcb(mbfid);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	2234      	movs	r2, #52	@ 0x34
 8008cd0:	fb02 f303 	mul.w	r3, r2, r3
 8008cd4:	4a48      	ldr	r2, [pc, #288]	@ (8008df8 <tk_snd_mbf+0x19c>)
 8008cd6:	4413      	add	r3, r2
 8008cd8:	61fb      	str	r3, [r7, #28]

	BEGIN_CRITICAL_SECTION;
 8008cda:	f004 fd18 	bl	800d70e <disint>
 8008cde:	61b8      	str	r0, [r7, #24]
	if ( mbfcb->mbfid == 0 ) {
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d103      	bne.n	8008cf0 <tk_snd_mbf+0x94>
		ercd = E_NOEXS;
 8008ce8:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 8008cec:	613b      	str	r3, [r7, #16]
		goto error_exit;
 8008cee:	e068      	b.n	8008dc2 <tk_snd_mbf+0x166>
	}
#if CHK_PAR
	if ( msgsz > mbfcb->maxmsz ) {
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	6a1b      	ldr	r3, [r3, #32]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	dd03      	ble.n	8008d02 <tk_snd_mbf+0xa6>
		ercd = E_PAR;
 8008cfa:	f06f 0310 	mvn.w	r3, #16
 8008cfe:	613b      	str	r3, [r7, #16]
		goto error_exit;
 8008d00:	e05f      	b.n	8008dc2 <tk_snd_mbf+0x166>
	}
#endif

	if ( !isQueEmpty(&mbfcb->recv_queue) ) {
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	3314      	adds	r3, #20
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7ff fd33 	bl	8008772 <isQueEmpty>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d111      	bne.n	8008d36 <tk_snd_mbf+0xda>
		/* Send directly to the receive wait task */
		tcb = (TCB*)mbfcb->recv_queue.next;
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	695b      	ldr	r3, [r3, #20]
 8008d16:	617b      	str	r3, [r7, #20]
		knl_memcpy(tcb->winfo.rmbf.msg, msg, (SZ)msgsz);
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	68b9      	ldr	r1, [r7, #8]
 8008d20:	4618      	mov	r0, r3
 8008d22:	f004 fa29 	bl	800d178 <knl_memcpy>
		*tcb->winfo.rmbf.p_msgsz = msgsz;
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	601a      	str	r2, [r3, #0]
		knl_wait_release_ok(tcb);
 8008d2e:	6978      	ldr	r0, [r7, #20]
 8008d30:	f004 f882 	bl	800ce38 <knl_wait_release_ok>
 8008d34:	e045      	b.n	8008dc2 <tk_snd_mbf+0x166>

	} else if ( (in_indp() || knl_gcb_top_of_wait_queue((GCB*)mbfcb, knl_ctxtsk) == knl_ctxtsk)
 8008d36:	f7ff fd61 	bl	80087fc <knl_isTaskIndependent>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d10e      	bne.n	8008d5e <tk_snd_mbf+0x102>
 8008d40:	4b2c      	ldr	r3, [pc, #176]	@ (8008df4 <tk_snd_mbf+0x198>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d00a      	beq.n	8008d5e <tk_snd_mbf+0x102>
 8008d48:	4b2a      	ldr	r3, [pc, #168]	@ (8008df4 <tk_snd_mbf+0x198>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	69f8      	ldr	r0, [r7, #28]
 8008d50:	f004 f99e 	bl	800d090 <knl_gcb_top_of_wait_queue>
 8008d54:	4602      	mov	r2, r0
 8008d56:	4b27      	ldr	r3, [pc, #156]	@ (8008df4 <tk_snd_mbf+0x198>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d10c      	bne.n	8008d78 <tk_snd_mbf+0x11c>
		  &&(knl_mbf_free(mbfcb, msgsz)) ) {
 8008d5e:	6879      	ldr	r1, [r7, #4]
 8008d60:	69f8      	ldr	r0, [r7, #28]
 8008d62:	f7ff fd5b 	bl	800881c <knl_mbf_free>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d005      	beq.n	8008d78 <tk_snd_mbf+0x11c>
		/* Store the message to message buffer */
		knl_msg_to_mbf(mbfcb, msg, msgsz);
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	68b9      	ldr	r1, [r7, #8]
 8008d70:	69f8      	ldr	r0, [r7, #28]
 8008d72:	f7ff fd9f 	bl	80088b4 <knl_msg_to_mbf>
 8008d76:	e024      	b.n	8008dc2 <tk_snd_mbf+0x166>

	} else {
		ercd = E_TMOUT;
 8008d78:	f06f 0331 	mvn.w	r3, #49	@ 0x31
 8008d7c:	613b      	str	r3, [r7, #16]
		if ( tmout != TMO_POL ) {
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d01d      	beq.n	8008dc0 <tk_snd_mbf+0x164>
			/* Ready for send wait */
			knl_ctxtsk->wspec = ( (mbfcb->mbfatr & TA_TPRI) != 0 )?
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	f003 0301 	and.w	r3, r3, #1
					&knl_wspec_smbf_tpri: &knl_wspec_smbf_tfifo;
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d001      	beq.n	8008d94 <tk_snd_mbf+0x138>
 8008d90:	4a1a      	ldr	r2, [pc, #104]	@ (8008dfc <tk_snd_mbf+0x1a0>)
 8008d92:	e000      	b.n	8008d96 <tk_snd_mbf+0x13a>
 8008d94:	4a1a      	ldr	r2, [pc, #104]	@ (8008e00 <tk_snd_mbf+0x1a4>)
			knl_ctxtsk->wspec = ( (mbfcb->mbfatr & TA_TPRI) != 0 )?
 8008d96:	4b17      	ldr	r3, [pc, #92]	@ (8008df4 <tk_snd_mbf+0x198>)
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	62da      	str	r2, [r3, #44]	@ 0x2c
			knl_ctxtsk->wercd = &ercd;
 8008d9c:	4b15      	ldr	r3, [pc, #84]	@ (8008df4 <tk_snd_mbf+0x198>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f107 0210 	add.w	r2, r7, #16
 8008da4:	63da      	str	r2, [r3, #60]	@ 0x3c
			knl_ctxtsk->winfo.smbf.msg = msg;
 8008da6:	4b13      	ldr	r3, [pc, #76]	@ (8008df4 <tk_snd_mbf+0x198>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	641a      	str	r2, [r3, #64]	@ 0x40
			knl_ctxtsk->winfo.smbf.msgsz = msgsz;
 8008dae:	4b11      	ldr	r3, [pc, #68]	@ (8008df4 <tk_snd_mbf+0x198>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	645a      	str	r2, [r3, #68]	@ 0x44
			knl_gcb_make_wait((GCB*)mbfcb, tmout);
 8008db6:	6839      	ldr	r1, [r7, #0]
 8008db8:	69f8      	ldr	r0, [r7, #28]
 8008dba:	f004 f921 	bl	800d000 <knl_gcb_make_wait>
 8008dbe:	e000      	b.n	8008dc2 <tk_snd_mbf+0x166>
		}
	}

    error_exit:
 8008dc0:	bf00      	nop
	END_CRITICAL_SECTION;
 8008dc2:	69bb      	ldr	r3, [r7, #24]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10b      	bne.n	8008de0 <tk_snd_mbf+0x184>
 8008dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8008df4 <tk_snd_mbf+0x198>)
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8008e04 <tk_snd_mbf+0x1a8>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d005      	beq.n	8008de0 <tk_snd_mbf+0x184>
 8008dd4:	4b06      	ldr	r3, [pc, #24]	@ (8008df0 <tk_snd_mbf+0x194>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d101      	bne.n	8008de0 <tk_snd_mbf+0x184>
 8008ddc:	f7fa fd60 	bl	80038a0 <knl_dispatch>
 8008de0:	69b8      	ldr	r0, [r7, #24]
 8008de2:	f004 fc7c 	bl	800d6de <set_basepri>

	return ercd;
 8008de6:	693b      	ldr	r3, [r7, #16]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3720      	adds	r7, #32
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	2400186c 	.word	0x2400186c
 8008df4:	24001870 	.word	0x24001870
 8008df8:	24001544 	.word	0x24001544
 8008dfc:	0800ee7c 	.word	0x0800ee7c
 8008e00:	0800ee70 	.word	0x0800ee70
 8008e04:	24001874 	.word	0x24001874

08008e08 <knl_mbf_to_msg>:
/*
 * Get a message from message buffer.
 * Return the message size.
 */
LOCAL INT knl_mbf_to_msg( MBFCB *mbfcb, void *msg )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b088      	sub	sp, #32
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
	W	head = mbfcb->head;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e16:	61fb      	str	r3, [r7, #28]
	VB	*buffer = mbfcb->buffer;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e1c:	617b      	str	r3, [r7, #20]
	INT	msgsz, actsz;
	W	remsz;

	actsz = msgsz = *(HEADER*)&buffer[head];
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	697a      	ldr	r2, [r7, #20]
 8008e22:	4413      	add	r3, r2
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	61bb      	str	r3, [r7, #24]
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	613b      	str	r3, [r7, #16]
	mbfcb->frbufsz += (W)(HEADERSZ + ROUNDSZ(msgsz));
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e30:	461a      	mov	r2, r3
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	3303      	adds	r3, #3
 8008e36:	f023 0303 	bic.w	r3, r3, #3
 8008e3a:	4413      	add	r3, r2
 8008e3c:	3304      	adds	r3, #4
 8008e3e:	461a      	mov	r2, r3
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	625a      	str	r2, [r3, #36]	@ 0x24

	head += (W)HEADERSZ;
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	3304      	adds	r3, #4
 8008e48:	61fb      	str	r3, [r7, #28]
	if ( head >= mbfcb->bufsz ) {
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	69db      	ldr	r3, [r3, #28]
 8008e4e:	69fa      	ldr	r2, [r7, #28]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	db01      	blt.n	8008e58 <knl_mbf_to_msg+0x50>
		head = 0;
 8008e54:	2300      	movs	r3, #0
 8008e56:	61fb      	str	r3, [r7, #28]
	}

	if ( (remsz = mbfcb->bufsz - head) < (W)msgsz ) {
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	69da      	ldr	r2, [r3, #28]
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	1ad3      	subs	r3, r2, r3
 8008e60:	60fb      	str	r3, [r7, #12]
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	429a      	cmp	r2, r3
 8008e68:	da11      	bge.n	8008e8e <knl_mbf_to_msg+0x86>
		knl_memcpy(msg, &buffer[head], (SZ)remsz);
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	697a      	ldr	r2, [r7, #20]
 8008e6e:	4413      	add	r3, r2
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	4619      	mov	r1, r3
 8008e74:	6838      	ldr	r0, [r7, #0]
 8008e76:	f004 f97f 	bl	800d178 <knl_memcpy>
		msg = (VB*)msg + remsz;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	683a      	ldr	r2, [r7, #0]
 8008e7e:	4413      	add	r3, r2
 8008e80:	603b      	str	r3, [r7, #0]
		msgsz -= (INT)remsz;
 8008e82:	69ba      	ldr	r2, [r7, #24]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	1ad3      	subs	r3, r2, r3
 8008e88:	61bb      	str	r3, [r7, #24]
		head = 0;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	61fb      	str	r3, [r7, #28]
	}
	knl_memcpy(msg, &buffer[head], (SZ)msgsz);
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	697a      	ldr	r2, [r7, #20]
 8008e92:	4413      	add	r3, r2
 8008e94:	69ba      	ldr	r2, [r7, #24]
 8008e96:	4619      	mov	r1, r3
 8008e98:	6838      	ldr	r0, [r7, #0]
 8008e9a:	f004 f96d 	bl	800d178 <knl_memcpy>
	head += (INT)ROUNDSZ(msgsz);
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	3303      	adds	r3, #3
 8008ea2:	f023 0303 	bic.w	r3, r3, #3
 8008ea6:	69fa      	ldr	r2, [r7, #28]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	61fb      	str	r3, [r7, #28]
	if ( head >= mbfcb->bufsz ) {
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	69db      	ldr	r3, [r3, #28]
 8008eb0:	69fa      	ldr	r2, [r7, #28]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	db01      	blt.n	8008eba <knl_mbf_to_msg+0xb2>
		head = 0;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	61fb      	str	r3, [r7, #28]
	}

	mbfcb->head = head;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	69fa      	ldr	r2, [r7, #28]
 8008ebe:	629a      	str	r2, [r3, #40]	@ 0x28

	return actsz;
 8008ec0:	693b      	ldr	r3, [r7, #16]
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3720      	adds	r7, #32
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
	...

08008ecc <tk_rcv_mbf>:

/*
 * Receive from message buffer
 */
SYSCALL INT tk_rcv_mbf( ID mbfid, void *msg, TMO tmout )
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b08a      	sub	sp, #40	@ 0x28
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	60f8      	str	r0, [r7, #12]
 8008ed4:	60b9      	str	r1, [r7, #8]
 8008ed6:	607a      	str	r2, [r7, #4]
	MBFCB	*mbfcb;
	TCB	*tcb;
	INT	rcvsz;
	ER	ercd = E_OK;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	617b      	str	r3, [r7, #20]

	CHECK_MBFID(mbfid);
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	dd02      	ble.n	8008ee8 <tk_rcv_mbf+0x1c>
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2b04      	cmp	r3, #4
 8008ee6:	dd02      	ble.n	8008eee <tk_rcv_mbf+0x22>
 8008ee8:	f06f 0311 	mvn.w	r3, #17
 8008eec:	e09e      	b.n	800902c <tk_rcv_mbf+0x160>
	CHECK_TMOUT(tmout);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ef4:	da02      	bge.n	8008efc <tk_rcv_mbf+0x30>
 8008ef6:	f06f 0310 	mvn.w	r3, #16
 8008efa:	e097      	b.n	800902c <tk_rcv_mbf+0x160>
	CHECK_DISPATCH();
 8008efc:	4b4d      	ldr	r3, [pc, #308]	@ (8009034 <tk_rcv_mbf+0x168>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10d      	bne.n	8008f20 <tk_rcv_mbf+0x54>
 8008f04:	f7ff fc7a 	bl	80087fc <knl_isTaskIndependent>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d108      	bne.n	8008f20 <tk_rcv_mbf+0x54>
 8008f0e:	4b4a      	ldr	r3, [pc, #296]	@ (8009038 <tk_rcv_mbf+0x16c>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d004      	beq.n	8008f20 <tk_rcv_mbf+0x54>
 8008f16:	f004 fbee 	bl	800d6f6 <get_basepri>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d002      	beq.n	8008f26 <tk_rcv_mbf+0x5a>
 8008f20:	f06f 0318 	mvn.w	r3, #24
 8008f24:	e082      	b.n	800902c <tk_rcv_mbf+0x160>

	mbfcb = get_mbfcb(mbfid);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	3b01      	subs	r3, #1
 8008f2a:	2234      	movs	r2, #52	@ 0x34
 8008f2c:	fb02 f303 	mul.w	r3, r2, r3
 8008f30:	4a42      	ldr	r2, [pc, #264]	@ (800903c <tk_rcv_mbf+0x170>)
 8008f32:	4413      	add	r3, r2
 8008f34:	627b      	str	r3, [r7, #36]	@ 0x24

	BEGIN_CRITICAL_SECTION;
 8008f36:	f004 fbea 	bl	800d70e <disint>
 8008f3a:	6238      	str	r0, [r7, #32]
	if (mbfcb->mbfid == 0) {
 8008f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d103      	bne.n	8008f4c <tk_rcv_mbf+0x80>
		ercd = E_NOEXS;
 8008f44:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 8008f48:	617b      	str	r3, [r7, #20]
		goto error_exit;
 8008f4a:	e057      	b.n	8008ffc <tk_rcv_mbf+0x130>
	}

	if ( !knl_mbf_empty(mbfcb) ) {
 8008f4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008f4e:	f7ff fc78 	bl	8008842 <knl_mbf_empty>
 8008f52:	4603      	mov	r3, r0
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d109      	bne.n	8008f6c <tk_rcv_mbf+0xa0>
		/* Read from message buffer */
		rcvsz = knl_mbf_to_msg(mbfcb, msg);
 8008f58:	68b9      	ldr	r1, [r7, #8]
 8008f5a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008f5c:	f7ff ff54 	bl	8008e08 <knl_mbf_to_msg>
 8008f60:	4603      	mov	r3, r0
 8008f62:	61bb      	str	r3, [r7, #24]

		/* Accept message from sending task(s) */
		knl_mbf_wakeup(mbfcb);
 8008f64:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008f66:	f7ff fd04 	bl	8008972 <knl_mbf_wakeup>
 8008f6a:	e047      	b.n	8008ffc <tk_rcv_mbf+0x130>

	} else if ( !isQueEmpty(&mbfcb->send_queue) ) {
 8008f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7ff fbff 	bl	8008772 <isQueEmpty>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d113      	bne.n	8008fa2 <tk_rcv_mbf+0xd6>
		/* Receive directly from send wait task */
		tcb = (TCB*)mbfcb->send_queue.next;
 8008f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	61fb      	str	r3, [r7, #28]
		rcvsz = tcb->winfo.smbf.msgsz;
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f84:	61bb      	str	r3, [r7, #24]
		knl_memcpy(msg, tcb->winfo.smbf.msg, (SZ)rcvsz);
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f8a:	69ba      	ldr	r2, [r7, #24]
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	68b8      	ldr	r0, [r7, #8]
 8008f90:	f004 f8f2 	bl	800d178 <knl_memcpy>
		knl_wait_release_ok(tcb);
 8008f94:	69f8      	ldr	r0, [r7, #28]
 8008f96:	f003 ff4f 	bl	800ce38 <knl_wait_release_ok>
		knl_mbf_wakeup(mbfcb);
 8008f9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008f9c:	f7ff fce9 	bl	8008972 <knl_mbf_wakeup>
 8008fa0:	e02c      	b.n	8008ffc <tk_rcv_mbf+0x130>
	} else {
		ercd = E_TMOUT;
 8008fa2:	f06f 0331 	mvn.w	r3, #49	@ 0x31
 8008fa6:	617b      	str	r3, [r7, #20]
		if ( tmout != TMO_POL ) {
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d025      	beq.n	8008ffa <tk_rcv_mbf+0x12e>
			/* Ready for receive wait */
			knl_ctxtsk->wspec = &knl_wspec_rmbf;
 8008fae:	4b22      	ldr	r3, [pc, #136]	@ (8009038 <tk_rcv_mbf+0x16c>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a23      	ldr	r2, [pc, #140]	@ (8009040 <tk_rcv_mbf+0x174>)
 8008fb4:	62da      	str	r2, [r3, #44]	@ 0x2c
			knl_ctxtsk->wid = mbfid;
 8008fb6:	4b20      	ldr	r3, [pc, #128]	@ (8009038 <tk_rcv_mbf+0x16c>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	68fa      	ldr	r2, [r7, #12]
 8008fbc:	631a      	str	r2, [r3, #48]	@ 0x30
			knl_ctxtsk->wercd = &ercd;
 8008fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8009038 <tk_rcv_mbf+0x16c>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f107 0214 	add.w	r2, r7, #20
 8008fc6:	63da      	str	r2, [r3, #60]	@ 0x3c
			knl_ctxtsk->winfo.rmbf.msg = msg;
 8008fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8009038 <tk_rcv_mbf+0x16c>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68ba      	ldr	r2, [r7, #8]
 8008fce:	641a      	str	r2, [r3, #64]	@ 0x40
			knl_ctxtsk->winfo.rmbf.p_msgsz = &rcvsz;
 8008fd0:	4b19      	ldr	r3, [pc, #100]	@ (8009038 <tk_rcv_mbf+0x16c>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f107 0218 	add.w	r2, r7, #24
 8008fd8:	645a      	str	r2, [r3, #68]	@ 0x44
			knl_make_wait(tmout, mbfcb->mbfatr);
 8008fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fdc:	691b      	ldr	r3, [r3, #16]
 8008fde:	4619      	mov	r1, r3
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f003 ff7b 	bl	800cedc <knl_make_wait>
			QueInsert(&knl_ctxtsk->tskque, &mbfcb->recv_queue);
 8008fe6:	4b14      	ldr	r3, [pc, #80]	@ (8009038 <tk_rcv_mbf+0x16c>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	461a      	mov	r2, r3
 8008fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fee:	3314      	adds	r3, #20
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	4610      	mov	r0, r2
 8008ff4:	f7ff fbce 	bl	8008794 <QueInsert>
 8008ff8:	e000      	b.n	8008ffc <tk_rcv_mbf+0x130>
		}
	}

    error_exit:
 8008ffa:	bf00      	nop
	END_CRITICAL_SECTION;
 8008ffc:	6a3b      	ldr	r3, [r7, #32]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d10b      	bne.n	800901a <tk_rcv_mbf+0x14e>
 8009002:	4b0d      	ldr	r3, [pc, #52]	@ (8009038 <tk_rcv_mbf+0x16c>)
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	4b0f      	ldr	r3, [pc, #60]	@ (8009044 <tk_rcv_mbf+0x178>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	429a      	cmp	r2, r3
 800900c:	d005      	beq.n	800901a <tk_rcv_mbf+0x14e>
 800900e:	4b09      	ldr	r3, [pc, #36]	@ (8009034 <tk_rcv_mbf+0x168>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d101      	bne.n	800901a <tk_rcv_mbf+0x14e>
 8009016:	f7fa fc43 	bl	80038a0 <knl_dispatch>
 800901a:	6a38      	ldr	r0, [r7, #32]
 800901c:	f004 fb5f 	bl	800d6de <set_basepri>

	return ( ercd < E_OK )? ercd: rcvsz;
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	2b00      	cmp	r3, #0
 8009024:	da01      	bge.n	800902a <tk_rcv_mbf+0x15e>
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	e000      	b.n	800902c <tk_rcv_mbf+0x160>
 800902a:	69bb      	ldr	r3, [r7, #24]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3728      	adds	r7, #40	@ 0x28
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}
 8009034:	2400186c 	.word	0x2400186c
 8009038:	24001870 	.word	0x24001870
 800903c:	24001544 	.word	0x24001544
 8009040:	0800ee88 	.word	0x0800ee88
 8009044:	24001874 	.word	0x24001874

08009048 <tk_ref_mbf>:
#ifdef USE_FUNC_TK_REF_MBF
/*
 * Refer message buffer state
 */
SYSCALL ER tk_ref_mbf( ID mbfid, T_RMBF *pk_rmbf )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
	MBFCB	*mbfcb;
	TCB	*tcb;
	ER	ercd = E_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	617b      	str	r3, [r7, #20]

	CHECK_MBFID(mbfid);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2b00      	cmp	r3, #0
 800905a:	dd02      	ble.n	8009062 <tk_ref_mbf+0x1a>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2b04      	cmp	r3, #4
 8009060:	dd02      	ble.n	8009068 <tk_ref_mbf+0x20>
 8009062:	f06f 0311 	mvn.w	r3, #17
 8009066:	e061      	b.n	800912c <tk_ref_mbf+0xe4>

	mbfcb = get_mbfcb(mbfid);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	3b01      	subs	r3, #1
 800906c:	2234      	movs	r2, #52	@ 0x34
 800906e:	fb02 f303 	mul.w	r3, r2, r3
 8009072:	4a30      	ldr	r2, [pc, #192]	@ (8009134 <tk_ref_mbf+0xec>)
 8009074:	4413      	add	r3, r2
 8009076:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 8009078:	f004 fb49 	bl	800d70e <disint>
 800907c:	60f8      	str	r0, [r7, #12]
	if ( mbfcb->mbfid == 0 ) {
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d103      	bne.n	800908e <tk_ref_mbf+0x46>
		ercd = E_NOEXS;
 8009086:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 800908a:	617b      	str	r3, [r7, #20]
 800908c:	e03b      	b.n	8009106 <tk_ref_mbf+0xbe>
	} else {
		pk_rmbf->exinf = mbfcb->exinf;
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	68da      	ldr	r2, [r3, #12]
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	601a      	str	r2, [r3, #0]
		pk_rmbf->wtsk = knl_wait_tskid(&mbfcb->recv_queue);
 8009096:	693b      	ldr	r3, [r7, #16]
 8009098:	3314      	adds	r3, #20
 800909a:	4618      	mov	r0, r3
 800909c:	f003 ff9d 	bl	800cfda <knl_wait_tskid>
 80090a0:	4602      	mov	r2, r0
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	605a      	str	r2, [r3, #4]
		pk_rmbf->stsk = knl_wait_tskid(&mbfcb->send_queue);
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	4618      	mov	r0, r3
 80090aa:	f003 ff96 	bl	800cfda <knl_wait_tskid>
 80090ae:	4602      	mov	r2, r0
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	609a      	str	r2, [r3, #8]
		if ( !knl_mbf_empty(mbfcb) ) {
 80090b4:	6938      	ldr	r0, [r7, #16]
 80090b6:	f7ff fbc4 	bl	8008842 <knl_mbf_empty>
 80090ba:	4603      	mov	r3, r0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d108      	bne.n	80090d2 <tk_ref_mbf+0x8a>
			pk_rmbf->msgsz = *(HEADER*)&mbfcb->buffer[mbfcb->head];
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090c4:	693a      	ldr	r2, [r7, #16]
 80090c6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80090c8:	4413      	add	r3, r2
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	60da      	str	r2, [r3, #12]
 80090d0:	e011      	b.n	80090f6 <tk_ref_mbf+0xae>
		} else {
			if ( !isQueEmpty(&mbfcb->send_queue) ) {
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7ff fb4c 	bl	8008772 <isQueEmpty>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d107      	bne.n	80090f0 <tk_ref_mbf+0xa8>
				tcb = (TCB*)mbfcb->send_queue.next;
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	60bb      	str	r3, [r7, #8]
				pk_rmbf->msgsz = tcb->winfo.smbf.msgsz;
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	60da      	str	r2, [r3, #12]
 80090ee:	e002      	b.n	80090f6 <tk_ref_mbf+0xae>
			} else {
				pk_rmbf->msgsz = 0;
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	2200      	movs	r2, #0
 80090f4:	60da      	str	r2, [r3, #12]
			}
		}
		pk_rmbf->frbufsz = mbfcb->frbufsz;
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	611a      	str	r2, [r3, #16]
		pk_rmbf->maxmsz = mbfcb->maxmsz;
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	6a1a      	ldr	r2, [r3, #32]
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	615a      	str	r2, [r3, #20]
	}
	END_CRITICAL_SECTION;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d10b      	bne.n	8009124 <tk_ref_mbf+0xdc>
 800910c:	4b0a      	ldr	r3, [pc, #40]	@ (8009138 <tk_ref_mbf+0xf0>)
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	4b0a      	ldr	r3, [pc, #40]	@ (800913c <tk_ref_mbf+0xf4>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	429a      	cmp	r2, r3
 8009116:	d005      	beq.n	8009124 <tk_ref_mbf+0xdc>
 8009118:	4b09      	ldr	r3, [pc, #36]	@ (8009140 <tk_ref_mbf+0xf8>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d101      	bne.n	8009124 <tk_ref_mbf+0xdc>
 8009120:	f7fa fbbe 	bl	80038a0 <knl_dispatch>
 8009124:	68f8      	ldr	r0, [r7, #12]
 8009126:	f004 fada 	bl	800d6de <set_basepri>

	return ercd;
 800912a:	697b      	ldr	r3, [r7, #20]
}
 800912c:	4618      	mov	r0, r3
 800912e:	3718      	adds	r7, #24
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}
 8009134:	24001544 	.word	0x24001544
 8009138:	24001870 	.word	0x24001870
 800913c:	24001874 	.word	0x24001874
 8009140:	2400186c 	.word	0x2400186c

08009144 <knl_isTaskIndependent>:
{
 8009144:	b480      	push	{r7}
 8009146:	af00      	add	r7, sp, #0
	return ( knl_taskindp > 0 )? TRUE: FALSE;
 8009148:	4b05      	ldr	r3, [pc, #20]	@ (8009160 <knl_isTaskIndependent+0x1c>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2b00      	cmp	r3, #0
 800914e:	bfcc      	ite	gt
 8009150:	2301      	movgt	r3, #1
 8009152:	2300      	movle	r3, #0
 8009154:	b2db      	uxtb	r3, r3
}
 8009156:	4618      	mov	r0, r3
 8009158:	46bd      	mov	sp, r7
 800915a:	bc80      	pop	{r7}
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	240029f8 	.word	0x240029f8

08009164 <tk_ref_sys>:
#ifdef USE_FUNC_TK_REF_SYS
/*
 * Refer system state
 */
SYSCALL ER tk_ref_sys( T_RSYS *pk_rsys )
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
	BOOL	b_qtsk;

	if ( in_indp() ) {
 800916c:	f7ff ffea 	bl	8009144 <knl_isTaskIndependent>
 8009170:	4603      	mov	r3, r0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d103      	bne.n	800917e <tk_ref_sys+0x1a>
 8009176:	4b36      	ldr	r3, [pc, #216]	@ (8009250 <tk_ref_sys+0xec>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d103      	bne.n	8009186 <tk_ref_sys+0x22>
		pk_rsys->sysstat = TSS_INDP;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2204      	movs	r2, #4
 8009182:	601a      	str	r2, [r3, #0]
 8009184:	e049      	b.n	800921a <tk_ref_sys+0xb6>
	} else {
		BEGIN_DISABLE_INTERRUPT;
 8009186:	f004 fac2 	bl	800d70e <disint>
 800918a:	60f8      	str	r0, [r7, #12]
		b_qtsk = in_qtsk();	
 800918c:	4b30      	ldr	r3, [pc, #192]	@ (8009250 <tk_ref_sys+0xec>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8009194:	4a2e      	ldr	r2, [pc, #184]	@ (8009250 <tk_ref_sys+0xec>)
 8009196:	6812      	ldr	r2, [r2, #0]
 8009198:	f992 2020 	ldrsb.w	r2, [r2, #32]
 800919c:	4293      	cmp	r3, r2
 800919e:	bfcc      	ite	gt
 80091a0:	2301      	movgt	r3, #1
 80091a2:	2300      	movle	r3, #0
 80091a4:	b2db      	uxtb	r3, r3
 80091a6:	60bb      	str	r3, [r7, #8]
		END_DISABLE_INTERRUPT;
 80091a8:	68f8      	ldr	r0, [r7, #12]
 80091aa:	f004 fa98 	bl	800d6de <set_basepri>
		
		if ( b_qtsk ) {
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d003      	beq.n	80091bc <tk_ref_sys+0x58>
			pk_rsys->sysstat = TSS_QTSK;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2208      	movs	r2, #8
 80091b8:	601a      	str	r2, [r3, #0]
 80091ba:	e002      	b.n	80091c2 <tk_ref_sys+0x5e>
		} else {
			pk_rsys->sysstat = TSS_TSK;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	601a      	str	r2, [r3, #0]
		}
		if ( in_loc() ) {
 80091c2:	f004 fa98 	bl	800d6f6 <get_basepri>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d108      	bne.n	80091de <tk_ref_sys+0x7a>
 80091cc:	f7ff ffba 	bl	8009144 <knl_isTaskIndependent>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d103      	bne.n	80091de <tk_ref_sys+0x7a>
 80091d6:	4b1e      	ldr	r3, [pc, #120]	@ (8009250 <tk_ref_sys+0xec>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d105      	bne.n	80091ea <tk_ref_sys+0x86>
			pk_rsys->sysstat |= TSS_DINT;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f043 0202 	orr.w	r2, r3, #2
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	601a      	str	r2, [r3, #0]
		}
		if ( in_ddsp() ) {
 80091ea:	4b1a      	ldr	r3, [pc, #104]	@ (8009254 <tk_ref_sys+0xf0>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d10d      	bne.n	800920e <tk_ref_sys+0xaa>
 80091f2:	f7ff ffa7 	bl	8009144 <knl_isTaskIndependent>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d108      	bne.n	800920e <tk_ref_sys+0xaa>
 80091fc:	4b14      	ldr	r3, [pc, #80]	@ (8009250 <tk_ref_sys+0xec>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d004      	beq.n	800920e <tk_ref_sys+0xaa>
 8009204:	f004 fa77 	bl	800d6f6 <get_basepri>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d005      	beq.n	800921a <tk_ref_sys+0xb6>
			pk_rsys->sysstat |= TSS_DDSP;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f043 0201 	orr.w	r2, r3, #1
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	601a      	str	r2, [r3, #0]
		}
	}
	pk_rsys->runtskid = ( knl_ctxtsk != NULL )? knl_ctxtsk->tskid: 0;
 800921a:	4b0d      	ldr	r3, [pc, #52]	@ (8009250 <tk_ref_sys+0xec>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d003      	beq.n	800922a <tk_ref_sys+0xc6>
 8009222:	4b0b      	ldr	r3, [pc, #44]	@ (8009250 <tk_ref_sys+0xec>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	e000      	b.n	800922c <tk_ref_sys+0xc8>
 800922a:	2300      	movs	r3, #0
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	6053      	str	r3, [r2, #4]
	pk_rsys->schedtskid = ( knl_schedtsk != NULL )? knl_schedtsk->tskid: 0;
 8009230:	4b09      	ldr	r3, [pc, #36]	@ (8009258 <tk_ref_sys+0xf4>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d003      	beq.n	8009240 <tk_ref_sys+0xdc>
 8009238:	4b07      	ldr	r3, [pc, #28]	@ (8009258 <tk_ref_sys+0xf4>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	689b      	ldr	r3, [r3, #8]
 800923e:	e000      	b.n	8009242 <tk_ref_sys+0xde>
 8009240:	2300      	movs	r3, #0
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	6093      	str	r3, [r2, #8]

	return E_OK;
 8009246:	2300      	movs	r3, #0
}
 8009248:	4618      	mov	r0, r3
 800924a:	3710      	adds	r7, #16
 800924c:	46bd      	mov	sp, r7
 800924e:	bd80      	pop	{r7, pc}
 8009250:	24001870 	.word	0x24001870
 8009254:	2400186c 	.word	0x2400186c
 8009258:	24001874 	.word	0x24001874

0800925c <tk_ref_ver>:
 * Refer version information
 *	If there is no kernel version information,
 *	set 0 in each information. (Do NOT cause errors.)
 */
SYSCALL ER tk_ref_ver( T_RVER *pk_rver )
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
	pk_rver->maker = (UH)VER_MAKER;	/* OS manufacturer */
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	801a      	strh	r2, [r3, #0]
	pk_rver->prid  = (UH)VER_PRID;	/* OS identification number */
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	805a      	strh	r2, [r3, #2]
	pk_rver->spver = (UH)VER_SPVER;	/* Specification version */
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f44f 42c6 	mov.w	r2, #25344	@ 0x6300
 8009276:	809a      	strh	r2, [r3, #4]
	pk_rver->prver = (UH)VER_PRVER;	/* OS product version */
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2203      	movs	r2, #3
 800927c:	80da      	strh	r2, [r3, #6]
	pk_rver->prno[0] = (UH)VER_PRNO1;	/* Product number */
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	811a      	strh	r2, [r3, #8]
	pk_rver->prno[1] = (UH)VER_PRNO2;	/* Product number */
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	815a      	strh	r2, [r3, #10]
	pk_rver->prno[2] = (UH)VER_PRNO3;	/* Product number */
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	819a      	strh	r2, [r3, #12]
	pk_rver->prno[3] = (UH)VER_PRNO4;	/* Product number */
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	81da      	strh	r2, [r3, #14]

	return E_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	370c      	adds	r7, #12
 800929c:	46bd      	mov	sp, r7
 800929e:	bc80      	pop	{r7}
 80092a0:	4770      	bx	lr

080092a2 <QueInit>:
{
 80092a2:	b480      	push	{r7}
 80092a4:	b083      	sub	sp, #12
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	605a      	str	r2, [r3, #4]
}
 80092b6:	bf00      	nop
 80092b8:	370c      	adds	r7, #12
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bc80      	pop	{r7}
 80092be:	4770      	bx	lr

080092c0 <isQueEmpty>:
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
	return ( que->next == que )? TRUE: FALSE;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	687a      	ldr	r2, [r7, #4]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	bf0c      	ite	eq
 80092d2:	2301      	moveq	r3, #1
 80092d4:	2300      	movne	r3, #0
 80092d6:	b2db      	uxtb	r3, r3
}
 80092d8:	4618      	mov	r0, r3
 80092da:	370c      	adds	r7, #12
 80092dc:	46bd      	mov	sp, r7
 80092de:	bc80      	pop	{r7}
 80092e0:	4770      	bx	lr

080092e2 <QueInsert>:
{
 80092e2:	b480      	push	{r7}
 80092e4:	b083      	sub	sp, #12
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
 80092ea:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	685a      	ldr	r2, [r3, #4]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	605a      	str	r2, [r3, #4]
	entry->next = que;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	683a      	ldr	r2, [r7, #0]
 80092f8:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	605a      	str	r2, [r3, #4]
}
 8009308:	bf00      	nop
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	bc80      	pop	{r7}
 8009310:	4770      	bx	lr

08009312 <QueRemoveNext>:
{
 8009312:	b480      	push	{r7}
 8009314:	b085      	sub	sp, #20
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
	if ( que->next == que ) {
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	687a      	ldr	r2, [r7, #4]
 8009320:	429a      	cmp	r2, r3
 8009322:	d101      	bne.n	8009328 <QueRemoveNext+0x16>
		return NULL;
 8009324:	2300      	movs	r3, #0
 8009326:	e00b      	b.n	8009340 <QueRemoveNext+0x2e>
	entry = que->next;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	60fb      	str	r3, [r7, #12]
	que->next = (struct queue*)entry->next;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	601a      	str	r2, [r3, #0]
	entry->next->prev = que;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	605a      	str	r2, [r3, #4]
	return entry;
 800933e:	68fb      	ldr	r3, [r7, #12]
}
 8009340:	4618      	mov	r0, r3
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	bc80      	pop	{r7}
 8009348:	4770      	bx	lr
	...

0800934c <knl_isTaskIndependent>:
{
 800934c:	b480      	push	{r7}
 800934e:	af00      	add	r7, sp, #0
	return ( knl_taskindp > 0 )? TRUE: FALSE;
 8009350:	4b05      	ldr	r3, [pc, #20]	@ (8009368 <knl_isTaskIndependent+0x1c>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	bfcc      	ite	gt
 8009358:	2301      	movgt	r3, #1
 800935a:	2300      	movle	r3, #0
 800935c:	b2db      	uxtb	r3, r3
}
 800935e:	4618      	mov	r0, r3
 8009360:	46bd      	mov	sp, r7
 8009362:	bc80      	pop	{r7}
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	240029f8 	.word	0x240029f8

0800936c <knl_queue_insert_tpri>:

/*
 * Connect the task to the prioritized wait queue.
 */
Inline void knl_queue_insert_tpri( TCB *tcb, QUEUE *queue )
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b088      	sub	sp, #32
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
	QUEUE *q;
	QUEUE *start, *end;
	UB val;
	W offset;

	start = end = queue;
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	61bb      	str	r3, [r7, #24]
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	617b      	str	r3, [r7, #20]
	val = tcb->priority;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8009384:	74fb      	strb	r3, [r7, #19]
	offset = offsetof(TCB, priority);
 8009386:	2326      	movs	r3, #38	@ 0x26
 8009388:	60fb      	str	r3, [r7, #12]

	for ( q = start->next; q != end; q = q->next ) {
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	61fb      	str	r3, [r7, #28]
 8009390:	e009      	b.n	80093a6 <knl_queue_insert_tpri+0x3a>
		if ( *(UB*)((VB*)q + offset) > val ) {
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	69fa      	ldr	r2, [r7, #28]
 8009396:	4413      	add	r3, r2
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	7cfa      	ldrb	r2, [r7, #19]
 800939c:	429a      	cmp	r2, r3
 800939e:	d307      	bcc.n	80093b0 <knl_queue_insert_tpri+0x44>
	for ( q = start->next; q != end; q = q->next ) {
 80093a0:	69fb      	ldr	r3, [r7, #28]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	61fb      	str	r3, [r7, #28]
 80093a6:	69fa      	ldr	r2, [r7, #28]
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d1f1      	bne.n	8009392 <knl_queue_insert_tpri+0x26>
 80093ae:	e000      	b.n	80093b2 <knl_queue_insert_tpri+0x46>
			break;
 80093b0:	bf00      	nop
		}
	}

	QueInsert(&tcb->tskque, q);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	69f9      	ldr	r1, [r7, #28]
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7ff ff93 	bl	80092e2 <QueInsert>
}
 80093bc:	bf00      	nop
 80093be:	3720      	adds	r7, #32
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <knl_mutex_initialize>:

/*
 * Initialization of mutex control block 
 */
EXPORT ER knl_mutex_initialize(void)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
	if ( NUM_MTXID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_mtxcb);
 80093ca:	480e      	ldr	r0, [pc, #56]	@ (8009404 <knl_mutex_initialize+0x40>)
 80093cc:	f7ff ff69 	bl	80092a2 <QueInit>
	end = knl_mtxcb_table + NUM_MTXID;
 80093d0:	4b0d      	ldr	r3, [pc, #52]	@ (8009408 <knl_mutex_initialize+0x44>)
 80093d2:	603b      	str	r3, [r7, #0]
	for( mtxcb = knl_mtxcb_table; mtxcb < end; mtxcb++ ) {
 80093d4:	4b0d      	ldr	r3, [pc, #52]	@ (800940c <knl_mutex_initialize+0x48>)
 80093d6:	607b      	str	r3, [r7, #4]
 80093d8:	e00a      	b.n	80093f0 <knl_mutex_initialize+0x2c>
		mtxcb->mtxid = 0;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	609a      	str	r2, [r3, #8]
		QueInsert(&mtxcb->wait_queue, &knl_free_mtxcb);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4908      	ldr	r1, [pc, #32]	@ (8009404 <knl_mutex_initialize+0x40>)
 80093e4:	4618      	mov	r0, r3
 80093e6:	f7ff ff7c 	bl	80092e2 <QueInsert>
	for( mtxcb = knl_mtxcb_table; mtxcb < end; mtxcb++ ) {
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	3320      	adds	r3, #32
 80093ee:	607b      	str	r3, [r7, #4]
 80093f0:	687a      	ldr	r2, [r7, #4]
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d3f0      	bcc.n	80093da <knl_mutex_initialize+0x16>
	}

	return E_OK;
 80093f8:	2300      	movs	r3, #0
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3708      	adds	r7, #8
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
 8009402:	bf00      	nop
 8009404:	2400169c 	.word	0x2400169c
 8009408:	2400169c 	.word	0x2400169c
 800940c:	2400161c 	.word	0x2400161c

08009410 <knl_release_mutex>:
 * Set the highest priority between listed below:
 *	(A) The highest priority in all mutexes in which 'tcb' task locks. 
 *	(B) The base priority of 'tcb' task.
 */
EXPORT void knl_release_mutex( TCB *tcb, MTXCB *relmtxcb )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b086      	sub	sp, #24
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
	MTXCB	*mtxcb, **prev;
	INT	newpri, pri;

	/* (B) The base priority of task */
	newpri = tcb->bpriority;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8009420:	613b      	str	r3, [r7, #16]

	/* (A) The highest priority in mutex which is locked */
	pri = newpri;
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	60fb      	str	r3, [r7, #12]
	prev = &tcb->mtxlist;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	3364      	adds	r3, #100	@ 0x64
 800942a:	617b      	str	r3, [r7, #20]
	while ( (mtxcb = *prev) != NULL ) {
 800942c:	e02d      	b.n	800948a <knl_release_mutex+0x7a>
		if ( mtxcb == relmtxcb ) {
 800942e:	68ba      	ldr	r2, [r7, #8]
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	429a      	cmp	r2, r3
 8009434:	d104      	bne.n	8009440 <knl_release_mutex+0x30>
			/* Delete from list */
			*prev = mtxcb->mtxlist;
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	69da      	ldr	r2, [r3, #28]
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	601a      	str	r2, [r3, #0]
			continue;
 800943e:	e024      	b.n	800948a <knl_release_mutex+0x7a>
		}

		switch ( mtxcb->mtxatr & TA_CEILING ) {
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	691b      	ldr	r3, [r3, #16]
 8009444:	f003 0303 	and.w	r3, r3, #3
 8009448:	2b02      	cmp	r3, #2
 800944a:	d005      	beq.n	8009458 <knl_release_mutex+0x48>
 800944c:	2b03      	cmp	r3, #3
 800944e:	d110      	bne.n	8009472 <knl_release_mutex+0x62>
		  case TA_CEILING:
			pri = mtxcb->ceilpri;
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	7d1b      	ldrb	r3, [r3, #20]
 8009454:	60fb      	str	r3, [r7, #12]
			break;
 8009456:	e00f      	b.n	8009478 <knl_release_mutex+0x68>
		  case TA_INHERIT:
			if ( mtx_waited(mtxcb) ) {
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	4618      	mov	r0, r3
 800945c:	f7ff ff30 	bl	80092c0 <isQueEmpty>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	d107      	bne.n	8009476 <knl_release_mutex+0x66>
				pri = mtx_head_pri(mtxcb);
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800946e:	60fb      	str	r3, [r7, #12]
			}
			break;
 8009470:	e001      	b.n	8009476 <knl_release_mutex+0x66>
		  default: /* TA_TFIFO, TA_TPRI */
			/* nothing to do */
			break;
 8009472:	bf00      	nop
 8009474:	e000      	b.n	8009478 <knl_release_mutex+0x68>
			break;
 8009476:	bf00      	nop
		}
		if ( newpri > pri ) {
 8009478:	693a      	ldr	r2, [r7, #16]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	429a      	cmp	r2, r3
 800947e:	dd01      	ble.n	8009484 <knl_release_mutex+0x74>
			newpri = pri;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	613b      	str	r3, [r7, #16]
		}

		prev = &mtxcb->mtxlist;
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	331c      	adds	r3, #28
 8009488:	617b      	str	r3, [r7, #20]
	while ( (mtxcb = *prev) != NULL ) {
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	60bb      	str	r3, [r7, #8]
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d1cb      	bne.n	800942e <knl_release_mutex+0x1e>
	}

	if ( newpri != tcb->priority ) {
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800949c:	461a      	mov	r2, r3
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d003      	beq.n	80094ac <knl_release_mutex+0x9c>
		/* Change priority of lock get task */
		knl_change_task_priority(tcb, newpri);
 80094a4:	6939      	ldr	r1, [r7, #16]
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f001 f93c 	bl	800a724 <knl_change_task_priority>
	}
}
 80094ac:	bf00      	nop
 80094ae:	3718      	adds	r7, #24
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <knl_signal_all_mutex>:
 *	Free all mutexes which the task holds.
 *	Do not need to handle mutex list and priority of terminated task.
 *	
 */
EXPORT void knl_signal_all_mutex( TCB *tcb )
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b086      	sub	sp, #24
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
	MTXCB	*mtxcb, *next_mtxcb;
	TCB	*next_tcb;

	next_mtxcb = tcb->mtxlist;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094c0:	617b      	str	r3, [r7, #20]
	while ( (mtxcb = next_mtxcb) != NULL ) {
 80094c2:	e030      	b.n	8009526 <knl_signal_all_mutex+0x72>
		next_mtxcb = mtxcb->mtxlist;
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	69db      	ldr	r3, [r3, #28]
 80094c8:	617b      	str	r3, [r7, #20]

		if ( mtx_waited(mtxcb) ) {
 80094ca:	693b      	ldr	r3, [r7, #16]
 80094cc:	4618      	mov	r0, r3
 80094ce:	f7ff fef7 	bl	80092c0 <isQueEmpty>
 80094d2:	4603      	mov	r3, r0
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d123      	bne.n	8009520 <knl_signal_all_mutex+0x6c>
			next_tcb = (TCB*)mtxcb->wait_queue.next;
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	60fb      	str	r3, [r7, #12]

			/* Wake wait task */
			knl_wait_release_ok(next_tcb);
 80094de:	68f8      	ldr	r0, [r7, #12]
 80094e0:	f003 fcaa 	bl	800ce38 <knl_wait_release_ok>

			/* Change mutex get task */
			mtxcb->mtxtsk = next_tcb;
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	619a      	str	r2, [r3, #24]
			mtxcb->mtxlist = next_tcb->mtxlist;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	61da      	str	r2, [r3, #28]
			next_tcb->mtxlist = mtxcb;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	693a      	ldr	r2, [r7, #16]
 80094f6:	665a      	str	r2, [r3, #100]	@ 0x64

			if ( (mtxcb->mtxatr & TA_CEILING) == TA_CEILING ) {
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	691b      	ldr	r3, [r3, #16]
 80094fc:	f003 0303 	and.w	r3, r3, #3
 8009500:	2b03      	cmp	r3, #3
 8009502:	d110      	bne.n	8009526 <knl_signal_all_mutex+0x72>
				if ( next_tcb->priority > mtxcb->ceilpri ) {
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	7d1b      	ldrb	r3, [r3, #20]
 800950e:	429a      	cmp	r2, r3
 8009510:	d909      	bls.n	8009526 <knl_signal_all_mutex+0x72>
					/* Raise the priority for the task
					   that got lock to the highest
					   priority limit */
					knl_change_task_priority(next_tcb,
							mtxcb->ceilpri);
 8009512:	693b      	ldr	r3, [r7, #16]
 8009514:	7d1b      	ldrb	r3, [r3, #20]
					knl_change_task_priority(next_tcb,
 8009516:	4619      	mov	r1, r3
 8009518:	68f8      	ldr	r0, [r7, #12]
 800951a:	f001 f903 	bl	800a724 <knl_change_task_priority>
 800951e:	e002      	b.n	8009526 <knl_signal_all_mutex+0x72>
				}
			}
		} else {
			/* No wait task */
			mtxcb->mtxtsk = NULL;
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	2200      	movs	r2, #0
 8009524:	619a      	str	r2, [r3, #24]
	while ( (mtxcb = next_mtxcb) != NULL ) {
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	613b      	str	r3, [r7, #16]
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d1c9      	bne.n	80094c4 <knl_signal_all_mutex+0x10>
		}
	}
}
 8009530:	bf00      	nop
 8009532:	bf00      	nop
 8009534:	3718      	adds	r7, #24
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
	...

0800953c <knl_chg_pri_mutex>:
 *	priority limit of mutex with TA_CEILING attribute.
 *	In this case, return E_ILUSE.
 *    3.Other than above, return the 'priority'.
 */
EXPORT INT knl_chg_pri_mutex( TCB *tcb, INT priority )
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b086      	sub	sp, #24
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
	MTXCB	*mtxcb;
	INT	hi_pri, low_pri, pri;

	hi_pri  = priority;
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	613b      	str	r3, [r7, #16]
	low_pri = int_priority(MIN_TSKPRI);
 800954a:	2300      	movs	r3, #0
 800954c:	60fb      	str	r3, [r7, #12]

	/* Mutex lock wait */
	if ( (tcb->state & TS_WAIT) != 0 && (tcb->wspec->tskwait & TTW_MTX) != 0 ) {
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8009554:	f003 0302 	and.w	r3, r3, #2
 8009558:	2b00      	cmp	r3, #0
 800955a:	d01c      	beq.n	8009596 <knl_chg_pri_mutex+0x5a>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009566:	2b00      	cmp	r3, #0
 8009568:	d015      	beq.n	8009596 <knl_chg_pri_mutex+0x5a>
		mtxcb = get_mtxcb(tcb->wid);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800956e:	3b01      	subs	r3, #1
 8009570:	015b      	lsls	r3, r3, #5
 8009572:	4a2a      	ldr	r2, [pc, #168]	@ (800961c <knl_chg_pri_mutex+0xe0>)
 8009574:	4413      	add	r3, r2
 8009576:	617b      	str	r3, [r7, #20]
		if ( (mtxcb->mtxatr & TA_CEILING) == TA_CEILING ) {
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	691b      	ldr	r3, [r3, #16]
 800957c:	f003 0303 	and.w	r3, r3, #3
 8009580:	2b03      	cmp	r3, #3
 8009582:	d108      	bne.n	8009596 <knl_chg_pri_mutex+0x5a>
			pri = mtxcb->ceilpri;
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	7d1b      	ldrb	r3, [r3, #20]
 8009588:	60bb      	str	r3, [r7, #8]
			if ( pri > low_pri ) {
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	429a      	cmp	r2, r3
 8009590:	dd01      	ble.n	8009596 <knl_chg_pri_mutex+0x5a>
				low_pri = pri;
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	60fb      	str	r3, [r7, #12]
			}
		}
	}

	/* Locked Mutex */
	pri = hi_pri;
 8009596:	693b      	ldr	r3, [r7, #16]
 8009598:	60bb      	str	r3, [r7, #8]
	for ( mtxcb = tcb->mtxlist; mtxcb != NULL; mtxcb = mtxcb->mtxlist ) {
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800959e:	617b      	str	r3, [r7, #20]
 80095a0:	e02c      	b.n	80095fc <knl_chg_pri_mutex+0xc0>
		switch ( mtxcb->mtxatr & TA_CEILING ) {
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	691b      	ldr	r3, [r3, #16]
 80095a6:	f003 0303 	and.w	r3, r3, #3
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	d00b      	beq.n	80095c6 <knl_chg_pri_mutex+0x8a>
 80095ae:	2b03      	cmp	r3, #3
 80095b0:	d116      	bne.n	80095e0 <knl_chg_pri_mutex+0xa4>
		  case TA_CEILING:
			pri = mtxcb->ceilpri;
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	7d1b      	ldrb	r3, [r3, #20]
 80095b6:	60bb      	str	r3, [r7, #8]
			if ( pri > low_pri ) {
 80095b8:	68ba      	ldr	r2, [r7, #8]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	429a      	cmp	r2, r3
 80095be:	dd11      	ble.n	80095e4 <knl_chg_pri_mutex+0xa8>
				low_pri = pri;
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	60fb      	str	r3, [r7, #12]
			}
			break;
 80095c4:	e00e      	b.n	80095e4 <knl_chg_pri_mutex+0xa8>
		  case TA_INHERIT:
			if ( mtx_waited(mtxcb) ) {
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7ff fe79 	bl	80092c0 <isQueEmpty>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d109      	bne.n	80095e8 <knl_chg_pri_mutex+0xac>
				pri = mtx_head_pri(mtxcb);
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80095dc:	60bb      	str	r3, [r7, #8]
			}
			break;
 80095de:	e003      	b.n	80095e8 <knl_chg_pri_mutex+0xac>
		  default: /* TA_TFIFO, TA_TPRI */
			/* nothing to do */
			break;
 80095e0:	bf00      	nop
 80095e2:	e002      	b.n	80095ea <knl_chg_pri_mutex+0xae>
			break;
 80095e4:	bf00      	nop
 80095e6:	e000      	b.n	80095ea <knl_chg_pri_mutex+0xae>
			break;
 80095e8:	bf00      	nop
		}
		if ( pri < hi_pri ) {
 80095ea:	68ba      	ldr	r2, [r7, #8]
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	da01      	bge.n	80095f6 <knl_chg_pri_mutex+0xba>
			hi_pri = pri;
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	613b      	str	r3, [r7, #16]
	for ( mtxcb = tcb->mtxlist; mtxcb != NULL; mtxcb = mtxcb->mtxlist ) {
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	69db      	ldr	r3, [r3, #28]
 80095fa:	617b      	str	r3, [r7, #20]
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1cf      	bne.n	80095a2 <knl_chg_pri_mutex+0x66>
		}
	}

	if ( priority < low_pri ) {
 8009602:	683a      	ldr	r2, [r7, #0]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	429a      	cmp	r2, r3
 8009608:	da02      	bge.n	8009610 <knl_chg_pri_mutex+0xd4>
		return E_ILUSE;
 800960a:	f06f 031b 	mvn.w	r3, #27
 800960e:	e000      	b.n	8009612 <knl_chg_pri_mutex+0xd6>
	}
	return hi_pri;
 8009610:	693b      	ldr	r3, [r7, #16]
}
 8009612:	4618      	mov	r0, r3
 8009614:	3718      	adds	r7, #24
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	2400161c 	.word	0x2400161c

08009620 <tk_cre_mtx>:

/*
 * Create mutex
 */
SYSCALL ID tk_cre_mtx( CONST T_CMTX *pk_cmtx )
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b088      	sub	sp, #32
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
#if CHK_RSATR
	const ATR VALID_MTXATR = {
 8009628:	2303      	movs	r3, #3
 800962a:	617b      	str	r3, [r7, #20]
	MTXCB	*mtxcb;
	ID	mtxid;
	INT	ceilpri;
	ER	ercd;

	CHECK_RSATR(pk_cmtx->mtxatr, VALID_MTXATR);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	685a      	ldr	r2, [r3, #4]
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	43db      	mvns	r3, r3
 8009634:	4013      	ands	r3, r2
 8009636:	2b00      	cmp	r3, #0
 8009638:	d002      	beq.n	8009640 <tk_cre_mtx+0x20>
 800963a:	f06f 030a 	mvn.w	r3, #10
 800963e:	e059      	b.n	80096f4 <tk_cre_mtx+0xd4>

	if ( (pk_cmtx->mtxatr & TA_CEILING) == TA_CEILING ) {
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	685b      	ldr	r3, [r3, #4]
 8009644:	f003 0303 	and.w	r3, r3, #3
 8009648:	2b03      	cmp	r3, #3
 800964a:	d10f      	bne.n	800966c <tk_cre_mtx+0x4c>
		CHECK_PRI(pk_cmtx->ceilpri);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	2b00      	cmp	r3, #0
 8009652:	dd03      	ble.n	800965c <tk_cre_mtx+0x3c>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	2b20      	cmp	r3, #32
 800965a:	dd02      	ble.n	8009662 <tk_cre_mtx+0x42>
 800965c:	f06f 0310 	mvn.w	r3, #16
 8009660:	e048      	b.n	80096f4 <tk_cre_mtx+0xd4>
		ceilpri = int_priority(pk_cmtx->ceilpri);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	3b01      	subs	r3, #1
 8009668:	61fb      	str	r3, [r7, #28]
 800966a:	e001      	b.n	8009670 <tk_cre_mtx+0x50>
	} else {
		ceilpri = 0;
 800966c:	2300      	movs	r3, #0
 800966e:	61fb      	str	r3, [r7, #28]
	}

	BEGIN_CRITICAL_SECTION;
 8009670:	f004 f84d 	bl	800d70e <disint>
 8009674:	6138      	str	r0, [r7, #16]
	/* Get control block from FreeQue */
	mtxcb = (MTXCB*)QueRemoveNext(&knl_free_mtxcb);
 8009676:	4821      	ldr	r0, [pc, #132]	@ (80096fc <tk_cre_mtx+0xdc>)
 8009678:	f7ff fe4b 	bl	8009312 <QueRemoveNext>
 800967c:	60f8      	str	r0, [r7, #12]
	if ( mtxcb == NULL ) {
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d103      	bne.n	800968c <tk_cre_mtx+0x6c>
		ercd = E_LIMIT;
 8009684:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8009688:	61bb      	str	r3, [r7, #24]
 800968a:	e020      	b.n	80096ce <tk_cre_mtx+0xae>
	} else {
		mtxid = ID_MTX(mtxcb - knl_mtxcb_table);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	4a1c      	ldr	r2, [pc, #112]	@ (8009700 <tk_cre_mtx+0xe0>)
 8009690:	1a9b      	subs	r3, r3, r2
 8009692:	115b      	asrs	r3, r3, #5
 8009694:	3301      	adds	r3, #1
 8009696:	60bb      	str	r3, [r7, #8]

		/* Initialize control block */
		QueInit(&mtxcb->wait_queue);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	4618      	mov	r0, r3
 800969c:	f7ff fe01 	bl	80092a2 <QueInit>
		mtxcb->mtxid   = mtxid;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	68ba      	ldr	r2, [r7, #8]
 80096a4:	609a      	str	r2, [r3, #8]
		mtxcb->exinf   = pk_cmtx->exinf;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	60da      	str	r2, [r3, #12]
		mtxcb->mtxatr  = pk_cmtx->mtxatr;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	685a      	ldr	r2, [r3, #4]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	611a      	str	r2, [r3, #16]
		mtxcb->ceilpri = ceilpri;
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	b2da      	uxtb	r2, r3
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	751a      	strb	r2, [r3, #20]
		mtxcb->mtxtsk  = NULL;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2200      	movs	r2, #0
 80096c2:	619a      	str	r2, [r3, #24]
		mtxcb->mtxlist = NULL;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2200      	movs	r2, #0
 80096c8:	61da      	str	r2, [r3, #28]
		if ( (pk_cmtx->mtxatr & TA_DSNAME) != 0 ) {
			knl_strncpy((char*)mtxcb->name, (char*)pk_cmtx->dsname,
				(UINT)OBJECT_NAME_LENGTH);
		}
#endif
		ercd = mtxid;
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	61bb      	str	r3, [r7, #24]
	}
	END_CRITICAL_SECTION;
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d10b      	bne.n	80096ec <tk_cre_mtx+0xcc>
 80096d4:	4b0b      	ldr	r3, [pc, #44]	@ (8009704 <tk_cre_mtx+0xe4>)
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	4b0b      	ldr	r3, [pc, #44]	@ (8009708 <tk_cre_mtx+0xe8>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	429a      	cmp	r2, r3
 80096de:	d005      	beq.n	80096ec <tk_cre_mtx+0xcc>
 80096e0:	4b0a      	ldr	r3, [pc, #40]	@ (800970c <tk_cre_mtx+0xec>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d101      	bne.n	80096ec <tk_cre_mtx+0xcc>
 80096e8:	f7fa f8da 	bl	80038a0 <knl_dispatch>
 80096ec:	6938      	ldr	r0, [r7, #16]
 80096ee:	f003 fff6 	bl	800d6de <set_basepri>

	return ercd;
 80096f2:	69bb      	ldr	r3, [r7, #24]
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3720      	adds	r7, #32
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	2400169c 	.word	0x2400169c
 8009700:	2400161c 	.word	0x2400161c
 8009704:	24001870 	.word	0x24001870
 8009708:	24001874 	.word	0x24001874
 800970c:	2400186c 	.word	0x2400186c

08009710 <tk_del_mtx>:
#ifdef USE_FUNC_TK_DEL_MTX
/*
 * Delete mutex
 */
SYSCALL ER tk_del_mtx( ID mtxid )
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
	MTXCB	*mtxcb;
	ER	ercd = E_OK;
 8009718:	2300      	movs	r3, #0
 800971a:	617b      	str	r3, [r7, #20]

	CHECK_MTXID(mtxid);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2b00      	cmp	r3, #0
 8009720:	dd02      	ble.n	8009728 <tk_del_mtx+0x18>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2b04      	cmp	r3, #4
 8009726:	dd02      	ble.n	800972e <tk_del_mtx+0x1e>
 8009728:	f06f 0311 	mvn.w	r3, #17
 800972c:	e039      	b.n	80097a2 <tk_del_mtx+0x92>

	mtxcb = get_mtxcb(mtxid);
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	3b01      	subs	r3, #1
 8009732:	015b      	lsls	r3, r3, #5
 8009734:	4a1d      	ldr	r2, [pc, #116]	@ (80097ac <tk_del_mtx+0x9c>)
 8009736:	4413      	add	r3, r2
 8009738:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 800973a:	f003 ffe8 	bl	800d70e <disint>
 800973e:	60f8      	str	r0, [r7, #12]
	if ( mtxcb->mtxid == 0 ) {
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d103      	bne.n	8009750 <tk_del_mtx+0x40>
		ercd = E_NOEXS;
 8009748:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 800974c:	617b      	str	r3, [r7, #20]
 800974e:	e015      	b.n	800977c <tk_del_mtx+0x6c>
	} else {
		/* If there is a task that holds mutex to delete,
		 * delete the mutex from the list
		 * and adjust the task priority if necessary.
		 */
		if ( mtxcb->mtxtsk != NULL ) {
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	699b      	ldr	r3, [r3, #24]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d005      	beq.n	8009764 <tk_del_mtx+0x54>
			knl_release_mutex(mtxcb->mtxtsk, mtxcb);
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	699b      	ldr	r3, [r3, #24]
 800975c:	6939      	ldr	r1, [r7, #16]
 800975e:	4618      	mov	r0, r3
 8009760:	f7ff fe56 	bl	8009410 <knl_release_mutex>
		}

		/* Free wait state of task (E_DLT) */
		knl_wait_delete(&mtxcb->wait_queue);
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	4618      	mov	r0, r3
 8009768:	f003 fc1c 	bl	800cfa4 <knl_wait_delete>

		/* Return to FreeQue */
		QueInsert(&mtxcb->wait_queue, &knl_free_mtxcb);
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	4910      	ldr	r1, [pc, #64]	@ (80097b0 <tk_del_mtx+0xa0>)
 8009770:	4618      	mov	r0, r3
 8009772:	f7ff fdb6 	bl	80092e2 <QueInsert>
		mtxcb->mtxid = 0;
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	2200      	movs	r2, #0
 800977a:	609a      	str	r2, [r3, #8]
	}
	END_CRITICAL_SECTION;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d10b      	bne.n	800979a <tk_del_mtx+0x8a>
 8009782:	4b0c      	ldr	r3, [pc, #48]	@ (80097b4 <tk_del_mtx+0xa4>)
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	4b0c      	ldr	r3, [pc, #48]	@ (80097b8 <tk_del_mtx+0xa8>)
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	429a      	cmp	r2, r3
 800978c:	d005      	beq.n	800979a <tk_del_mtx+0x8a>
 800978e:	4b0b      	ldr	r3, [pc, #44]	@ (80097bc <tk_del_mtx+0xac>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d101      	bne.n	800979a <tk_del_mtx+0x8a>
 8009796:	f7fa f883 	bl	80038a0 <knl_dispatch>
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f003 ff9f 	bl	800d6de <set_basepri>

	return ercd;
 80097a0:	697b      	ldr	r3, [r7, #20]
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3718      	adds	r7, #24
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	2400161c 	.word	0x2400161c
 80097b0:	2400169c 	.word	0x2400169c
 80097b4:	24001870 	.word	0x24001870
 80097b8:	24001874 	.word	0x24001874
 80097bc:	2400186c 	.word	0x2400186c

080097c0 <mtx_chg_pri>:

/*
 * Processing if the priority of wait task changes
 */
LOCAL void mtx_chg_pri( TCB *tcb, INT oldpri )
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b084      	sub	sp, #16
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
 80097c8:	6039      	str	r1, [r7, #0]
	MTXCB	*mtxcb;
	TCB	*mtxtsk;

	mtxcb = get_mtxcb(tcb->wid);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097ce:	3b01      	subs	r3, #1
 80097d0:	015b      	lsls	r3, r3, #5
 80097d2:	4a17      	ldr	r2, [pc, #92]	@ (8009830 <mtx_chg_pri+0x70>)
 80097d4:	4413      	add	r3, r2
 80097d6:	60fb      	str	r3, [r7, #12]
	knl_gcb_change_priority((GCB*)mtxcb, tcb);
 80097d8:	6879      	ldr	r1, [r7, #4]
 80097da:	68f8      	ldr	r0, [r7, #12]
 80097dc:	f003 fc46 	bl	800d06c <knl_gcb_change_priority>

	if ( (mtxcb->mtxatr & TA_CEILING) == TA_INHERIT ) {
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	691b      	ldr	r3, [r3, #16]
 80097e4:	f003 0303 	and.w	r3, r3, #3
 80097e8:	2b02      	cmp	r3, #2
 80097ea:	d11d      	bne.n	8009828 <mtx_chg_pri+0x68>
		mtxtsk = mtxcb->mtxtsk;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	699b      	ldr	r3, [r3, #24]
 80097f0:	60bb      	str	r3, [r7, #8]
		if ( mtxtsk->priority > tcb->priority ) {
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80097fe:	429a      	cmp	r2, r3
 8009800:	d907      	bls.n	8009812 <mtx_chg_pri+0x52>
			/* Since the highest priority of the lock wait task
			   became higher, raise the lock get task priority
			   higher */
			knl_change_task_priority(mtxtsk, tcb->priority);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8009808:	4619      	mov	r1, r3
 800980a:	68b8      	ldr	r0, [r7, #8]
 800980c:	f000 ff8a 	bl	800a724 <knl_change_task_priority>
			/* Since the highest priority of the lock wait task
			   might become lower, adjust this priority */
			reset_priority(mtxtsk);
		}
	}
}
 8009810:	e00a      	b.n	8009828 <mtx_chg_pri+0x68>
		} else if ( mtxtsk->priority == oldpri ) {
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8009818:	461a      	mov	r2, r3
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	4293      	cmp	r3, r2
 800981e:	d103      	bne.n	8009828 <mtx_chg_pri+0x68>
			reset_priority(mtxtsk);
 8009820:	2100      	movs	r1, #0
 8009822:	68b8      	ldr	r0, [r7, #8]
 8009824:	f7ff fdf4 	bl	8009410 <knl_release_mutex>
}
 8009828:	bf00      	nop
 800982a:	3710      	adds	r7, #16
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}
 8009830:	2400161c 	.word	0x2400161c

08009834 <mtx_rel_wai>:

/*
 * Processing if the wait task is released (For TA_INHERIT only)
 */
LOCAL void mtx_rel_wai( TCB *tcb )
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b084      	sub	sp, #16
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
	MTXCB	*mtxcb;
	TCB	*mtxtsk;

	mtxcb = get_mtxcb(tcb->wid);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009840:	3b01      	subs	r3, #1
 8009842:	015b      	lsls	r3, r3, #5
 8009844:	4a0a      	ldr	r2, [pc, #40]	@ (8009870 <mtx_rel_wai+0x3c>)
 8009846:	4413      	add	r3, r2
 8009848:	60fb      	str	r3, [r7, #12]
	mtxtsk = mtxcb->mtxtsk;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	699b      	ldr	r3, [r3, #24]
 800984e:	60bb      	str	r3, [r7, #8]

	if ( mtxtsk->priority == tcb->priority ) {
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800985c:	429a      	cmp	r2, r3
 800985e:	d103      	bne.n	8009868 <mtx_rel_wai+0x34>
		/* Since the highest priority of the lock wait task might 
		   become lower, adjust this priority */
		reset_priority(mtxtsk);
 8009860:	2100      	movs	r1, #0
 8009862:	68b8      	ldr	r0, [r7, #8]
 8009864:	f7ff fdd4 	bl	8009410 <knl_release_mutex>
	}
}
 8009868:	bf00      	nop
 800986a:	3710      	adds	r7, #16
 800986c:	46bd      	mov	sp, r7
 800986e:	bd80      	pop	{r7, pc}
 8009870:	2400161c 	.word	0x2400161c

08009874 <tk_loc_mtx>:

/*
 * Lock mutex
 */
SYSCALL ER tk_loc_mtx( ID mtxid, TMO tmout )
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b088      	sub	sp, #32
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
	MTXCB	*mtxcb;
	TCB	*mtxtsk;
	ATR	mtxatr;
	ER	ercd = E_OK;
 800987e:	2300      	movs	r3, #0
 8009880:	60fb      	str	r3, [r7, #12]

	CHECK_MTXID(mtxid);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	2b00      	cmp	r3, #0
 8009886:	dd02      	ble.n	800988e <tk_loc_mtx+0x1a>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2b04      	cmp	r3, #4
 800988c:	dd02      	ble.n	8009894 <tk_loc_mtx+0x20>
 800988e:	f06f 0311 	mvn.w	r3, #17
 8009892:	e0d1      	b.n	8009a38 <tk_loc_mtx+0x1c4>
	CHECK_TMOUT(tmout);
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800989a:	da02      	bge.n	80098a2 <tk_loc_mtx+0x2e>
 800989c:	f06f 0310 	mvn.w	r3, #16
 80098a0:	e0ca      	b.n	8009a38 <tk_loc_mtx+0x1c4>
	CHECK_DISPATCH();
 80098a2:	4b67      	ldr	r3, [pc, #412]	@ (8009a40 <tk_loc_mtx+0x1cc>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d10d      	bne.n	80098c6 <tk_loc_mtx+0x52>
 80098aa:	f7ff fd4f 	bl	800934c <knl_isTaskIndependent>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d108      	bne.n	80098c6 <tk_loc_mtx+0x52>
 80098b4:	4b63      	ldr	r3, [pc, #396]	@ (8009a44 <tk_loc_mtx+0x1d0>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d004      	beq.n	80098c6 <tk_loc_mtx+0x52>
 80098bc:	f003 ff1b 	bl	800d6f6 <get_basepri>
 80098c0:	4603      	mov	r3, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d002      	beq.n	80098cc <tk_loc_mtx+0x58>
 80098c6:	f06f 0318 	mvn.w	r3, #24
 80098ca:	e0b5      	b.n	8009a38 <tk_loc_mtx+0x1c4>

	mtxcb = get_mtxcb(mtxid);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	3b01      	subs	r3, #1
 80098d0:	015b      	lsls	r3, r3, #5
 80098d2:	4a5d      	ldr	r2, [pc, #372]	@ (8009a48 <tk_loc_mtx+0x1d4>)
 80098d4:	4413      	add	r3, r2
 80098d6:	61fb      	str	r3, [r7, #28]

	BEGIN_CRITICAL_SECTION;
 80098d8:	f003 ff19 	bl	800d70e <disint>
 80098dc:	61b8      	str	r0, [r7, #24]
	if ( mtxcb->mtxid == 0 ) {
 80098de:	69fb      	ldr	r3, [r7, #28]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d103      	bne.n	80098ee <tk_loc_mtx+0x7a>
		ercd = E_NOEXS;
 80098e6:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 80098ea:	60fb      	str	r3, [r7, #12]
		goto error_exit;
 80098ec:	e091      	b.n	8009a12 <tk_loc_mtx+0x19e>
	}
	if ( mtxcb->mtxtsk == knl_ctxtsk ) {
 80098ee:	69fb      	ldr	r3, [r7, #28]
 80098f0:	699a      	ldr	r2, [r3, #24]
 80098f2:	4b54      	ldr	r3, [pc, #336]	@ (8009a44 <tk_loc_mtx+0x1d0>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d103      	bne.n	8009902 <tk_loc_mtx+0x8e>
		ercd = E_ILUSE;  /* Multiplexed lock */
 80098fa:	f06f 031b 	mvn.w	r3, #27
 80098fe:	60fb      	str	r3, [r7, #12]
		goto error_exit;
 8009900:	e087      	b.n	8009a12 <tk_loc_mtx+0x19e>
	}

	mtxatr = mtxcb->mtxatr & TA_CEILING;
 8009902:	69fb      	ldr	r3, [r7, #28]
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	f003 0303 	and.w	r3, r3, #3
 800990a:	617b      	str	r3, [r7, #20]
	if ( mtxatr == TA_CEILING ) {
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	2b03      	cmp	r3, #3
 8009910:	d10b      	bne.n	800992a <tk_loc_mtx+0xb6>
		if ( knl_ctxtsk->bpriority < mtxcb->ceilpri ) {
 8009912:	4b4c      	ldr	r3, [pc, #304]	@ (8009a44 <tk_loc_mtx+0x1d0>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800991a:	69fb      	ldr	r3, [r7, #28]
 800991c:	7d1b      	ldrb	r3, [r3, #20]
 800991e:	429a      	cmp	r2, r3
 8009920:	d203      	bcs.n	800992a <tk_loc_mtx+0xb6>
			/* Violation of highest priority limit */
			ercd = E_ILUSE;
 8009922:	f06f 031b 	mvn.w	r3, #27
 8009926:	60fb      	str	r3, [r7, #12]
			goto error_exit;
 8009928:	e073      	b.n	8009a12 <tk_loc_mtx+0x19e>
		}
	}

	mtxtsk = mtxcb->mtxtsk;
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	699b      	ldr	r3, [r3, #24]
 800992e:	613b      	str	r3, [r7, #16]
	if ( mtxtsk == NULL ) {
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d120      	bne.n	8009978 <tk_loc_mtx+0x104>
		/* Get lock */
		mtxcb->mtxtsk = knl_ctxtsk;
 8009936:	4b43      	ldr	r3, [pc, #268]	@ (8009a44 <tk_loc_mtx+0x1d0>)
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	69fb      	ldr	r3, [r7, #28]
 800993c:	619a      	str	r2, [r3, #24]
		mtxcb->mtxlist = knl_ctxtsk->mtxlist;
 800993e:	4b41      	ldr	r3, [pc, #260]	@ (8009a44 <tk_loc_mtx+0x1d0>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009944:	69fb      	ldr	r3, [r7, #28]
 8009946:	61da      	str	r2, [r3, #28]
		knl_ctxtsk->mtxlist = mtxcb;
 8009948:	4b3e      	ldr	r3, [pc, #248]	@ (8009a44 <tk_loc_mtx+0x1d0>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	69fa      	ldr	r2, [r7, #28]
 800994e:	665a      	str	r2, [r3, #100]	@ 0x64

		if ( mtxatr == TA_CEILING ) {
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	2b03      	cmp	r3, #3
 8009954:	d15d      	bne.n	8009a12 <tk_loc_mtx+0x19e>
			if ( knl_ctxtsk->priority > mtxcb->ceilpri ) {
 8009956:	4b3b      	ldr	r3, [pc, #236]	@ (8009a44 <tk_loc_mtx+0x1d0>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	7d1b      	ldrb	r3, [r3, #20]
 8009962:	429a      	cmp	r2, r3
 8009964:	d955      	bls.n	8009a12 <tk_loc_mtx+0x19e>
				/* Raise its own task to the highest
				   priority limit */
				knl_change_task_priority(knl_ctxtsk, mtxcb->ceilpri);
 8009966:	4b37      	ldr	r3, [pc, #220]	@ (8009a44 <tk_loc_mtx+0x1d0>)
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	7d1b      	ldrb	r3, [r3, #20]
 800996e:	4619      	mov	r1, r3
 8009970:	4610      	mov	r0, r2
 8009972:	f000 fed7 	bl	800a724 <knl_change_task_priority>
 8009976:	e04c      	b.n	8009a12 <tk_loc_mtx+0x19e>
			}
		}
	} else {
		ercd = E_TMOUT;
 8009978:	f06f 0331 	mvn.w	r3, #49	@ 0x31
 800997c:	60fb      	str	r3, [r7, #12]
		if ( tmout == TMO_POL ) {
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d045      	beq.n	8009a10 <tk_loc_mtx+0x19c>
			goto error_exit;
		}

		if ( mtxatr == TA_INHERIT ) {
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	2b02      	cmp	r3, #2
 8009988:	d110      	bne.n	80099ac <tk_loc_mtx+0x138>
			if ( mtxtsk->priority > knl_ctxtsk->priority ) {
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8009990:	4b2c      	ldr	r3, [pc, #176]	@ (8009a44 <tk_loc_mtx+0x1d0>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8009998:	429a      	cmp	r2, r3
 800999a:	d907      	bls.n	80099ac <tk_loc_mtx+0x138>
				/* Raise the priority of task during
				   locking to the same priority as its
				   own task */
				knl_change_task_priority(mtxtsk, knl_ctxtsk->priority);
 800999c:	4b29      	ldr	r3, [pc, #164]	@ (8009a44 <tk_loc_mtx+0x1d0>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 80099a4:	4619      	mov	r1, r3
 80099a6:	6938      	ldr	r0, [r7, #16]
 80099a8:	f000 febc 	bl	800a724 <knl_change_task_priority>
			}
		}

		/* Ready for wait */
		knl_ctxtsk->wspec = ( mtxatr == TA_TFIFO   )? &knl_wspec_mtx_tfifo:
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d006      	beq.n	80099c0 <tk_loc_mtx+0x14c>
				( mtxatr == TA_INHERIT )? &knl_wspec_mtx_inherit:
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	2b02      	cmp	r3, #2
 80099b6:	d101      	bne.n	80099bc <tk_loc_mtx+0x148>
 80099b8:	4b24      	ldr	r3, [pc, #144]	@ (8009a4c <tk_loc_mtx+0x1d8>)
 80099ba:	e002      	b.n	80099c2 <tk_loc_mtx+0x14e>
 80099bc:	4b24      	ldr	r3, [pc, #144]	@ (8009a50 <tk_loc_mtx+0x1dc>)
 80099be:	e000      	b.n	80099c2 <tk_loc_mtx+0x14e>
		knl_ctxtsk->wspec = ( mtxatr == TA_TFIFO   )? &knl_wspec_mtx_tfifo:
 80099c0:	4b24      	ldr	r3, [pc, #144]	@ (8009a54 <tk_loc_mtx+0x1e0>)
 80099c2:	4a20      	ldr	r2, [pc, #128]	@ (8009a44 <tk_loc_mtx+0x1d0>)
 80099c4:	6812      	ldr	r2, [r2, #0]
 80099c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
							  &knl_wspec_mtx_tpri;
		knl_ctxtsk->wercd = &ercd;
 80099c8:	4b1e      	ldr	r3, [pc, #120]	@ (8009a44 <tk_loc_mtx+0x1d0>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f107 020c 	add.w	r2, r7, #12
 80099d0:	63da      	str	r2, [r3, #60]	@ 0x3c
		knl_ctxtsk->wid = mtxcb->mtxid;
 80099d2:	4b1c      	ldr	r3, [pc, #112]	@ (8009a44 <tk_loc_mtx+0x1d0>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	69fa      	ldr	r2, [r7, #28]
 80099d8:	6892      	ldr	r2, [r2, #8]
 80099da:	631a      	str	r2, [r3, #48]	@ 0x30
		knl_make_wait(tmout, mtxcb->mtxatr);
 80099dc:	69fb      	ldr	r3, [r7, #28]
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	4619      	mov	r1, r3
 80099e2:	6838      	ldr	r0, [r7, #0]
 80099e4:	f003 fa7a 	bl	800cedc <knl_make_wait>
		if ( mtxatr == TA_TFIFO ) {
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d108      	bne.n	8009a00 <tk_loc_mtx+0x18c>
			QueInsert(&knl_ctxtsk->tskque, &mtxcb->wait_queue);
 80099ee:	4b15      	ldr	r3, [pc, #84]	@ (8009a44 <tk_loc_mtx+0x1d0>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	461a      	mov	r2, r3
 80099f4:	69fb      	ldr	r3, [r7, #28]
 80099f6:	4619      	mov	r1, r3
 80099f8:	4610      	mov	r0, r2
 80099fa:	f7ff fc72 	bl	80092e2 <QueInsert>
 80099fe:	e008      	b.n	8009a12 <tk_loc_mtx+0x19e>
		} else {
			knl_queue_insert_tpri(knl_ctxtsk, &mtxcb->wait_queue);
 8009a00:	4b10      	ldr	r3, [pc, #64]	@ (8009a44 <tk_loc_mtx+0x1d0>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	69fa      	ldr	r2, [r7, #28]
 8009a06:	4611      	mov	r1, r2
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7ff fcaf 	bl	800936c <knl_queue_insert_tpri>
 8009a0e:	e000      	b.n	8009a12 <tk_loc_mtx+0x19e>
			goto error_exit;
 8009a10:	bf00      	nop
		}
	}

    error_exit:
	END_CRITICAL_SECTION;
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d10b      	bne.n	8009a30 <tk_loc_mtx+0x1bc>
 8009a18:	4b0a      	ldr	r3, [pc, #40]	@ (8009a44 <tk_loc_mtx+0x1d0>)
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8009a58 <tk_loc_mtx+0x1e4>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d005      	beq.n	8009a30 <tk_loc_mtx+0x1bc>
 8009a24:	4b06      	ldr	r3, [pc, #24]	@ (8009a40 <tk_loc_mtx+0x1cc>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d101      	bne.n	8009a30 <tk_loc_mtx+0x1bc>
 8009a2c:	f7f9 ff38 	bl	80038a0 <knl_dispatch>
 8009a30:	69b8      	ldr	r0, [r7, #24]
 8009a32:	f003 fe54 	bl	800d6de <set_basepri>

	return ercd;
 8009a36:	68fb      	ldr	r3, [r7, #12]
}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3720      	adds	r7, #32
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	2400186c 	.word	0x2400186c
 8009a44:	24001870 	.word	0x24001870
 8009a48:	2400161c 	.word	0x2400161c
 8009a4c:	0800eeac 	.word	0x0800eeac
 8009a50:	0800eea0 	.word	0x0800eea0
 8009a54:	0800ee94 	.word	0x0800ee94
 8009a58:	24001874 	.word	0x24001874

08009a5c <tk_unl_mtx>:

/*
 * Unlock mutex
 */
SYSCALL ER tk_unl_mtx( ID mtxid )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b086      	sub	sp, #24
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
	MTXCB	*mtxcb;	
	TCB	*tcb;
	ER	ercd = E_OK;
 8009a64:	2300      	movs	r3, #0
 8009a66:	617b      	str	r3, [r7, #20]

	CHECK_MTXID(mtxid);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	dd02      	ble.n	8009a74 <tk_unl_mtx+0x18>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2b04      	cmp	r3, #4
 8009a72:	dd02      	ble.n	8009a7a <tk_unl_mtx+0x1e>
 8009a74:	f06f 0311 	mvn.w	r3, #17
 8009a78:	e06d      	b.n	8009b56 <tk_unl_mtx+0xfa>
	CHECK_INTSK();
 8009a7a:	f7ff fc67 	bl	800934c <knl_isTaskIndependent>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d103      	bne.n	8009a8c <tk_unl_mtx+0x30>
 8009a84:	4b36      	ldr	r3, [pc, #216]	@ (8009b60 <tk_unl_mtx+0x104>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d102      	bne.n	8009a92 <tk_unl_mtx+0x36>
 8009a8c:	f06f 0318 	mvn.w	r3, #24
 8009a90:	e061      	b.n	8009b56 <tk_unl_mtx+0xfa>

	mtxcb = get_mtxcb(mtxid);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	3b01      	subs	r3, #1
 8009a96:	015b      	lsls	r3, r3, #5
 8009a98:	4a32      	ldr	r2, [pc, #200]	@ (8009b64 <tk_unl_mtx+0x108>)
 8009a9a:	4413      	add	r3, r2
 8009a9c:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 8009a9e:	f003 fe36 	bl	800d70e <disint>
 8009aa2:	60f8      	str	r0, [r7, #12]
	if ( mtxcb->mtxid == 0 ) {
 8009aa4:	693b      	ldr	r3, [r7, #16]
 8009aa6:	689b      	ldr	r3, [r3, #8]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d103      	bne.n	8009ab4 <tk_unl_mtx+0x58>
		ercd = E_NOEXS;
 8009aac:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 8009ab0:	617b      	str	r3, [r7, #20]
		goto error_exit;
 8009ab2:	e03d      	b.n	8009b30 <tk_unl_mtx+0xd4>
	}
	if ( mtxcb->mtxtsk != knl_ctxtsk ) {
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	699a      	ldr	r2, [r3, #24]
 8009ab8:	4b29      	ldr	r3, [pc, #164]	@ (8009b60 <tk_unl_mtx+0x104>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d003      	beq.n	8009ac8 <tk_unl_mtx+0x6c>
		ercd = E_ILUSE;  /* This is not locked by its own task */
 8009ac0:	f06f 031b 	mvn.w	r3, #27
 8009ac4:	617b      	str	r3, [r7, #20]
		goto error_exit;
 8009ac6:	e033      	b.n	8009b30 <tk_unl_mtx+0xd4>
	}

	/* Delete the mutex from the list,
	   and adjust its own task priority if necessary. */
	knl_release_mutex(knl_ctxtsk, mtxcb);
 8009ac8:	4b25      	ldr	r3, [pc, #148]	@ (8009b60 <tk_unl_mtx+0x104>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	6939      	ldr	r1, [r7, #16]
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7ff fc9e 	bl	8009410 <knl_release_mutex>

	if ( mtx_waited(mtxcb) ) {
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7ff fbf2 	bl	80092c0 <isQueEmpty>
 8009adc:	4603      	mov	r3, r0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d123      	bne.n	8009b2a <tk_unl_mtx+0xce>
		tcb = (TCB*)mtxcb->wait_queue.next;
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	60bb      	str	r3, [r7, #8]

		/* Release wait */
		knl_wait_release_ok(tcb);
 8009ae8:	68b8      	ldr	r0, [r7, #8]
 8009aea:	f003 f9a5 	bl	800ce38 <knl_wait_release_ok>

		/* Change mutex get task */
		mtxcb->mtxtsk = tcb;
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	68ba      	ldr	r2, [r7, #8]
 8009af2:	619a      	str	r2, [r3, #24]
		mtxcb->mtxlist = tcb->mtxlist;
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	61da      	str	r2, [r3, #28]
		tcb->mtxlist = mtxcb;
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	693a      	ldr	r2, [r7, #16]
 8009b00:	665a      	str	r2, [r3, #100]	@ 0x64

		if ( (mtxcb->mtxatr & TA_CEILING) == TA_CEILING ) {
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	691b      	ldr	r3, [r3, #16]
 8009b06:	f003 0303 	and.w	r3, r3, #3
 8009b0a:	2b03      	cmp	r3, #3
 8009b0c:	d110      	bne.n	8009b30 <tk_unl_mtx+0xd4>
			if ( tcb->priority > mtxcb->ceilpri ) {
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8009b14:	693b      	ldr	r3, [r7, #16]
 8009b16:	7d1b      	ldrb	r3, [r3, #20]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d909      	bls.n	8009b30 <tk_unl_mtx+0xd4>
				/* Raise the priority of the task that
				   got lock to the highest priority limit */
				knl_change_task_priority(tcb, mtxcb->ceilpri);
 8009b1c:	693b      	ldr	r3, [r7, #16]
 8009b1e:	7d1b      	ldrb	r3, [r3, #20]
 8009b20:	4619      	mov	r1, r3
 8009b22:	68b8      	ldr	r0, [r7, #8]
 8009b24:	f000 fdfe 	bl	800a724 <knl_change_task_priority>
 8009b28:	e002      	b.n	8009b30 <tk_unl_mtx+0xd4>
			}
		}
	} else {
		/* No wait task */
		mtxcb->mtxtsk = NULL;
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	619a      	str	r2, [r3, #24]
	}

    error_exit:
	END_CRITICAL_SECTION;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d10b      	bne.n	8009b4e <tk_unl_mtx+0xf2>
 8009b36:	4b0a      	ldr	r3, [pc, #40]	@ (8009b60 <tk_unl_mtx+0x104>)
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8009b68 <tk_unl_mtx+0x10c>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d005      	beq.n	8009b4e <tk_unl_mtx+0xf2>
 8009b42:	4b0a      	ldr	r3, [pc, #40]	@ (8009b6c <tk_unl_mtx+0x110>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d101      	bne.n	8009b4e <tk_unl_mtx+0xf2>
 8009b4a:	f7f9 fea9 	bl	80038a0 <knl_dispatch>
 8009b4e:	68f8      	ldr	r0, [r7, #12]
 8009b50:	f003 fdc5 	bl	800d6de <set_basepri>

	return ercd;
 8009b54:	697b      	ldr	r3, [r7, #20]
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3718      	adds	r7, #24
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
 8009b5e:	bf00      	nop
 8009b60:	24001870 	.word	0x24001870
 8009b64:	2400161c 	.word	0x2400161c
 8009b68:	24001874 	.word	0x24001874
 8009b6c:	2400186c 	.word	0x2400186c

08009b70 <tk_ref_mtx>:
#ifdef USE_FUNC_TK_REF_MTX
/*
 * Refer mutex state
 */
SYSCALL ER tk_ref_mtx( ID mtxid, T_RMTX *pk_rmtx )
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b086      	sub	sp, #24
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
 8009b78:	6039      	str	r1, [r7, #0]
	MTXCB	*mtxcb;
	ER	ercd = E_OK;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	617b      	str	r3, [r7, #20]

	CHECK_MTXID(mtxid);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	dd02      	ble.n	8009b8a <tk_ref_mtx+0x1a>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2b04      	cmp	r3, #4
 8009b88:	dd02      	ble.n	8009b90 <tk_ref_mtx+0x20>
 8009b8a:	f06f 0311 	mvn.w	r3, #17
 8009b8e:	e039      	b.n	8009c04 <tk_ref_mtx+0x94>

	mtxcb = get_mtxcb(mtxid);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	3b01      	subs	r3, #1
 8009b94:	015b      	lsls	r3, r3, #5
 8009b96:	4a1d      	ldr	r2, [pc, #116]	@ (8009c0c <tk_ref_mtx+0x9c>)
 8009b98:	4413      	add	r3, r2
 8009b9a:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 8009b9c:	f003 fdb7 	bl	800d70e <disint>
 8009ba0:	60f8      	str	r0, [r7, #12]
	if ( mtxcb->mtxid == 0 ) {
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	689b      	ldr	r3, [r3, #8]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d103      	bne.n	8009bb2 <tk_ref_mtx+0x42>
		ercd = E_NOEXS;
 8009baa:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 8009bae:	617b      	str	r3, [r7, #20]
 8009bb0:	e015      	b.n	8009bde <tk_ref_mtx+0x6e>
	} else {
		pk_rmtx->exinf = mtxcb->exinf;
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	68da      	ldr	r2, [r3, #12]
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	601a      	str	r2, [r3, #0]
		pk_rmtx->htsk = ( mtxcb->mtxtsk != NULL )?
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	699b      	ldr	r3, [r3, #24]
					mtxcb->mtxtsk->tskid: 0;
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d003      	beq.n	8009bca <tk_ref_mtx+0x5a>
 8009bc2:	693b      	ldr	r3, [r7, #16]
 8009bc4:	699b      	ldr	r3, [r3, #24]
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	e000      	b.n	8009bcc <tk_ref_mtx+0x5c>
 8009bca:	2300      	movs	r3, #0
		pk_rmtx->htsk = ( mtxcb->mtxtsk != NULL )?
 8009bcc:	683a      	ldr	r2, [r7, #0]
 8009bce:	6053      	str	r3, [r2, #4]
		pk_rmtx->wtsk = knl_wait_tskid(&mtxcb->wait_queue);
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f003 fa01 	bl	800cfda <knl_wait_tskid>
 8009bd8:	4602      	mov	r2, r0
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	609a      	str	r2, [r3, #8]
	}
	END_CRITICAL_SECTION;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d10b      	bne.n	8009bfc <tk_ref_mtx+0x8c>
 8009be4:	4b0a      	ldr	r3, [pc, #40]	@ (8009c10 <tk_ref_mtx+0xa0>)
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	4b0a      	ldr	r3, [pc, #40]	@ (8009c14 <tk_ref_mtx+0xa4>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d005      	beq.n	8009bfc <tk_ref_mtx+0x8c>
 8009bf0:	4b09      	ldr	r3, [pc, #36]	@ (8009c18 <tk_ref_mtx+0xa8>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d101      	bne.n	8009bfc <tk_ref_mtx+0x8c>
 8009bf8:	f7f9 fe52 	bl	80038a0 <knl_dispatch>
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f003 fd6e 	bl	800d6de <set_basepri>

	return ercd;
 8009c02:	697b      	ldr	r3, [r7, #20]
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3718      	adds	r7, #24
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	2400161c 	.word	0x2400161c
 8009c10:	24001870 	.word	0x24001870
 8009c14:	24001874 	.word	0x24001874
 8009c18:	2400186c 	.word	0x2400186c

08009c1c <QueInit>:
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	605a      	str	r2, [r3, #4]
}
 8009c30:	bf00      	nop
 8009c32:	370c      	adds	r7, #12
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bc80      	pop	{r7}
 8009c38:	4770      	bx	lr

08009c3a <QueInsert>:
{
 8009c3a:	b480      	push	{r7}
 8009c3c:	b083      	sub	sp, #12
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	685a      	ldr	r2, [r3, #4]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	605a      	str	r2, [r3, #4]
	entry->next = que;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	683a      	ldr	r2, [r7, #0]
 8009c50:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	685b      	ldr	r3, [r3, #4]
 8009c56:	687a      	ldr	r2, [r7, #4]
 8009c58:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	605a      	str	r2, [r3, #4]
}
 8009c60:	bf00      	nop
 8009c62:	370c      	adds	r7, #12
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bc80      	pop	{r7}
 8009c68:	4770      	bx	lr

08009c6a <QueRemoveNext>:
{
 8009c6a:	b480      	push	{r7}
 8009c6c:	b085      	sub	sp, #20
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
	if ( que->next == que ) {
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d101      	bne.n	8009c80 <QueRemoveNext+0x16>
		return NULL;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	e00b      	b.n	8009c98 <QueRemoveNext+0x2e>
	entry = que->next;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	60fb      	str	r3, [r7, #12]
	que->next = (struct queue*)entry->next;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	601a      	str	r2, [r3, #0]
	entry->next->prev = que;
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	605a      	str	r2, [r3, #4]
	return entry;
 8009c96:	68fb      	ldr	r3, [r7, #12]
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3714      	adds	r7, #20
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bc80      	pop	{r7}
 8009ca0:	4770      	bx	lr
	...

08009ca4 <knl_isTaskIndependent>:
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	af00      	add	r7, sp, #0
	return ( knl_taskindp > 0 )? TRUE: FALSE;
 8009ca8:	4b05      	ldr	r3, [pc, #20]	@ (8009cc0 <knl_isTaskIndependent+0x1c>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	bfcc      	ite	gt
 8009cb0:	2301      	movgt	r3, #1
 8009cb2:	2300      	movle	r3, #0
 8009cb4:	b2db      	uxtb	r3, r3
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bc80      	pop	{r7}
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	240029f8 	.word	0x240029f8

08009cc4 <knl_semaphore_initialize>:

/* 
 * Initialization of semaphore control block 
 */
EXPORT ER knl_semaphore_initialize( void )
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
	if ( NUM_SEMID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_semcb);
 8009cca:	480e      	ldr	r0, [pc, #56]	@ (8009d04 <knl_semaphore_initialize+0x40>)
 8009ccc:	f7ff ffa6 	bl	8009c1c <QueInit>
	end = knl_semcb_table + NUM_SEMID;
 8009cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8009d08 <knl_semaphore_initialize+0x44>)
 8009cd2:	603b      	str	r3, [r7, #0]
	for ( semcb = knl_semcb_table; semcb < end; semcb++ ) {
 8009cd4:	4b0d      	ldr	r3, [pc, #52]	@ (8009d0c <knl_semaphore_initialize+0x48>)
 8009cd6:	607b      	str	r3, [r7, #4]
 8009cd8:	e00a      	b.n	8009cf0 <knl_semaphore_initialize+0x2c>
		semcb->semid = 0;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	609a      	str	r2, [r3, #8]
		QueInsert(&semcb->wait_queue, &knl_free_semcb);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	4908      	ldr	r1, [pc, #32]	@ (8009d04 <knl_semaphore_initialize+0x40>)
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7ff ffa8 	bl	8009c3a <QueInsert>
	for ( semcb = knl_semcb_table; semcb < end; semcb++ ) {
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	331c      	adds	r3, #28
 8009cee:	607b      	str	r3, [r7, #4]
 8009cf0:	687a      	ldr	r2, [r7, #4]
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d3f0      	bcc.n	8009cda <knl_semaphore_initialize+0x16>
	}

	return E_OK;
 8009cf8:	2300      	movs	r3, #0
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3708      	adds	r7, #8
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	24001864 	.word	0x24001864
 8009d08:	24001864 	.word	0x24001864
 8009d0c:	240016a4 	.word	0x240016a4

08009d10 <tk_cre_sem>:

/*
 * Create semaphore
 */
SYSCALL ID tk_cre_sem( CONST T_CSEM *pk_csem )
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b088      	sub	sp, #32
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
#if CHK_RSATR
	const ATR VALID_SEMATR = {
 8009d18:	2303      	movs	r3, #3
 8009d1a:	61bb      	str	r3, [r7, #24]
#endif
	SEMCB	*semcb;
	ID	semid;
	ER	ercd;

	CHECK_RSATR(pk_csem->sematr, VALID_SEMATR);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	685a      	ldr	r2, [r3, #4]
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	43db      	mvns	r3, r3
 8009d24:	4013      	ands	r3, r2
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d002      	beq.n	8009d30 <tk_cre_sem+0x20>
 8009d2a:	f06f 030a 	mvn.w	r3, #10
 8009d2e:	e059      	b.n	8009de4 <tk_cre_sem+0xd4>
	CHECK_PAR(pk_csem->isemcnt >= 0);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	da02      	bge.n	8009d3e <tk_cre_sem+0x2e>
 8009d38:	f06f 0310 	mvn.w	r3, #16
 8009d3c:	e052      	b.n	8009de4 <tk_cre_sem+0xd4>
	CHECK_PAR(pk_csem->maxsem > 0);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	68db      	ldr	r3, [r3, #12]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	dc02      	bgt.n	8009d4c <tk_cre_sem+0x3c>
 8009d46:	f06f 0310 	mvn.w	r3, #16
 8009d4a:	e04b      	b.n	8009de4 <tk_cre_sem+0xd4>
	CHECK_PAR(pk_csem->maxsem >= pk_csem->isemcnt);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	68da      	ldr	r2, [r3, #12]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	da02      	bge.n	8009d5e <tk_cre_sem+0x4e>
 8009d58:	f06f 0310 	mvn.w	r3, #16
 8009d5c:	e042      	b.n	8009de4 <tk_cre_sem+0xd4>

	BEGIN_CRITICAL_SECTION;
 8009d5e:	f003 fcd6 	bl	800d70e <disint>
 8009d62:	6178      	str	r0, [r7, #20]
	/* Get control block from FreeQue */
	semcb = (SEMCB*)QueRemoveNext(&knl_free_semcb);
 8009d64:	4821      	ldr	r0, [pc, #132]	@ (8009dec <tk_cre_sem+0xdc>)
 8009d66:	f7ff ff80 	bl	8009c6a <QueRemoveNext>
 8009d6a:	6138      	str	r0, [r7, #16]
	if ( semcb == NULL ) {
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d103      	bne.n	8009d7a <tk_cre_sem+0x6a>
		ercd = E_LIMIT;
 8009d72:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 8009d76:	61fb      	str	r3, [r7, #28]
 8009d78:	e021      	b.n	8009dbe <tk_cre_sem+0xae>
	} else {
		semid = ID_SEM(semcb - knl_semcb_table);
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	4a1c      	ldr	r2, [pc, #112]	@ (8009df0 <tk_cre_sem+0xe0>)
 8009d7e:	1a9b      	subs	r3, r3, r2
 8009d80:	109b      	asrs	r3, r3, #2
 8009d82:	4a1c      	ldr	r2, [pc, #112]	@ (8009df4 <tk_cre_sem+0xe4>)
 8009d84:	fb02 f303 	mul.w	r3, r2, r3
 8009d88:	3301      	adds	r3, #1
 8009d8a:	60fb      	str	r3, [r7, #12]

		/* Initialize control block */
		QueInit(&semcb->wait_queue);
 8009d8c:	693b      	ldr	r3, [r7, #16]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f7ff ff44 	bl	8009c1c <QueInit>
		semcb->semid = semid;
 8009d94:	693b      	ldr	r3, [r7, #16]
 8009d96:	68fa      	ldr	r2, [r7, #12]
 8009d98:	609a      	str	r2, [r3, #8]
		semcb->exinf = pk_csem->exinf;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	60da      	str	r2, [r3, #12]
		semcb->sematr = pk_csem->sematr;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	685a      	ldr	r2, [r3, #4]
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	611a      	str	r2, [r3, #16]
		semcb->semcnt = pk_csem->isemcnt;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	689a      	ldr	r2, [r3, #8]
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	615a      	str	r2, [r3, #20]
		semcb->maxsem = pk_csem->maxsem;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	68da      	ldr	r2, [r3, #12]
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	619a      	str	r2, [r3, #24]
		if ( (pk_csem->sematr & TA_DSNAME) != 0 ) {
			knl_strncpy((char*)semcb->name, (char*)pk_csem->dsname,
				OBJECT_NAME_LENGTH);
		}
#endif
		ercd = semid;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	61fb      	str	r3, [r7, #28]
	}
	END_CRITICAL_SECTION;
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d10b      	bne.n	8009ddc <tk_cre_sem+0xcc>
 8009dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8009df8 <tk_cre_sem+0xe8>)
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8009dfc <tk_cre_sem+0xec>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d005      	beq.n	8009ddc <tk_cre_sem+0xcc>
 8009dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8009e00 <tk_cre_sem+0xf0>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d101      	bne.n	8009ddc <tk_cre_sem+0xcc>
 8009dd8:	f7f9 fd62 	bl	80038a0 <knl_dispatch>
 8009ddc:	6978      	ldr	r0, [r7, #20]
 8009dde:	f003 fc7e 	bl	800d6de <set_basepri>

	return ercd;
 8009de2:	69fb      	ldr	r3, [r7, #28]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3720      	adds	r7, #32
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	24001864 	.word	0x24001864
 8009df0:	240016a4 	.word	0x240016a4
 8009df4:	b6db6db7 	.word	0xb6db6db7
 8009df8:	24001870 	.word	0x24001870
 8009dfc:	24001874 	.word	0x24001874
 8009e00:	2400186c 	.word	0x2400186c

08009e04 <tk_del_sem>:
#ifdef USE_FUNC_TK_DEL_SEM
/*
 * Delete semaphore
 */
SYSCALL ER tk_del_sem( ID semid )
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b086      	sub	sp, #24
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
	SEMCB	*semcb;
	ER	ercd = E_OK;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	617b      	str	r3, [r7, #20]

	CHECK_SEMID(semid);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	dd02      	ble.n	8009e1c <tk_del_sem+0x18>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2b10      	cmp	r3, #16
 8009e1a:	dd02      	ble.n	8009e22 <tk_del_sem+0x1e>
 8009e1c:	f06f 0311 	mvn.w	r3, #17
 8009e20:	e032      	b.n	8009e88 <tk_del_sem+0x84>

	semcb = get_semcb(semid);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	1e5a      	subs	r2, r3, #1
 8009e26:	4613      	mov	r3, r2
 8009e28:	00db      	lsls	r3, r3, #3
 8009e2a:	1a9b      	subs	r3, r3, r2
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	4a18      	ldr	r2, [pc, #96]	@ (8009e90 <tk_del_sem+0x8c>)
 8009e30:	4413      	add	r3, r2
 8009e32:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 8009e34:	f003 fc6b 	bl	800d70e <disint>
 8009e38:	60f8      	str	r0, [r7, #12]
	if ( semcb->semid == 0 ) {
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d103      	bne.n	8009e4a <tk_del_sem+0x46>
		ercd = E_NOEXS;
 8009e42:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 8009e46:	617b      	str	r3, [r7, #20]
 8009e48:	e00b      	b.n	8009e62 <tk_del_sem+0x5e>
	} else {
		/* Release wait state of task (E_DLT) */
		knl_wait_delete(&semcb->wait_queue);
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f003 f8a9 	bl	800cfa4 <knl_wait_delete>

		/* Return to FreeQue */
		QueInsert(&semcb->wait_queue, &knl_free_semcb);
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	490f      	ldr	r1, [pc, #60]	@ (8009e94 <tk_del_sem+0x90>)
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7ff feef 	bl	8009c3a <QueInsert>
		semcb->semid = 0;
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	609a      	str	r2, [r3, #8]
	}
	END_CRITICAL_SECTION;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d10b      	bne.n	8009e80 <tk_del_sem+0x7c>
 8009e68:	4b0b      	ldr	r3, [pc, #44]	@ (8009e98 <tk_del_sem+0x94>)
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8009e9c <tk_del_sem+0x98>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d005      	beq.n	8009e80 <tk_del_sem+0x7c>
 8009e74:	4b0a      	ldr	r3, [pc, #40]	@ (8009ea0 <tk_del_sem+0x9c>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d101      	bne.n	8009e80 <tk_del_sem+0x7c>
 8009e7c:	f7f9 fd10 	bl	80038a0 <knl_dispatch>
 8009e80:	68f8      	ldr	r0, [r7, #12]
 8009e82:	f003 fc2c 	bl	800d6de <set_basepri>

	return ercd;
 8009e86:	697b      	ldr	r3, [r7, #20]
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3718      	adds	r7, #24
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}
 8009e90:	240016a4 	.word	0x240016a4
 8009e94:	24001864 	.word	0x24001864
 8009e98:	24001870 	.word	0x24001870
 8009e9c:	24001874 	.word	0x24001874
 8009ea0:	2400186c 	.word	0x2400186c

08009ea4 <tk_sig_sem>:

/*
 * Signal semaphore
 */
SYSCALL ER tk_sig_sem( ID semid, INT cnt )
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b088      	sub	sp, #32
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	6039      	str	r1, [r7, #0]
	SEMCB	*semcb;
	TCB	*tcb;
	QUEUE	*queue;
	ER	ercd = E_OK;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	61bb      	str	r3, [r7, #24]
    
	CHECK_SEMID(semid);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	dd02      	ble.n	8009ebe <tk_sig_sem+0x1a>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b10      	cmp	r3, #16
 8009ebc:	dd02      	ble.n	8009ec4 <tk_sig_sem+0x20>
 8009ebe:	f06f 0311 	mvn.w	r3, #17
 8009ec2:	e06a      	b.n	8009f9a <tk_sig_sem+0xf6>
	CHECK_PAR(cnt > 0);
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	dc02      	bgt.n	8009ed0 <tk_sig_sem+0x2c>
 8009eca:	f06f 0310 	mvn.w	r3, #16
 8009ece:	e064      	b.n	8009f9a <tk_sig_sem+0xf6>

	semcb = get_semcb(semid);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	1e5a      	subs	r2, r3, #1
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	00db      	lsls	r3, r3, #3
 8009ed8:	1a9b      	subs	r3, r3, r2
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	4a31      	ldr	r2, [pc, #196]	@ (8009fa4 <tk_sig_sem+0x100>)
 8009ede:	4413      	add	r3, r2
 8009ee0:	617b      	str	r3, [r7, #20]

	BEGIN_CRITICAL_SECTION;
 8009ee2:	f003 fc14 	bl	800d70e <disint>
 8009ee6:	6138      	str	r0, [r7, #16]
	if ( semcb->semid == 0 ) {
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d103      	bne.n	8009ef8 <tk_sig_sem+0x54>
		ercd = E_NOEXS;
 8009ef0:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 8009ef4:	61bb      	str	r3, [r7, #24]
		goto error_exit;
 8009ef6:	e03d      	b.n	8009f74 <tk_sig_sem+0xd0>
	}
	if ( cnt > (semcb->maxsem - semcb->semcnt) ) {
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	699a      	ldr	r2, [r3, #24]
 8009efc:	697b      	ldr	r3, [r7, #20]
 8009efe:	695b      	ldr	r3, [r3, #20]
 8009f00:	1ad3      	subs	r3, r2, r3
 8009f02:	683a      	ldr	r2, [r7, #0]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	dd03      	ble.n	8009f10 <tk_sig_sem+0x6c>
		ercd = E_QOVR;
 8009f08:	f06f 032a 	mvn.w	r3, #42	@ 0x2a
 8009f0c:	61bb      	str	r3, [r7, #24]
		goto error_exit;
 8009f0e:	e031      	b.n	8009f74 <tk_sig_sem+0xd0>
	}

	/* Return semaphore counts */
	semcb->semcnt += cnt;
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	695a      	ldr	r2, [r3, #20]
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	441a      	add	r2, r3
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	615a      	str	r2, [r3, #20]

	/* Search task that frees wait */
	queue = semcb->wait_queue.next;
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	61fb      	str	r3, [r7, #28]
	while ( queue != &semcb->wait_queue ) {
 8009f22:	e021      	b.n	8009f68 <tk_sig_sem+0xc4>
		tcb = (TCB*)queue;
 8009f24:	69fb      	ldr	r3, [r7, #28]
 8009f26:	60fb      	str	r3, [r7, #12]
		queue = queue->next;
 8009f28:	69fb      	ldr	r3, [r7, #28]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	61fb      	str	r3, [r7, #28]

		/* Meet condition for Releasing wait? */
		if ( semcb->semcnt < tcb->winfo.sem.cnt ) {
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	695a      	ldr	r2, [r3, #20]
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f36:	429a      	cmp	r2, r3
 8009f38:	da06      	bge.n	8009f48 <tk_sig_sem+0xa4>
			if ( (semcb->sematr & TA_CNT) == 0 ) {
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	691b      	ldr	r3, [r3, #16]
 8009f3e:	f003 0302 	and.w	r3, r3, #2
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d10f      	bne.n	8009f66 <tk_sig_sem+0xc2>
				break;
 8009f46:	e015      	b.n	8009f74 <tk_sig_sem+0xd0>
			}
			continue;
		}

		/* Release wait */
		knl_wait_release_ok(tcb);
 8009f48:	68f8      	ldr	r0, [r7, #12]
 8009f4a:	f002 ff75 	bl	800ce38 <knl_wait_release_ok>

		semcb->semcnt -= tcb->winfo.sem.cnt;
 8009f4e:	697b      	ldr	r3, [r7, #20]
 8009f50:	695a      	ldr	r2, [r3, #20]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f56:	1ad2      	subs	r2, r2, r3
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	615a      	str	r2, [r3, #20]
		if ( semcb->semcnt <= 0 ) {
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	695b      	ldr	r3, [r3, #20]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	dd06      	ble.n	8009f72 <tk_sig_sem+0xce>
 8009f64:	e000      	b.n	8009f68 <tk_sig_sem+0xc4>
			continue;
 8009f66:	bf00      	nop
	while ( queue != &semcb->wait_queue ) {
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	69fa      	ldr	r2, [r7, #28]
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d1d9      	bne.n	8009f24 <tk_sig_sem+0x80>
			break;
		}
	}

    error_exit:
 8009f70:	e000      	b.n	8009f74 <tk_sig_sem+0xd0>
			break;
 8009f72:	bf00      	nop
	END_CRITICAL_SECTION;
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d10b      	bne.n	8009f92 <tk_sig_sem+0xee>
 8009f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8009fa8 <tk_sig_sem+0x104>)
 8009f7c:	681a      	ldr	r2, [r3, #0]
 8009f7e:	4b0b      	ldr	r3, [pc, #44]	@ (8009fac <tk_sig_sem+0x108>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d005      	beq.n	8009f92 <tk_sig_sem+0xee>
 8009f86:	4b0a      	ldr	r3, [pc, #40]	@ (8009fb0 <tk_sig_sem+0x10c>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d101      	bne.n	8009f92 <tk_sig_sem+0xee>
 8009f8e:	f7f9 fc87 	bl	80038a0 <knl_dispatch>
 8009f92:	6938      	ldr	r0, [r7, #16]
 8009f94:	f003 fba3 	bl	800d6de <set_basepri>

	return ercd;
 8009f98:	69bb      	ldr	r3, [r7, #24]
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3720      	adds	r7, #32
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	240016a4 	.word	0x240016a4
 8009fa8:	24001870 	.word	0x24001870
 8009fac:	24001874 	.word	0x24001874
 8009fb0:	2400186c 	.word	0x2400186c

08009fb4 <sem_chg_pri>:

/*
 * Processing if the priority of wait task changes
 */
LOCAL void sem_chg_pri( TCB *tcb, INT oldpri )
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b086      	sub	sp, #24
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
 8009fbc:	6039      	str	r1, [r7, #0]
	SEMCB	*semcb;
	QUEUE	*queue;
	TCB	*top;

	semcb = get_semcb(tcb->wid);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fc2:	1e5a      	subs	r2, r3, #1
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	00db      	lsls	r3, r3, #3
 8009fc8:	1a9b      	subs	r3, r3, r2
 8009fca:	009b      	lsls	r3, r3, #2
 8009fcc:	4a19      	ldr	r2, [pc, #100]	@ (800a034 <sem_chg_pri+0x80>)
 8009fce:	4413      	add	r3, r2
 8009fd0:	613b      	str	r3, [r7, #16]
	if ( oldpri >= 0 ) {
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	db03      	blt.n	8009fe0 <sem_chg_pri+0x2c>
		/* Reorder wait line */
		knl_gcb_change_priority((GCB*)semcb, tcb);
 8009fd8:	6879      	ldr	r1, [r7, #4]
 8009fda:	6938      	ldr	r0, [r7, #16]
 8009fdc:	f003 f846 	bl	800d06c <knl_gcb_change_priority>
	}

	if ( (semcb->sematr & TA_CNT) != 0 ) {
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	691b      	ldr	r3, [r3, #16]
 8009fe4:	f003 0302 	and.w	r3, r3, #2
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d11d      	bne.n	800a028 <sem_chg_pri+0x74>
		return;
	}

	/* From the head task in a wait queue, allocate semaphore counts
	   and release wait state as much as possible */
	queue = semcb->wait_queue.next;
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	617b      	str	r3, [r7, #20]
	while ( queue != &semcb->wait_queue ) {
 8009ff2:	e014      	b.n	800a01e <sem_chg_pri+0x6a>
		top = (TCB*)queue;
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	60fb      	str	r3, [r7, #12]
		queue = queue->next;
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	617b      	str	r3, [r7, #20]

		/* Meet condition for releasing wait? */
		if ( semcb->semcnt < top->winfo.sem.cnt ) {
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	695a      	ldr	r2, [r3, #20]
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a006:	429a      	cmp	r2, r3
 800a008:	db10      	blt.n	800a02c <sem_chg_pri+0x78>
			break;
		}

		/* Release wait */
		knl_wait_release_ok(top);
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	f002 ff14 	bl	800ce38 <knl_wait_release_ok>

		semcb->semcnt -= top->winfo.sem.cnt;
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	695a      	ldr	r2, [r3, #20]
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a018:	1ad2      	subs	r2, r2, r3
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	615a      	str	r2, [r3, #20]
	while ( queue != &semcb->wait_queue ) {
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	697a      	ldr	r2, [r7, #20]
 800a022:	429a      	cmp	r2, r3
 800a024:	d1e6      	bne.n	8009ff4 <sem_chg_pri+0x40>
 800a026:	e002      	b.n	800a02e <sem_chg_pri+0x7a>
		return;
 800a028:	bf00      	nop
 800a02a:	e000      	b.n	800a02e <sem_chg_pri+0x7a>
			break;
 800a02c:	bf00      	nop
	}
}
 800a02e:	3718      	adds	r7, #24
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}
 800a034:	240016a4 	.word	0x240016a4

0800a038 <sem_rel_wai>:

/*
 * Processing if the wait task is freed
 */
LOCAL void sem_rel_wai( TCB *tcb )
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
	sem_chg_pri(tcb, -1);
 800a040:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f7ff ffb5 	bl	8009fb4 <sem_chg_pri>
}
 800a04a:	bf00      	nop
 800a04c:	3708      	adds	r7, #8
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
	...

0800a054 <tk_wai_sem>:

/*
 * Wait on semaphore
 */
SYSCALL ER tk_wai_sem( ID semid, INT cnt, TMO tmout )
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b088      	sub	sp, #32
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	607a      	str	r2, [r7, #4]
	SEMCB	*semcb;
	ER	ercd = E_OK;
 800a060:	2300      	movs	r3, #0
 800a062:	617b      	str	r3, [r7, #20]

	CHECK_SEMID(semid);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2b00      	cmp	r3, #0
 800a068:	dd02      	ble.n	800a070 <tk_wai_sem+0x1c>
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2b10      	cmp	r3, #16
 800a06e:	dd02      	ble.n	800a076 <tk_wai_sem+0x22>
 800a070:	f06f 0311 	mvn.w	r3, #17
 800a074:	e087      	b.n	800a186 <tk_wai_sem+0x132>
	CHECK_PAR(cnt > 0);
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	dc02      	bgt.n	800a082 <tk_wai_sem+0x2e>
 800a07c:	f06f 0310 	mvn.w	r3, #16
 800a080:	e081      	b.n	800a186 <tk_wai_sem+0x132>
	CHECK_TMOUT(tmout);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a088:	da02      	bge.n	800a090 <tk_wai_sem+0x3c>
 800a08a:	f06f 0310 	mvn.w	r3, #16
 800a08e:	e07a      	b.n	800a186 <tk_wai_sem+0x132>
	CHECK_DISPATCH();
 800a090:	4b3f      	ldr	r3, [pc, #252]	@ (800a190 <tk_wai_sem+0x13c>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d10d      	bne.n	800a0b4 <tk_wai_sem+0x60>
 800a098:	f7ff fe04 	bl	8009ca4 <knl_isTaskIndependent>
 800a09c:	4603      	mov	r3, r0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d108      	bne.n	800a0b4 <tk_wai_sem+0x60>
 800a0a2:	4b3c      	ldr	r3, [pc, #240]	@ (800a194 <tk_wai_sem+0x140>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d004      	beq.n	800a0b4 <tk_wai_sem+0x60>
 800a0aa:	f003 fb24 	bl	800d6f6 <get_basepri>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d002      	beq.n	800a0ba <tk_wai_sem+0x66>
 800a0b4:	f06f 0318 	mvn.w	r3, #24
 800a0b8:	e065      	b.n	800a186 <tk_wai_sem+0x132>

	semcb = get_semcb(semid);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	1e5a      	subs	r2, r3, #1
 800a0be:	4613      	mov	r3, r2
 800a0c0:	00db      	lsls	r3, r3, #3
 800a0c2:	1a9b      	subs	r3, r3, r2
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	4a34      	ldr	r2, [pc, #208]	@ (800a198 <tk_wai_sem+0x144>)
 800a0c8:	4413      	add	r3, r2
 800a0ca:	61fb      	str	r3, [r7, #28]

	BEGIN_CRITICAL_SECTION;
 800a0cc:	f003 fb1f 	bl	800d70e <disint>
 800a0d0:	61b8      	str	r0, [r7, #24]
	if ( semcb->semid == 0 ) {
 800a0d2:	69fb      	ldr	r3, [r7, #28]
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d103      	bne.n	800a0e2 <tk_wai_sem+0x8e>
		ercd = E_NOEXS;
 800a0da:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 800a0de:	617b      	str	r3, [r7, #20]
		goto error_exit;
 800a0e0:	e03e      	b.n	800a160 <tk_wai_sem+0x10c>
	}
#if CHK_PAR
	if ( cnt > semcb->maxsem ) {
 800a0e2:	69fb      	ldr	r3, [r7, #28]
 800a0e4:	699b      	ldr	r3, [r3, #24]
 800a0e6:	68ba      	ldr	r2, [r7, #8]
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	dd03      	ble.n	800a0f4 <tk_wai_sem+0xa0>
		ercd = E_PAR;
 800a0ec:	f06f 0310 	mvn.w	r3, #16
 800a0f0:	617b      	str	r3, [r7, #20]
		goto error_exit;
 800a0f2:	e035      	b.n	800a160 <tk_wai_sem+0x10c>
	}
#endif

	if ( ((semcb->sematr & TA_CNT) != 0
 800a0f4:	69fb      	ldr	r3, [r7, #28]
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	f003 0302 	and.w	r3, r3, #2
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d10a      	bne.n	800a116 <tk_wai_sem+0xc2>
	      || knl_gcb_top_of_wait_queue((GCB*)semcb, knl_ctxtsk) == knl_ctxtsk)
 800a100:	4b24      	ldr	r3, [pc, #144]	@ (800a194 <tk_wai_sem+0x140>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4619      	mov	r1, r3
 800a106:	69f8      	ldr	r0, [r7, #28]
 800a108:	f002 ffc2 	bl	800d090 <knl_gcb_top_of_wait_queue>
 800a10c:	4602      	mov	r2, r0
 800a10e:	4b21      	ldr	r3, [pc, #132]	@ (800a194 <tk_wai_sem+0x140>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	429a      	cmp	r2, r3
 800a114:	d10b      	bne.n	800a12e <tk_wai_sem+0xda>
	  && semcb->semcnt >= cnt ) {
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	695b      	ldr	r3, [r3, #20]
 800a11a:	68ba      	ldr	r2, [r7, #8]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	dc06      	bgt.n	800a12e <tk_wai_sem+0xda>
		/* Get semaphore count */
		semcb->semcnt -= cnt;
 800a120:	69fb      	ldr	r3, [r7, #28]
 800a122:	695a      	ldr	r2, [r3, #20]
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	1ad2      	subs	r2, r2, r3
 800a128:	69fb      	ldr	r3, [r7, #28]
 800a12a:	615a      	str	r2, [r3, #20]
 800a12c:	e018      	b.n	800a160 <tk_wai_sem+0x10c>

	} else {
		/* Ready for wait */
		knl_ctxtsk->wspec = ( (semcb->sematr & TA_TPRI) != 0 )?
 800a12e:	69fb      	ldr	r3, [r7, #28]
 800a130:	691b      	ldr	r3, [r3, #16]
 800a132:	f003 0301 	and.w	r3, r3, #1
					&knl_wspec_sem_tpri: &knl_wspec_sem_tfifo;
 800a136:	2b00      	cmp	r3, #0
 800a138:	d001      	beq.n	800a13e <tk_wai_sem+0xea>
 800a13a:	4a18      	ldr	r2, [pc, #96]	@ (800a19c <tk_wai_sem+0x148>)
 800a13c:	e000      	b.n	800a140 <tk_wai_sem+0xec>
 800a13e:	4a18      	ldr	r2, [pc, #96]	@ (800a1a0 <tk_wai_sem+0x14c>)
		knl_ctxtsk->wspec = ( (semcb->sematr & TA_TPRI) != 0 )?
 800a140:	4b14      	ldr	r3, [pc, #80]	@ (800a194 <tk_wai_sem+0x140>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	62da      	str	r2, [r3, #44]	@ 0x2c
		knl_ctxtsk->wercd = &ercd;
 800a146:	4b13      	ldr	r3, [pc, #76]	@ (800a194 <tk_wai_sem+0x140>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	f107 0214 	add.w	r2, r7, #20
 800a14e:	63da      	str	r2, [r3, #60]	@ 0x3c
		knl_ctxtsk->winfo.sem.cnt = cnt;
 800a150:	4b10      	ldr	r3, [pc, #64]	@ (800a194 <tk_wai_sem+0x140>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	68ba      	ldr	r2, [r7, #8]
 800a156:	641a      	str	r2, [r3, #64]	@ 0x40
		knl_gcb_make_wait((GCB*)semcb, tmout);
 800a158:	6879      	ldr	r1, [r7, #4]
 800a15a:	69f8      	ldr	r0, [r7, #28]
 800a15c:	f002 ff50 	bl	800d000 <knl_gcb_make_wait>
	}

    error_exit:
	END_CRITICAL_SECTION;
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d10b      	bne.n	800a17e <tk_wai_sem+0x12a>
 800a166:	4b0b      	ldr	r3, [pc, #44]	@ (800a194 <tk_wai_sem+0x140>)
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	4b0e      	ldr	r3, [pc, #56]	@ (800a1a4 <tk_wai_sem+0x150>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	429a      	cmp	r2, r3
 800a170:	d005      	beq.n	800a17e <tk_wai_sem+0x12a>
 800a172:	4b07      	ldr	r3, [pc, #28]	@ (800a190 <tk_wai_sem+0x13c>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d101      	bne.n	800a17e <tk_wai_sem+0x12a>
 800a17a:	f7f9 fb91 	bl	80038a0 <knl_dispatch>
 800a17e:	69b8      	ldr	r0, [r7, #24]
 800a180:	f003 faad 	bl	800d6de <set_basepri>

	return ercd;
 800a184:	697b      	ldr	r3, [r7, #20]
}
 800a186:	4618      	mov	r0, r3
 800a188:	3720      	adds	r7, #32
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	2400186c 	.word	0x2400186c
 800a194:	24001870 	.word	0x24001870
 800a198:	240016a4 	.word	0x240016a4
 800a19c:	0800eec4 	.word	0x0800eec4
 800a1a0:	0800eeb8 	.word	0x0800eeb8
 800a1a4:	24001874 	.word	0x24001874

0800a1a8 <tk_ref_sem>:
#ifdef USE_FUNC_TK_REF_SEM
/*
 * Refer semaphore state
 */
SYSCALL ER tk_ref_sem( ID semid, T_RSEM *pk_rsem )
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b086      	sub	sp, #24
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
	SEMCB	*semcb;
	ER	ercd = E_OK;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	617b      	str	r3, [r7, #20]

	CHECK_SEMID(semid);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	dd02      	ble.n	800a1c2 <tk_ref_sem+0x1a>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2b10      	cmp	r3, #16
 800a1c0:	dd02      	ble.n	800a1c8 <tk_ref_sem+0x20>
 800a1c2:	f06f 0311 	mvn.w	r3, #17
 800a1c6:	e035      	b.n	800a234 <tk_ref_sem+0x8c>

	semcb = get_semcb(semid);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	1e5a      	subs	r2, r3, #1
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	00db      	lsls	r3, r3, #3
 800a1d0:	1a9b      	subs	r3, r3, r2
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	4a19      	ldr	r2, [pc, #100]	@ (800a23c <tk_ref_sem+0x94>)
 800a1d6:	4413      	add	r3, r2
 800a1d8:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 800a1da:	f003 fa98 	bl	800d70e <disint>
 800a1de:	60f8      	str	r0, [r7, #12]
	if ( semcb->semid == 0 ) {
 800a1e0:	693b      	ldr	r3, [r7, #16]
 800a1e2:	689b      	ldr	r3, [r3, #8]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d103      	bne.n	800a1f0 <tk_ref_sem+0x48>
		ercd = E_NOEXS;
 800a1e8:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 800a1ec:	617b      	str	r3, [r7, #20]
 800a1ee:	e00e      	b.n	800a20e <tk_ref_sem+0x66>
	} else {
		pk_rsem->exinf  = semcb->exinf;
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	68da      	ldr	r2, [r3, #12]
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	601a      	str	r2, [r3, #0]
		pk_rsem->wtsk   = knl_wait_tskid(&semcb->wait_queue);
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f002 feed 	bl	800cfda <knl_wait_tskid>
 800a200:	4602      	mov	r2, r0
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	605a      	str	r2, [r3, #4]
		pk_rsem->semcnt = semcb->semcnt;
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	695a      	ldr	r2, [r3, #20]
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	609a      	str	r2, [r3, #8]
	}
	END_CRITICAL_SECTION;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d10b      	bne.n	800a22c <tk_ref_sem+0x84>
 800a214:	4b0a      	ldr	r3, [pc, #40]	@ (800a240 <tk_ref_sem+0x98>)
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	4b0a      	ldr	r3, [pc, #40]	@ (800a244 <tk_ref_sem+0x9c>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	429a      	cmp	r2, r3
 800a21e:	d005      	beq.n	800a22c <tk_ref_sem+0x84>
 800a220:	4b09      	ldr	r3, [pc, #36]	@ (800a248 <tk_ref_sem+0xa0>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d101      	bne.n	800a22c <tk_ref_sem+0x84>
 800a228:	f7f9 fb3a 	bl	80038a0 <knl_dispatch>
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f003 fa56 	bl	800d6de <set_basepri>

	return ercd;
 800a232:	697b      	ldr	r3, [r7, #20]
}
 800a234:	4618      	mov	r0, r3
 800a236:	3718      	adds	r7, #24
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}
 800a23c:	240016a4 	.word	0x240016a4
 800a240:	24001870 	.word	0x24001870
 800a244:	24001874 	.word	0x24001874
 800a248:	2400186c 	.word	0x2400186c

0800a24c <QueInit>:
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	687a      	ldr	r2, [r7, #4]
 800a258:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	605a      	str	r2, [r3, #4]
}
 800a260:	bf00      	nop
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	bc80      	pop	{r7}
 800a268:	4770      	bx	lr

0800a26a <isQueEmpty>:
{
 800a26a:	b480      	push	{r7}
 800a26c:	b083      	sub	sp, #12
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
	return ( que->next == que )? TRUE: FALSE;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	429a      	cmp	r2, r3
 800a27a:	bf0c      	ite	eq
 800a27c:	2301      	moveq	r3, #1
 800a27e:	2300      	movne	r3, #0
 800a280:	b2db      	uxtb	r3, r3
}
 800a282:	4618      	mov	r0, r3
 800a284:	370c      	adds	r7, #12
 800a286:	46bd      	mov	sp, r7
 800a288:	bc80      	pop	{r7}
 800a28a:	4770      	bx	lr

0800a28c <QueInsert>:
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	685a      	ldr	r2, [r3, #4]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	605a      	str	r2, [r3, #4]
	entry->next = que;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	683a      	ldr	r2, [r7, #0]
 800a2a2:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	685b      	ldr	r3, [r3, #4]
 800a2a8:	687a      	ldr	r2, [r7, #4]
 800a2aa:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	605a      	str	r2, [r3, #4]
}
 800a2b2:	bf00      	nop
 800a2b4:	370c      	adds	r7, #12
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bc80      	pop	{r7}
 800a2ba:	4770      	bx	lr

0800a2bc <QueRemove>:
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b083      	sub	sp, #12
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
	if ( entry->next != entry ) {
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	429a      	cmp	r2, r3
 800a2cc:	d009      	beq.n	800a2e2 <QueRemove+0x26>
		entry->prev->next = (struct queue*) entry->next;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	6812      	ldr	r2, [r2, #0]
 800a2d6:	601a      	str	r2, [r3, #0]
		entry->next->prev = (struct queue*) entry->prev;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	6852      	ldr	r2, [r2, #4]
 800a2e0:	605a      	str	r2, [r3, #4]
}
 800a2e2:	bf00      	nop
 800a2e4:	370c      	adds	r7, #12
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bc80      	pop	{r7}
 800a2ea:	4770      	bx	lr

0800a2ec <QueRemoveNext>:
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b085      	sub	sp, #20
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
	if ( que->next == que ) {
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d101      	bne.n	800a302 <QueRemoveNext+0x16>
		return NULL;
 800a2fe:	2300      	movs	r3, #0
 800a300:	e00b      	b.n	800a31a <QueRemoveNext+0x2e>
	entry = que->next;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	60fb      	str	r3, [r7, #12]
	que->next = (struct queue*)entry->next;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	601a      	str	r2, [r3, #0]
	entry->next->prev = que;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	605a      	str	r2, [r3, #4]
	return entry;
 800a318:	68fb      	ldr	r3, [r7, #12]
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3714      	adds	r7, #20
 800a31e:	46bd      	mov	sp, r7
 800a320:	bc80      	pop	{r7}
 800a322:	4770      	bx	lr

0800a324 <knl_ready_queue_calc_top_priority>:
{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
	for ( ; pos < NUM_TSKPRI; pos++ ) {
 800a32e:	e00b      	b.n	800a348 <knl_ready_queue_calc_top_priority+0x24>
		if ( bitmap & (1U << pos) ) {
 800a330:	2201      	movs	r2, #1
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	409a      	lsls	r2, r3
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	4013      	ands	r3, r2
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d001      	beq.n	800a342 <knl_ready_queue_calc_top_priority+0x1e>
			return pos;
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	e006      	b.n	800a350 <knl_ready_queue_calc_top_priority+0x2c>
	for ( ; pos < NUM_TSKPRI; pos++ ) {
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	3301      	adds	r3, #1
 800a346:	603b      	str	r3, [r7, #0]
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	2b1f      	cmp	r3, #31
 800a34c:	ddf0      	ble.n	800a330 <knl_ready_queue_calc_top_priority+0xc>
	return NUM_TSKPRI;
 800a34e:	2320      	movs	r3, #32
}
 800a350:	4618      	mov	r0, r3
 800a352:	370c      	adds	r7, #12
 800a354:	46bd      	mov	sp, r7
 800a356:	bc80      	pop	{r7}
 800a358:	4770      	bx	lr

0800a35a <knl_ready_queue_initialize>:
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b084      	sub	sp, #16
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
	rq->top_priority = NUM_TSKPRI;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2220      	movs	r2, #32
 800a366:	601a      	str	r2, [r3, #0]
	for ( i = 0; i < NUM_TSKPRI; i++ ) {
 800a368:	2300      	movs	r3, #0
 800a36a:	60fb      	str	r3, [r7, #12]
 800a36c:	e00a      	b.n	800a384 <knl_ready_queue_initialize+0x2a>
		QueInit(&rq->tskque[i]);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	00db      	lsls	r3, r3, #3
 800a372:	687a      	ldr	r2, [r7, #4]
 800a374:	4413      	add	r3, r2
 800a376:	3304      	adds	r3, #4
 800a378:	4618      	mov	r0, r3
 800a37a:	f7ff ff67 	bl	800a24c <QueInit>
	for ( i = 0; i < NUM_TSKPRI; i++ ) {
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	3301      	adds	r3, #1
 800a382:	60fb      	str	r3, [r7, #12]
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2b1f      	cmp	r3, #31
 800a388:	ddf1      	ble.n	800a36e <knl_ready_queue_initialize+0x14>
	rq->null = NULL;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	rq->klocktsk = NULL;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
	knl_memset(rq->bitmap, 0, sizeof(rq->bitmap));
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800a3a0:	2204      	movs	r2, #4
 800a3a2:	2100      	movs	r1, #0
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f002 fe9b 	bl	800d0e0 <knl_memset>
}
 800a3aa:	bf00      	nop
 800a3ac:	3710      	adds	r7, #16
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <knl_ready_queue_top>:
{
 800a3b2:	b480      	push	{r7}
 800a3b4:	b083      	sub	sp, #12
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
	if ( rq->klocktsk != NULL ) {
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d003      	beq.n	800a3cc <knl_ready_queue_top+0x1a>
		return rq->klocktsk;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800a3ca:	e005      	b.n	800a3d8 <knl_ready_queue_top+0x26>
	return (TCB*)rq->tskque[rq->top_priority].next;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	00db      	lsls	r3, r3, #3
 800a3d4:	4413      	add	r3, r2
 800a3d6:	685b      	ldr	r3, [r3, #4]
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bc80      	pop	{r7}
 800a3e0:	4770      	bx	lr

0800a3e2 <knl_ready_queue_top_priority>:
{
 800a3e2:	b480      	push	{r7}
 800a3e4:	b083      	sub	sp, #12
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
	return rq->top_priority;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	370c      	adds	r7, #12
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bc80      	pop	{r7}
 800a3f6:	4770      	bx	lr

0800a3f8 <knl_ready_queue_insert>:
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	6039      	str	r1, [r7, #0]
	INT	priority = tcb->priority;
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800a408:	60fb      	str	r3, [r7, #12]
	QueInsert(&tcb->tskque, &rq->tskque[priority]);
 800a40a:	6838      	ldr	r0, [r7, #0]
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	00db      	lsls	r3, r3, #3
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	4413      	add	r3, r2
 800a414:	3304      	adds	r3, #4
 800a416:	4619      	mov	r1, r3
 800a418:	f7ff ff38 	bl	800a28c <QueInsert>
	rq->bitmap[0] |= (1U << priority);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800a422:	2101      	movs	r1, #1
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	fa01 f303 	lsl.w	r3, r1, r3
 800a42a:	431a      	orrs	r2, r3
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
	if ( tcb->klocked ) {
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a438:	f003 0302 	and.w	r3, r3, #2
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d003      	beq.n	800a44a <knl_ready_queue_insert+0x52>
		rq->klocktsk = tcb;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	683a      	ldr	r2, [r7, #0]
 800a446:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
	if ( priority < rq->top_priority ) {
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	429a      	cmp	r2, r3
 800a452:	da04      	bge.n	800a45e <knl_ready_queue_insert+0x66>
		rq->top_priority = priority;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	68fa      	ldr	r2, [r7, #12]
 800a458:	601a      	str	r2, [r3, #0]
		return TRUE;
 800a45a:	2301      	movs	r3, #1
 800a45c:	e000      	b.n	800a460 <knl_ready_queue_insert+0x68>
	return FALSE;
 800a45e:	2300      	movs	r3, #0
}
 800a460:	4618      	mov	r0, r3
 800a462:	3710      	adds	r7, #16
 800a464:	46bd      	mov	sp, r7
 800a466:	bd80      	pop	{r7, pc}

0800a468 <knl_ready_queue_delete>:
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b084      	sub	sp, #16
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
 800a470:	6039      	str	r1, [r7, #0]
	INT	priority = tcb->priority;
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800a478:	60fb      	str	r3, [r7, #12]
	if ( rq->klocktsk == tcb ) {
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800a480:	683a      	ldr	r2, [r7, #0]
 800a482:	429a      	cmp	r2, r3
 800a484:	d103      	bne.n	800a48e <knl_ready_queue_delete+0x26>
		rq->klocktsk = NULL;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2200      	movs	r2, #0
 800a48a:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
	QueRemove(&tcb->tskque);
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	4618      	mov	r0, r3
 800a492:	f7ff ff13 	bl	800a2bc <QueRemove>
	if ( tcb->klockwait ) {
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a49c:	f003 0301 	and.w	r3, r3, #1
 800a4a0:	b2db      	uxtb	r3, r3
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d007      	beq.n	800a4b6 <knl_ready_queue_delete+0x4e>
		tcb->klockwait = FALSE;
 800a4a6:	683a      	ldr	r2, [r7, #0]
 800a4a8:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 800a4ac:	f36f 0300 	bfc	r3, #0, #1
 800a4b0:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
		return;
 800a4b4:	e029      	b.n	800a50a <knl_ready_queue_delete+0xa2>
	if ( !isQueEmpty(&rq->tskque[priority]) ) {
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	00db      	lsls	r3, r3, #3
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	4413      	add	r3, r2
 800a4be:	3304      	adds	r3, #4
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f7ff fed2 	bl	800a26a <isQueEmpty>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d01b      	beq.n	800a504 <knl_ready_queue_delete+0x9c>
	rq->bitmap[0] &= ~(1U << priority);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800a4d2:	2101      	movs	r1, #1
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	fa01 f303 	lsl.w	r3, r1, r3
 800a4da:	43db      	mvns	r3, r3
 800a4dc:	401a      	ands	r2, r3
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
	if ( priority != rq->top_priority ) {
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d10c      	bne.n	800a508 <knl_ready_queue_delete+0xa0>
	rq->top_priority = knl_ready_queue_calc_top_priority(rq->bitmap[0], priority);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a4f4:	68f9      	ldr	r1, [r7, #12]
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7ff ff14 	bl	800a324 <knl_ready_queue_calc_top_priority>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	601a      	str	r2, [r3, #0]
 800a502:	e002      	b.n	800a50a <knl_ready_queue_delete+0xa2>
		return;
 800a504:	bf00      	nop
 800a506:	e000      	b.n	800a50a <knl_ready_queue_delete+0xa2>
		return;
 800a508:	bf00      	nop
}
 800a50a:	3710      	adds	r7, #16
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <knl_ready_queue_rotate>:
/*
 * Move the task, whose ready queue priority is 'priority', at head of
 * queue to the end of queue. Do nothing, if the queue is empty.
 */
Inline void knl_ready_queue_rotate( RDYQUE *rq, INT priority )
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b084      	sub	sp, #16
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
	QUEUE	*tskque = &rq->tskque[priority];
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	00db      	lsls	r3, r3, #3
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	4413      	add	r3, r2
 800a522:	3304      	adds	r3, #4
 800a524:	60fb      	str	r3, [r7, #12]
	TCB	*tcb;

	tcb = (TCB*)QueRemoveNext(tskque);
 800a526:	68f8      	ldr	r0, [r7, #12]
 800a528:	f7ff fee0 	bl	800a2ec <QueRemoveNext>
 800a52c:	60b8      	str	r0, [r7, #8]
	if ( tcb != NULL ) {
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d003      	beq.n	800a53c <knl_ready_queue_rotate+0x2c>
		QueInsert((QUEUE*)tcb, tskque);
 800a534:	68f9      	ldr	r1, [r7, #12]
 800a536:	68b8      	ldr	r0, [r7, #8]
 800a538:	f7ff fea8 	bl	800a28c <QueInsert>
	}
}
 800a53c:	bf00      	nop
 800a53e:	3710      	adds	r7, #16
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <knl_reschedule>:
/*
 * Reselect task to execute
 *	Set 'schedtsk' to the head task at the ready queue.
 */
Inline void knl_reschedule( void )
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
	TCB	*toptsk;

	toptsk = knl_ready_queue_top(&knl_ready_queue);
 800a54a:	4808      	ldr	r0, [pc, #32]	@ (800a56c <knl_reschedule+0x28>)
 800a54c:	f7ff ff31 	bl	800a3b2 <knl_ready_queue_top>
 800a550:	6078      	str	r0, [r7, #4]
	if ( knl_schedtsk != toptsk ) {
 800a552:	4b07      	ldr	r3, [pc, #28]	@ (800a570 <knl_reschedule+0x2c>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	429a      	cmp	r2, r3
 800a55a:	d002      	beq.n	800a562 <knl_reschedule+0x1e>
		knl_schedtsk = toptsk;
 800a55c:	4a04      	ldr	r2, [pc, #16]	@ (800a570 <knl_reschedule+0x2c>)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6013      	str	r3, [r2, #0]
	}
}
 800a562:	bf00      	nop
 800a564:	3708      	adds	r7, #8
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	24001878 	.word	0x24001878
 800a570:	24001874 	.word	0x24001874

0800a574 <knl_setup_context>:
/*
 * Create stack frame for task startup
 *	Call from 'make_dormant()'
 */
Inline void knl_setup_context( TCB *tcb )
{
 800a574:	b480      	push	{r7}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
	SStackFrame	*ssp;

	ssp = tcb->isstack;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a580:	60fb      	str	r3, [r7, #12]
	ssp--;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	3b44      	subs	r3, #68	@ 0x44
 800a586:	60fb      	str	r3, [r7, #12]

	/* CPU context initialization */
	ssp->exp_ret	= 0xFFFFFFF9;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f06f 0206 	mvn.w	r2, #6
 800a58e:	601a      	str	r2, [r3, #0]
	ssp->lr		= 0;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2200      	movs	r2, #0
 800a594:	639a      	str	r2, [r3, #56]	@ 0x38
	ssp->xpsr	= 0x01000000;		/* Initial SR */
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a59c:	641a      	str	r2, [r3, #64]	@ 0x40
	ssp->pc = (void*)((UW)tcb->task & ~0x00000001UL);	/* Task startup address */
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	695b      	ldr	r3, [r3, #20]
 800a5a2:	f023 0301 	bic.w	r3, r3, #1
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	63da      	str	r2, [r3, #60]	@ 0x3c

	tcb->tskctxb.ssp = ssp;		/* System stack pointer */
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	619a      	str	r2, [r3, #24]
}
 800a5b2:	bf00      	nop
 800a5b4:	3714      	adds	r7, #20
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bc80      	pop	{r7}
 800a5ba:	4770      	bx	lr

0800a5bc <knl_task_initialize>:

/*
 * TCB Initialization
 */
EXPORT ER knl_task_initialize( void )
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
	if ( NUM_TSKID < 1 ) {
		return E_SYS;
	}

	/* Initialize task execution control information */
	knl_ctxtsk = knl_schedtsk = NULL;
 800a5c2:	4b19      	ldr	r3, [pc, #100]	@ (800a628 <knl_task_initialize+0x6c>)
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	601a      	str	r2, [r3, #0]
 800a5c8:	4b17      	ldr	r3, [pc, #92]	@ (800a628 <knl_task_initialize+0x6c>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4a17      	ldr	r2, [pc, #92]	@ (800a62c <knl_task_initialize+0x70>)
 800a5ce:	6013      	str	r3, [r2, #0]
	knl_ready_queue_initialize(&knl_ready_queue);
 800a5d0:	4817      	ldr	r0, [pc, #92]	@ (800a630 <knl_task_initialize+0x74>)
 800a5d2:	f7ff fec2 	bl	800a35a <knl_ready_queue_initialize>
	knl_dispatch_disabled = DDS_ENABLE;
 800a5d6:	4b17      	ldr	r3, [pc, #92]	@ (800a634 <knl_task_initialize+0x78>)
 800a5d8:	2200      	movs	r2, #0
 800a5da:	601a      	str	r2, [r3, #0]

	/* Register all TCBs onto FreeQue */
	QueInit(&knl_free_tcb);
 800a5dc:	4816      	ldr	r0, [pc, #88]	@ (800a638 <knl_task_initialize+0x7c>)
 800a5de:	f7ff fe35 	bl	800a24c <QueInit>
	for ( tcb = knl_tcb_table, i = 0; i < NUM_TSKID; tcb++, i++ ) {
 800a5e2:	4b16      	ldr	r3, [pc, #88]	@ (800a63c <knl_task_initialize+0x80>)
 800a5e4:	60bb      	str	r3, [r7, #8]
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	60fb      	str	r3, [r7, #12]
 800a5ea:	e014      	b.n	800a616 <knl_task_initialize+0x5a>
		tskid = ID_TSK(i);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	3301      	adds	r3, #1
 800a5f0:	607b      	str	r3, [r7, #4]
		tcb->tskid = tskid;
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	609a      	str	r2, [r3, #8]
		tcb->state = TS_NONEXIST;
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
#if USE_LEGACY_API && USE_RENDEZVOUS
		tcb->wrdvno = tskid;
#endif

		QueInsert(&tcb->tskque, &knl_free_tcb);
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	490d      	ldr	r1, [pc, #52]	@ (800a638 <knl_task_initialize+0x7c>)
 800a604:	4618      	mov	r0, r3
 800a606:	f7ff fe41 	bl	800a28c <QueInsert>
	for ( tcb = knl_tcb_table, i = 0; i < NUM_TSKID; tcb++, i++ ) {
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	3368      	adds	r3, #104	@ 0x68
 800a60e:	60bb      	str	r3, [r7, #8]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	3301      	adds	r3, #1
 800a614:	60fb      	str	r3, [r7, #12]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2b1f      	cmp	r3, #31
 800a61a:	dde7      	ble.n	800a5ec <knl_task_initialize+0x30>
	}

	return E_OK;
 800a61c:	2300      	movs	r3, #0
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3710      	adds	r7, #16
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	24001874 	.word	0x24001874
 800a62c:	24001870 	.word	0x24001870
 800a630:	24001878 	.word	0x24001878
 800a634:	2400186c 	.word	0x2400186c
 800a638:	24002688 	.word	0x24002688
 800a63c:	24001988 	.word	0x24001988

0800a640 <knl_make_dormant>:

/*
 * Prepare task execution.
 */
EXPORT void knl_make_dormant( TCB *tcb )
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b082      	sub	sp, #8
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
	/* Initialize variables which should be reset at DORMANT state */
	tcb->state	= TS_DORMANT;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2208      	movs	r2, #8
 800a64c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	tcb->priority	= tcb->bpriority = tcb->ipriority;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f893 2025 	ldrb.w	r2, [r3, #37]	@ 0x25
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	tcb->sysmode	= tcb->isysmode;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f993 3020 	ldrsb.w	r3, [r3, #32]
 800a66e:	461a      	mov	r2, r3
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	845a      	strh	r2, [r3, #34]	@ 0x22
	tcb->wupcnt	= 0;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2200      	movs	r2, #0
 800a678:	635a      	str	r2, [r3, #52]	@ 0x34
	tcb->suscnt	= 0;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2200      	movs	r2, #0
 800a67e:	639a      	str	r2, [r3, #56]	@ 0x38

	tcb->klockwait	= FALSE;
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 800a686:	f36f 0300 	bfc	r3, #0, #1
 800a68a:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
	tcb->klocked	= FALSE;
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	f892 3028 	ldrb.w	r3, [r2, #40]	@ 0x28
 800a694:	f36f 0341 	bfc	r3, #1, #1
 800a698:	f882 3028 	strb.w	r3, [r2, #40]	@ 0x28
#if USE_DBGSPT && defined(USE_FUNC_TD_INF_TSK)
	tcb->stime	= 0;
	tcb->utime	= 0;
#endif

	tcb->wercd = NULL;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	63da      	str	r2, [r3, #60]	@ 0x3c

#if USE_MUTEX == 1
	tcb->mtxlist	= NULL;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	665a      	str	r2, [r3, #100]	@ 0x64
#endif

	/* Set context to start task */
	knl_setup_context(tcb);
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f7ff ff63 	bl	800a574 <knl_setup_context>
}
 800a6ae:	bf00      	nop
 800a6b0:	3708      	adds	r7, #8
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}
	...

0800a6b8 <knl_make_ready>:
 * Set task to READY state.
 *	Update the task state and insert in the ready queue. If necessary, 
 *	update 'knl_schedtsk' and request to start task dispatcher. 
 */
EXPORT void knl_make_ready( TCB *tcb )
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b082      	sub	sp, #8
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
	tcb->state = TS_READY;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	if ( knl_ready_queue_insert(&knl_ready_queue, tcb) ) {
 800a6c8:	6879      	ldr	r1, [r7, #4]
 800a6ca:	4806      	ldr	r0, [pc, #24]	@ (800a6e4 <knl_make_ready+0x2c>)
 800a6cc:	f7ff fe94 	bl	800a3f8 <knl_ready_queue_insert>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d002      	beq.n	800a6dc <knl_make_ready+0x24>
		knl_schedtsk = tcb;
 800a6d6:	4a04      	ldr	r2, [pc, #16]	@ (800a6e8 <knl_make_ready+0x30>)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6013      	str	r3, [r2, #0]
	}
}
 800a6dc:	bf00      	nop
 800a6de:	3708      	adds	r7, #8
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}
 800a6e4:	24001878 	.word	0x24001878
 800a6e8:	24001874 	.word	0x24001874

0800a6ec <knl_make_non_ready>:
 *	If the deleted task is 'knl_schedtsk', set 'knl_schedtsk' to the
 *	highest priority task in the ready queue. 
 *	'tcb' task must be READY.
 */
EXPORT void knl_make_non_ready( TCB *tcb )
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
	knl_ready_queue_delete(&knl_ready_queue, tcb);
 800a6f4:	6879      	ldr	r1, [r7, #4]
 800a6f6:	4809      	ldr	r0, [pc, #36]	@ (800a71c <knl_make_non_ready+0x30>)
 800a6f8:	f7ff feb6 	bl	800a468 <knl_ready_queue_delete>
	if ( knl_schedtsk == tcb ) {
 800a6fc:	4b08      	ldr	r3, [pc, #32]	@ (800a720 <knl_make_non_ready+0x34>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	687a      	ldr	r2, [r7, #4]
 800a702:	429a      	cmp	r2, r3
 800a704:	d105      	bne.n	800a712 <knl_make_non_ready+0x26>
		knl_schedtsk = knl_ready_queue_top(&knl_ready_queue);
 800a706:	4805      	ldr	r0, [pc, #20]	@ (800a71c <knl_make_non_ready+0x30>)
 800a708:	f7ff fe53 	bl	800a3b2 <knl_ready_queue_top>
 800a70c:	4603      	mov	r3, r0
 800a70e:	4a04      	ldr	r2, [pc, #16]	@ (800a720 <knl_make_non_ready+0x34>)
 800a710:	6013      	str	r3, [r2, #0]
	}
}
 800a712:	bf00      	nop
 800a714:	3708      	adds	r7, #8
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	24001878 	.word	0x24001878
 800a720:	24001874 	.word	0x24001874

0800a724 <knl_change_task_priority>:

/*
 * Change task priority.
 */
EXPORT void knl_change_task_priority( TCB *tcb, INT priority )
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
 800a72c:	6039      	str	r1, [r7, #0]
	INT	oldpri;

	if ( tcb->state == TS_READY ) {
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800a734:	2b01      	cmp	r3, #1
 800a736:	d10f      	bne.n	800a758 <knl_change_task_priority+0x34>
		 * When deleting a task from the ready queue, 
		 * a value in the 'priority' field in TCB is needed. 
		 * Therefore you need to delete the task from the
		 * ready queue before changing 'tcb->priority.'
		 */
		knl_ready_queue_delete(&knl_ready_queue, tcb);
 800a738:	6879      	ldr	r1, [r7, #4]
 800a73a:	4817      	ldr	r0, [pc, #92]	@ (800a798 <knl_change_task_priority+0x74>)
 800a73c:	f7ff fe94 	bl	800a468 <knl_ready_queue_delete>
		tcb->priority = (UB)priority;
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	b2da      	uxtb	r2, r3
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		knl_ready_queue_insert(&knl_ready_queue, tcb);
 800a74a:	6879      	ldr	r1, [r7, #4]
 800a74c:	4812      	ldr	r0, [pc, #72]	@ (800a798 <knl_change_task_priority+0x74>)
 800a74e:	f7ff fe53 	bl	800a3f8 <knl_ready_queue_insert>
		knl_reschedule();
 800a752:	f7ff fef7 	bl	800a544 <knl_reschedule>
		   execute it */
		if ( (tcb->state & TS_WAIT) != 0 && tcb->wspec->chg_pri_hook) {
			(*tcb->wspec->chg_pri_hook)(tcb, oldpri);
		}
	}
}
 800a756:	e01a      	b.n	800a78e <knl_change_task_priority+0x6a>
		oldpri = tcb->priority;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800a75e:	60fb      	str	r3, [r7, #12]
		tcb->priority = (UB)priority;
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	b2da      	uxtb	r2, r3
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
		if ( (tcb->state & TS_WAIT) != 0 && tcb->wspec->chg_pri_hook) {
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800a770:	f003 0302 	and.w	r3, r3, #2
 800a774:	2b00      	cmp	r3, #0
 800a776:	d00a      	beq.n	800a78e <knl_change_task_priority+0x6a>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d005      	beq.n	800a78e <knl_change_task_priority+0x6a>
			(*tcb->wspec->chg_pri_hook)(tcb, oldpri);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	68f9      	ldr	r1, [r7, #12]
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	4798      	blx	r3
}
 800a78e:	bf00      	nop
 800a790:	3710      	adds	r7, #16
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	24001878 	.word	0x24001878

0800a79c <knl_rotate_ready_queue>:

/*
 * Rotate ready queue.
 */
EXPORT void knl_rotate_ready_queue( INT priority )
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
	knl_ready_queue_rotate(&knl_ready_queue, priority);
 800a7a4:	6879      	ldr	r1, [r7, #4]
 800a7a6:	4804      	ldr	r0, [pc, #16]	@ (800a7b8 <knl_rotate_ready_queue+0x1c>)
 800a7a8:	f7ff feb2 	bl	800a510 <knl_ready_queue_rotate>
	knl_reschedule();
 800a7ac:	f7ff feca 	bl	800a544 <knl_reschedule>
}
 800a7b0:	bf00      	nop
 800a7b2:	3708      	adds	r7, #8
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	24001878 	.word	0x24001878

0800a7bc <knl_rotate_ready_queue_run>:

/*
 * Rotate the ready queue including the highest priority task.
 */
EXPORT void knl_rotate_ready_queue_run( void )
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	af00      	add	r7, sp, #0
	if ( knl_schedtsk != NULL ) {
 800a7c0:	4b07      	ldr	r3, [pc, #28]	@ (800a7e0 <knl_rotate_ready_queue_run+0x24>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d009      	beq.n	800a7dc <knl_rotate_ready_queue_run+0x20>
		knl_ready_queue_rotate(&knl_ready_queue,
 800a7c8:	4806      	ldr	r0, [pc, #24]	@ (800a7e4 <knl_rotate_ready_queue_run+0x28>)
 800a7ca:	f7ff fe0a 	bl	800a3e2 <knl_ready_queue_top_priority>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	4804      	ldr	r0, [pc, #16]	@ (800a7e4 <knl_rotate_ready_queue_run+0x28>)
 800a7d4:	f7ff fe9c 	bl	800a510 <knl_ready_queue_rotate>
				knl_ready_queue_top_priority(&knl_ready_queue));
		knl_reschedule();
 800a7d8:	f7ff feb4 	bl	800a544 <knl_reschedule>
	}
}
 800a7dc:	bf00      	nop
 800a7de:	bd80      	pop	{r7, pc}
 800a7e0:	24001874 	.word	0x24001874
 800a7e4:	24001878 	.word	0x24001878

0800a7e8 <QueInsert>:
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b083      	sub	sp, #12
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	685a      	ldr	r2, [r3, #4]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	605a      	str	r2, [r3, #4]
	entry->next = que;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	683a      	ldr	r2, [r7, #0]
 800a7fe:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	605a      	str	r2, [r3, #4]
}
 800a80e:	bf00      	nop
 800a810:	370c      	adds	r7, #12
 800a812:	46bd      	mov	sp, r7
 800a814:	bc80      	pop	{r7}
 800a816:	4770      	bx	lr

0800a818 <QueRemove>:
{
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
	if ( entry->next != entry ) {
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	429a      	cmp	r2, r3
 800a828:	d009      	beq.n	800a83e <QueRemove+0x26>
		entry->prev->next = (struct queue*) entry->next;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	6812      	ldr	r2, [r2, #0]
 800a832:	601a      	str	r2, [r3, #0]
		entry->next->prev = (struct queue*) entry->prev;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	6852      	ldr	r2, [r2, #4]
 800a83c:	605a      	str	r2, [r3, #4]
}
 800a83e:	bf00      	nop
 800a840:	370c      	adds	r7, #12
 800a842:	46bd      	mov	sp, r7
 800a844:	bc80      	pop	{r7}
 800a846:	4770      	bx	lr

0800a848 <QueRemoveNext>:
{
 800a848:	b480      	push	{r7}
 800a84a:	b085      	sub	sp, #20
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
	if ( que->next == que ) {
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	429a      	cmp	r2, r3
 800a858:	d101      	bne.n	800a85e <QueRemoveNext+0x16>
		return NULL;
 800a85a:	2300      	movs	r3, #0
 800a85c:	e00b      	b.n	800a876 <QueRemoveNext+0x2e>
	entry = que->next;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	60fb      	str	r3, [r7, #12]
	que->next = (struct queue*)entry->next;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681a      	ldr	r2, [r3, #0]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	601a      	str	r2, [r3, #0]
	entry->next->prev = que;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	605a      	str	r2, [r3, #4]
	return entry;
 800a874:	68fb      	ldr	r3, [r7, #12]
}
 800a876:	4618      	mov	r0, r3
 800a878:	3714      	adds	r7, #20
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bc80      	pop	{r7}
 800a87e:	4770      	bx	lr

0800a880 <knl_timer_delete>:

/*
 * Delete from time-event queue
 */
Inline void knl_timer_delete( TMEB *event )
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b082      	sub	sp, #8
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
	QueRemove(&event->queue);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	4618      	mov	r0, r3
 800a88c:	f7ff ffc4 	bl	800a818 <QueRemove>
}
 800a890:	bf00      	nop
 800a892:	3708      	adds	r7, #8
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}

0800a898 <knl_isTaskIndependent>:
{
 800a898:	b480      	push	{r7}
 800a89a:	af00      	add	r7, sp, #0
	return ( knl_taskindp > 0 )? TRUE: FALSE;
 800a89c:	4b05      	ldr	r3, [pc, #20]	@ (800a8b4 <knl_isTaskIndependent+0x1c>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	bfcc      	ite	gt
 800a8a4:	2301      	movgt	r3, #1
 800a8a6:	2300      	movle	r3, #0
 800a8a8:	b2db      	uxtb	r3, r3
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bc80      	pop	{r7}
 800a8b0:	4770      	bx	lr
 800a8b2:	bf00      	nop
 800a8b4:	240029f8 	.word	0x240029f8

0800a8b8 <knl_task_alive>:
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	4603      	mov	r3, r0
 800a8c0:	71fb      	strb	r3, [r7, #7]
	return ( (state & (TS_READY|TS_WAIT|TS_SUSPEND)) != 0 );
 800a8c2:	79fb      	ldrb	r3, [r7, #7]
 800a8c4:	f003 0307 	and.w	r3, r3, #7
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	bf14      	ite	ne
 800a8cc:	2301      	movne	r3, #1
 800a8ce:	2300      	moveq	r3, #0
 800a8d0:	b2db      	uxtb	r3, r3
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	370c      	adds	r7, #12
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bc80      	pop	{r7}
 800a8da:	4770      	bx	lr

0800a8dc <knl_wait_cancel>:
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b082      	sub	sp, #8
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
	knl_timer_delete(&tcb->wtmeb);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	334c      	adds	r3, #76	@ 0x4c
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7ff ffc9 	bl	800a880 <knl_timer_delete>
	QueRemove(&tcb->tskque);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f7ff ff91 	bl	800a818 <QueRemove>
}
 800a8f6:	bf00      	nop
 800a8f8:	3708      	adds	r7, #8
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}

0800a8fe <knl_setup_stacd>:
/*
 * Set task startup code
 *	Called by 'tk_sta_tsk()' processing.
 */
Inline void knl_setup_stacd( TCB *tcb, INT stacd )
{
 800a8fe:	b480      	push	{r7}
 800a900:	b085      	sub	sp, #20
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
 800a906:	6039      	str	r1, [r7, #0]
	SStackFrame	*ssp;
	
	ssp = tcb->tskctxb.ssp;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	699b      	ldr	r3, [r3, #24]
 800a90c:	60fb      	str	r3, [r7, #12]

	ssp->r[0] = stacd;
 800a90e:	683a      	ldr	r2, [r7, #0]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	625a      	str	r2, [r3, #36]	@ 0x24
	ssp->r[1] = (VW)tcb->exinf;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	461a      	mov	r2, r3
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a91e:	bf00      	nop
 800a920:	3714      	adds	r7, #20
 800a922:	46bd      	mov	sp, r7
 800a924:	bc80      	pop	{r7}
 800a926:	4770      	bx	lr

0800a928 <knl_cleanup_context>:

/*
 * Delete task contexts
 */
Inline void knl_cleanup_context( TCB *tcb )
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
		Asm("mrs %0, control":"=r"(control));
		control &= (1<<2);
		Asm("msr control, %0"::"r"(control));
	}
#endif
}
 800a930:	bf00      	nop
 800a932:	370c      	adds	r7, #12
 800a934:	46bd      	mov	sp, r7
 800a936:	bc80      	pop	{r7}
 800a938:	4770      	bx	lr
	...

0800a93c <tk_cre_tsk>:

/*
 * Create task
 */
SYSCALL ID tk_cre_tsk( CONST T_CTSK *pk_ctsk )
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b088      	sub	sp, #32
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
#if CHK_RSATR
	const ATR VALID_TSKATR = {	/* Valid value of task attribute */
 800a944:	f240 3321 	movw	r3, #801	@ 0x321
 800a948:	613b      	str	r3, [r7, #16]
	TCB	*tcb;
	W	sstksz;
	void	*stack;
	ER	ercd;

	CHECK_RSATR(pk_ctsk->tskatr, VALID_TSKATR);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	685a      	ldr	r2, [r3, #4]
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	43db      	mvns	r3, r3
 800a952:	4013      	ands	r3, r2
 800a954:	2b00      	cmp	r3, #0
 800a956:	d002      	beq.n	800a95e <tk_cre_tsk+0x22>
 800a958:	f06f 030a 	mvn.w	r3, #10
 800a95c:	e090      	b.n	800aa80 <tk_cre_tsk+0x144>
#if !USE_IMALLOC
	/* TA_USERBUF must be specified if configured in no Imalloc */
	CHECK_PAR((pk_ctsk->tskatr & TA_USERBUF) != 0);
#endif
	CHECK_PAR(pk_ctsk->stksz >= 0);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	691b      	ldr	r3, [r3, #16]
 800a962:	2b00      	cmp	r3, #0
 800a964:	da02      	bge.n	800a96c <tk_cre_tsk+0x30>
 800a966:	f06f 0310 	mvn.w	r3, #16
 800a96a:	e089      	b.n	800aa80 <tk_cre_tsk+0x144>
	CHECK_PRI(pk_ctsk->itskpri);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	68db      	ldr	r3, [r3, #12]
 800a970:	2b00      	cmp	r3, #0
 800a972:	dd03      	ble.n	800a97c <tk_cre_tsk+0x40>
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	68db      	ldr	r3, [r3, #12]
 800a978:	2b20      	cmp	r3, #32
 800a97a:	dd02      	ble.n	800a982 <tk_cre_tsk+0x46>
 800a97c:	f06f 0310 	mvn.w	r3, #16
 800a980:	e07e      	b.n	800aa80 <tk_cre_tsk+0x144>

	if ( (pk_ctsk->tskatr & TA_USERBUF) != 0 ) {
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	f003 0320 	and.w	r3, r3, #32
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d00c      	beq.n	800a9a8 <tk_cre_tsk+0x6c>
		/* Use user buffer */
		sstksz = pk_ctsk->stksz;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	691b      	ldr	r3, [r3, #16]
 800a992:	61fb      	str	r3, [r7, #28]
		CHECK_PAR(sstksz >= MIN_SYS_STACK_SIZE);
 800a994:	69fb      	ldr	r3, [r7, #28]
 800a996:	2b7f      	cmp	r3, #127	@ 0x7f
 800a998:	dc02      	bgt.n	800a9a0 <tk_cre_tsk+0x64>
 800a99a:	f06f 0310 	mvn.w	r3, #16
 800a99e:	e06f      	b.n	800aa80 <tk_cre_tsk+0x144>
		stack = pk_ctsk->bufptr;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	695b      	ldr	r3, [r3, #20]
 800a9a4:	61bb      	str	r3, [r7, #24]
 800a9a6:	e015      	b.n	800a9d4 <tk_cre_tsk+0x98>
	} else {
#if USE_IMALLOC
		/* Allocate system stack area */
		sstksz = pk_ctsk->stksz + DEFAULT_SYS_STKSZ;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	691b      	ldr	r3, [r3, #16]
 800a9ac:	3380      	adds	r3, #128	@ 0x80
 800a9ae:	61fb      	str	r3, [r7, #28]
		sstksz  = (sstksz  + 7) / 8 * 8;	/* Align to a multiple of 8 */
 800a9b0:	69fb      	ldr	r3, [r7, #28]
 800a9b2:	3307      	adds	r3, #7
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	da00      	bge.n	800a9ba <tk_cre_tsk+0x7e>
 800a9b8:	3307      	adds	r3, #7
 800a9ba:	10db      	asrs	r3, r3, #3
 800a9bc:	00db      	lsls	r3, r3, #3
 800a9be:	61fb      	str	r3, [r7, #28]
		stack = knl_Imalloc((UW)sstksz);
 800a9c0:	69f8      	ldr	r0, [r7, #28]
 800a9c2:	f7fc fc87 	bl	80072d4 <knl_Imalloc>
 800a9c6:	61b8      	str	r0, [r7, #24]
		if ( stack == NULL ) {
 800a9c8:	69bb      	ldr	r3, [r7, #24]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d102      	bne.n	800a9d4 <tk_cre_tsk+0x98>
			return E_NOMEM;
 800a9ce:	f06f 0320 	mvn.w	r3, #32
 800a9d2:	e055      	b.n	800aa80 <tk_cre_tsk+0x144>
		}
#endif
	}

	BEGIN_CRITICAL_SECTION;
 800a9d4:	f002 fe9b 	bl	800d70e <disint>
 800a9d8:	60f8      	str	r0, [r7, #12]
	/* Get control block from FreeQue */
	tcb = (TCB*)QueRemoveNext(&knl_free_tcb);
 800a9da:	482b      	ldr	r0, [pc, #172]	@ (800aa88 <tk_cre_tsk+0x14c>)
 800a9dc:	f7ff ff34 	bl	800a848 <QueRemoveNext>
 800a9e0:	60b8      	str	r0, [r7, #8]
	if ( tcb == NULL ) {
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d103      	bne.n	800a9f0 <tk_cre_tsk+0xb4>
		ercd = E_LIMIT;
 800a9e8:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 800a9ec:	617b      	str	r3, [r7, #20]
		goto error_exit;
 800a9ee:	e028      	b.n	800aa42 <tk_cre_tsk+0x106>
	}

	/* Initialize control block */
	tcb->exinf     = pk_ctsk->exinf;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	60da      	str	r2, [r3, #12]
	tcb->tskatr    = pk_ctsk->tskatr;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	685a      	ldr	r2, [r3, #4]
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	611a      	str	r2, [r3, #16]
	tcb->task      = pk_ctsk->task;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	689a      	ldr	r2, [r3, #8]
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	615a      	str	r2, [r3, #20]
	tcb->ipriority = (UB)int_priority(pk_ctsk->itskpri);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	b2db      	uxtb	r3, r3
 800aa0e:	3b01      	subs	r3, #1
 800aa10:	b2da      	uxtb	r2, r3
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	tcb->sstksz    = sstksz;
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	69fa      	ldr	r2, [r7, #28]
 800aa1c:	61da      	str	r2, [r3, #28]
		knl_strncpy((char*)tcb->name, (char*)pk_ctsk->dsname, OBJECT_NAME_LENGTH);
	}
#endif

	/* Set stack pointer */
	tcb->isstack = (VB*)stack + sstksz;
 800aa1e:	69fb      	ldr	r3, [r7, #28]
 800aa20:	69ba      	ldr	r2, [r7, #24]
 800aa22:	441a      	add	r2, r3
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	661a      	str	r2, [r3, #96]	@ 0x60

	/* Set initial value of task operation mode */
	tcb->isysmode = 1;
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	f883 2020 	strb.w	r2, [r3, #32]
	tcb->sysmode  = 1;
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	2201      	movs	r2, #1
 800aa34:	845a      	strh	r2, [r3, #34]	@ 0x22

	/* make it to DORMANT state */
	knl_make_dormant(tcb);
 800aa36:	68b8      	ldr	r0, [r7, #8]
 800aa38:	f7ff fe02 	bl	800a640 <knl_make_dormant>

	ercd = tcb->tskid;
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	689b      	ldr	r3, [r3, #8]
 800aa40:	617b      	str	r3, [r7, #20]

    error_exit:
	END_CRITICAL_SECTION;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d10b      	bne.n	800aa60 <tk_cre_tsk+0x124>
 800aa48:	4b10      	ldr	r3, [pc, #64]	@ (800aa8c <tk_cre_tsk+0x150>)
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	4b10      	ldr	r3, [pc, #64]	@ (800aa90 <tk_cre_tsk+0x154>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d005      	beq.n	800aa60 <tk_cre_tsk+0x124>
 800aa54:	4b0f      	ldr	r3, [pc, #60]	@ (800aa94 <tk_cre_tsk+0x158>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d101      	bne.n	800aa60 <tk_cre_tsk+0x124>
 800aa5c:	f7f8 ff20 	bl	80038a0 <knl_dispatch>
 800aa60:	68f8      	ldr	r0, [r7, #12]
 800aa62:	f002 fe3c 	bl	800d6de <set_basepri>

#if USE_IMALLOC
	if ( (ercd < E_OK) && ((pk_ctsk->tskatr & TA_USERBUF) == 0) ) {
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	da08      	bge.n	800aa7e <tk_cre_tsk+0x142>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	f003 0320 	and.w	r3, r3, #32
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d102      	bne.n	800aa7e <tk_cre_tsk+0x142>
		knl_Ifree(stack);
 800aa78:	69b8      	ldr	r0, [r7, #24]
 800aa7a:	f7fc fcd3 	bl	8007424 <knl_Ifree>
	}
#endif

	return ercd;
 800aa7e:	697b      	ldr	r3, [r7, #20]
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3720      	adds	r7, #32
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}
 800aa88:	24002688 	.word	0x24002688
 800aa8c:	24001870 	.word	0x24001870
 800aa90:	24001874 	.word	0x24001874
 800aa94:	2400186c 	.word	0x2400186c

0800aa98 <knl_del_tsk>:
/*
 * Task deletion
 *	Call from critical section
 */
LOCAL void knl_del_tsk( TCB *tcb )
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
#if USE_IMALLOC
	if ( (tcb->tskatr & TA_USERBUF) == 0 ) {
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	691b      	ldr	r3, [r3, #16]
 800aaa4:	f003 0320 	and.w	r3, r3, #32
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d109      	bne.n	800aac0 <knl_del_tsk+0x28>
		/* User buffer is not used */
		/* Free system stack */
		void *stack = (VB*)tcb->isstack - tcb->sstksz;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	69db      	ldr	r3, [r3, #28]
 800aab4:	425b      	negs	r3, r3
 800aab6:	4413      	add	r3, r2
 800aab8:	60fb      	str	r3, [r7, #12]
		knl_Ifree(stack);
 800aaba:	68f8      	ldr	r0, [r7, #12]
 800aabc:	f7fc fcb2 	bl	8007424 <knl_Ifree>
	}
#endif

	/* Return control block to FreeQue */
	QueInsert(&tcb->tskque, &knl_free_tcb);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	4906      	ldr	r1, [pc, #24]	@ (800aadc <knl_del_tsk+0x44>)
 800aac4:	4618      	mov	r0, r3
 800aac6:	f7ff fe8f 	bl	800a7e8 <QueInsert>
	tcb->state = TS_NONEXIST;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2200      	movs	r2, #0
 800aace:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 800aad2:	bf00      	nop
 800aad4:	3710      	adds	r7, #16
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	24002688 	.word	0x24002688

0800aae0 <tk_del_tsk>:
#ifdef USE_FUNC_TK_DEL_TSK
/*
 * Delete task 
 */
SYSCALL ER tk_del_tsk( ID tskid )
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b086      	sub	sp, #24
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
	TCB	*tcb;
	TSTAT	state;
	ER	ercd = E_OK;
 800aae8:	2300      	movs	r3, #0
 800aaea:	617b      	str	r3, [r7, #20]

	CHECK_TSKID(tskid);
 800aaec:	f7ff fed4 	bl	800a898 <knl_isTaskIndependent>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d109      	bne.n	800ab0a <tk_del_tsk+0x2a>
 800aaf6:	4b2d      	ldr	r3, [pc, #180]	@ (800abac <tk_del_tsk+0xcc>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d005      	beq.n	800ab0a <tk_del_tsk+0x2a>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d102      	bne.n	800ab0a <tk_del_tsk+0x2a>
 800ab04:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 800ab08:	e04c      	b.n	800aba4 <tk_del_tsk+0xc4>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	dd02      	ble.n	800ab16 <tk_del_tsk+0x36>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2b20      	cmp	r3, #32
 800ab14:	dd02      	ble.n	800ab1c <tk_del_tsk+0x3c>
 800ab16:	f06f 0311 	mvn.w	r3, #17
 800ab1a:	e043      	b.n	800aba4 <tk_del_tsk+0xc4>
	CHECK_NONSELF(tskid);
 800ab1c:	f7ff febc 	bl	800a898 <knl_isTaskIndependent>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d10c      	bne.n	800ab40 <tk_del_tsk+0x60>
 800ab26:	4b21      	ldr	r3, [pc, #132]	@ (800abac <tk_del_tsk+0xcc>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d008      	beq.n	800ab40 <tk_del_tsk+0x60>
 800ab2e:	4b1f      	ldr	r3, [pc, #124]	@ (800abac <tk_del_tsk+0xcc>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	689b      	ldr	r3, [r3, #8]
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d102      	bne.n	800ab40 <tk_del_tsk+0x60>
 800ab3a:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 800ab3e:	e031      	b.n	800aba4 <tk_del_tsk+0xc4>

	tcb = get_tcb(tskid);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	3b01      	subs	r3, #1
 800ab44:	2268      	movs	r2, #104	@ 0x68
 800ab46:	fb02 f303 	mul.w	r3, r2, r3
 800ab4a:	4a19      	ldr	r2, [pc, #100]	@ (800abb0 <tk_del_tsk+0xd0>)
 800ab4c:	4413      	add	r3, r2
 800ab4e:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 800ab50:	f002 fddd 	bl	800d70e <disint>
 800ab54:	60f8      	str	r0, [r7, #12]
	state = (TSTAT)tcb->state;
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800ab5c:	72fb      	strb	r3, [r7, #11]
	if ( state != TS_DORMANT ) {
 800ab5e:	7afb      	ldrb	r3, [r7, #11]
 800ab60:	2b08      	cmp	r3, #8
 800ab62:	d009      	beq.n	800ab78 <tk_del_tsk+0x98>
		ercd = ( state == TS_NONEXIST )? E_NOEXS: E_OBJ;
 800ab64:	7afb      	ldrb	r3, [r7, #11]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d102      	bne.n	800ab70 <tk_del_tsk+0x90>
 800ab6a:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 800ab6e:	e001      	b.n	800ab74 <tk_del_tsk+0x94>
 800ab70:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 800ab74:	617b      	str	r3, [r7, #20]
 800ab76:	e002      	b.n	800ab7e <tk_del_tsk+0x9e>
	} else {
		knl_del_tsk(tcb);
 800ab78:	6938      	ldr	r0, [r7, #16]
 800ab7a:	f7ff ff8d 	bl	800aa98 <knl_del_tsk>
	}
	END_CRITICAL_SECTION;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d10b      	bne.n	800ab9c <tk_del_tsk+0xbc>
 800ab84:	4b09      	ldr	r3, [pc, #36]	@ (800abac <tk_del_tsk+0xcc>)
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	4b0a      	ldr	r3, [pc, #40]	@ (800abb4 <tk_del_tsk+0xd4>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d005      	beq.n	800ab9c <tk_del_tsk+0xbc>
 800ab90:	4b09      	ldr	r3, [pc, #36]	@ (800abb8 <tk_del_tsk+0xd8>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d101      	bne.n	800ab9c <tk_del_tsk+0xbc>
 800ab98:	f7f8 fe82 	bl	80038a0 <knl_dispatch>
 800ab9c:	68f8      	ldr	r0, [r7, #12]
 800ab9e:	f002 fd9e 	bl	800d6de <set_basepri>

	return ercd;
 800aba2:	697b      	ldr	r3, [r7, #20]
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3718      	adds	r7, #24
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}
 800abac:	24001870 	.word	0x24001870
 800abb0:	24001988 	.word	0x24001988
 800abb4:	24001874 	.word	0x24001874
 800abb8:	2400186c 	.word	0x2400186c

0800abbc <tk_sta_tsk>:

/*
 * Start task
 */
SYSCALL ER tk_sta_tsk( ID tskid, INT stacd )
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b086      	sub	sp, #24
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
	TCB	*tcb;
	TSTAT	state;
	ER	ercd = E_OK;
 800abc6:	2300      	movs	r3, #0
 800abc8:	617b      	str	r3, [r7, #20]

	CHECK_TSKID(tskid);
 800abca:	f7ff fe65 	bl	800a898 <knl_isTaskIndependent>
 800abce:	4603      	mov	r3, r0
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d109      	bne.n	800abe8 <tk_sta_tsk+0x2c>
 800abd4:	4b2f      	ldr	r3, [pc, #188]	@ (800ac94 <tk_sta_tsk+0xd8>)
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d005      	beq.n	800abe8 <tk_sta_tsk+0x2c>
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d102      	bne.n	800abe8 <tk_sta_tsk+0x2c>
 800abe2:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 800abe6:	e050      	b.n	800ac8a <tk_sta_tsk+0xce>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2b00      	cmp	r3, #0
 800abec:	dd02      	ble.n	800abf4 <tk_sta_tsk+0x38>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2b20      	cmp	r3, #32
 800abf2:	dd02      	ble.n	800abfa <tk_sta_tsk+0x3e>
 800abf4:	f06f 0311 	mvn.w	r3, #17
 800abf8:	e047      	b.n	800ac8a <tk_sta_tsk+0xce>
	CHECK_NONSELF(tskid);
 800abfa:	f7ff fe4d 	bl	800a898 <knl_isTaskIndependent>
 800abfe:	4603      	mov	r3, r0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d10c      	bne.n	800ac1e <tk_sta_tsk+0x62>
 800ac04:	4b23      	ldr	r3, [pc, #140]	@ (800ac94 <tk_sta_tsk+0xd8>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d008      	beq.n	800ac1e <tk_sta_tsk+0x62>
 800ac0c:	4b21      	ldr	r3, [pc, #132]	@ (800ac94 <tk_sta_tsk+0xd8>)
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	689b      	ldr	r3, [r3, #8]
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d102      	bne.n	800ac1e <tk_sta_tsk+0x62>
 800ac18:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 800ac1c:	e035      	b.n	800ac8a <tk_sta_tsk+0xce>

	tcb = get_tcb(tskid);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	3b01      	subs	r3, #1
 800ac22:	2268      	movs	r2, #104	@ 0x68
 800ac24:	fb02 f303 	mul.w	r3, r2, r3
 800ac28:	4a1b      	ldr	r2, [pc, #108]	@ (800ac98 <tk_sta_tsk+0xdc>)
 800ac2a:	4413      	add	r3, r2
 800ac2c:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 800ac2e:	f002 fd6e 	bl	800d70e <disint>
 800ac32:	60f8      	str	r0, [r7, #12]
	state = (TSTAT)tcb->state;
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800ac3a:	72fb      	strb	r3, [r7, #11]
	if ( state != TS_DORMANT ) {
 800ac3c:	7afb      	ldrb	r3, [r7, #11]
 800ac3e:	2b08      	cmp	r3, #8
 800ac40:	d009      	beq.n	800ac56 <tk_sta_tsk+0x9a>
		ercd = ( state == TS_NONEXIST )? E_NOEXS: E_OBJ;
 800ac42:	7afb      	ldrb	r3, [r7, #11]
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d102      	bne.n	800ac4e <tk_sta_tsk+0x92>
 800ac48:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 800ac4c:	e001      	b.n	800ac52 <tk_sta_tsk+0x96>
 800ac4e:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 800ac52:	617b      	str	r3, [r7, #20]
 800ac54:	e006      	b.n	800ac64 <tk_sta_tsk+0xa8>
	} else {
		knl_setup_stacd(tcb, stacd);
 800ac56:	6839      	ldr	r1, [r7, #0]
 800ac58:	6938      	ldr	r0, [r7, #16]
 800ac5a:	f7ff fe50 	bl	800a8fe <knl_setup_stacd>
		knl_make_ready(tcb);
 800ac5e:	6938      	ldr	r0, [r7, #16]
 800ac60:	f7ff fd2a 	bl	800a6b8 <knl_make_ready>
	}
	END_CRITICAL_SECTION;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d10b      	bne.n	800ac82 <tk_sta_tsk+0xc6>
 800ac6a:	4b0a      	ldr	r3, [pc, #40]	@ (800ac94 <tk_sta_tsk+0xd8>)
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	4b0b      	ldr	r3, [pc, #44]	@ (800ac9c <tk_sta_tsk+0xe0>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	429a      	cmp	r2, r3
 800ac74:	d005      	beq.n	800ac82 <tk_sta_tsk+0xc6>
 800ac76:	4b0a      	ldr	r3, [pc, #40]	@ (800aca0 <tk_sta_tsk+0xe4>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d101      	bne.n	800ac82 <tk_sta_tsk+0xc6>
 800ac7e:	f7f8 fe0f 	bl	80038a0 <knl_dispatch>
 800ac82:	68f8      	ldr	r0, [r7, #12]
 800ac84:	f002 fd2b 	bl	800d6de <set_basepri>

	return ercd;
 800ac88:	697b      	ldr	r3, [r7, #20]
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3718      	adds	r7, #24
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	24001870 	.word	0x24001870
 800ac98:	24001988 	.word	0x24001988
 800ac9c:	24001874 	.word	0x24001874
 800aca0:	2400186c 	.word	0x2400186c

0800aca4 <knl_ter_tsk>:
/*
 * Task finalization
 *	Call from critical section
 */
LOCAL void knl_ter_tsk( TCB *tcb )
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
	TSTAT	state;

	state = (TSTAT)tcb->state;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800acb2:	73fb      	strb	r3, [r7, #15]
	if ( state == TS_READY ) {
 800acb4:	7bfb      	ldrb	r3, [r7, #15]
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d103      	bne.n	800acc2 <knl_ter_tsk+0x1e>
		knl_make_non_ready(tcb);
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f7ff fd16 	bl	800a6ec <knl_make_non_ready>
 800acc0:	e011      	b.n	800ace6 <knl_ter_tsk+0x42>

	} else if ( (state & TS_WAIT) != 0 ) {
 800acc2:	7bfb      	ldrb	r3, [r7, #15]
 800acc4:	f003 0302 	and.w	r3, r3, #2
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d00c      	beq.n	800ace6 <knl_ter_tsk+0x42>
		knl_wait_cancel(tcb);
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f7ff fe05 	bl	800a8dc <knl_wait_cancel>
		if ( tcb->wspec->rel_wai_hook != NULL ) {
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acd6:	689b      	ldr	r3, [r3, #8]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d004      	beq.n	800ace6 <knl_ter_tsk+0x42>
			(*tcb->wspec->rel_wai_hook)(tcb);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	4798      	blx	r3
		}
	}

#if USE_MUTEX == 1
	/* signal mutex */
	knl_signal_all_mutex(tcb);
 800ace6:	6878      	ldr	r0, [r7, #4]
 800ace8:	f7fe fbe4 	bl	80094b4 <knl_signal_all_mutex>
#endif

	knl_cleanup_context(tcb);
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f7ff fe1b 	bl	800a928 <knl_cleanup_context>
}
 800acf2:	bf00      	nop
 800acf4:	3710      	adds	r7, #16
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}
	...

0800acfc <tk_ext_tsk>:
#ifdef USE_FUNC_TK_EXT_TSK
/*
 * End its own task
 */
SYSCALL void tk_ext_tsk( void )
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b088      	sub	sp, #32
 800ad00:	af00      	add	r7, sp, #0
	volatile VB _dummy[DORMANT_STACK_SIZE];
#endif

	/* Check context error */
#if CHK_CTX2
	if ( in_indp() ) {
 800ad02:	f7ff fdc9 	bl	800a898 <knl_isTaskIndependent>
 800ad06:	4603      	mov	r3, r0
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d103      	bne.n	800ad14 <tk_ext_tsk+0x18>
 800ad0c:	4b18      	ldr	r3, [pc, #96]	@ (800ad70 <tk_ext_tsk+0x74>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d104      	bne.n	800ad1e <tk_ext_tsk+0x22>
		SYSTEM_MESSAGE("tk_ext_tsk was called in the task independent\n");
 800ad14:	4817      	ldr	r0, [pc, #92]	@ (800ad74 <tk_ext_tsk+0x78>)
 800ad16:	f003 f889 	bl	800de2c <tm_putstring>
		while(1);
 800ad1a:	bf00      	nop
 800ad1c:	e7fd      	b.n	800ad1a <tk_ext_tsk+0x1e>
		return;
	}
#endif
#if CHK_CTX1
	if ( in_ddsp() ) {
 800ad1e:	4b16      	ldr	r3, [pc, #88]	@ (800ad78 <tk_ext_tsk+0x7c>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d10d      	bne.n	800ad42 <tk_ext_tsk+0x46>
 800ad26:	f7ff fdb7 	bl	800a898 <knl_isTaskIndependent>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d108      	bne.n	800ad42 <tk_ext_tsk+0x46>
 800ad30:	4b0f      	ldr	r3, [pc, #60]	@ (800ad70 <tk_ext_tsk+0x74>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d004      	beq.n	800ad42 <tk_ext_tsk+0x46>
 800ad38:	f002 fcdd 	bl	800d6f6 <get_basepri>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d002      	beq.n	800ad48 <tk_ext_tsk+0x4c>
		SYSTEM_MESSAGE("tk_ext_tsk was called in the dispatch disabled\n");
 800ad42:	480e      	ldr	r0, [pc, #56]	@ (800ad7c <tk_ext_tsk+0x80>)
 800ad44:	f003 f872 	bl	800de2c <tm_putstring>
	}
#endif

	DISABLE_INTERRUPT;
 800ad48:	f002 fce1 	bl	800d70e <disint>
	knl_ter_tsk(knl_ctxtsk);
 800ad4c:	4b08      	ldr	r3, [pc, #32]	@ (800ad70 <tk_ext_tsk+0x74>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	4618      	mov	r0, r3
 800ad52:	f7ff ffa7 	bl	800aca4 <knl_ter_tsk>
	knl_make_dormant(knl_ctxtsk);
 800ad56:	4b06      	ldr	r3, [pc, #24]	@ (800ad70 <tk_ext_tsk+0x74>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	f7ff fc70 	bl	800a640 <knl_make_dormant>

	knl_force_dispatch();
 800ad60:	f7f8 fd86 	bl	8003870 <knl_force_dispatch>
	/* No return */

#ifdef DORMANT_STACK_SIZE
	/* Avoid WARNING (This code does not execute) */
	_dummy[0] = _dummy[0];
 800ad64:	793b      	ldrb	r3, [r7, #4]
 800ad66:	b25b      	sxtb	r3, r3
 800ad68:	713b      	strb	r3, [r7, #4]
#endif
}
 800ad6a:	3720      	adds	r7, #32
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	24001870 	.word	0x24001870
 800ad74:	0800eb48 	.word	0x0800eb48
 800ad78:	2400186c 	.word	0x2400186c
 800ad7c:	0800eb78 	.word	0x0800eb78

0800ad80 <tk_exd_tsk>:
#ifdef USE_FUNC_TK_EXD_TSK
/*
 * End and delete its own task
 */
SYSCALL void tk_exd_tsk( void )
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	af00      	add	r7, sp, #0
	/* Check context error */
#if CHK_CTX2
	if ( in_indp() ) {
 800ad84:	f7ff fd88 	bl	800a898 <knl_isTaskIndependent>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d103      	bne.n	800ad96 <tk_exd_tsk+0x16>
 800ad8e:	4b16      	ldr	r3, [pc, #88]	@ (800ade8 <tk_exd_tsk+0x68>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d103      	bne.n	800ad9e <tk_exd_tsk+0x1e>
		SYSTEM_MESSAGE("tk_exd_tsk was called in the task independent\n");
 800ad96:	4815      	ldr	r0, [pc, #84]	@ (800adec <tk_exd_tsk+0x6c>)
 800ad98:	f003 f848 	bl	800de2c <tm_putstring>
		return;
 800ad9c:	e022      	b.n	800ade4 <tk_exd_tsk+0x64>
	}
#endif
#if CHK_CTX1
	if ( in_ddsp() ) {
 800ad9e:	4b14      	ldr	r3, [pc, #80]	@ (800adf0 <tk_exd_tsk+0x70>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d10d      	bne.n	800adc2 <tk_exd_tsk+0x42>
 800ada6:	f7ff fd77 	bl	800a898 <knl_isTaskIndependent>
 800adaa:	4603      	mov	r3, r0
 800adac:	2b00      	cmp	r3, #0
 800adae:	d108      	bne.n	800adc2 <tk_exd_tsk+0x42>
 800adb0:	4b0d      	ldr	r3, [pc, #52]	@ (800ade8 <tk_exd_tsk+0x68>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d004      	beq.n	800adc2 <tk_exd_tsk+0x42>
 800adb8:	f002 fc9d 	bl	800d6f6 <get_basepri>
 800adbc:	4603      	mov	r3, r0
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d002      	beq.n	800adc8 <tk_exd_tsk+0x48>
		SYSTEM_MESSAGE("tk_exd_tsk was called in the dispatch disabled\n");
 800adc2:	480c      	ldr	r0, [pc, #48]	@ (800adf4 <tk_exd_tsk+0x74>)
 800adc4:	f003 f832 	bl	800de2c <tm_putstring>
	}
#endif

	DISABLE_INTERRUPT;
 800adc8:	f002 fca1 	bl	800d70e <disint>
	knl_ter_tsk(knl_ctxtsk);
 800adcc:	4b06      	ldr	r3, [pc, #24]	@ (800ade8 <tk_exd_tsk+0x68>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4618      	mov	r0, r3
 800add2:	f7ff ff67 	bl	800aca4 <knl_ter_tsk>
	knl_del_tsk(knl_ctxtsk);
 800add6:	4b04      	ldr	r3, [pc, #16]	@ (800ade8 <tk_exd_tsk+0x68>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4618      	mov	r0, r3
 800addc:	f7ff fe5c 	bl	800aa98 <knl_del_tsk>

	knl_force_dispatch();
 800ade0:	f7f8 fd46 	bl	8003870 <knl_force_dispatch>
	/* No return */
}
 800ade4:	bd80      	pop	{r7, pc}
 800ade6:	bf00      	nop
 800ade8:	24001870 	.word	0x24001870
 800adec:	0800eba8 	.word	0x0800eba8
 800adf0:	2400186c 	.word	0x2400186c
 800adf4:	0800ebd8 	.word	0x0800ebd8

0800adf8 <tk_ter_tsk>:
#ifdef USE_FUNC_TK_TER_TSK
/*
 * Termination of other task
 */
SYSCALL ER tk_ter_tsk( ID tskid )
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b086      	sub	sp, #24
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
	TCB	*tcb;
	TSTAT	state;
	ER	ercd = E_OK;
 800ae00:	2300      	movs	r3, #0
 800ae02:	617b      	str	r3, [r7, #20]

	CHECK_TSKID(tskid);
 800ae04:	f7ff fd48 	bl	800a898 <knl_isTaskIndependent>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d109      	bne.n	800ae22 <tk_ter_tsk+0x2a>
 800ae0e:	4b37      	ldr	r3, [pc, #220]	@ (800aeec <tk_ter_tsk+0xf4>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d005      	beq.n	800ae22 <tk_ter_tsk+0x2a>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d102      	bne.n	800ae22 <tk_ter_tsk+0x2a>
 800ae1c:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 800ae20:	e05f      	b.n	800aee2 <tk_ter_tsk+0xea>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	dd02      	ble.n	800ae2e <tk_ter_tsk+0x36>
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2b20      	cmp	r3, #32
 800ae2c:	dd02      	ble.n	800ae34 <tk_ter_tsk+0x3c>
 800ae2e:	f06f 0311 	mvn.w	r3, #17
 800ae32:	e056      	b.n	800aee2 <tk_ter_tsk+0xea>
	CHECK_NONSELF(tskid);
 800ae34:	f7ff fd30 	bl	800a898 <knl_isTaskIndependent>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d10c      	bne.n	800ae58 <tk_ter_tsk+0x60>
 800ae3e:	4b2b      	ldr	r3, [pc, #172]	@ (800aeec <tk_ter_tsk+0xf4>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d008      	beq.n	800ae58 <tk_ter_tsk+0x60>
 800ae46:	4b29      	ldr	r3, [pc, #164]	@ (800aeec <tk_ter_tsk+0xf4>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	689b      	ldr	r3, [r3, #8]
 800ae4c:	687a      	ldr	r2, [r7, #4]
 800ae4e:	429a      	cmp	r2, r3
 800ae50:	d102      	bne.n	800ae58 <tk_ter_tsk+0x60>
 800ae52:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 800ae56:	e044      	b.n	800aee2 <tk_ter_tsk+0xea>

	tcb = get_tcb(tskid);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	3b01      	subs	r3, #1
 800ae5c:	2268      	movs	r2, #104	@ 0x68
 800ae5e:	fb02 f303 	mul.w	r3, r2, r3
 800ae62:	4a23      	ldr	r2, [pc, #140]	@ (800aef0 <tk_ter_tsk+0xf8>)
 800ae64:	4413      	add	r3, r2
 800ae66:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 800ae68:	f002 fc51 	bl	800d70e <disint>
 800ae6c:	60f8      	str	r0, [r7, #12]
	state = (TSTAT)tcb->state;
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800ae74:	72fb      	strb	r3, [r7, #11]
	if ( !knl_task_alive(state) ) {
 800ae76:	7afb      	ldrb	r3, [r7, #11]
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7ff fd1d 	bl	800a8b8 <knl_task_alive>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d109      	bne.n	800ae98 <tk_ter_tsk+0xa0>
		ercd = ( state == TS_NONEXIST )? E_NOEXS: E_OBJ;
 800ae84:	7afb      	ldrb	r3, [r7, #11]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d102      	bne.n	800ae90 <tk_ter_tsk+0x98>
 800ae8a:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 800ae8e:	e001      	b.n	800ae94 <tk_ter_tsk+0x9c>
 800ae90:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 800ae94:	617b      	str	r3, [r7, #20]
 800ae96:	e011      	b.n	800aebc <tk_ter_tsk+0xc4>
	} else if ( tcb->klocked ) {
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae9e:	f003 0302 	and.w	r3, r3, #2
 800aea2:	b2db      	uxtb	r3, r3
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d003      	beq.n	800aeb0 <tk_ter_tsk+0xb8>
		/* Normally, it does not become this state.
		 * When the state is page-in wait in the virtual memory
		 * system and when trying to terminate any task,
		 * it becomes this state.
		 */
		ercd = E_OBJ;
 800aea8:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 800aeac:	617b      	str	r3, [r7, #20]
 800aeae:	e005      	b.n	800aebc <tk_ter_tsk+0xc4>
	} else {
		knl_ter_tsk(tcb);
 800aeb0:	6938      	ldr	r0, [r7, #16]
 800aeb2:	f7ff fef7 	bl	800aca4 <knl_ter_tsk>
		knl_make_dormant(tcb);
 800aeb6:	6938      	ldr	r0, [r7, #16]
 800aeb8:	f7ff fbc2 	bl	800a640 <knl_make_dormant>
	}
	END_CRITICAL_SECTION;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d10b      	bne.n	800aeda <tk_ter_tsk+0xe2>
 800aec2:	4b0a      	ldr	r3, [pc, #40]	@ (800aeec <tk_ter_tsk+0xf4>)
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	4b0b      	ldr	r3, [pc, #44]	@ (800aef4 <tk_ter_tsk+0xfc>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d005      	beq.n	800aeda <tk_ter_tsk+0xe2>
 800aece:	4b0a      	ldr	r3, [pc, #40]	@ (800aef8 <tk_ter_tsk+0x100>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d101      	bne.n	800aeda <tk_ter_tsk+0xe2>
 800aed6:	f7f8 fce3 	bl	80038a0 <knl_dispatch>
 800aeda:	68f8      	ldr	r0, [r7, #12]
 800aedc:	f002 fbff 	bl	800d6de <set_basepri>

	return ercd;
 800aee0:	697b      	ldr	r3, [r7, #20]
}
 800aee2:	4618      	mov	r0, r3
 800aee4:	3718      	adds	r7, #24
 800aee6:	46bd      	mov	sp, r7
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	bf00      	nop
 800aeec:	24001870 	.word	0x24001870
 800aef0:	24001988 	.word	0x24001988
 800aef4:	24001874 	.word	0x24001874
 800aef8:	2400186c 	.word	0x2400186c

0800aefc <tk_chg_pri>:
#ifdef USE_FUNC_TK_CHG_PRI
/*
 * Change task priority
 */
SYSCALL ER tk_chg_pri( ID tskid, PRI tskpri )
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b086      	sub	sp, #24
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
	TCB	*tcb;
	INT	priority;
	ER	ercd;

	CHECK_TSKID_SELF(tskid);
 800af06:	f7ff fcc7 	bl	800a898 <knl_isTaskIndependent>
 800af0a:	4603      	mov	r3, r0
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d106      	bne.n	800af1e <tk_chg_pri+0x22>
 800af10:	4b37      	ldr	r3, [pc, #220]	@ (800aff0 <tk_chg_pri+0xf4>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d002      	beq.n	800af1e <tk_chg_pri+0x22>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d008      	beq.n	800af30 <tk_chg_pri+0x34>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2b00      	cmp	r3, #0
 800af22:	dd02      	ble.n	800af2a <tk_chg_pri+0x2e>
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2b20      	cmp	r3, #32
 800af28:	dd02      	ble.n	800af30 <tk_chg_pri+0x34>
 800af2a:	f06f 0311 	mvn.w	r3, #17
 800af2e:	e05a      	b.n	800afe6 <tk_chg_pri+0xea>
	CHECK_PRI_INI(tskpri);
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d008      	beq.n	800af48 <tk_chg_pri+0x4c>
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	dd02      	ble.n	800af42 <tk_chg_pri+0x46>
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	2b20      	cmp	r3, #32
 800af40:	dd02      	ble.n	800af48 <tk_chg_pri+0x4c>
 800af42:	f06f 0310 	mvn.w	r3, #16
 800af46:	e04e      	b.n	800afe6 <tk_chg_pri+0xea>

	tcb = get_tcb_self(tskid);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d007      	beq.n	800af5e <tk_chg_pri+0x62>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	3b01      	subs	r3, #1
 800af52:	2268      	movs	r2, #104	@ 0x68
 800af54:	fb02 f303 	mul.w	r3, r2, r3
 800af58:	4a26      	ldr	r2, [pc, #152]	@ (800aff4 <tk_chg_pri+0xf8>)
 800af5a:	4413      	add	r3, r2
 800af5c:	e001      	b.n	800af62 <tk_chg_pri+0x66>
 800af5e:	4b24      	ldr	r3, [pc, #144]	@ (800aff0 <tk_chg_pri+0xf4>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	60fb      	str	r3, [r7, #12]

	BEGIN_CRITICAL_SECTION;
 800af64:	f002 fbd3 	bl	800d70e <disint>
 800af68:	60b8      	str	r0, [r7, #8]
	if ( tcb->state == TS_NONEXIST ) {
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800af70:	2b00      	cmp	r3, #0
 800af72:	d103      	bne.n	800af7c <tk_chg_pri+0x80>
		ercd = E_NOEXS;
 800af74:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 800af78:	613b      	str	r3, [r7, #16]
		goto error_exit;
 800af7a:	e021      	b.n	800afc0 <tk_chg_pri+0xc4>
	}

	/* Conversion priority to internal expression */
	if ( tskpri == TPRI_INI ) {
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d104      	bne.n	800af8c <tk_chg_pri+0x90>
		priority = tcb->ipriority;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800af88:	617b      	str	r3, [r7, #20]
 800af8a:	e002      	b.n	800af92 <tk_chg_pri+0x96>
	} else {
		priority = int_priority(tskpri);
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	3b01      	subs	r3, #1
 800af90:	617b      	str	r3, [r7, #20]
	}

#if USE_MUTEX == 1
	/* Mutex priority change limit */
	ercd = knl_chg_pri_mutex(tcb, priority);
 800af92:	6979      	ldr	r1, [r7, #20]
 800af94:	68f8      	ldr	r0, [r7, #12]
 800af96:	f7fe fad1 	bl	800953c <knl_chg_pri_mutex>
 800af9a:	6138      	str	r0, [r7, #16]
	if ( ercd < E_OK ) {
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	db0d      	blt.n	800afbe <tk_chg_pri+0xc2>
		goto error_exit;
	}

	tcb->bpriority = (UB)priority;
 800afa2:	697b      	ldr	r3, [r7, #20]
 800afa4:	b2da      	uxtb	r2, r3
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	priority = ercd;
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	617b      	str	r3, [r7, #20]
#else
	tcb->bpriority = priority;
#endif

	/* Change priority */
	knl_change_task_priority(tcb, priority);
 800afb0:	6979      	ldr	r1, [r7, #20]
 800afb2:	68f8      	ldr	r0, [r7, #12]
 800afb4:	f7ff fbb6 	bl	800a724 <knl_change_task_priority>

	ercd = E_OK;
 800afb8:	2300      	movs	r3, #0
 800afba:	613b      	str	r3, [r7, #16]
 800afbc:	e000      	b.n	800afc0 <tk_chg_pri+0xc4>
		goto error_exit;
 800afbe:	bf00      	nop
    error_exit:
	END_CRITICAL_SECTION;
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d10b      	bne.n	800afde <tk_chg_pri+0xe2>
 800afc6:	4b0a      	ldr	r3, [pc, #40]	@ (800aff0 <tk_chg_pri+0xf4>)
 800afc8:	681a      	ldr	r2, [r3, #0]
 800afca:	4b0b      	ldr	r3, [pc, #44]	@ (800aff8 <tk_chg_pri+0xfc>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	429a      	cmp	r2, r3
 800afd0:	d005      	beq.n	800afde <tk_chg_pri+0xe2>
 800afd2:	4b0a      	ldr	r3, [pc, #40]	@ (800affc <tk_chg_pri+0x100>)
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d101      	bne.n	800afde <tk_chg_pri+0xe2>
 800afda:	f7f8 fc61 	bl	80038a0 <knl_dispatch>
 800afde:	68b8      	ldr	r0, [r7, #8]
 800afe0:	f002 fb7d 	bl	800d6de <set_basepri>

	return ercd;
 800afe4:	693b      	ldr	r3, [r7, #16]
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3718      	adds	r7, #24
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
 800afee:	bf00      	nop
 800aff0:	24001870 	.word	0x24001870
 800aff4:	24001988 	.word	0x24001988
 800aff8:	24001874 	.word	0x24001874
 800affc:	2400186c 	.word	0x2400186c

0800b000 <tk_rot_rdq>:
#ifdef USE_FUNC_TK_ROT_RDQ
/*
 * Rotate ready queue
 */
SYSCALL ER tk_rot_rdq( PRI tskpri )
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b084      	sub	sp, #16
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
	CHECK_PRI_RUN(tskpri);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d008      	beq.n	800b020 <tk_rot_rdq+0x20>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2b00      	cmp	r3, #0
 800b012:	dd02      	ble.n	800b01a <tk_rot_rdq+0x1a>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2b20      	cmp	r3, #32
 800b018:	dd02      	ble.n	800b020 <tk_rot_rdq+0x20>
 800b01a:	f06f 0310 	mvn.w	r3, #16
 800b01e:	e031      	b.n	800b084 <tk_rot_rdq+0x84>

	BEGIN_CRITICAL_SECTION;
 800b020:	f002 fb75 	bl	800d70e <disint>
 800b024:	60f8      	str	r0, [r7, #12]
	if ( tskpri == TPRI_RUN ) {
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d113      	bne.n	800b054 <tk_rot_rdq+0x54>
		if ( in_indp() ) {
 800b02c:	f7ff fc34 	bl	800a898 <knl_isTaskIndependent>
 800b030:	4603      	mov	r3, r0
 800b032:	2b00      	cmp	r3, #0
 800b034:	d103      	bne.n	800b03e <tk_rot_rdq+0x3e>
 800b036:	4b15      	ldr	r3, [pc, #84]	@ (800b08c <tk_rot_rdq+0x8c>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d102      	bne.n	800b044 <tk_rot_rdq+0x44>
			knl_rotate_ready_queue_run();
 800b03e:	f7ff fbbd 	bl	800a7bc <knl_rotate_ready_queue_run>
 800b042:	e00c      	b.n	800b05e <tk_rot_rdq+0x5e>
		} else {
			knl_rotate_ready_queue(knl_ctxtsk->priority);
 800b044:	4b11      	ldr	r3, [pc, #68]	@ (800b08c <tk_rot_rdq+0x8c>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7ff fba5 	bl	800a79c <knl_rotate_ready_queue>
 800b052:	e004      	b.n	800b05e <tk_rot_rdq+0x5e>
		}
	} else {
		knl_rotate_ready_queue(int_priority(tskpri));
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	3b01      	subs	r3, #1
 800b058:	4618      	mov	r0, r3
 800b05a:	f7ff fb9f 	bl	800a79c <knl_rotate_ready_queue>
	}
	END_CRITICAL_SECTION;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d10b      	bne.n	800b07c <tk_rot_rdq+0x7c>
 800b064:	4b09      	ldr	r3, [pc, #36]	@ (800b08c <tk_rot_rdq+0x8c>)
 800b066:	681a      	ldr	r2, [r3, #0]
 800b068:	4b09      	ldr	r3, [pc, #36]	@ (800b090 <tk_rot_rdq+0x90>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	429a      	cmp	r2, r3
 800b06e:	d005      	beq.n	800b07c <tk_rot_rdq+0x7c>
 800b070:	4b08      	ldr	r3, [pc, #32]	@ (800b094 <tk_rot_rdq+0x94>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d101      	bne.n	800b07c <tk_rot_rdq+0x7c>
 800b078:	f7f8 fc12 	bl	80038a0 <knl_dispatch>
 800b07c:	68f8      	ldr	r0, [r7, #12]
 800b07e:	f002 fb2e 	bl	800d6de <set_basepri>

	return E_OK;
 800b082:	2300      	movs	r3, #0
}
 800b084:	4618      	mov	r0, r3
 800b086:	3710      	adds	r7, #16
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	24001870 	.word	0x24001870
 800b090:	24001874 	.word	0x24001874
 800b094:	2400186c 	.word	0x2400186c

0800b098 <tk_get_tid>:
#ifdef USE_FUNC_TK_GET_TID
/*
 * Refer task ID at execution
 */
SYSCALL ID tk_get_tid( void )
{
 800b098:	b480      	push	{r7}
 800b09a:	af00      	add	r7, sp, #0
	return ( knl_ctxtsk == NULL )? 0: knl_ctxtsk->tskid;
 800b09c:	4b06      	ldr	r3, [pc, #24]	@ (800b0b8 <tk_get_tid+0x20>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d003      	beq.n	800b0ac <tk_get_tid+0x14>
 800b0a4:	4b04      	ldr	r3, [pc, #16]	@ (800b0b8 <tk_get_tid+0x20>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	689b      	ldr	r3, [r3, #8]
 800b0aa:	e000      	b.n	800b0ae <tk_get_tid+0x16>
 800b0ac:	2300      	movs	r3, #0
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bc80      	pop	{r7}
 800b0b4:	4770      	bx	lr
 800b0b6:	bf00      	nop
 800b0b8:	24001870 	.word	0x24001870

0800b0bc <tk_ref_tsk>:
#ifdef USE_FUNC_TK_REF_TSK
/*
 * Refer task state
 */
SYSCALL ER tk_ref_tsk( ID tskid, T_RTSK *pk_rtsk )
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b086      	sub	sp, #24
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
	TCB	*tcb;
	TSTAT	state;
	ER	ercd = E_OK;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	617b      	str	r3, [r7, #20]

	CHECK_TSKID_SELF(tskid);
 800b0ca:	f7ff fbe5 	bl	800a898 <knl_isTaskIndependent>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d106      	bne.n	800b0e2 <tk_ref_tsk+0x26>
 800b0d4:	4b3e      	ldr	r3, [pc, #248]	@ (800b1d0 <tk_ref_tsk+0x114>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d002      	beq.n	800b0e2 <tk_ref_tsk+0x26>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d008      	beq.n	800b0f4 <tk_ref_tsk+0x38>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	dd02      	ble.n	800b0ee <tk_ref_tsk+0x32>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2b20      	cmp	r3, #32
 800b0ec:	dd02      	ble.n	800b0f4 <tk_ref_tsk+0x38>
 800b0ee:	f06f 0311 	mvn.w	r3, #17
 800b0f2:	e069      	b.n	800b1c8 <tk_ref_tsk+0x10c>

	tcb = get_tcb_self(tskid);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d007      	beq.n	800b10a <tk_ref_tsk+0x4e>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	3b01      	subs	r3, #1
 800b0fe:	2268      	movs	r2, #104	@ 0x68
 800b100:	fb02 f303 	mul.w	r3, r2, r3
 800b104:	4a33      	ldr	r2, [pc, #204]	@ (800b1d4 <tk_ref_tsk+0x118>)
 800b106:	4413      	add	r3, r2
 800b108:	e001      	b.n	800b10e <tk_ref_tsk+0x52>
 800b10a:	4b31      	ldr	r3, [pc, #196]	@ (800b1d0 <tk_ref_tsk+0x114>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	613b      	str	r3, [r7, #16]

	knl_memset(pk_rtsk, 0, sizeof(*pk_rtsk));
 800b110:	2220      	movs	r2, #32
 800b112:	2100      	movs	r1, #0
 800b114:	6838      	ldr	r0, [r7, #0]
 800b116:	f001 ffe3 	bl	800d0e0 <knl_memset>

	BEGIN_CRITICAL_SECTION;
 800b11a:	f002 faf8 	bl	800d70e <disint>
 800b11e:	60f8      	str	r0, [r7, #12]
	state = (TSTAT)tcb->state;
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800b126:	72fb      	strb	r3, [r7, #11]
	if ( state == TS_NONEXIST ) {
 800b128:	7afb      	ldrb	r3, [r7, #11]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d103      	bne.n	800b136 <tk_ref_tsk+0x7a>
		ercd = E_NOEXS;
 800b12e:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 800b132:	617b      	str	r3, [r7, #20]
 800b134:	e035      	b.n	800b1a2 <tk_ref_tsk+0xe6>
	} else {
		if ( ( state == TS_READY ) && ( tcb == knl_ctxtsk ) ) {
 800b136:	7afb      	ldrb	r3, [r7, #11]
 800b138:	2b01      	cmp	r3, #1
 800b13a:	d108      	bne.n	800b14e <tk_ref_tsk+0x92>
 800b13c:	4b24      	ldr	r3, [pc, #144]	@ (800b1d0 <tk_ref_tsk+0x114>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	693a      	ldr	r2, [r7, #16]
 800b142:	429a      	cmp	r2, r3
 800b144:	d103      	bne.n	800b14e <tk_ref_tsk+0x92>
			pk_rtsk->tskstat = TTS_RUN;
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	2201      	movs	r2, #1
 800b14a:	60da      	str	r2, [r3, #12]
 800b14c:	e003      	b.n	800b156 <tk_ref_tsk+0x9a>
		} else {
			pk_rtsk->tskstat = (UINT)state << 1;
 800b14e:	7afb      	ldrb	r3, [r7, #11]
 800b150:	005a      	lsls	r2, r3, #1
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	60da      	str	r2, [r3, #12]
		}
		if ( (state & TS_WAIT) != 0 ) {
 800b156:	7afb      	ldrb	r3, [r7, #11]
 800b158:	f003 0302 	and.w	r3, r3, #2
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d008      	beq.n	800b172 <tk_ref_tsk+0xb6>
			pk_rtsk->tskwait = tcb->wspec->tskwait;
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b164:	681a      	ldr	r2, [r3, #0]
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	611a      	str	r2, [r3, #16]
			pk_rtsk->wid     = tcb->wid;
 800b16a:	693b      	ldr	r3, [r7, #16]
 800b16c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	615a      	str	r2, [r3, #20]
		}
		pk_rtsk->exinf     = tcb->exinf;
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	68da      	ldr	r2, [r3, #12]
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	601a      	str	r2, [r3, #0]
		pk_rtsk->tskpri    = ext_tskpri(tcb->priority);
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800b180:	1c5a      	adds	r2, r3, #1
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	605a      	str	r2, [r3, #4]
		pk_rtsk->tskbpri   = ext_tskpri(tcb->bpriority);
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800b18c:	1c5a      	adds	r2, r3, #1
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	609a      	str	r2, [r3, #8]
		pk_rtsk->wupcnt    = tcb->wupcnt;
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	619a      	str	r2, [r3, #24]
		pk_rtsk->suscnt    = tcb->suscnt;
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	61da      	str	r2, [r3, #28]
	}
	END_CRITICAL_SECTION;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d10b      	bne.n	800b1c0 <tk_ref_tsk+0x104>
 800b1a8:	4b09      	ldr	r3, [pc, #36]	@ (800b1d0 <tk_ref_tsk+0x114>)
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	4b0a      	ldr	r3, [pc, #40]	@ (800b1d8 <tk_ref_tsk+0x11c>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d005      	beq.n	800b1c0 <tk_ref_tsk+0x104>
 800b1b4:	4b09      	ldr	r3, [pc, #36]	@ (800b1dc <tk_ref_tsk+0x120>)
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d101      	bne.n	800b1c0 <tk_ref_tsk+0x104>
 800b1bc:	f7f8 fb70 	bl	80038a0 <knl_dispatch>
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f002 fa8c 	bl	800d6de <set_basepri>

	return ercd;
 800b1c6:	697b      	ldr	r3, [r7, #20]
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3718      	adds	r7, #24
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}
 800b1d0:	24001870 	.word	0x24001870
 800b1d4:	24001988 	.word	0x24001988
 800b1d8:	24001874 	.word	0x24001874
 800b1dc:	2400186c 	.word	0x2400186c

0800b1e0 <tk_rel_wai>:
#ifdef USE_FUNC_TK_REL_WAI
/*
 * Release wait
 */
SYSCALL ER tk_rel_wai( ID tskid )
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b086      	sub	sp, #24
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
	TCB	*tcb;
	TSTAT	state;
	ER	ercd = E_OK;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	617b      	str	r3, [r7, #20]

	CHECK_TSKID(tskid);
 800b1ec:	f7ff fb54 	bl	800a898 <knl_isTaskIndependent>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d109      	bne.n	800b20a <tk_rel_wai+0x2a>
 800b1f6:	4b26      	ldr	r3, [pc, #152]	@ (800b290 <tk_rel_wai+0xb0>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d005      	beq.n	800b20a <tk_rel_wai+0x2a>
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d102      	bne.n	800b20a <tk_rel_wai+0x2a>
 800b204:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 800b208:	e03e      	b.n	800b288 <tk_rel_wai+0xa8>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	dd02      	ble.n	800b216 <tk_rel_wai+0x36>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2b20      	cmp	r3, #32
 800b214:	dd02      	ble.n	800b21c <tk_rel_wai+0x3c>
 800b216:	f06f 0311 	mvn.w	r3, #17
 800b21a:	e035      	b.n	800b288 <tk_rel_wai+0xa8>

	tcb = get_tcb(tskid);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	3b01      	subs	r3, #1
 800b220:	2268      	movs	r2, #104	@ 0x68
 800b222:	fb02 f303 	mul.w	r3, r2, r3
 800b226:	4a1b      	ldr	r2, [pc, #108]	@ (800b294 <tk_rel_wai+0xb4>)
 800b228:	4413      	add	r3, r2
 800b22a:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 800b22c:	f002 fa6f 	bl	800d70e <disint>
 800b230:	60f8      	str	r0, [r7, #12]
	state = (TSTAT)tcb->state;
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800b238:	72fb      	strb	r3, [r7, #11]
	if ( (state & TS_WAIT) == 0 ) {
 800b23a:	7afb      	ldrb	r3, [r7, #11]
 800b23c:	f003 0302 	and.w	r3, r3, #2
 800b240:	2b00      	cmp	r3, #0
 800b242:	d109      	bne.n	800b258 <tk_rel_wai+0x78>
		ercd = ( state == TS_NONEXIST )? E_NOEXS: E_OBJ;
 800b244:	7afb      	ldrb	r3, [r7, #11]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d102      	bne.n	800b250 <tk_rel_wai+0x70>
 800b24a:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 800b24e:	e001      	b.n	800b254 <tk_rel_wai+0x74>
 800b250:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 800b254:	617b      	str	r3, [r7, #20]
 800b256:	e004      	b.n	800b262 <tk_rel_wai+0x82>
	} else {
		knl_wait_release_ng(tcb, E_RLWAI);
 800b258:	f06f 0130 	mvn.w	r1, #48	@ 0x30
 800b25c:	6938      	ldr	r0, [r7, #16]
 800b25e:	f001 fe0a 	bl	800ce76 <knl_wait_release_ng>
	}
	END_CRITICAL_SECTION;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d10b      	bne.n	800b280 <tk_rel_wai+0xa0>
 800b268:	4b09      	ldr	r3, [pc, #36]	@ (800b290 <tk_rel_wai+0xb0>)
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	4b0a      	ldr	r3, [pc, #40]	@ (800b298 <tk_rel_wai+0xb8>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	429a      	cmp	r2, r3
 800b272:	d005      	beq.n	800b280 <tk_rel_wai+0xa0>
 800b274:	4b09      	ldr	r3, [pc, #36]	@ (800b29c <tk_rel_wai+0xbc>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d101      	bne.n	800b280 <tk_rel_wai+0xa0>
 800b27c:	f7f8 fb10 	bl	80038a0 <knl_dispatch>
 800b280:	68f8      	ldr	r0, [r7, #12]
 800b282:	f002 fa2c 	bl	800d6de <set_basepri>

	return ercd;
 800b286:	697b      	ldr	r3, [r7, #20]
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3718      	adds	r7, #24
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}
 800b290:	24001870 	.word	0x24001870
 800b294:	24001988 	.word	0x24001988
 800b298:	24001874 	.word	0x24001874
 800b29c:	2400186c 	.word	0x2400186c

0800b2a0 <QueInit>:
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b083      	sub	sp, #12
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	605a      	str	r2, [r3, #4]
}
 800b2b4:	bf00      	nop
 800b2b6:	370c      	adds	r7, #12
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bc80      	pop	{r7}
 800b2bc:	4770      	bx	lr
	...

0800b2c0 <knl_isTaskIndependent>:
{
 800b2c0:	b480      	push	{r7}
 800b2c2:	af00      	add	r7, sp, #0
	return ( knl_taskindp > 0 )? TRUE: FALSE;
 800b2c4:	4b05      	ldr	r3, [pc, #20]	@ (800b2dc <knl_isTaskIndependent+0x1c>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	bfcc      	ite	gt
 800b2cc:	2301      	movgt	r3, #1
 800b2ce:	2300      	movle	r3, #0
 800b2d0:	b2db      	uxtb	r3, r3
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bc80      	pop	{r7}
 800b2d8:	4770      	bx	lr
 800b2da:	bf00      	nop
 800b2dc:	240029f8 	.word	0x240029f8

0800b2e0 <knl_task_alive>:
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b083      	sub	sp, #12
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	71fb      	strb	r3, [r7, #7]
	return ( (state & (TS_READY|TS_WAIT|TS_SUSPEND)) != 0 );
 800b2ea:	79fb      	ldrb	r3, [r7, #7]
 800b2ec:	f003 0307 	and.w	r3, r3, #7
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	bf14      	ite	ne
 800b2f4:	2301      	movne	r3, #1
 800b2f6:	2300      	moveq	r3, #0
 800b2f8:	b2db      	uxtb	r3, r3
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	370c      	adds	r7, #12
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bc80      	pop	{r7}
 800b302:	4770      	bx	lr

0800b304 <tk_sus_tsk>:
#ifdef USE_FUNC_TK_SUS_TSK
/*
 * Suspend task
 */
SYSCALL ER tk_sus_tsk( ID tskid )
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b086      	sub	sp, #24
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
	TCB	*tcb;
	TSTAT	state;
	ER	ercd = E_OK;
 800b30c:	2300      	movs	r3, #0
 800b30e:	617b      	str	r3, [r7, #20]

	CHECK_TSKID(tskid);
 800b310:	f7ff ffd6 	bl	800b2c0 <knl_isTaskIndependent>
 800b314:	4603      	mov	r3, r0
 800b316:	2b00      	cmp	r3, #0
 800b318:	d109      	bne.n	800b32e <tk_sus_tsk+0x2a>
 800b31a:	4b46      	ldr	r3, [pc, #280]	@ (800b434 <tk_sus_tsk+0x130>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d005      	beq.n	800b32e <tk_sus_tsk+0x2a>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d102      	bne.n	800b32e <tk_sus_tsk+0x2a>
 800b328:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 800b32c:	e07d      	b.n	800b42a <tk_sus_tsk+0x126>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2b00      	cmp	r3, #0
 800b332:	dd02      	ble.n	800b33a <tk_sus_tsk+0x36>
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2b20      	cmp	r3, #32
 800b338:	dd02      	ble.n	800b340 <tk_sus_tsk+0x3c>
 800b33a:	f06f 0311 	mvn.w	r3, #17
 800b33e:	e074      	b.n	800b42a <tk_sus_tsk+0x126>
	CHECK_NONSELF(tskid);
 800b340:	f7ff ffbe 	bl	800b2c0 <knl_isTaskIndependent>
 800b344:	4603      	mov	r3, r0
 800b346:	2b00      	cmp	r3, #0
 800b348:	d10c      	bne.n	800b364 <tk_sus_tsk+0x60>
 800b34a:	4b3a      	ldr	r3, [pc, #232]	@ (800b434 <tk_sus_tsk+0x130>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d008      	beq.n	800b364 <tk_sus_tsk+0x60>
 800b352:	4b38      	ldr	r3, [pc, #224]	@ (800b434 <tk_sus_tsk+0x130>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	687a      	ldr	r2, [r7, #4]
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d102      	bne.n	800b364 <tk_sus_tsk+0x60>
 800b35e:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 800b362:	e062      	b.n	800b42a <tk_sus_tsk+0x126>

	tcb = get_tcb(tskid);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	3b01      	subs	r3, #1
 800b368:	2268      	movs	r2, #104	@ 0x68
 800b36a:	fb02 f303 	mul.w	r3, r2, r3
 800b36e:	4a32      	ldr	r2, [pc, #200]	@ (800b438 <tk_sus_tsk+0x134>)
 800b370:	4413      	add	r3, r2
 800b372:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 800b374:	f002 f9cb 	bl	800d70e <disint>
 800b378:	60f8      	str	r0, [r7, #12]
	state = (TSTAT)tcb->state;
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800b380:	72fb      	strb	r3, [r7, #11]
	if ( !knl_task_alive(state) ) {
 800b382:	7afb      	ldrb	r3, [r7, #11]
 800b384:	4618      	mov	r0, r3
 800b386:	f7ff ffab 	bl	800b2e0 <knl_task_alive>
 800b38a:	4603      	mov	r3, r0
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d109      	bne.n	800b3a4 <tk_sus_tsk+0xa0>
		ercd = ( state == TS_NONEXIST )? E_NOEXS: E_OBJ;
 800b390:	7afb      	ldrb	r3, [r7, #11]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d102      	bne.n	800b39c <tk_sus_tsk+0x98>
 800b396:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 800b39a:	e001      	b.n	800b3a0 <tk_sus_tsk+0x9c>
 800b39c:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 800b3a0:	617b      	str	r3, [r7, #20]
		goto error_exit;
 800b3a2:	e02f      	b.n	800b404 <tk_sus_tsk+0x100>
	}
	if ( tcb == knl_ctxtsk && knl_dispatch_disabled >= DDS_DISABLE ) {
 800b3a4:	4b23      	ldr	r3, [pc, #140]	@ (800b434 <tk_sus_tsk+0x130>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	693a      	ldr	r2, [r7, #16]
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d107      	bne.n	800b3be <tk_sus_tsk+0xba>
 800b3ae:	4b23      	ldr	r3, [pc, #140]	@ (800b43c <tk_sus_tsk+0x138>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	dd03      	ble.n	800b3be <tk_sus_tsk+0xba>
		ercd = E_CTX;
 800b3b6:	f06f 0318 	mvn.w	r3, #24
 800b3ba:	617b      	str	r3, [r7, #20]
		goto error_exit;
 800b3bc:	e022      	b.n	800b404 <tk_sus_tsk+0x100>
	}
	if ( tcb->suscnt == INT_MAX ) {
 800b3be:	693b      	ldr	r3, [r7, #16]
 800b3c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3c2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d103      	bne.n	800b3d2 <tk_sus_tsk+0xce>
		ercd = E_QOVR;
 800b3ca:	f06f 032a 	mvn.w	r3, #42	@ 0x2a
 800b3ce:	617b      	str	r3, [r7, #20]
		goto error_exit;
 800b3d0:	e018      	b.n	800b404 <tk_sus_tsk+0x100>
	}

	/* Update suspend request count */
	++tcb->suscnt;
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3d6:	1c5a      	adds	r2, r3, #1
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	639a      	str	r2, [r3, #56]	@ 0x38

	/* Move to forced wait state */
	if ( state == TS_READY ) {
 800b3dc:	7afb      	ldrb	r3, [r7, #11]
 800b3de:	2b01      	cmp	r3, #1
 800b3e0:	d107      	bne.n	800b3f2 <tk_sus_tsk+0xee>
		knl_make_non_ready(tcb);
 800b3e2:	6938      	ldr	r0, [r7, #16]
 800b3e4:	f7ff f982 	bl	800a6ec <knl_make_non_ready>
		tcb->state = TS_SUSPEND;
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	2204      	movs	r2, #4
 800b3ec:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 800b3f0:	e008      	b.n	800b404 <tk_sus_tsk+0x100>

	} else if ( state == TS_WAIT ) {
 800b3f2:	7afb      	ldrb	r3, [r7, #11]
 800b3f4:	2b02      	cmp	r3, #2
 800b3f6:	d104      	bne.n	800b402 <tk_sus_tsk+0xfe>
		tcb->state = TS_WAITSUS;
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	2206      	movs	r2, #6
 800b3fc:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 800b400:	e000      	b.n	800b404 <tk_sus_tsk+0x100>
	}

    error_exit:
 800b402:	bf00      	nop
	END_CRITICAL_SECTION;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d10b      	bne.n	800b422 <tk_sus_tsk+0x11e>
 800b40a:	4b0a      	ldr	r3, [pc, #40]	@ (800b434 <tk_sus_tsk+0x130>)
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	4b0c      	ldr	r3, [pc, #48]	@ (800b440 <tk_sus_tsk+0x13c>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	429a      	cmp	r2, r3
 800b414:	d005      	beq.n	800b422 <tk_sus_tsk+0x11e>
 800b416:	4b09      	ldr	r3, [pc, #36]	@ (800b43c <tk_sus_tsk+0x138>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d101      	bne.n	800b422 <tk_sus_tsk+0x11e>
 800b41e:	f7f8 fa3f 	bl	80038a0 <knl_dispatch>
 800b422:	68f8      	ldr	r0, [r7, #12]
 800b424:	f002 f95b 	bl	800d6de <set_basepri>

	return ercd;
 800b428:	697b      	ldr	r3, [r7, #20]
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3718      	adds	r7, #24
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
 800b432:	bf00      	nop
 800b434:	24001870 	.word	0x24001870
 800b438:	24001988 	.word	0x24001988
 800b43c:	2400186c 	.word	0x2400186c
 800b440:	24001874 	.word	0x24001874

0800b444 <tk_rsm_tsk>:
#ifdef USE_FUNC_TK_RSM_TSK
/*
 * Resume task
 */
SYSCALL ER tk_rsm_tsk( ID tskid )
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b086      	sub	sp, #24
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
	TCB	*tcb;
	ER	ercd = E_OK;
 800b44c:	2300      	movs	r3, #0
 800b44e:	617b      	str	r3, [r7, #20]

	CHECK_TSKID(tskid);
 800b450:	f7ff ff36 	bl	800b2c0 <knl_isTaskIndependent>
 800b454:	4603      	mov	r3, r0
 800b456:	2b00      	cmp	r3, #0
 800b458:	d109      	bne.n	800b46e <tk_rsm_tsk+0x2a>
 800b45a:	4b46      	ldr	r3, [pc, #280]	@ (800b574 <tk_rsm_tsk+0x130>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d005      	beq.n	800b46e <tk_rsm_tsk+0x2a>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d102      	bne.n	800b46e <tk_rsm_tsk+0x2a>
 800b468:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 800b46c:	e07d      	b.n	800b56a <tk_rsm_tsk+0x126>
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2b00      	cmp	r3, #0
 800b472:	dd02      	ble.n	800b47a <tk_rsm_tsk+0x36>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2b20      	cmp	r3, #32
 800b478:	dd02      	ble.n	800b480 <tk_rsm_tsk+0x3c>
 800b47a:	f06f 0311 	mvn.w	r3, #17
 800b47e:	e074      	b.n	800b56a <tk_rsm_tsk+0x126>
	CHECK_NONSELF(tskid);
 800b480:	f7ff ff1e 	bl	800b2c0 <knl_isTaskIndependent>
 800b484:	4603      	mov	r3, r0
 800b486:	2b00      	cmp	r3, #0
 800b488:	d10c      	bne.n	800b4a4 <tk_rsm_tsk+0x60>
 800b48a:	4b3a      	ldr	r3, [pc, #232]	@ (800b574 <tk_rsm_tsk+0x130>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d008      	beq.n	800b4a4 <tk_rsm_tsk+0x60>
 800b492:	4b38      	ldr	r3, [pc, #224]	@ (800b574 <tk_rsm_tsk+0x130>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	689b      	ldr	r3, [r3, #8]
 800b498:	687a      	ldr	r2, [r7, #4]
 800b49a:	429a      	cmp	r2, r3
 800b49c:	d102      	bne.n	800b4a4 <tk_rsm_tsk+0x60>
 800b49e:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 800b4a2:	e062      	b.n	800b56a <tk_rsm_tsk+0x126>

	tcb = get_tcb(tskid);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	3b01      	subs	r3, #1
 800b4a8:	2268      	movs	r2, #104	@ 0x68
 800b4aa:	fb02 f303 	mul.w	r3, r2, r3
 800b4ae:	4a32      	ldr	r2, [pc, #200]	@ (800b578 <tk_rsm_tsk+0x134>)
 800b4b0:	4413      	add	r3, r2
 800b4b2:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 800b4b4:	f002 f92b 	bl	800d70e <disint>
 800b4b8:	60f8      	str	r0, [r7, #12]
	switch ( tcb->state ) {
 800b4ba:	693b      	ldr	r3, [r7, #16]
 800b4bc:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800b4c0:	2b08      	cmp	r3, #8
 800b4c2:	d838      	bhi.n	800b536 <tk_rsm_tsk+0xf2>
 800b4c4:	a201      	add	r2, pc, #4	@ (adr r2, 800b4cc <tk_rsm_tsk+0x88>)
 800b4c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ca:	bf00      	nop
 800b4cc:	0800b4f1 	.word	0x0800b4f1
 800b4d0:	0800b4f9 	.word	0x0800b4f9
 800b4d4:	0800b4f9 	.word	0x0800b4f9
 800b4d8:	0800b537 	.word	0x0800b537
 800b4dc:	0800b501 	.word	0x0800b501
 800b4e0:	0800b537 	.word	0x0800b537
 800b4e4:	0800b51b 	.word	0x0800b51b
 800b4e8:	0800b537 	.word	0x0800b537
 800b4ec:	0800b4f9 	.word	0x0800b4f9
	  case TS_NONEXIST:
		ercd = E_NOEXS;
 800b4f0:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 800b4f4:	617b      	str	r3, [r7, #20]
		break;
 800b4f6:	e025      	b.n	800b544 <tk_rsm_tsk+0x100>

	  case TS_DORMANT:
	  case TS_READY:
	  case TS_WAIT:
		ercd = E_OBJ;
 800b4f8:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 800b4fc:	617b      	str	r3, [r7, #20]
		break;
 800b4fe:	e021      	b.n	800b544 <tk_rsm_tsk+0x100>

	  case TS_SUSPEND:
		if ( --tcb->suscnt == 0 ) {
 800b500:	693b      	ldr	r3, [r7, #16]
 800b502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b504:	1e5a      	subs	r2, r3, #1
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	639a      	str	r2, [r3, #56]	@ 0x38
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d115      	bne.n	800b53e <tk_rsm_tsk+0xfa>
			knl_make_ready(tcb);
 800b512:	6938      	ldr	r0, [r7, #16]
 800b514:	f7ff f8d0 	bl	800a6b8 <knl_make_ready>
		}
		break;
 800b518:	e011      	b.n	800b53e <tk_rsm_tsk+0xfa>
	  case TS_WAITSUS:
		if ( --tcb->suscnt == 0 ) {
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b51e:	1e5a      	subs	r2, r3, #1
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	639a      	str	r2, [r3, #56]	@ 0x38
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d10a      	bne.n	800b542 <tk_rsm_tsk+0xfe>
			tcb->state = TS_WAIT;
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	2202      	movs	r2, #2
 800b530:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		}
		break;
 800b534:	e005      	b.n	800b542 <tk_rsm_tsk+0xfe>

	  default:
		ercd = E_SYS;
 800b536:	f06f 0304 	mvn.w	r3, #4
 800b53a:	617b      	str	r3, [r7, #20]
		break;
 800b53c:	e002      	b.n	800b544 <tk_rsm_tsk+0x100>
		break;
 800b53e:	bf00      	nop
 800b540:	e000      	b.n	800b544 <tk_rsm_tsk+0x100>
		break;
 800b542:	bf00      	nop
	}
	END_CRITICAL_SECTION;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d10b      	bne.n	800b562 <tk_rsm_tsk+0x11e>
 800b54a:	4b0a      	ldr	r3, [pc, #40]	@ (800b574 <tk_rsm_tsk+0x130>)
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	4b0b      	ldr	r3, [pc, #44]	@ (800b57c <tk_rsm_tsk+0x138>)
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	429a      	cmp	r2, r3
 800b554:	d005      	beq.n	800b562 <tk_rsm_tsk+0x11e>
 800b556:	4b0a      	ldr	r3, [pc, #40]	@ (800b580 <tk_rsm_tsk+0x13c>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d101      	bne.n	800b562 <tk_rsm_tsk+0x11e>
 800b55e:	f7f8 f99f 	bl	80038a0 <knl_dispatch>
 800b562:	68f8      	ldr	r0, [r7, #12]
 800b564:	f002 f8bb 	bl	800d6de <set_basepri>

	return ercd;
 800b568:	697b      	ldr	r3, [r7, #20]
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3718      	adds	r7, #24
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	24001870 	.word	0x24001870
 800b578:	24001988 	.word	0x24001988
 800b57c:	24001874 	.word	0x24001874
 800b580:	2400186c 	.word	0x2400186c

0800b584 <tk_frsm_tsk>:
#ifdef USE_FUNC_TK_FRSM_TSK
/*
 * Force resume task
 */
SYSCALL ER tk_frsm_tsk( ID tskid )
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b086      	sub	sp, #24
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
	TCB	*tcb;
	ER	ercd = E_OK;
 800b58c:	2300      	movs	r3, #0
 800b58e:	617b      	str	r3, [r7, #20]

	CHECK_TSKID(tskid);
 800b590:	f7ff fe96 	bl	800b2c0 <knl_isTaskIndependent>
 800b594:	4603      	mov	r3, r0
 800b596:	2b00      	cmp	r3, #0
 800b598:	d109      	bne.n	800b5ae <tk_frsm_tsk+0x2a>
 800b59a:	4b3e      	ldr	r3, [pc, #248]	@ (800b694 <tk_frsm_tsk+0x110>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d005      	beq.n	800b5ae <tk_frsm_tsk+0x2a>
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d102      	bne.n	800b5ae <tk_frsm_tsk+0x2a>
 800b5a8:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 800b5ac:	e06e      	b.n	800b68c <tk_frsm_tsk+0x108>
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	dd02      	ble.n	800b5ba <tk_frsm_tsk+0x36>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2b20      	cmp	r3, #32
 800b5b8:	dd02      	ble.n	800b5c0 <tk_frsm_tsk+0x3c>
 800b5ba:	f06f 0311 	mvn.w	r3, #17
 800b5be:	e065      	b.n	800b68c <tk_frsm_tsk+0x108>
	CHECK_NONSELF(tskid);
 800b5c0:	f7ff fe7e 	bl	800b2c0 <knl_isTaskIndependent>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d10c      	bne.n	800b5e4 <tk_frsm_tsk+0x60>
 800b5ca:	4b32      	ldr	r3, [pc, #200]	@ (800b694 <tk_frsm_tsk+0x110>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d008      	beq.n	800b5e4 <tk_frsm_tsk+0x60>
 800b5d2:	4b30      	ldr	r3, [pc, #192]	@ (800b694 <tk_frsm_tsk+0x110>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	689b      	ldr	r3, [r3, #8]
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d102      	bne.n	800b5e4 <tk_frsm_tsk+0x60>
 800b5de:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 800b5e2:	e053      	b.n	800b68c <tk_frsm_tsk+0x108>

	tcb = get_tcb(tskid);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	3b01      	subs	r3, #1
 800b5e8:	2268      	movs	r2, #104	@ 0x68
 800b5ea:	fb02 f303 	mul.w	r3, r2, r3
 800b5ee:	4a2a      	ldr	r2, [pc, #168]	@ (800b698 <tk_frsm_tsk+0x114>)
 800b5f0:	4413      	add	r3, r2
 800b5f2:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 800b5f4:	f002 f88b 	bl	800d70e <disint>
 800b5f8:	60f8      	str	r0, [r7, #12]
	switch ( tcb->state ) {
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800b600:	2b08      	cmp	r3, #8
 800b602:	d82c      	bhi.n	800b65e <tk_frsm_tsk+0xda>
 800b604:	a201      	add	r2, pc, #4	@ (adr r2, 800b60c <tk_frsm_tsk+0x88>)
 800b606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b60a:	bf00      	nop
 800b60c:	0800b631 	.word	0x0800b631
 800b610:	0800b639 	.word	0x0800b639
 800b614:	0800b639 	.word	0x0800b639
 800b618:	0800b65f 	.word	0x0800b65f
 800b61c:	0800b641 	.word	0x0800b641
 800b620:	0800b65f 	.word	0x0800b65f
 800b624:	0800b64f 	.word	0x0800b64f
 800b628:	0800b65f 	.word	0x0800b65f
 800b62c:	0800b639 	.word	0x0800b639
	  case TS_NONEXIST:
		ercd = E_NOEXS;
 800b630:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 800b634:	617b      	str	r3, [r7, #20]
		break;
 800b636:	e016      	b.n	800b666 <tk_frsm_tsk+0xe2>

	  case TS_DORMANT:
	  case TS_READY:
	  case TS_WAIT:
		ercd = E_OBJ;
 800b638:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 800b63c:	617b      	str	r3, [r7, #20]
		break;
 800b63e:	e012      	b.n	800b666 <tk_frsm_tsk+0xe2>

	  case TS_SUSPEND:
		tcb->suscnt = 0;
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	2200      	movs	r2, #0
 800b644:	639a      	str	r2, [r3, #56]	@ 0x38
		knl_make_ready(tcb);
 800b646:	6938      	ldr	r0, [r7, #16]
 800b648:	f7ff f836 	bl	800a6b8 <knl_make_ready>
		break;
 800b64c:	e00b      	b.n	800b666 <tk_frsm_tsk+0xe2>
	  case TS_WAITSUS:
		tcb->suscnt = 0;
 800b64e:	693b      	ldr	r3, [r7, #16]
 800b650:	2200      	movs	r2, #0
 800b652:	639a      	str	r2, [r3, #56]	@ 0x38
		tcb->state = TS_WAIT;
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	2202      	movs	r2, #2
 800b658:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		break;
 800b65c:	e003      	b.n	800b666 <tk_frsm_tsk+0xe2>

	  default:
		ercd = E_SYS;
 800b65e:	f06f 0304 	mvn.w	r3, #4
 800b662:	617b      	str	r3, [r7, #20]
		break;
 800b664:	bf00      	nop
	}
	END_CRITICAL_SECTION;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d10b      	bne.n	800b684 <tk_frsm_tsk+0x100>
 800b66c:	4b09      	ldr	r3, [pc, #36]	@ (800b694 <tk_frsm_tsk+0x110>)
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	4b0a      	ldr	r3, [pc, #40]	@ (800b69c <tk_frsm_tsk+0x118>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	429a      	cmp	r2, r3
 800b676:	d005      	beq.n	800b684 <tk_frsm_tsk+0x100>
 800b678:	4b09      	ldr	r3, [pc, #36]	@ (800b6a0 <tk_frsm_tsk+0x11c>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d101      	bne.n	800b684 <tk_frsm_tsk+0x100>
 800b680:	f7f8 f90e 	bl	80038a0 <knl_dispatch>
 800b684:	68f8      	ldr	r0, [r7, #12]
 800b686:	f002 f82a 	bl	800d6de <set_basepri>

	return ercd;
 800b68a:	697b      	ldr	r3, [r7, #20]
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3718      	adds	r7, #24
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}
 800b694:	24001870 	.word	0x24001870
 800b698:	24001988 	.word	0x24001988
 800b69c:	24001874 	.word	0x24001874
 800b6a0:	2400186c 	.word	0x2400186c

0800b6a4 <tk_slp_tsk>:
#ifdef USE_FUNC_TK_SLP_TSK
/*
 * Move its own task state to wait state
 */
SYSCALL ER tk_slp_tsk( TMO tmout )
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b084      	sub	sp, #16
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
	ER	ercd = E_OK;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	60bb      	str	r3, [r7, #8]

	CHECK_TMOUT(tmout);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b6b6:	da02      	bge.n	800b6be <tk_slp_tsk+0x1a>
 800b6b8:	f06f 0310 	mvn.w	r3, #16
 800b6bc:	e051      	b.n	800b762 <tk_slp_tsk+0xbe>
	CHECK_DISPATCH();
 800b6be:	4b2b      	ldr	r3, [pc, #172]	@ (800b76c <tk_slp_tsk+0xc8>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d10d      	bne.n	800b6e2 <tk_slp_tsk+0x3e>
 800b6c6:	f7ff fdfb 	bl	800b2c0 <knl_isTaskIndependent>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d108      	bne.n	800b6e2 <tk_slp_tsk+0x3e>
 800b6d0:	4b27      	ldr	r3, [pc, #156]	@ (800b770 <tk_slp_tsk+0xcc>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d004      	beq.n	800b6e2 <tk_slp_tsk+0x3e>
 800b6d8:	f002 f80d 	bl	800d6f6 <get_basepri>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d002      	beq.n	800b6e8 <tk_slp_tsk+0x44>
 800b6e2:	f06f 0318 	mvn.w	r3, #24
 800b6e6:	e03c      	b.n	800b762 <tk_slp_tsk+0xbe>

	BEGIN_CRITICAL_SECTION;
 800b6e8:	f002 f811 	bl	800d70e <disint>
 800b6ec:	60f8      	str	r0, [r7, #12]

	if ( knl_ctxtsk->wupcnt > 0 ) {
 800b6ee:	4b20      	ldr	r3, [pc, #128]	@ (800b770 <tk_slp_tsk+0xcc>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	dd05      	ble.n	800b704 <tk_slp_tsk+0x60>
		knl_ctxtsk->wupcnt--;
 800b6f8:	4b1d      	ldr	r3, [pc, #116]	@ (800b770 <tk_slp_tsk+0xcc>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b6fe:	3a01      	subs	r2, #1
 800b700:	635a      	str	r2, [r3, #52]	@ 0x34
 800b702:	e01b      	b.n	800b73c <tk_slp_tsk+0x98>
	} else {
		ercd = E_TMOUT;
 800b704:	f06f 0331 	mvn.w	r3, #49	@ 0x31
 800b708:	60bb      	str	r3, [r7, #8]
		if ( tmout != TMO_POL ) {
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d015      	beq.n	800b73c <tk_slp_tsk+0x98>
			knl_ctxtsk->wspec = &knl_wspec_slp;
 800b710:	4b17      	ldr	r3, [pc, #92]	@ (800b770 <tk_slp_tsk+0xcc>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	4a17      	ldr	r2, [pc, #92]	@ (800b774 <tk_slp_tsk+0xd0>)
 800b716:	62da      	str	r2, [r3, #44]	@ 0x2c
			knl_ctxtsk->wid = 0;
 800b718:	4b15      	ldr	r3, [pc, #84]	@ (800b770 <tk_slp_tsk+0xcc>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	2200      	movs	r2, #0
 800b71e:	631a      	str	r2, [r3, #48]	@ 0x30
			knl_ctxtsk->wercd = &ercd;
 800b720:	4b13      	ldr	r3, [pc, #76]	@ (800b770 <tk_slp_tsk+0xcc>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f107 0208 	add.w	r2, r7, #8
 800b728:	63da      	str	r2, [r3, #60]	@ 0x3c
			knl_make_wait(tmout, TA_NULL);
 800b72a:	2100      	movs	r1, #0
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f001 fbd5 	bl	800cedc <knl_make_wait>
			QueInit(&knl_ctxtsk->tskque);
 800b732:	4b0f      	ldr	r3, [pc, #60]	@ (800b770 <tk_slp_tsk+0xcc>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	4618      	mov	r0, r3
 800b738:	f7ff fdb2 	bl	800b2a0 <QueInit>
		}
	}

	END_CRITICAL_SECTION;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d10b      	bne.n	800b75a <tk_slp_tsk+0xb6>
 800b742:	4b0b      	ldr	r3, [pc, #44]	@ (800b770 <tk_slp_tsk+0xcc>)
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	4b0c      	ldr	r3, [pc, #48]	@ (800b778 <tk_slp_tsk+0xd4>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d005      	beq.n	800b75a <tk_slp_tsk+0xb6>
 800b74e:	4b07      	ldr	r3, [pc, #28]	@ (800b76c <tk_slp_tsk+0xc8>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d101      	bne.n	800b75a <tk_slp_tsk+0xb6>
 800b756:	f7f8 f8a3 	bl	80038a0 <knl_dispatch>
 800b75a:	68f8      	ldr	r0, [r7, #12]
 800b75c:	f001 ffbf 	bl	800d6de <set_basepri>

	return ercd;
 800b760:	68bb      	ldr	r3, [r7, #8]
}
 800b762:	4618      	mov	r0, r3
 800b764:	3710      	adds	r7, #16
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}
 800b76a:	bf00      	nop
 800b76c:	2400186c 	.word	0x2400186c
 800b770:	24001870 	.word	0x24001870
 800b774:	0800eed0 	.word	0x0800eed0
 800b778:	24001874 	.word	0x24001874

0800b77c <tk_wup_tsk>:
#ifdef USE_FUNC_TK_WUP_TSK
/*
 * Wakeup task
 */
SYSCALL ER tk_wup_tsk( ID tskid )
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b086      	sub	sp, #24
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
	TCB	*tcb;
	TSTAT	state;
	ER	ercd = E_OK;
 800b784:	2300      	movs	r3, #0
 800b786:	617b      	str	r3, [r7, #20]

	CHECK_TSKID(tskid);
 800b788:	f7ff fd9a 	bl	800b2c0 <knl_isTaskIndependent>
 800b78c:	4603      	mov	r3, r0
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d109      	bne.n	800b7a6 <tk_wup_tsk+0x2a>
 800b792:	4b3c      	ldr	r3, [pc, #240]	@ (800b884 <tk_wup_tsk+0x108>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d005      	beq.n	800b7a6 <tk_wup_tsk+0x2a>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d102      	bne.n	800b7a6 <tk_wup_tsk+0x2a>
 800b7a0:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 800b7a4:	e06a      	b.n	800b87c <tk_wup_tsk+0x100>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	dd02      	ble.n	800b7b2 <tk_wup_tsk+0x36>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2b20      	cmp	r3, #32
 800b7b0:	dd02      	ble.n	800b7b8 <tk_wup_tsk+0x3c>
 800b7b2:	f06f 0311 	mvn.w	r3, #17
 800b7b6:	e061      	b.n	800b87c <tk_wup_tsk+0x100>
	CHECK_NONSELF(tskid);
 800b7b8:	f7ff fd82 	bl	800b2c0 <knl_isTaskIndependent>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d10c      	bne.n	800b7dc <tk_wup_tsk+0x60>
 800b7c2:	4b30      	ldr	r3, [pc, #192]	@ (800b884 <tk_wup_tsk+0x108>)
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d008      	beq.n	800b7dc <tk_wup_tsk+0x60>
 800b7ca:	4b2e      	ldr	r3, [pc, #184]	@ (800b884 <tk_wup_tsk+0x108>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	689b      	ldr	r3, [r3, #8]
 800b7d0:	687a      	ldr	r2, [r7, #4]
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d102      	bne.n	800b7dc <tk_wup_tsk+0x60>
 800b7d6:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 800b7da:	e04f      	b.n	800b87c <tk_wup_tsk+0x100>

	tcb = get_tcb(tskid);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	2268      	movs	r2, #104	@ 0x68
 800b7e2:	fb02 f303 	mul.w	r3, r2, r3
 800b7e6:	4a28      	ldr	r2, [pc, #160]	@ (800b888 <tk_wup_tsk+0x10c>)
 800b7e8:	4413      	add	r3, r2
 800b7ea:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 800b7ec:	f001 ff8f 	bl	800d70e <disint>
 800b7f0:	60f8      	str	r0, [r7, #12]
	state = (TSTAT)tcb->state;
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800b7f8:	72fb      	strb	r3, [r7, #11]
	if ( !knl_task_alive(state) ) {
 800b7fa:	7afb      	ldrb	r3, [r7, #11]
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7ff fd6f 	bl	800b2e0 <knl_task_alive>
 800b802:	4603      	mov	r3, r0
 800b804:	2b00      	cmp	r3, #0
 800b806:	d109      	bne.n	800b81c <tk_wup_tsk+0xa0>
		ercd = ( state == TS_NONEXIST )? E_NOEXS: E_OBJ;
 800b808:	7afb      	ldrb	r3, [r7, #11]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d102      	bne.n	800b814 <tk_wup_tsk+0x98>
 800b80e:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 800b812:	e001      	b.n	800b818 <tk_wup_tsk+0x9c>
 800b814:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 800b818:	617b      	str	r3, [r7, #20]
 800b81a:	e01c      	b.n	800b856 <tk_wup_tsk+0xda>

	} else if ( (state & TS_WAIT) != 0 && tcb->wspec == &knl_wspec_slp ) {
 800b81c:	7afb      	ldrb	r3, [r7, #11]
 800b81e:	f003 0302 	and.w	r3, r3, #2
 800b822:	2b00      	cmp	r3, #0
 800b824:	d008      	beq.n	800b838 <tk_wup_tsk+0xbc>
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b82a:	4a18      	ldr	r2, [pc, #96]	@ (800b88c <tk_wup_tsk+0x110>)
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d103      	bne.n	800b838 <tk_wup_tsk+0xbc>
		knl_wait_release_ok(tcb);
 800b830:	6938      	ldr	r0, [r7, #16]
 800b832:	f001 fb01 	bl	800ce38 <knl_wait_release_ok>
 800b836:	e00e      	b.n	800b856 <tk_wup_tsk+0xda>

	} else if ( tcb->wupcnt == INT_MAX ) {
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b83c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800b840:	4293      	cmp	r3, r2
 800b842:	d103      	bne.n	800b84c <tk_wup_tsk+0xd0>
		ercd = E_QOVR;
 800b844:	f06f 032a 	mvn.w	r3, #42	@ 0x2a
 800b848:	617b      	str	r3, [r7, #20]
 800b84a:	e004      	b.n	800b856 <tk_wup_tsk+0xda>
	} else {
		++tcb->wupcnt;
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b850:	1c5a      	adds	r2, r3, #1
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	END_CRITICAL_SECTION;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d10b      	bne.n	800b874 <tk_wup_tsk+0xf8>
 800b85c:	4b09      	ldr	r3, [pc, #36]	@ (800b884 <tk_wup_tsk+0x108>)
 800b85e:	681a      	ldr	r2, [r3, #0]
 800b860:	4b0b      	ldr	r3, [pc, #44]	@ (800b890 <tk_wup_tsk+0x114>)
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	429a      	cmp	r2, r3
 800b866:	d005      	beq.n	800b874 <tk_wup_tsk+0xf8>
 800b868:	4b0a      	ldr	r3, [pc, #40]	@ (800b894 <tk_wup_tsk+0x118>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d101      	bne.n	800b874 <tk_wup_tsk+0xf8>
 800b870:	f7f8 f816 	bl	80038a0 <knl_dispatch>
 800b874:	68f8      	ldr	r0, [r7, #12]
 800b876:	f001 ff32 	bl	800d6de <set_basepri>

	return ercd;
 800b87a:	697b      	ldr	r3, [r7, #20]
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3718      	adds	r7, #24
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}
 800b884:	24001870 	.word	0x24001870
 800b888:	24001988 	.word	0x24001988
 800b88c:	0800eed0 	.word	0x0800eed0
 800b890:	24001874 	.word	0x24001874
 800b894:	2400186c 	.word	0x2400186c

0800b898 <tk_can_wup>:
#ifdef USE_FUNC_TK_CAN_WUP
/*
 * Cancel wakeup request
 */
SYSCALL INT tk_can_wup( ID tskid )
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b086      	sub	sp, #24
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
	TCB	*tcb;
	ER	ercd = E_OK;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	617b      	str	r3, [r7, #20]

	CHECK_TSKID_SELF(tskid);
 800b8a4:	f7ff fd0c 	bl	800b2c0 <knl_isTaskIndependent>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d106      	bne.n	800b8bc <tk_can_wup+0x24>
 800b8ae:	4b27      	ldr	r3, [pc, #156]	@ (800b94c <tk_can_wup+0xb4>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d002      	beq.n	800b8bc <tk_can_wup+0x24>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d008      	beq.n	800b8ce <tk_can_wup+0x36>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	dd02      	ble.n	800b8c8 <tk_can_wup+0x30>
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2b20      	cmp	r3, #32
 800b8c6:	dd02      	ble.n	800b8ce <tk_can_wup+0x36>
 800b8c8:	f06f 0311 	mvn.w	r3, #17
 800b8cc:	e039      	b.n	800b942 <tk_can_wup+0xaa>

	tcb = get_tcb_self(tskid);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d007      	beq.n	800b8e4 <tk_can_wup+0x4c>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	3b01      	subs	r3, #1
 800b8d8:	2268      	movs	r2, #104	@ 0x68
 800b8da:	fb02 f303 	mul.w	r3, r2, r3
 800b8de:	4a1c      	ldr	r2, [pc, #112]	@ (800b950 <tk_can_wup+0xb8>)
 800b8e0:	4413      	add	r3, r2
 800b8e2:	e001      	b.n	800b8e8 <tk_can_wup+0x50>
 800b8e4:	4b19      	ldr	r3, [pc, #100]	@ (800b94c <tk_can_wup+0xb4>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 800b8ea:	f001 ff10 	bl	800d70e <disint>
 800b8ee:	60f8      	str	r0, [r7, #12]
	switch ( tcb->state ) {
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d002      	beq.n	800b900 <tk_can_wup+0x68>
 800b8fa:	2b08      	cmp	r3, #8
 800b8fc:	d004      	beq.n	800b908 <tk_can_wup+0x70>
 800b8fe:	e007      	b.n	800b910 <tk_can_wup+0x78>
	  case TS_NONEXIST:
		ercd = E_NOEXS;
 800b900:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 800b904:	617b      	str	r3, [r7, #20]
		break;
 800b906:	e009      	b.n	800b91c <tk_can_wup+0x84>
	  case TS_DORMANT:
		ercd = E_OBJ;
 800b908:	f06f 0328 	mvn.w	r3, #40	@ 0x28
 800b90c:	617b      	str	r3, [r7, #20]
		break;
 800b90e:	e005      	b.n	800b91c <tk_can_wup+0x84>

	  default:
		ercd = tcb->wupcnt;
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b914:	617b      	str	r3, [r7, #20]
		tcb->wupcnt = 0;
 800b916:	693b      	ldr	r3, [r7, #16]
 800b918:	2200      	movs	r2, #0
 800b91a:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	END_CRITICAL_SECTION;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d10b      	bne.n	800b93a <tk_can_wup+0xa2>
 800b922:	4b0a      	ldr	r3, [pc, #40]	@ (800b94c <tk_can_wup+0xb4>)
 800b924:	681a      	ldr	r2, [r3, #0]
 800b926:	4b0b      	ldr	r3, [pc, #44]	@ (800b954 <tk_can_wup+0xbc>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	429a      	cmp	r2, r3
 800b92c:	d005      	beq.n	800b93a <tk_can_wup+0xa2>
 800b92e:	4b0a      	ldr	r3, [pc, #40]	@ (800b958 <tk_can_wup+0xc0>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d101      	bne.n	800b93a <tk_can_wup+0xa2>
 800b936:	f7f7 ffb3 	bl	80038a0 <knl_dispatch>
 800b93a:	68f8      	ldr	r0, [r7, #12]
 800b93c:	f001 fecf 	bl	800d6de <set_basepri>

	return ercd;
 800b940:	697b      	ldr	r3, [r7, #20]
}
 800b942:	4618      	mov	r0, r3
 800b944:	3718      	adds	r7, #24
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	24001870 	.word	0x24001870
 800b950:	24001988 	.word	0x24001988
 800b954:	24001874 	.word	0x24001874
 800b958:	2400186c 	.word	0x2400186c

0800b95c <tk_dly_tsk>:

/*
 * Task delay
 */
SYSCALL ER tk_dly_tsk( RELTIM dlytim )
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b084      	sub	sp, #16
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
	ER	ercd = E_OK;
 800b964:	2300      	movs	r3, #0
 800b966:	60bb      	str	r3, [r7, #8]

	CHECK_RELTIM(dlytim);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	da02      	bge.n	800b974 <tk_dly_tsk+0x18>
 800b96e:	f06f 0310 	mvn.w	r3, #16
 800b972:	e043      	b.n	800b9fc <tk_dly_tsk+0xa0>

	CHECK_DISPATCH();
 800b974:	4b23      	ldr	r3, [pc, #140]	@ (800ba04 <tk_dly_tsk+0xa8>)
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d10d      	bne.n	800b998 <tk_dly_tsk+0x3c>
 800b97c:	f7ff fca0 	bl	800b2c0 <knl_isTaskIndependent>
 800b980:	4603      	mov	r3, r0
 800b982:	2b00      	cmp	r3, #0
 800b984:	d108      	bne.n	800b998 <tk_dly_tsk+0x3c>
 800b986:	4b20      	ldr	r3, [pc, #128]	@ (800ba08 <tk_dly_tsk+0xac>)
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d004      	beq.n	800b998 <tk_dly_tsk+0x3c>
 800b98e:	f001 feb2 	bl	800d6f6 <get_basepri>
 800b992:	4603      	mov	r3, r0
 800b994:	2b00      	cmp	r3, #0
 800b996:	d002      	beq.n	800b99e <tk_dly_tsk+0x42>
 800b998:	f06f 0318 	mvn.w	r3, #24
 800b99c:	e02e      	b.n	800b9fc <tk_dly_tsk+0xa0>

	if ( dlytim > 0 ) {
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d02a      	beq.n	800b9fa <tk_dly_tsk+0x9e>
		BEGIN_CRITICAL_SECTION;
 800b9a4:	f001 feb3 	bl	800d70e <disint>
 800b9a8:	60f8      	str	r0, [r7, #12]
		knl_ctxtsk->wspec = &knl_wspec_dly;
 800b9aa:	4b17      	ldr	r3, [pc, #92]	@ (800ba08 <tk_dly_tsk+0xac>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4a17      	ldr	r2, [pc, #92]	@ (800ba0c <tk_dly_tsk+0xb0>)
 800b9b0:	62da      	str	r2, [r3, #44]	@ 0x2c
		knl_ctxtsk->wid = 0;
 800b9b2:	4b15      	ldr	r3, [pc, #84]	@ (800ba08 <tk_dly_tsk+0xac>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	631a      	str	r2, [r3, #48]	@ 0x30
		knl_ctxtsk->wercd = &ercd;
 800b9ba:	4b13      	ldr	r3, [pc, #76]	@ (800ba08 <tk_dly_tsk+0xac>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f107 0208 	add.w	r2, r7, #8
 800b9c2:	63da      	str	r2, [r3, #60]	@ 0x3c
		knl_make_wait_reltim(dlytim, TA_NULL);
 800b9c4:	2100      	movs	r1, #0
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f001 faba 	bl	800cf40 <knl_make_wait_reltim>
		QueInit(&knl_ctxtsk->tskque);
 800b9cc:	4b0e      	ldr	r3, [pc, #56]	@ (800ba08 <tk_dly_tsk+0xac>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	f7ff fc65 	bl	800b2a0 <QueInit>
		END_CRITICAL_SECTION;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d10b      	bne.n	800b9f4 <tk_dly_tsk+0x98>
 800b9dc:	4b0a      	ldr	r3, [pc, #40]	@ (800ba08 <tk_dly_tsk+0xac>)
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	4b0b      	ldr	r3, [pc, #44]	@ (800ba10 <tk_dly_tsk+0xb4>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d005      	beq.n	800b9f4 <tk_dly_tsk+0x98>
 800b9e8:	4b06      	ldr	r3, [pc, #24]	@ (800ba04 <tk_dly_tsk+0xa8>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d101      	bne.n	800b9f4 <tk_dly_tsk+0x98>
 800b9f0:	f7f7 ff56 	bl	80038a0 <knl_dispatch>
 800b9f4:	68f8      	ldr	r0, [r7, #12]
 800b9f6:	f001 fe72 	bl	800d6de <set_basepri>
	}

	return ercd;
 800b9fa:	68bb      	ldr	r3, [r7, #8]
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3710      	adds	r7, #16
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}
 800ba04:	2400186c 	.word	0x2400186c
 800ba08:	24001870 	.word	0x24001870
 800ba0c:	0800eedc 	.word	0x0800eedc
 800ba10:	24001874 	.word	0x24001874

0800ba14 <QueInit>:
{
 800ba14:	b480      	push	{r7}
 800ba16:	b083      	sub	sp, #12
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	687a      	ldr	r2, [r7, #4]
 800ba20:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	687a      	ldr	r2, [r7, #4]
 800ba26:	605a      	str	r2, [r3, #4]
}
 800ba28:	bf00      	nop
 800ba2a:	370c      	adds	r7, #12
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	bc80      	pop	{r7}
 800ba30:	4770      	bx	lr

0800ba32 <QueInsert>:
{
 800ba32:	b480      	push	{r7}
 800ba34:	b083      	sub	sp, #12
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
 800ba3a:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	685a      	ldr	r2, [r3, #4]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	605a      	str	r2, [r3, #4]
	entry->next = que;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	683a      	ldr	r2, [r7, #0]
 800ba48:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	687a      	ldr	r2, [r7, #4]
 800ba56:	605a      	str	r2, [r3, #4]
}
 800ba58:	bf00      	nop
 800ba5a:	370c      	adds	r7, #12
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bc80      	pop	{r7}
 800ba60:	4770      	bx	lr

0800ba62 <QueRemove>:
{
 800ba62:	b480      	push	{r7}
 800ba64:	b083      	sub	sp, #12
 800ba66:	af00      	add	r7, sp, #0
 800ba68:	6078      	str	r0, [r7, #4]
	if ( entry->next != entry ) {
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	687a      	ldr	r2, [r7, #4]
 800ba70:	429a      	cmp	r2, r3
 800ba72:	d009      	beq.n	800ba88 <QueRemove+0x26>
		entry->prev->next = (struct queue*) entry->next;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	685b      	ldr	r3, [r3, #4]
 800ba78:	687a      	ldr	r2, [r7, #4]
 800ba7a:	6812      	ldr	r2, [r2, #0]
 800ba7c:	601a      	str	r2, [r3, #0]
		entry->next->prev = (struct queue*) entry->prev;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	6852      	ldr	r2, [r2, #4]
 800ba86:	605a      	str	r2, [r3, #4]
}
 800ba88:	bf00      	nop
 800ba8a:	370c      	adds	r7, #12
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bc80      	pop	{r7}
 800ba90:	4770      	bx	lr

0800ba92 <QueRemoveNext>:
{
 800ba92:	b480      	push	{r7}
 800ba94:	b085      	sub	sp, #20
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6078      	str	r0, [r7, #4]
	if ( que->next == que ) {
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d101      	bne.n	800baa8 <QueRemoveNext+0x16>
		return NULL;
 800baa4:	2300      	movs	r3, #0
 800baa6:	e00b      	b.n	800bac0 <QueRemoveNext+0x2e>
	entry = que->next;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	60fb      	str	r3, [r7, #12]
	que->next = (struct queue*)entry->next;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681a      	ldr	r2, [r3, #0]
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	601a      	str	r2, [r3, #0]
	entry->next->prev = que;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	687a      	ldr	r2, [r7, #4]
 800babc:	605a      	str	r2, [r3, #4]
	return entry;
 800babe:	68fb      	ldr	r3, [r7, #12]
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3714      	adds	r7, #20
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bc80      	pop	{r7}
 800bac8:	4770      	bx	lr

0800baca <knl_toLSYSTIM>:
{
 800baca:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800bace:	b085      	sub	sp, #20
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
	hilo_ll(ltime, time->hi, time->lo);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	17da      	asrs	r2, r3, #31
 800bada:	469a      	mov	sl, r3
 800badc:	4693      	mov	fp, r2
 800bade:	f04f 0200 	mov.w	r2, #0
 800bae2:	f04f 0300 	mov.w	r3, #0
 800bae6:	4653      	mov	r3, sl
 800bae8:	2200      	movs	r2, #0
 800baea:	6879      	ldr	r1, [r7, #4]
 800baec:	6849      	ldr	r1, [r1, #4]
 800baee:	2000      	movs	r0, #0
 800baf0:	460c      	mov	r4, r1
 800baf2:	4605      	mov	r5, r0
 800baf4:	ea42 0804 	orr.w	r8, r2, r4
 800baf8:	ea43 0905 	orr.w	r9, r3, r5
 800bafc:	e9c7 8902 	strd	r8, r9, [r7, #8]
	return ltime;
 800bb00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800bb04:	4610      	mov	r0, r2
 800bb06:	4619      	mov	r1, r3
 800bb08:	3714      	adds	r7, #20
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800bb10:	4770      	bx	lr

0800bb12 <knl_toSYSTIM>:
{
 800bb12:	b480      	push	{r7}
 800bb14:	b087      	sub	sp, #28
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	60f8      	str	r0, [r7, #12]
 800bb1a:	e9c7 2300 	strd	r2, r3, [r7]
	ll_hilo(time.hi, time.lo, ltime);
 800bb1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bb22:	f04f 0200 	mov.w	r2, #0
 800bb26:	f04f 0300 	mov.w	r3, #0
 800bb2a:	000a      	movs	r2, r1
 800bb2c:	17cb      	asrs	r3, r1, #31
 800bb2e:	4613      	mov	r3, r2
 800bb30:	613b      	str	r3, [r7, #16]
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	617b      	str	r3, [r7, #20]
	return time;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	461a      	mov	r2, r3
 800bb3a:	f107 0310 	add.w	r3, r7, #16
 800bb3e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bb42:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800bb46:	68f8      	ldr	r0, [r7, #12]
 800bb48:	371c      	adds	r7, #28
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bc80      	pop	{r7}
 800bb4e:	4770      	bx	lr

0800bb50 <knl_abstim_reached>:
{
 800bb50:	b480      	push	{r7}
 800bb52:	b083      	sub	sp, #12
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	6039      	str	r1, [r7, #0]
	return (ABSTIM)(curtim - evttim) <= (ABSTIM)ABSTIM_DIFF_MIN;
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	1ad3      	subs	r3, r2, r3
 800bb60:	43db      	mvns	r3, r3
 800bb62:	0fdb      	lsrs	r3, r3, #31
 800bb64:	b2db      	uxtb	r3, r3
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	370c      	adds	r7, #12
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bc80      	pop	{r7}
 800bb6e:	4770      	bx	lr

0800bb70 <knl_timer_delete>:
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b082      	sub	sp, #8
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
	QueRemove(&event->queue);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7ff ff71 	bl	800ba62 <QueRemove>
}
 800bb80:	bf00      	nop
 800bb82:	3708      	adds	r7, #8
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <knl_EnterTaskIndependent>:
{
 800bb88:	b480      	push	{r7}
 800bb8a:	af00      	add	r7, sp, #0
	knl_taskindp++;
 800bb8c:	4b04      	ldr	r3, [pc, #16]	@ (800bba0 <knl_EnterTaskIndependent+0x18>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	3301      	adds	r3, #1
 800bb92:	4a03      	ldr	r2, [pc, #12]	@ (800bba0 <knl_EnterTaskIndependent+0x18>)
 800bb94:	6013      	str	r3, [r2, #0]
}
 800bb96:	bf00      	nop
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bc80      	pop	{r7}
 800bb9c:	4770      	bx	lr
 800bb9e:	bf00      	nop
 800bba0:	240029f8 	.word	0x240029f8

0800bba4 <knl_LeaveTaskIndependent>:
{
 800bba4:	b480      	push	{r7}
 800bba6:	af00      	add	r7, sp, #0
	knl_taskindp--;
 800bba8:	4b04      	ldr	r3, [pc, #16]	@ (800bbbc <knl_LeaveTaskIndependent+0x18>)
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	3b01      	subs	r3, #1
 800bbae:	4a03      	ldr	r2, [pc, #12]	@ (800bbbc <knl_LeaveTaskIndependent+0x18>)
 800bbb0:	6013      	str	r3, [r2, #0]
}
 800bbb2:	bf00      	nop
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bc80      	pop	{r7}
 800bbb8:	4770      	bx	lr
 800bbba:	bf00      	nop
 800bbbc:	240029f8 	.word	0x240029f8

0800bbc0 <knl_cyc_next_time>:

/*
 * Next startup time
 */
Inline ABSTIM knl_cyc_next_time( CYCCB *cyccb )
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b084      	sub	sp, #16
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
	ABSTIM		tm, cur;

	cur = lltoul(knl_current_time);
 800bbc8:	4b13      	ldr	r3, [pc, #76]	@ (800bc18 <knl_cyc_next_time+0x58>)
 800bbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbce:	4613      	mov	r3, r2
 800bbd0:	60bb      	str	r3, [r7, #8]
	tm = cyccb->cyctmeb.time + cyccb->cyctim;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	69da      	ldr	r2, [r3, #28]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	691b      	ldr	r3, [r3, #16]
 800bbda:	4413      	add	r3, r2
 800bbdc:	60fb      	str	r3, [r7, #12]

	if ( knl_abstim_reached(cur, tm) ) {
 800bbde:	68f9      	ldr	r1, [r7, #12]
 800bbe0:	68b8      	ldr	r0, [r7, #8]
 800bbe2:	f7ff ffb5 	bl	800bb50 <knl_abstim_reached>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d010      	beq.n	800bc0e <knl_cyc_next_time+0x4e>
		/* Adjust time to be later than current time */
		tm = ((cur - cyccb->cyctmeb.time) / cyccb->cyctim + 1) * cyccb->cyctim + cyccb->cyctmeb.time;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	69db      	ldr	r3, [r3, #28]
 800bbf0:	68ba      	ldr	r2, [r7, #8]
 800bbf2:	1ad2      	subs	r2, r2, r3
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	691b      	ldr	r3, [r3, #16]
 800bbf8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	6912      	ldr	r2, [r2, #16]
 800bc02:	fb03 f202 	mul.w	r2, r3, r2
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	69db      	ldr	r3, [r3, #28]
 800bc0a:	4413      	add	r3, r2
 800bc0c:	60fb      	str	r3, [r7, #12]
	}

	return tm;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3710      	adds	r7, #16
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}
 800bc18:	240027d0 	.word	0x240027d0

0800bc1c <knl_cyc_timer_insert>:

/*
 * Register timer event queue
 */
Inline void knl_cyc_timer_insert( CYCCB *cyccb, ABSTIM tm )
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
	knl_timer_insert_abs(&cyccb->cyctmeb, tm, (CBACK)knl_call_cychdr, cyccb);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f103 0014 	add.w	r0, r3, #20
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	4a04      	ldr	r2, [pc, #16]	@ (800bc40 <knl_cyc_timer_insert+0x24>)
 800bc30:	6839      	ldr	r1, [r7, #0]
 800bc32:	f000 ff93 	bl	800cb5c <knl_timer_insert_abs>
}
 800bc36:	bf00      	nop
 800bc38:	3708      	adds	r7, #8
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	0800bf4d 	.word	0x0800bf4d

0800bc44 <knl_alm_timer_insert>:

/*
 * Register onto timer event queue
 */
Inline void knl_alm_timer_insert( ALMCB *almcb, RELTIM reltim )
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b084      	sub	sp, #16
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	6039      	str	r1, [r7, #0]
	ABSTIM	tm;

	/* To guarantee to start the handler after the specified time, 
	   add TIMER_PERIOD */
	tm = lltoul(knl_current_time) + reltim + TIMER_PERIOD;
 800bc4e:	4b09      	ldr	r3, [pc, #36]	@ (800bc74 <knl_alm_timer_insert+0x30>)
 800bc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	4413      	add	r3, r2
 800bc58:	330a      	adds	r3, #10
 800bc5a:	60fb      	str	r3, [r7, #12]

	knl_timer_insert_abs(&almcb->almtmeb, tm, (CBACK)knl_call_almhdr, almcb);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f103 0010 	add.w	r0, r3, #16
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	4a04      	ldr	r2, [pc, #16]	@ (800bc78 <knl_alm_timer_insert+0x34>)
 800bc66:	68f9      	ldr	r1, [r7, #12]
 800bc68:	f000 ff78 	bl	800cb5c <knl_timer_insert_abs>
}
 800bc6c:	bf00      	nop
 800bc6e:	3710      	adds	r7, #16
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}
 800bc74:	240027d0 	.word	0x240027d0
 800bc78:	0800c485 	.word	0x0800c485

0800bc7c <tk_set_utc>:
#ifdef USE_FUNC_TK_SET_UTC
/*
 * Set system clock
 */
SYSCALL ER tk_set_utc( CONST SYSTIM *pk_tim )
{
 800bc7c:	b5b0      	push	{r4, r5, r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
	CHECK_PAR(pk_tim->hi >= 0);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	da02      	bge.n	800bc92 <tk_set_utc+0x16>
 800bc8c:	f06f 0310 	mvn.w	r3, #16
 800bc90:	e021      	b.n	800bcd6 <tk_set_utc+0x5a>

	BEGIN_CRITICAL_SECTION;
 800bc92:	f001 fd3c 	bl	800d70e <disint>
 800bc96:	60f8      	str	r0, [r7, #12]
	knl_real_time_ofs = ll_sub(knl_toLSYSTIM(pk_tim), knl_current_time);
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f7ff ff16 	bl	800baca <knl_toLSYSTIM>
 800bc9e:	4b10      	ldr	r3, [pc, #64]	@ (800bce0 <tk_set_utc+0x64>)
 800bca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca4:	1a84      	subs	r4, r0, r2
 800bca6:	eb61 0503 	sbc.w	r5, r1, r3
 800bcaa:	4b0e      	ldr	r3, [pc, #56]	@ (800bce4 <tk_set_utc+0x68>)
 800bcac:	e9c3 4500 	strd	r4, r5, [r3]
	END_CRITICAL_SECTION;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d10b      	bne.n	800bcce <tk_set_utc+0x52>
 800bcb6:	4b0c      	ldr	r3, [pc, #48]	@ (800bce8 <tk_set_utc+0x6c>)
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	4b0c      	ldr	r3, [pc, #48]	@ (800bcec <tk_set_utc+0x70>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d005      	beq.n	800bcce <tk_set_utc+0x52>
 800bcc2:	4b0b      	ldr	r3, [pc, #44]	@ (800bcf0 <tk_set_utc+0x74>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d101      	bne.n	800bcce <tk_set_utc+0x52>
 800bcca:	f7f7 fde9 	bl	80038a0 <knl_dispatch>
 800bcce:	68f8      	ldr	r0, [r7, #12]
 800bcd0:	f001 fd05 	bl	800d6de <set_basepri>

	return E_OK;
 800bcd4:	2300      	movs	r3, #0
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3710      	adds	r7, #16
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bdb0      	pop	{r4, r5, r7, pc}
 800bcde:	bf00      	nop
 800bce0:	240027d0 	.word	0x240027d0
 800bce4:	240027d8 	.word	0x240027d8
 800bce8:	24001870 	.word	0x24001870
 800bcec:	24001874 	.word	0x24001874
 800bcf0:	2400186c 	.word	0x2400186c

0800bcf4 <tk_get_utc>:
#ifdef USE_FUNC_TK_GET_UTC
/*
 * Refer system clock
 */
SYSCALL ER tk_get_utc( SYSTIM *pk_tim )
{
 800bcf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcf6:	b087      	sub	sp, #28
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	60f8      	str	r0, [r7, #12]
	BEGIN_CRITICAL_SECTION;
 800bcfc:	f001 fd07 	bl	800d70e <disint>
 800bd00:	6178      	str	r0, [r7, #20]
	*pk_tim = knl_toSYSTIM(ll_add(knl_current_time, knl_real_time_ofs));
 800bd02:	4b16      	ldr	r3, [pc, #88]	@ (800bd5c <tk_get_utc+0x68>)
 800bd04:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bd08:	4b15      	ldr	r3, [pc, #84]	@ (800bd60 <tk_get_utc+0x6c>)
 800bd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0e:	1884      	adds	r4, r0, r2
 800bd10:	eb41 0503 	adc.w	r5, r1, r3
 800bd14:	68fe      	ldr	r6, [r7, #12]
 800bd16:	4639      	mov	r1, r7
 800bd18:	4622      	mov	r2, r4
 800bd1a:	462b      	mov	r3, r5
 800bd1c:	4608      	mov	r0, r1
 800bd1e:	f7ff fef8 	bl	800bb12 <knl_toSYSTIM>
 800bd22:	4632      	mov	r2, r6
 800bd24:	463b      	mov	r3, r7
 800bd26:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bd2a:	e882 0003 	stmia.w	r2, {r0, r1}
	END_CRITICAL_SECTION;
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d10b      	bne.n	800bd4c <tk_get_utc+0x58>
 800bd34:	4b0b      	ldr	r3, [pc, #44]	@ (800bd64 <tk_get_utc+0x70>)
 800bd36:	681a      	ldr	r2, [r3, #0]
 800bd38:	4b0b      	ldr	r3, [pc, #44]	@ (800bd68 <tk_get_utc+0x74>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d005      	beq.n	800bd4c <tk_get_utc+0x58>
 800bd40:	4b0a      	ldr	r3, [pc, #40]	@ (800bd6c <tk_get_utc+0x78>)
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d101      	bne.n	800bd4c <tk_get_utc+0x58>
 800bd48:	f7f7 fdaa 	bl	80038a0 <knl_dispatch>
 800bd4c:	6978      	ldr	r0, [r7, #20]
 800bd4e:	f001 fcc6 	bl	800d6de <set_basepri>

	return E_OK;
 800bd52:	2300      	movs	r3, #0
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	371c      	adds	r7, #28
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd5c:	240027d0 	.word	0x240027d0
 800bd60:	240027d8 	.word	0x240027d8
 800bd64:	24001870 	.word	0x24001870
 800bd68:	24001874 	.word	0x24001874
 800bd6c:	2400186c 	.word	0x2400186c

0800bd70 <tk_set_tim>:
#ifdef USE_FUNC_TK_SET_TIM
/*
 * Set system clock (TRON Time)
 */
SYSCALL ER tk_set_tim( CONST SYSTIM *pk_tim )
{
 800bd70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800bd74:	b086      	sub	sp, #24
 800bd76:	af00      	add	r7, sp, #0
 800bd78:	6078      	str	r0, [r7, #4]
	LSYSTIM		utc_time;

	CHECK_PAR(pk_tim->hi >= 0);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	da02      	bge.n	800bd88 <tk_set_tim+0x18>
 800bd82:	f06f 0310 	mvn.w	r3, #16
 800bd86:	e02c      	b.n	800bde2 <tk_set_tim+0x72>
	utc_time = ll_add(knl_toLSYSTIM(pk_tim), DIFF_TRON_UTC);
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f7ff fe9e 	bl	800baca <knl_toLSYSTIM>
 800bd8e:	4602      	mov	r2, r0
 800bd90:	460b      	mov	r3, r1
 800bd92:	4916      	ldr	r1, [pc, #88]	@ (800bdec <tk_set_tim+0x7c>)
 800bd94:	eb12 0801 	adds.w	r8, r2, r1
 800bd98:	f143 096e 	adc.w	r9, r3, #110	@ 0x6e
 800bd9c:	e9c7 8904 	strd	r8, r9, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 800bda0:	f001 fcb5 	bl	800d70e <disint>
 800bda4:	60f8      	str	r0, [r7, #12]
	knl_real_time_ofs = ll_sub(utc_time, knl_current_time);
 800bda6:	4b12      	ldr	r3, [pc, #72]	@ (800bdf0 <tk_set_tim+0x80>)
 800bda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800bdb0:	1a84      	subs	r4, r0, r2
 800bdb2:	eb61 0503 	sbc.w	r5, r1, r3
 800bdb6:	4b0f      	ldr	r3, [pc, #60]	@ (800bdf4 <tk_set_tim+0x84>)
 800bdb8:	e9c3 4500 	strd	r4, r5, [r3]
	END_CRITICAL_SECTION;
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d10b      	bne.n	800bdda <tk_set_tim+0x6a>
 800bdc2:	4b0d      	ldr	r3, [pc, #52]	@ (800bdf8 <tk_set_tim+0x88>)
 800bdc4:	681a      	ldr	r2, [r3, #0]
 800bdc6:	4b0d      	ldr	r3, [pc, #52]	@ (800bdfc <tk_set_tim+0x8c>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d005      	beq.n	800bdda <tk_set_tim+0x6a>
 800bdce:	4b0c      	ldr	r3, [pc, #48]	@ (800be00 <tk_set_tim+0x90>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d101      	bne.n	800bdda <tk_set_tim+0x6a>
 800bdd6:	f7f7 fd63 	bl	80038a0 <knl_dispatch>
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f001 fc7f 	bl	800d6de <set_basepri>

	return E_OK;
 800bde0:	2300      	movs	r3, #0
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3718      	adds	r7, #24
 800bde6:	46bd      	mov	sp, r7
 800bde8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800bdec:	37fb0400 	.word	0x37fb0400
 800bdf0:	240027d0 	.word	0x240027d0
 800bdf4:	240027d8 	.word	0x240027d8
 800bdf8:	24001870 	.word	0x24001870
 800bdfc:	24001874 	.word	0x24001874
 800be00:	2400186c 	.word	0x2400186c

0800be04 <tk_get_tim>:
#ifdef USE_FUNC_TK_GET_TIM
/*
 * Refer system clock (TRON Time)
 */
SYSCALL ER tk_get_tim( SYSTIM *pk_tim )
{
 800be04:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800be08:	b088      	sub	sp, #32
 800be0a:	af00      	add	r7, sp, #0
 800be0c:	60f8      	str	r0, [r7, #12]
	LSYSTIM		utc_time;

	BEGIN_CRITICAL_SECTION;
 800be0e:	f001 fc7e 	bl	800d70e <disint>
 800be12:	61f8      	str	r0, [r7, #28]
	utc_time = ll_add(knl_current_time, knl_real_time_ofs);
 800be14:	4b1b      	ldr	r3, [pc, #108]	@ (800be84 <tk_get_tim+0x80>)
 800be16:	e9d3 0100 	ldrd	r0, r1, [r3]
 800be1a:	4b1b      	ldr	r3, [pc, #108]	@ (800be88 <tk_get_tim+0x84>)
 800be1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be20:	1884      	adds	r4, r0, r2
 800be22:	eb41 0503 	adc.w	r5, r1, r3
 800be26:	e9c7 4504 	strd	r4, r5, [r7, #16]
	END_CRITICAL_SECTION;
 800be2a:	69fb      	ldr	r3, [r7, #28]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d10b      	bne.n	800be48 <tk_get_tim+0x44>
 800be30:	4b16      	ldr	r3, [pc, #88]	@ (800be8c <tk_get_tim+0x88>)
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	4b16      	ldr	r3, [pc, #88]	@ (800be90 <tk_get_tim+0x8c>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	429a      	cmp	r2, r3
 800be3a:	d005      	beq.n	800be48 <tk_get_tim+0x44>
 800be3c:	4b15      	ldr	r3, [pc, #84]	@ (800be94 <tk_get_tim+0x90>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d101      	bne.n	800be48 <tk_get_tim+0x44>
 800be44:	f7f7 fd2c 	bl	80038a0 <knl_dispatch>
 800be48:	69f8      	ldr	r0, [r7, #28]
 800be4a:	f001 fc48 	bl	800d6de <set_basepri>

	*pk_tim = knl_toSYSTIM(ll_sub(utc_time, DIFF_TRON_UTC));
 800be4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800be52:	4911      	ldr	r1, [pc, #68]	@ (800be98 <tk_get_tim+0x94>)
 800be54:	eb12 0801 	adds.w	r8, r2, r1
 800be58:	f163 096e 	sbc.w	r9, r3, #110	@ 0x6e
 800be5c:	68fc      	ldr	r4, [r7, #12]
 800be5e:	4639      	mov	r1, r7
 800be60:	4642      	mov	r2, r8
 800be62:	464b      	mov	r3, r9
 800be64:	4608      	mov	r0, r1
 800be66:	f7ff fe54 	bl	800bb12 <knl_toSYSTIM>
 800be6a:	4622      	mov	r2, r4
 800be6c:	463b      	mov	r3, r7
 800be6e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800be72:	e882 0003 	stmia.w	r2, {r0, r1}

	return E_OK;
 800be76:	2300      	movs	r3, #0
}
 800be78:	4618      	mov	r0, r3
 800be7a:	3720      	adds	r7, #32
 800be7c:	46bd      	mov	sp, r7
 800be7e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800be82:	bf00      	nop
 800be84:	240027d0 	.word	0x240027d0
 800be88:	240027d8 	.word	0x240027d8
 800be8c:	24001870 	.word	0x24001870
 800be90:	24001874 	.word	0x24001874
 800be94:	2400186c 	.word	0x2400186c
 800be98:	c804fc00 	.word	0xc804fc00

0800be9c <tk_get_otm>:
#ifdef USE_FUNC_TK_GET_OTM
/*
 * Refer system operating time
 */
SYSCALL ER tk_get_otm( SYSTIM *pk_tim )
{
 800be9c:	b590      	push	{r4, r7, lr}
 800be9e:	b087      	sub	sp, #28
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	60f8      	str	r0, [r7, #12]
	BEGIN_CRITICAL_SECTION;
 800bea4:	f001 fc33 	bl	800d70e <disint>
 800bea8:	6178      	str	r0, [r7, #20]
	*pk_tim = knl_toSYSTIM(knl_current_time);
 800beaa:	4b12      	ldr	r3, [pc, #72]	@ (800bef4 <tk_get_otm+0x58>)
 800beac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beb0:	68fc      	ldr	r4, [r7, #12]
 800beb2:	4639      	mov	r1, r7
 800beb4:	4608      	mov	r0, r1
 800beb6:	f7ff fe2c 	bl	800bb12 <knl_toSYSTIM>
 800beba:	4622      	mov	r2, r4
 800bebc:	463b      	mov	r3, r7
 800bebe:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bec2:	e882 0003 	stmia.w	r2, {r0, r1}
	END_CRITICAL_SECTION;
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d10b      	bne.n	800bee4 <tk_get_otm+0x48>
 800becc:	4b0a      	ldr	r3, [pc, #40]	@ (800bef8 <tk_get_otm+0x5c>)
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	4b0a      	ldr	r3, [pc, #40]	@ (800befc <tk_get_otm+0x60>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d005      	beq.n	800bee4 <tk_get_otm+0x48>
 800bed8:	4b09      	ldr	r3, [pc, #36]	@ (800bf00 <tk_get_otm+0x64>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d101      	bne.n	800bee4 <tk_get_otm+0x48>
 800bee0:	f7f7 fcde 	bl	80038a0 <knl_dispatch>
 800bee4:	6978      	ldr	r0, [r7, #20]
 800bee6:	f001 fbfa 	bl	800d6de <set_basepri>

	return E_OK;
 800beea:	2300      	movs	r3, #0
}
 800beec:	4618      	mov	r0, r3
 800beee:	371c      	adds	r7, #28
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd90      	pop	{r4, r7, pc}
 800bef4:	240027d0 	.word	0x240027d0
 800bef8:	24001870 	.word	0x24001870
 800befc:	24001874 	.word	0x24001874
 800bf00:	2400186c 	.word	0x2400186c

0800bf04 <knl_cyclichandler_initialize>:

/*
 * Initialization of cyclic handler control block
 */
EXPORT ER knl_cyclichandler_initialize( void )
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b082      	sub	sp, #8
 800bf08:	af00      	add	r7, sp, #0
	if ( NUM_CYCID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_cyccb);
 800bf0a:	480d      	ldr	r0, [pc, #52]	@ (800bf40 <knl_cyclichandler_initialize+0x3c>)
 800bf0c:	f7ff fd82 	bl	800ba14 <QueInit>
	end = knl_cyccb_table + NUM_CYCID;
 800bf10:	4b0c      	ldr	r3, [pc, #48]	@ (800bf44 <knl_cyclichandler_initialize+0x40>)
 800bf12:	603b      	str	r3, [r7, #0]
	for ( cyccb = knl_cyccb_table; cyccb < end; cyccb++ ) {
 800bf14:	4b0c      	ldr	r3, [pc, #48]	@ (800bf48 <knl_cyclichandler_initialize+0x44>)
 800bf16:	607b      	str	r3, [r7, #4]
 800bf18:	e009      	b.n	800bf2e <knl_cyclichandler_initialize+0x2a>
		cyccb->cychdr = NULL; /* Unregistered handler */
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	609a      	str	r2, [r3, #8]
		QueInsert((QUEUE*)cyccb, &knl_free_cyccb);
 800bf20:	4907      	ldr	r1, [pc, #28]	@ (800bf40 <knl_cyclichandler_initialize+0x3c>)
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f7ff fd85 	bl	800ba32 <QueInsert>
	for ( cyccb = knl_cyccb_table; cyccb < end; cyccb++ ) {
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	3328      	adds	r3, #40	@ 0x28
 800bf2c:	607b      	str	r3, [r7, #4]
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	683b      	ldr	r3, [r7, #0]
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d3f1      	bcc.n	800bf1a <knl_cyclichandler_initialize+0x16>
	}

	return E_OK;
 800bf36:	2300      	movs	r3, #0
}
 800bf38:	4618      	mov	r0, r3
 800bf3a:	3708      	adds	r7, #8
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}
 800bf40:	24002730 	.word	0x24002730
 800bf44:	24002730 	.word	0x24002730
 800bf48:	24002690 	.word	0x24002690

0800bf4c <knl_call_cychdr>:

/*
 * Cyclic handler routine
 */
EXPORT void knl_call_cychdr( CYCCB *cyccb )
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b082      	sub	sp, #8
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
	/* Set next startup time */
	knl_cyc_timer_insert(cyccb, knl_cyc_next_time(cyccb));
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f7ff fe33 	bl	800bbc0 <knl_cyc_next_time>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	4619      	mov	r1, r3
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f7ff fe5c 	bl	800bc1c <knl_cyc_timer_insert>

	/* Execute cyclic handler / Enable interrupt nest */
	ENABLE_INTERRUPT_UPTO(TIMER_INTLEVEL);
 800bf64:	2000      	movs	r0, #0
 800bf66:	f001 fbba 	bl	800d6de <set_basepri>
	CallUserHandlerP1(cyccb->exinf, cyccb->cychdr, cyccb);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	687a      	ldr	r2, [r7, #4]
 800bf70:	6812      	ldr	r2, [r2, #0]
 800bf72:	4610      	mov	r0, r2
 800bf74:	4798      	blx	r3
	DISABLE_INTERRUPT;
 800bf76:	f001 fbca 	bl	800d70e <disint>
}
 800bf7a:	bf00      	nop
 800bf7c:	3708      	adds	r7, #8
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}

0800bf82 <knl_immediate_call_cychdr>:

/*
 * Immediate call of cyclic handler 
 */
LOCAL void knl_immediate_call_cychdr( CYCCB *cyccb )
{
 800bf82:	b580      	push	{r7, lr}
 800bf84:	b082      	sub	sp, #8
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
	/* Set next startup time */
	knl_cyc_timer_insert(cyccb, knl_cyc_next_time(cyccb));
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f7ff fe18 	bl	800bbc0 <knl_cyc_next_time>
 800bf90:	4603      	mov	r3, r0
 800bf92:	4619      	mov	r1, r3
 800bf94:	6878      	ldr	r0, [r7, #4]
 800bf96:	f7ff fe41 	bl	800bc1c <knl_cyc_timer_insert>

	/* Execute cyclic handler in task-independent part
	   (Keep interrupt disabled) */
	ENTER_TASK_INDEPENDENT;
 800bf9a:	f7ff fdf5 	bl	800bb88 <knl_EnterTaskIndependent>
	CallUserHandlerP1(cyccb->exinf, cyccb->cychdr, cyccb);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	689b      	ldr	r3, [r3, #8]
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	6812      	ldr	r2, [r2, #0]
 800bfa6:	4610      	mov	r0, r2
 800bfa8:	4798      	blx	r3
	LEAVE_TASK_INDEPENDENT;
 800bfaa:	f7ff fdfb 	bl	800bba4 <knl_LeaveTaskIndependent>
}
 800bfae:	bf00      	nop
 800bfb0:	3708      	adds	r7, #8
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	bd80      	pop	{r7, pc}
	...

0800bfb8 <tk_cre_cyc>:

/*
 * Create cyclic handler 
 */
SYSCALL ID tk_cre_cyc( CONST T_CCYC *pk_ccyc )
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b088      	sub	sp, #32
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
#if CHK_RSATR
	const ATR VALID_CYCATR = {
 800bfc0:	2307      	movs	r3, #7
 800bfc2:	61bb      	str	r3, [r7, #24]
#endif
	};
#endif
	CYCCB	*cyccb;
	ABSTIM	tm;
	ER	ercd = E_OK;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	61fb      	str	r3, [r7, #28]

	CHECK_RSATR(pk_ccyc->cycatr, VALID_CYCATR);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	685a      	ldr	r2, [r3, #4]
 800bfcc:	69bb      	ldr	r3, [r7, #24]
 800bfce:	43db      	mvns	r3, r3
 800bfd0:	4013      	ands	r3, r2
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d002      	beq.n	800bfdc <tk_cre_cyc+0x24>
 800bfd6:	f06f 030a 	mvn.w	r3, #10
 800bfda:	e075      	b.n	800c0c8 <tk_cre_cyc+0x110>
	CHECK_PAR(pk_ccyc->cychdr != NULL);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	689b      	ldr	r3, [r3, #8]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d102      	bne.n	800bfea <tk_cre_cyc+0x32>
 800bfe4:	f06f 0310 	mvn.w	r3, #16
 800bfe8:	e06e      	b.n	800c0c8 <tk_cre_cyc+0x110>
	CHECK_PAR(pk_ccyc->cyctim > 0);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	68db      	ldr	r3, [r3, #12]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d102      	bne.n	800bff8 <tk_cre_cyc+0x40>
 800bff2:	f06f 0310 	mvn.w	r3, #16
 800bff6:	e067      	b.n	800c0c8 <tk_cre_cyc+0x110>
	CHECK_RELTIM(pk_ccyc->cyctim);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	68db      	ldr	r3, [r3, #12]
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	da02      	bge.n	800c006 <tk_cre_cyc+0x4e>
 800c000:	f06f 0310 	mvn.w	r3, #16
 800c004:	e060      	b.n	800c0c8 <tk_cre_cyc+0x110>

	BEGIN_CRITICAL_SECTION;
 800c006:	f001 fb82 	bl	800d70e <disint>
 800c00a:	6178      	str	r0, [r7, #20]
	/* Get control block from FreeQue */
	cyccb = (CYCCB*)QueRemoveNext(&knl_free_cyccb);
 800c00c:	4830      	ldr	r0, [pc, #192]	@ (800c0d0 <tk_cre_cyc+0x118>)
 800c00e:	f7ff fd40 	bl	800ba92 <QueRemoveNext>
 800c012:	6138      	str	r0, [r7, #16]
	if ( cyccb == NULL ) {
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d103      	bne.n	800c022 <tk_cre_cyc+0x6a>
		ercd = E_LIMIT;
 800c01a:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 800c01e:	61fb      	str	r3, [r7, #28]
		goto error_exit;
 800c020:	e03f      	b.n	800c0a2 <tk_cre_cyc+0xea>
	}

	/* Initialize control block */
	cyccb->exinf   = pk_ccyc->exinf;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681a      	ldr	r2, [r3, #0]
 800c026:	693b      	ldr	r3, [r7, #16]
 800c028:	601a      	str	r2, [r3, #0]
	cyccb->cycatr  = pk_ccyc->cycatr;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	685a      	ldr	r2, [r3, #4]
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	605a      	str	r2, [r3, #4]
	cyccb->cychdr  = pk_ccyc->cychdr;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	689a      	ldr	r2, [r3, #8]
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	609a      	str	r2, [r3, #8]
	cyccb->cyctim  = pk_ccyc->cyctim;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	68da      	ldr	r2, [r3, #12]
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	611a      	str	r2, [r3, #16]

	/* First startup time
	 *	To guarantee the start of handler after the specified time,
	 *	add TIMER_PERIOD. 
	 */
	tm = lltoul(knl_current_time) + pk_ccyc->cycphs + TIMER_PERIOD;
 800c042:	4b24      	ldr	r3, [pc, #144]	@ (800c0d4 <tk_cre_cyc+0x11c>)
 800c044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	691b      	ldr	r3, [r3, #16]
 800c04c:	4413      	add	r3, r2
 800c04e:	330a      	adds	r3, #10
 800c050:	60fb      	str	r3, [r7, #12]

	if ( (pk_ccyc->cycatr & TA_STA) != 0 ) {
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	f003 0302 	and.w	r3, r3, #2
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d012      	beq.n	800c084 <tk_cre_cyc+0xcc>
		/* Start cyclic handler */
		cyccb->cycstat = TCYC_STA;
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	2201      	movs	r2, #1
 800c062:	60da      	str	r2, [r3, #12]

		if ( pk_ccyc->cycphs == 0 ) {
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	691b      	ldr	r3, [r3, #16]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d106      	bne.n	800c07a <tk_cre_cyc+0xc2>
			/* Immediate execution */
			cyccb->cyctmeb.time = tm;
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	68fa      	ldr	r2, [r7, #12]
 800c070:	61da      	str	r2, [r3, #28]
			knl_immediate_call_cychdr(cyccb);
 800c072:	6938      	ldr	r0, [r7, #16]
 800c074:	f7ff ff85 	bl	800bf82 <knl_immediate_call_cychdr>
 800c078:	e00a      	b.n	800c090 <tk_cre_cyc+0xd8>
		} else {
			/* Register onto timer event queue */
			knl_cyc_timer_insert(cyccb, tm);
 800c07a:	68f9      	ldr	r1, [r7, #12]
 800c07c:	6938      	ldr	r0, [r7, #16]
 800c07e:	f7ff fdcd 	bl	800bc1c <knl_cyc_timer_insert>
 800c082:	e005      	b.n	800c090 <tk_cre_cyc+0xd8>
		}
	} else {
		/* Initialize only counter */
		cyccb->cycstat = TCYC_STP;
 800c084:	693b      	ldr	r3, [r7, #16]
 800c086:	2200      	movs	r2, #0
 800c088:	60da      	str	r2, [r3, #12]
		cyccb->cyctmeb.time = tm;
 800c08a:	693b      	ldr	r3, [r7, #16]
 800c08c:	68fa      	ldr	r2, [r7, #12]
 800c08e:	61da      	str	r2, [r3, #28]
	}

	ercd = ID_CYC(cyccb - knl_cyccb_table);
 800c090:	693b      	ldr	r3, [r7, #16]
 800c092:	4a11      	ldr	r2, [pc, #68]	@ (800c0d8 <tk_cre_cyc+0x120>)
 800c094:	1a9b      	subs	r3, r3, r2
 800c096:	10db      	asrs	r3, r3, #3
 800c098:	4a10      	ldr	r2, [pc, #64]	@ (800c0dc <tk_cre_cyc+0x124>)
 800c09a:	fb02 f303 	mul.w	r3, r2, r3
 800c09e:	3301      	adds	r3, #1
 800c0a0:	61fb      	str	r3, [r7, #28]

    error_exit:
	END_CRITICAL_SECTION;
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d10b      	bne.n	800c0c0 <tk_cre_cyc+0x108>
 800c0a8:	4b0d      	ldr	r3, [pc, #52]	@ (800c0e0 <tk_cre_cyc+0x128>)
 800c0aa:	681a      	ldr	r2, [r3, #0]
 800c0ac:	4b0d      	ldr	r3, [pc, #52]	@ (800c0e4 <tk_cre_cyc+0x12c>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d005      	beq.n	800c0c0 <tk_cre_cyc+0x108>
 800c0b4:	4b0c      	ldr	r3, [pc, #48]	@ (800c0e8 <tk_cre_cyc+0x130>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d101      	bne.n	800c0c0 <tk_cre_cyc+0x108>
 800c0bc:	f7f7 fbf0 	bl	80038a0 <knl_dispatch>
 800c0c0:	6978      	ldr	r0, [r7, #20]
 800c0c2:	f001 fb0c 	bl	800d6de <set_basepri>

	return ercd;
 800c0c6:	69fb      	ldr	r3, [r7, #28]
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3720      	adds	r7, #32
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	24002730 	.word	0x24002730
 800c0d4:	240027d0 	.word	0x240027d0
 800c0d8:	24002690 	.word	0x24002690
 800c0dc:	cccccccd 	.word	0xcccccccd
 800c0e0:	24001870 	.word	0x24001870
 800c0e4:	24001874 	.word	0x24001874
 800c0e8:	2400186c 	.word	0x2400186c

0800c0ec <tk_del_cyc>:
#ifdef USE_FUNC_TK_DEL_CYC
/*
 * Delete cyclic handler 
 */
SYSCALL ER tk_del_cyc( ID cycid )
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b086      	sub	sp, #24
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
	CYCCB	*cyccb;
	ER	ercd = E_OK;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	617b      	str	r3, [r7, #20]

	CHECK_CYCID(cycid);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	dd02      	ble.n	800c104 <tk_del_cyc+0x18>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2b04      	cmp	r3, #4
 800c102:	dd02      	ble.n	800c10a <tk_del_cyc+0x1e>
 800c104:	f06f 0311 	mvn.w	r3, #17
 800c108:	e038      	b.n	800c17c <tk_del_cyc+0x90>

	cyccb = get_cyccb(cycid);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	1e5a      	subs	r2, r3, #1
 800c10e:	4613      	mov	r3, r2
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	4413      	add	r3, r2
 800c114:	00db      	lsls	r3, r3, #3
 800c116:	4a1b      	ldr	r2, [pc, #108]	@ (800c184 <tk_del_cyc+0x98>)
 800c118:	4413      	add	r3, r2
 800c11a:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 800c11c:	f001 faf7 	bl	800d70e <disint>
 800c120:	60f8      	str	r0, [r7, #12]
	if ( cyccb->cychdr == NULL ) { /* Unregistered handler */
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	689b      	ldr	r3, [r3, #8]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d103      	bne.n	800c132 <tk_del_cyc+0x46>
		ercd = E_NOEXS;
 800c12a:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 800c12e:	617b      	str	r3, [r7, #20]
 800c130:	e011      	b.n	800c156 <tk_del_cyc+0x6a>
	} else {
		if ( (cyccb->cycstat & TCYC_STA) != 0 ) {
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	68db      	ldr	r3, [r3, #12]
 800c136:	f003 0301 	and.w	r3, r3, #1
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d004      	beq.n	800c148 <tk_del_cyc+0x5c>
			/* Delete timer event queue */
			knl_timer_delete(&cyccb->cyctmeb);
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	3314      	adds	r3, #20
 800c142:	4618      	mov	r0, r3
 800c144:	f7ff fd14 	bl	800bb70 <knl_timer_delete>
		}

		/* Return to FreeQue */
		QueInsert((QUEUE*)cyccb, &knl_free_cyccb);
 800c148:	490f      	ldr	r1, [pc, #60]	@ (800c188 <tk_del_cyc+0x9c>)
 800c14a:	6938      	ldr	r0, [r7, #16]
 800c14c:	f7ff fc71 	bl	800ba32 <QueInsert>
		cyccb->cychdr = NULL; /* Unregistered handler */
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	2200      	movs	r2, #0
 800c154:	609a      	str	r2, [r3, #8]
	}
	END_CRITICAL_SECTION;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d10b      	bne.n	800c174 <tk_del_cyc+0x88>
 800c15c:	4b0b      	ldr	r3, [pc, #44]	@ (800c18c <tk_del_cyc+0xa0>)
 800c15e:	681a      	ldr	r2, [r3, #0]
 800c160:	4b0b      	ldr	r3, [pc, #44]	@ (800c190 <tk_del_cyc+0xa4>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	429a      	cmp	r2, r3
 800c166:	d005      	beq.n	800c174 <tk_del_cyc+0x88>
 800c168:	4b0a      	ldr	r3, [pc, #40]	@ (800c194 <tk_del_cyc+0xa8>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d101      	bne.n	800c174 <tk_del_cyc+0x88>
 800c170:	f7f7 fb96 	bl	80038a0 <knl_dispatch>
 800c174:	68f8      	ldr	r0, [r7, #12]
 800c176:	f001 fab2 	bl	800d6de <set_basepri>

	return ercd;
 800c17a:	697b      	ldr	r3, [r7, #20]
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	3718      	adds	r7, #24
 800c180:	46bd      	mov	sp, r7
 800c182:	bd80      	pop	{r7, pc}
 800c184:	24002690 	.word	0x24002690
 800c188:	24002730 	.word	0x24002730
 800c18c:	24001870 	.word	0x24001870
 800c190:	24001874 	.word	0x24001874
 800c194:	2400186c 	.word	0x2400186c

0800c198 <tk_sta_cyc>:
#ifdef USE_FUNC_TK_STA_CYC
/*
 * Start cyclic handler 
 */
SYSCALL ER tk_sta_cyc( ID cycid )
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b088      	sub	sp, #32
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
	CYCCB	*cyccb;
	ABSTIM	tm, cur;
	ER	ercd = E_OK;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	61bb      	str	r3, [r7, #24]

	CHECK_CYCID(cycid);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	dd02      	ble.n	800c1b0 <tk_sta_cyc+0x18>
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2b04      	cmp	r3, #4
 800c1ae:	dd02      	ble.n	800c1b6 <tk_sta_cyc+0x1e>
 800c1b0:	f06f 0311 	mvn.w	r3, #17
 800c1b4:	e065      	b.n	800c282 <tk_sta_cyc+0xea>

	cyccb = get_cyccb(cycid);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	1e5a      	subs	r2, r3, #1
 800c1ba:	4613      	mov	r3, r2
 800c1bc:	009b      	lsls	r3, r3, #2
 800c1be:	4413      	add	r3, r2
 800c1c0:	00db      	lsls	r3, r3, #3
 800c1c2:	4a32      	ldr	r2, [pc, #200]	@ (800c28c <tk_sta_cyc+0xf4>)
 800c1c4:	4413      	add	r3, r2
 800c1c6:	617b      	str	r3, [r7, #20]

	BEGIN_CRITICAL_SECTION;
 800c1c8:	f001 faa1 	bl	800d70e <disint>
 800c1cc:	6138      	str	r0, [r7, #16]
	if ( cyccb->cychdr == NULL ) { /* Unregistered handler */
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	689b      	ldr	r3, [r3, #8]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d103      	bne.n	800c1de <tk_sta_cyc+0x46>
		ercd = E_NOEXS;
 800c1d6:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 800c1da:	61bb      	str	r3, [r7, #24]
		goto error_exit;
 800c1dc:	e03e      	b.n	800c25c <tk_sta_cyc+0xc4>
	}

	cur = lltoul(knl_current_time);
 800c1de:	4b2c      	ldr	r3, [pc, #176]	@ (800c290 <tk_sta_cyc+0xf8>)
 800c1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e4:	4613      	mov	r3, r2
 800c1e6:	60fb      	str	r3, [r7, #12]

	if ( (cyccb->cycatr & TA_PHS) != 0 ) {
 800c1e8:	697b      	ldr	r3, [r7, #20]
 800c1ea:	685b      	ldr	r3, [r3, #4]
 800c1ec:	f003 0304 	and.w	r3, r3, #4
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d018      	beq.n	800c226 <tk_sta_cyc+0x8e>
		/* Continue cyclic phase */
		if ( (cyccb->cycstat & TCYC_STA) == 0 ) {
 800c1f4:	697b      	ldr	r3, [r7, #20]
 800c1f6:	68db      	ldr	r3, [r3, #12]
 800c1f8:	f003 0301 	and.w	r3, r3, #1
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d127      	bne.n	800c250 <tk_sta_cyc+0xb8>
			/* Start cyclic handler */
			tm = cyccb->cyctmeb.time;
 800c200:	697b      	ldr	r3, [r7, #20]
 800c202:	69db      	ldr	r3, [r3, #28]
 800c204:	61fb      	str	r3, [r7, #28]
			if ( knl_abstim_reached(cur, tm) ) {
 800c206:	69f9      	ldr	r1, [r7, #28]
 800c208:	68f8      	ldr	r0, [r7, #12]
 800c20a:	f7ff fca1 	bl	800bb50 <knl_abstim_reached>
 800c20e:	4603      	mov	r3, r0
 800c210:	2b00      	cmp	r3, #0
 800c212:	d003      	beq.n	800c21c <tk_sta_cyc+0x84>
				tm = knl_cyc_next_time(cyccb);
 800c214:	6978      	ldr	r0, [r7, #20]
 800c216:	f7ff fcd3 	bl	800bbc0 <knl_cyc_next_time>
 800c21a:	61f8      	str	r0, [r7, #28]
			}
			knl_cyc_timer_insert(cyccb, tm);
 800c21c:	69f9      	ldr	r1, [r7, #28]
 800c21e:	6978      	ldr	r0, [r7, #20]
 800c220:	f7ff fcfc 	bl	800bc1c <knl_cyc_timer_insert>
 800c224:	e014      	b.n	800c250 <tk_sta_cyc+0xb8>
		}
	} else {
		/* Reset cyclic interval */
		if ( (cyccb->cycstat & TCYC_STA) != 0 ) {
 800c226:	697b      	ldr	r3, [r7, #20]
 800c228:	68db      	ldr	r3, [r3, #12]
 800c22a:	f003 0301 	and.w	r3, r3, #1
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d004      	beq.n	800c23c <tk_sta_cyc+0xa4>
			/* Stop once */
			knl_timer_delete(&cyccb->cyctmeb);
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	3314      	adds	r3, #20
 800c236:	4618      	mov	r0, r3
 800c238:	f7ff fc9a 	bl	800bb70 <knl_timer_delete>

		/* FIRST ACTIVATION TIME
		 *	Adjust the first activation time with TIMER_PERIOD.
		 *	TIMER_PERIOD is Timer interrupt interval (millisecond).
		 */
		tm = cur + cyccb->cyctim + TIMER_PERIOD;
 800c23c:	697b      	ldr	r3, [r7, #20]
 800c23e:	691a      	ldr	r2, [r3, #16]
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	4413      	add	r3, r2
 800c244:	330a      	adds	r3, #10
 800c246:	61fb      	str	r3, [r7, #28]

		/* Start cyclic handler */
		knl_cyc_timer_insert(cyccb, tm);
 800c248:	69f9      	ldr	r1, [r7, #28]
 800c24a:	6978      	ldr	r0, [r7, #20]
 800c24c:	f7ff fce6 	bl	800bc1c <knl_cyc_timer_insert>
	}
	cyccb->cycstat |= TCYC_STA;
 800c250:	697b      	ldr	r3, [r7, #20]
 800c252:	68db      	ldr	r3, [r3, #12]
 800c254:	f043 0201 	orr.w	r2, r3, #1
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	60da      	str	r2, [r3, #12]

    error_exit:
	END_CRITICAL_SECTION;
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d10b      	bne.n	800c27a <tk_sta_cyc+0xe2>
 800c262:	4b0c      	ldr	r3, [pc, #48]	@ (800c294 <tk_sta_cyc+0xfc>)
 800c264:	681a      	ldr	r2, [r3, #0]
 800c266:	4b0c      	ldr	r3, [pc, #48]	@ (800c298 <tk_sta_cyc+0x100>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d005      	beq.n	800c27a <tk_sta_cyc+0xe2>
 800c26e:	4b0b      	ldr	r3, [pc, #44]	@ (800c29c <tk_sta_cyc+0x104>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d101      	bne.n	800c27a <tk_sta_cyc+0xe2>
 800c276:	f7f7 fb13 	bl	80038a0 <knl_dispatch>
 800c27a:	6938      	ldr	r0, [r7, #16]
 800c27c:	f001 fa2f 	bl	800d6de <set_basepri>

	return ercd;
 800c280:	69bb      	ldr	r3, [r7, #24]
}
 800c282:	4618      	mov	r0, r3
 800c284:	3720      	adds	r7, #32
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}
 800c28a:	bf00      	nop
 800c28c:	24002690 	.word	0x24002690
 800c290:	240027d0 	.word	0x240027d0
 800c294:	24001870 	.word	0x24001870
 800c298:	24001874 	.word	0x24001874
 800c29c:	2400186c 	.word	0x2400186c

0800c2a0 <tk_stp_cyc>:
#ifdef USE_FUNC_TK_STP_CYC
/*
 * Stop cyclic handler 
 */
SYSCALL ER tk_stp_cyc( ID cycid )
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b086      	sub	sp, #24
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
	CYCCB	*cyccb;
	ER	ercd = E_OK;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	617b      	str	r3, [r7, #20]

	CHECK_CYCID(cycid);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	dd02      	ble.n	800c2b8 <tk_stp_cyc+0x18>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	2b04      	cmp	r3, #4
 800c2b6:	dd02      	ble.n	800c2be <tk_stp_cyc+0x1e>
 800c2b8:	f06f 0311 	mvn.w	r3, #17
 800c2bc:	e037      	b.n	800c32e <tk_stp_cyc+0x8e>

	cyccb = get_cyccb(cycid);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	1e5a      	subs	r2, r3, #1
 800c2c2:	4613      	mov	r3, r2
 800c2c4:	009b      	lsls	r3, r3, #2
 800c2c6:	4413      	add	r3, r2
 800c2c8:	00db      	lsls	r3, r3, #3
 800c2ca:	4a1b      	ldr	r2, [pc, #108]	@ (800c338 <tk_stp_cyc+0x98>)
 800c2cc:	4413      	add	r3, r2
 800c2ce:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 800c2d0:	f001 fa1d 	bl	800d70e <disint>
 800c2d4:	60f8      	str	r0, [r7, #12]
	if ( cyccb->cychdr == NULL ) { /* Unregistered handler */
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	689b      	ldr	r3, [r3, #8]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d103      	bne.n	800c2e6 <tk_stp_cyc+0x46>
		ercd = E_NOEXS;
 800c2de:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 800c2e2:	617b      	str	r3, [r7, #20]
 800c2e4:	e010      	b.n	800c308 <tk_stp_cyc+0x68>
	} else {
		if ( (cyccb->cycstat & TCYC_STA) != 0 ) {
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	68db      	ldr	r3, [r3, #12]
 800c2ea:	f003 0301 	and.w	r3, r3, #1
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d004      	beq.n	800c2fc <tk_stp_cyc+0x5c>
			/* Stop cyclic handler */
			knl_timer_delete(&cyccb->cyctmeb);
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	3314      	adds	r3, #20
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f7ff fc3a 	bl	800bb70 <knl_timer_delete>
		}
		cyccb->cycstat &= ~TCYC_STA;
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	68db      	ldr	r3, [r3, #12]
 800c300:	f023 0201 	bic.w	r2, r3, #1
 800c304:	693b      	ldr	r3, [r7, #16]
 800c306:	60da      	str	r2, [r3, #12]
	}
	END_CRITICAL_SECTION;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d10b      	bne.n	800c326 <tk_stp_cyc+0x86>
 800c30e:	4b0b      	ldr	r3, [pc, #44]	@ (800c33c <tk_stp_cyc+0x9c>)
 800c310:	681a      	ldr	r2, [r3, #0]
 800c312:	4b0b      	ldr	r3, [pc, #44]	@ (800c340 <tk_stp_cyc+0xa0>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	429a      	cmp	r2, r3
 800c318:	d005      	beq.n	800c326 <tk_stp_cyc+0x86>
 800c31a:	4b0a      	ldr	r3, [pc, #40]	@ (800c344 <tk_stp_cyc+0xa4>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d101      	bne.n	800c326 <tk_stp_cyc+0x86>
 800c322:	f7f7 fabd 	bl	80038a0 <knl_dispatch>
 800c326:	68f8      	ldr	r0, [r7, #12]
 800c328:	f001 f9d9 	bl	800d6de <set_basepri>

	return ercd;
 800c32c:	697b      	ldr	r3, [r7, #20]
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3718      	adds	r7, #24
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}
 800c336:	bf00      	nop
 800c338:	24002690 	.word	0x24002690
 800c33c:	24001870 	.word	0x24001870
 800c340:	24001874 	.word	0x24001874
 800c344:	2400186c 	.word	0x2400186c

0800c348 <tk_ref_cyc>:
#ifdef USE_FUNC_TK_REF_CYC
/*
 * Refer cyclic handler state
 */
SYSCALL ER tk_ref_cyc( ID cycid, T_RCYC* pk_rcyc )
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b088      	sub	sp, #32
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
	CYCCB	*cyccb;
	ABSTIM	tm, cur;
	ER	ercd = E_OK;
 800c352:	2300      	movs	r3, #0
 800c354:	61bb      	str	r3, [r7, #24]

	CHECK_CYCID(cycid);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	dd02      	ble.n	800c362 <tk_ref_cyc+0x1a>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2b04      	cmp	r3, #4
 800c360:	dd02      	ble.n	800c368 <tk_ref_cyc+0x20>
 800c362:	f06f 0311 	mvn.w	r3, #17
 800c366:	e05b      	b.n	800c420 <tk_ref_cyc+0xd8>

	cyccb = get_cyccb(cycid);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	1e5a      	subs	r2, r3, #1
 800c36c:	4613      	mov	r3, r2
 800c36e:	009b      	lsls	r3, r3, #2
 800c370:	4413      	add	r3, r2
 800c372:	00db      	lsls	r3, r3, #3
 800c374:	4a2c      	ldr	r2, [pc, #176]	@ (800c428 <tk_ref_cyc+0xe0>)
 800c376:	4413      	add	r3, r2
 800c378:	617b      	str	r3, [r7, #20]

	BEGIN_CRITICAL_SECTION;
 800c37a:	f001 f9c8 	bl	800d70e <disint>
 800c37e:	6138      	str	r0, [r7, #16]
	if ( cyccb->cychdr == NULL ) { /* Unregistered handler */
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	689b      	ldr	r3, [r3, #8]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d103      	bne.n	800c390 <tk_ref_cyc+0x48>
		ercd = E_NOEXS;
 800c388:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 800c38c:	61bb      	str	r3, [r7, #24]
 800c38e:	e034      	b.n	800c3fa <tk_ref_cyc+0xb2>
	} else {
		tm = cyccb->cyctmeb.time;
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	69db      	ldr	r3, [r3, #28]
 800c394:	61fb      	str	r3, [r7, #28]
		cur = lltoul(knl_current_time);
 800c396:	4b25      	ldr	r3, [pc, #148]	@ (800c42c <tk_ref_cyc+0xe4>)
 800c398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39c:	4613      	mov	r3, r2
 800c39e:	60fb      	str	r3, [r7, #12]
		if ( (cyccb->cycstat & TCYC_STA) == 0 ) {
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	68db      	ldr	r3, [r3, #12]
 800c3a4:	f003 0301 	and.w	r3, r3, #1
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d10a      	bne.n	800c3c2 <tk_ref_cyc+0x7a>
			if ( knl_abstim_reached(cur, tm) ) {
 800c3ac:	69f9      	ldr	r1, [r7, #28]
 800c3ae:	68f8      	ldr	r0, [r7, #12]
 800c3b0:	f7ff fbce 	bl	800bb50 <knl_abstim_reached>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d003      	beq.n	800c3c2 <tk_ref_cyc+0x7a>
				tm = knl_cyc_next_time(cyccb);
 800c3ba:	6978      	ldr	r0, [r7, #20]
 800c3bc:	f7ff fc00 	bl	800bbc0 <knl_cyc_next_time>
 800c3c0:	61f8      	str	r0, [r7, #28]
			}
		}
		if ( knl_abstim_reached(cur + TIMER_PERIOD, tm) ) {
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	330a      	adds	r3, #10
 800c3c6:	69f9      	ldr	r1, [r7, #28]
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	f7ff fbc1 	bl	800bb50 <knl_abstim_reached>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d002      	beq.n	800c3da <tk_ref_cyc+0x92>
			tm = 0;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	61fb      	str	r3, [r7, #28]
 800c3d8:	e004      	b.n	800c3e4 <tk_ref_cyc+0x9c>
		}
		else {
			tm -= (cur + TIMER_PERIOD);
 800c3da:	69fa      	ldr	r2, [r7, #28]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	1ad3      	subs	r3, r2, r3
 800c3e0:	3b0a      	subs	r3, #10
 800c3e2:	61fb      	str	r3, [r7, #28]
		}

		pk_rcyc->exinf   = cyccb->exinf;
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	681a      	ldr	r2, [r3, #0]
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	601a      	str	r2, [r3, #0]
		pk_rcyc->lfttim  = tm;
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	69fa      	ldr	r2, [r7, #28]
 800c3f0:	605a      	str	r2, [r3, #4]
		pk_rcyc->cycstat = cyccb->cycstat;
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	68da      	ldr	r2, [r3, #12]
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	609a      	str	r2, [r3, #8]
	}
	END_CRITICAL_SECTION;
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d10b      	bne.n	800c418 <tk_ref_cyc+0xd0>
 800c400:	4b0b      	ldr	r3, [pc, #44]	@ (800c430 <tk_ref_cyc+0xe8>)
 800c402:	681a      	ldr	r2, [r3, #0]
 800c404:	4b0b      	ldr	r3, [pc, #44]	@ (800c434 <tk_ref_cyc+0xec>)
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	429a      	cmp	r2, r3
 800c40a:	d005      	beq.n	800c418 <tk_ref_cyc+0xd0>
 800c40c:	4b0a      	ldr	r3, [pc, #40]	@ (800c438 <tk_ref_cyc+0xf0>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d101      	bne.n	800c418 <tk_ref_cyc+0xd0>
 800c414:	f7f7 fa44 	bl	80038a0 <knl_dispatch>
 800c418:	6938      	ldr	r0, [r7, #16]
 800c41a:	f001 f960 	bl	800d6de <set_basepri>

	return ercd;
 800c41e:	69bb      	ldr	r3, [r7, #24]
}
 800c420:	4618      	mov	r0, r3
 800c422:	3720      	adds	r7, #32
 800c424:	46bd      	mov	sp, r7
 800c426:	bd80      	pop	{r7, pc}
 800c428:	24002690 	.word	0x24002690
 800c42c:	240027d0 	.word	0x240027d0
 800c430:	24001870 	.word	0x24001870
 800c434:	24001874 	.word	0x24001874
 800c438:	2400186c 	.word	0x2400186c

0800c43c <knl_alarmhandler_initialize>:

/*
 * Initialization of alarm handler control block 
 */
EXPORT ER knl_alarmhandler_initialize( void )
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
	if ( NUM_ALMID < 1 ) {
		return E_SYS;
	}

	/* Register all control blocks onto FreeQue */
	QueInit(&knl_free_almcb);
 800c442:	480d      	ldr	r0, [pc, #52]	@ (800c478 <knl_alarmhandler_initialize+0x3c>)
 800c444:	f7ff fae6 	bl	800ba14 <QueInit>
	end = knl_almcb_table + NUM_ALMID;
 800c448:	4b0c      	ldr	r3, [pc, #48]	@ (800c47c <knl_alarmhandler_initialize+0x40>)
 800c44a:	603b      	str	r3, [r7, #0]
	for ( almcb = knl_almcb_table; almcb < end; almcb++ ) {
 800c44c:	4b0c      	ldr	r3, [pc, #48]	@ (800c480 <knl_alarmhandler_initialize+0x44>)
 800c44e:	607b      	str	r3, [r7, #4]
 800c450:	e009      	b.n	800c466 <knl_alarmhandler_initialize+0x2a>
		almcb->almhdr = NULL; /* Unregistered handler */
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2200      	movs	r2, #0
 800c456:	609a      	str	r2, [r3, #8]
		QueInsert((QUEUE*)almcb, &knl_free_almcb);
 800c458:	4907      	ldr	r1, [pc, #28]	@ (800c478 <knl_alarmhandler_initialize+0x3c>)
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f7ff fae9 	bl	800ba32 <QueInsert>
	for ( almcb = knl_almcb_table; almcb < end; almcb++ ) {
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	3324      	adds	r3, #36	@ 0x24
 800c464:	607b      	str	r3, [r7, #4]
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	683b      	ldr	r3, [r7, #0]
 800c46a:	429a      	cmp	r2, r3
 800c46c:	d3f1      	bcc.n	800c452 <knl_alarmhandler_initialize+0x16>
	}

	return E_OK;
 800c46e:	2300      	movs	r3, #0
}
 800c470:	4618      	mov	r0, r3
 800c472:	3708      	adds	r7, #8
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}
 800c478:	240027c8 	.word	0x240027c8
 800c47c:	240027c8 	.word	0x240027c8
 800c480:	24002738 	.word	0x24002738

0800c484 <knl_call_almhdr>:

/*
 * Alarm handler start routine
 */
EXPORT void knl_call_almhdr( ALMCB *almcb )
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b082      	sub	sp, #8
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
	almcb->almstat &= ~TALM_STA;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	68db      	ldr	r3, [r3, #12]
 800c490:	f023 0201 	bic.w	r2, r3, #1
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	60da      	str	r2, [r3, #12]

	/* Execute alarm handler/ Enable interrupt nesting */
	ENABLE_INTERRUPT_UPTO(TIMER_INTLEVEL);
 800c498:	2000      	movs	r0, #0
 800c49a:	f001 f920 	bl	800d6de <set_basepri>
	CallUserHandlerP1(almcb->exinf, almcb->almhdr, almcb);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	689b      	ldr	r3, [r3, #8]
 800c4a2:	687a      	ldr	r2, [r7, #4]
 800c4a4:	6812      	ldr	r2, [r2, #0]
 800c4a6:	4610      	mov	r0, r2
 800c4a8:	4798      	blx	r3
	DISABLE_INTERRUPT;
 800c4aa:	f001 f930 	bl	800d70e <disint>
}
 800c4ae:	bf00      	nop
 800c4b0:	3708      	adds	r7, #8
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}
	...

0800c4b8 <tk_cre_alm>:

/*
 * Create alarm handler
 */
SYSCALL ID tk_cre_alm( CONST T_CALM *pk_calm )
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b086      	sub	sp, #24
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
#if CHK_RSATR
	const ATR VALID_ALMATR = {
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	613b      	str	r3, [r7, #16]
		|TA_DSNAME
#endif
	};
#endif
	ALMCB	*almcb;
	ER	ercd = E_OK;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	617b      	str	r3, [r7, #20]

	CHECK_RSATR(pk_calm->almatr, VALID_ALMATR);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	685a      	ldr	r2, [r3, #4]
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	43db      	mvns	r3, r3
 800c4d0:	4013      	ands	r3, r2
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d002      	beq.n	800c4dc <tk_cre_alm+0x24>
 800c4d6:	f06f 030a 	mvn.w	r3, #10
 800c4da:	e03f      	b.n	800c55c <tk_cre_alm+0xa4>
	CHECK_PAR(pk_calm->almhdr != NULL);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	689b      	ldr	r3, [r3, #8]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d102      	bne.n	800c4ea <tk_cre_alm+0x32>
 800c4e4:	f06f 0310 	mvn.w	r3, #16
 800c4e8:	e038      	b.n	800c55c <tk_cre_alm+0xa4>

	BEGIN_CRITICAL_SECTION;
 800c4ea:	f001 f910 	bl	800d70e <disint>
 800c4ee:	60f8      	str	r0, [r7, #12]
	/* Get control block from free queue */
	almcb = (ALMCB*)QueRemoveNext(&knl_free_almcb);
 800c4f0:	481c      	ldr	r0, [pc, #112]	@ (800c564 <tk_cre_alm+0xac>)
 800c4f2:	f7ff face 	bl	800ba92 <QueRemoveNext>
 800c4f6:	60b8      	str	r0, [r7, #8]
	if ( almcb == NULL ) {
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d103      	bne.n	800c506 <tk_cre_alm+0x4e>
		ercd = E_LIMIT;
 800c4fe:	f06f 0321 	mvn.w	r3, #33	@ 0x21
 800c502:	617b      	str	r3, [r7, #20]
		goto error_exit;
 800c504:	e017      	b.n	800c536 <tk_cre_alm+0x7e>
	}

	/* Initialize control block */
	almcb->exinf   = pk_calm->exinf;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681a      	ldr	r2, [r3, #0]
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	601a      	str	r2, [r3, #0]
	almcb->almatr  = pk_calm->almatr;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	685a      	ldr	r2, [r3, #4]
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	605a      	str	r2, [r3, #4]
	almcb->almhdr  = pk_calm->almhdr;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	689a      	ldr	r2, [r3, #8]
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	609a      	str	r2, [r3, #8]
	almcb->almstat = TALM_STP;
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	2200      	movs	r2, #0
 800c522:	60da      	str	r2, [r3, #12]
	if ( (pk_calm->almatr & TA_DSNAME) != 0 ) {
		knl_strncpy((char*)almcb->name, (char*)pk_calm->dsname, OBJECT_NAME_LENGTH);
	}
#endif

	ercd = ID_ALM(almcb - knl_almcb_table);
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	4a10      	ldr	r2, [pc, #64]	@ (800c568 <tk_cre_alm+0xb0>)
 800c528:	1a9b      	subs	r3, r3, r2
 800c52a:	109b      	asrs	r3, r3, #2
 800c52c:	4a0f      	ldr	r2, [pc, #60]	@ (800c56c <tk_cre_alm+0xb4>)
 800c52e:	fb02 f303 	mul.w	r3, r2, r3
 800c532:	3301      	adds	r3, #1
 800c534:	617b      	str	r3, [r7, #20]

    error_exit:
	END_CRITICAL_SECTION;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d10b      	bne.n	800c554 <tk_cre_alm+0x9c>
 800c53c:	4b0c      	ldr	r3, [pc, #48]	@ (800c570 <tk_cre_alm+0xb8>)
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	4b0c      	ldr	r3, [pc, #48]	@ (800c574 <tk_cre_alm+0xbc>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	429a      	cmp	r2, r3
 800c546:	d005      	beq.n	800c554 <tk_cre_alm+0x9c>
 800c548:	4b0b      	ldr	r3, [pc, #44]	@ (800c578 <tk_cre_alm+0xc0>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d101      	bne.n	800c554 <tk_cre_alm+0x9c>
 800c550:	f7f7 f9a6 	bl	80038a0 <knl_dispatch>
 800c554:	68f8      	ldr	r0, [r7, #12]
 800c556:	f001 f8c2 	bl	800d6de <set_basepri>

	return ercd;
 800c55a:	697b      	ldr	r3, [r7, #20]
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3718      	adds	r7, #24
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}
 800c564:	240027c8 	.word	0x240027c8
 800c568:	24002738 	.word	0x24002738
 800c56c:	38e38e39 	.word	0x38e38e39
 800c570:	24001870 	.word	0x24001870
 800c574:	24001874 	.word	0x24001874
 800c578:	2400186c 	.word	0x2400186c

0800c57c <tk_del_alm>:
#ifdef USE_FUNC_TK_DEL_ALM
/*
 * Delete alarm handler
 */
SYSCALL ER tk_del_alm( ID almid )
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b086      	sub	sp, #24
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
	ALMCB	*almcb;
	ER	ercd = E_OK;
 800c584:	2300      	movs	r3, #0
 800c586:	617b      	str	r3, [r7, #20]

	CHECK_ALMID(almid);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	dd02      	ble.n	800c594 <tk_del_alm+0x18>
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2b04      	cmp	r3, #4
 800c592:	dd02      	ble.n	800c59a <tk_del_alm+0x1e>
 800c594:	f06f 0311 	mvn.w	r3, #17
 800c598:	e038      	b.n	800c60c <tk_del_alm+0x90>

	almcb = get_almcb(almid);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	1e5a      	subs	r2, r3, #1
 800c59e:	4613      	mov	r3, r2
 800c5a0:	00db      	lsls	r3, r3, #3
 800c5a2:	4413      	add	r3, r2
 800c5a4:	009b      	lsls	r3, r3, #2
 800c5a6:	4a1b      	ldr	r2, [pc, #108]	@ (800c614 <tk_del_alm+0x98>)
 800c5a8:	4413      	add	r3, r2
 800c5aa:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 800c5ac:	f001 f8af 	bl	800d70e <disint>
 800c5b0:	60f8      	str	r0, [r7, #12]
	if ( almcb->almhdr == NULL ) { /* Unregistered handler */
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	689b      	ldr	r3, [r3, #8]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d103      	bne.n	800c5c2 <tk_del_alm+0x46>
		ercd = E_NOEXS;
 800c5ba:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 800c5be:	617b      	str	r3, [r7, #20]
 800c5c0:	e011      	b.n	800c5e6 <tk_del_alm+0x6a>
	} else {
		if ( (almcb->almstat & TALM_STA) != 0 ) {
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	68db      	ldr	r3, [r3, #12]
 800c5c6:	f003 0301 	and.w	r3, r3, #1
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d004      	beq.n	800c5d8 <tk_del_alm+0x5c>
			/* Delete from timer event queue */
			knl_timer_delete(&almcb->almtmeb);
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	3310      	adds	r3, #16
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f7ff facc 	bl	800bb70 <knl_timer_delete>
		}

		/* Return to FreeQue */
		QueInsert((QUEUE*)almcb, &knl_free_almcb);
 800c5d8:	490f      	ldr	r1, [pc, #60]	@ (800c618 <tk_del_alm+0x9c>)
 800c5da:	6938      	ldr	r0, [r7, #16]
 800c5dc:	f7ff fa29 	bl	800ba32 <QueInsert>
		almcb->almhdr = NULL; /* Unregistered handler */
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	609a      	str	r2, [r3, #8]
	}
	END_CRITICAL_SECTION;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d10b      	bne.n	800c604 <tk_del_alm+0x88>
 800c5ec:	4b0b      	ldr	r3, [pc, #44]	@ (800c61c <tk_del_alm+0xa0>)
 800c5ee:	681a      	ldr	r2, [r3, #0]
 800c5f0:	4b0b      	ldr	r3, [pc, #44]	@ (800c620 <tk_del_alm+0xa4>)
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	d005      	beq.n	800c604 <tk_del_alm+0x88>
 800c5f8:	4b0a      	ldr	r3, [pc, #40]	@ (800c624 <tk_del_alm+0xa8>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d101      	bne.n	800c604 <tk_del_alm+0x88>
 800c600:	f7f7 f94e 	bl	80038a0 <knl_dispatch>
 800c604:	68f8      	ldr	r0, [r7, #12]
 800c606:	f001 f86a 	bl	800d6de <set_basepri>

	return ercd;
 800c60a:	697b      	ldr	r3, [r7, #20]
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3718      	adds	r7, #24
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}
 800c614:	24002738 	.word	0x24002738
 800c618:	240027c8 	.word	0x240027c8
 800c61c:	24001870 	.word	0x24001870
 800c620:	24001874 	.word	0x24001874
 800c624:	2400186c 	.word	0x2400186c

0800c628 <knl_immediate_call_almhdr>:

/*
 * Alarm handler immediate call
 */
LOCAL void knl_immediate_call_almhdr( ALMCB *almcb )
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
	almcb->almstat &= ~TALM_STA;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	68db      	ldr	r3, [r3, #12]
 800c634:	f023 0201 	bic.w	r2, r3, #1
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	60da      	str	r2, [r3, #12]

	/* Execute alarm handler in task-independent part
	   (Keep interrupt disabled) */
	ENTER_TASK_INDEPENDENT;
 800c63c:	f7ff faa4 	bl	800bb88 <knl_EnterTaskIndependent>
	CallUserHandlerP1(almcb->exinf, almcb->almhdr, almcb);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	689b      	ldr	r3, [r3, #8]
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	6812      	ldr	r2, [r2, #0]
 800c648:	4610      	mov	r0, r2
 800c64a:	4798      	blx	r3
	LEAVE_TASK_INDEPENDENT;
 800c64c:	f7ff faaa 	bl	800bba4 <knl_LeaveTaskIndependent>
}
 800c650:	bf00      	nop
 800c652:	3708      	adds	r7, #8
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <tk_sta_alm>:

/*
 * Start alarm handler
 */
SYSCALL ER tk_sta_alm( ID almid, RELTIM almtim )
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b086      	sub	sp, #24
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
	ALMCB	*almcb;
	ER	ercd = E_OK;
 800c662:	2300      	movs	r3, #0
 800c664:	617b      	str	r3, [r7, #20]

	CHECK_ALMID(almid);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	dd02      	ble.n	800c672 <tk_sta_alm+0x1a>
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2b04      	cmp	r3, #4
 800c670:	dd02      	ble.n	800c678 <tk_sta_alm+0x20>
 800c672:	f06f 0311 	mvn.w	r3, #17
 800c676:	e048      	b.n	800c70a <tk_sta_alm+0xb2>
	CHECK_RELTIM(almtim);
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	da02      	bge.n	800c684 <tk_sta_alm+0x2c>
 800c67e:	f06f 0310 	mvn.w	r3, #16
 800c682:	e042      	b.n	800c70a <tk_sta_alm+0xb2>

	almcb = get_almcb(almid);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	1e5a      	subs	r2, r3, #1
 800c688:	4613      	mov	r3, r2
 800c68a:	00db      	lsls	r3, r3, #3
 800c68c:	4413      	add	r3, r2
 800c68e:	009b      	lsls	r3, r3, #2
 800c690:	4a20      	ldr	r2, [pc, #128]	@ (800c714 <tk_sta_alm+0xbc>)
 800c692:	4413      	add	r3, r2
 800c694:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 800c696:	f001 f83a 	bl	800d70e <disint>
 800c69a:	60f8      	str	r0, [r7, #12]
	if ( almcb->almhdr == NULL ) { /* Unregistered handler */
 800c69c:	693b      	ldr	r3, [r7, #16]
 800c69e:	689b      	ldr	r3, [r3, #8]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d103      	bne.n	800c6ac <tk_sta_alm+0x54>
		ercd = E_NOEXS;
 800c6a4:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 800c6a8:	617b      	str	r3, [r7, #20]
		goto error_exit;
 800c6aa:	e01b      	b.n	800c6e4 <tk_sta_alm+0x8c>
	}

	if ( (almcb->almstat & TALM_STA) != 0 ) {
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	68db      	ldr	r3, [r3, #12]
 800c6b0:	f003 0301 	and.w	r3, r3, #1
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d004      	beq.n	800c6c2 <tk_sta_alm+0x6a>
		/* Cancel current settings */
		knl_timer_delete(&almcb->almtmeb);
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	3310      	adds	r3, #16
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f7ff fa57 	bl	800bb70 <knl_timer_delete>
	}

	if ( almtim > 0 ) {
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d00a      	beq.n	800c6de <tk_sta_alm+0x86>
		/* Register onto timer event queue */
		knl_alm_timer_insert(almcb, almtim);
 800c6c8:	6839      	ldr	r1, [r7, #0]
 800c6ca:	6938      	ldr	r0, [r7, #16]
 800c6cc:	f7ff faba 	bl	800bc44 <knl_alm_timer_insert>
		almcb->almstat |= TALM_STA;
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	68db      	ldr	r3, [r3, #12]
 800c6d4:	f043 0201 	orr.w	r2, r3, #1
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	60da      	str	r2, [r3, #12]
 800c6dc:	e002      	b.n	800c6e4 <tk_sta_alm+0x8c>
	} else {
		/* Immediate execution */
		knl_immediate_call_almhdr(almcb);
 800c6de:	6938      	ldr	r0, [r7, #16]
 800c6e0:	f7ff ffa2 	bl	800c628 <knl_immediate_call_almhdr>
	}

    error_exit:
	END_CRITICAL_SECTION;
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d10b      	bne.n	800c702 <tk_sta_alm+0xaa>
 800c6ea:	4b0b      	ldr	r3, [pc, #44]	@ (800c718 <tk_sta_alm+0xc0>)
 800c6ec:	681a      	ldr	r2, [r3, #0]
 800c6ee:	4b0b      	ldr	r3, [pc, #44]	@ (800c71c <tk_sta_alm+0xc4>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	d005      	beq.n	800c702 <tk_sta_alm+0xaa>
 800c6f6:	4b0a      	ldr	r3, [pc, #40]	@ (800c720 <tk_sta_alm+0xc8>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d101      	bne.n	800c702 <tk_sta_alm+0xaa>
 800c6fe:	f7f7 f8cf 	bl	80038a0 <knl_dispatch>
 800c702:	68f8      	ldr	r0, [r7, #12]
 800c704:	f000 ffeb 	bl	800d6de <set_basepri>

	return ercd;
 800c708:	697b      	ldr	r3, [r7, #20]
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	3718      	adds	r7, #24
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}
 800c712:	bf00      	nop
 800c714:	24002738 	.word	0x24002738
 800c718:	24001870 	.word	0x24001870
 800c71c:	24001874 	.word	0x24001874
 800c720:	2400186c 	.word	0x2400186c

0800c724 <tk_stp_alm>:
#ifdef USE_FUNC_TK_STP_ALM
/*
 * Stop alarm handler
 */
SYSCALL ER tk_stp_alm( ID almid )
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b086      	sub	sp, #24
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
	ALMCB	*almcb;
	ER	ercd = E_OK;
 800c72c:	2300      	movs	r3, #0
 800c72e:	617b      	str	r3, [r7, #20]

	CHECK_ALMID(almid);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2b00      	cmp	r3, #0
 800c734:	dd02      	ble.n	800c73c <tk_stp_alm+0x18>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2b04      	cmp	r3, #4
 800c73a:	dd02      	ble.n	800c742 <tk_stp_alm+0x1e>
 800c73c:	f06f 0311 	mvn.w	r3, #17
 800c740:	e037      	b.n	800c7b2 <tk_stp_alm+0x8e>

	almcb = get_almcb(almid);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	1e5a      	subs	r2, r3, #1
 800c746:	4613      	mov	r3, r2
 800c748:	00db      	lsls	r3, r3, #3
 800c74a:	4413      	add	r3, r2
 800c74c:	009b      	lsls	r3, r3, #2
 800c74e:	4a1b      	ldr	r2, [pc, #108]	@ (800c7bc <tk_stp_alm+0x98>)
 800c750:	4413      	add	r3, r2
 800c752:	613b      	str	r3, [r7, #16]

	BEGIN_CRITICAL_SECTION;
 800c754:	f000 ffdb 	bl	800d70e <disint>
 800c758:	60f8      	str	r0, [r7, #12]
	if ( almcb->almhdr == NULL ) { /* Unregistered handler */
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	689b      	ldr	r3, [r3, #8]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d103      	bne.n	800c76a <tk_stp_alm+0x46>
		ercd = E_NOEXS;
 800c762:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 800c766:	617b      	str	r3, [r7, #20]
 800c768:	e010      	b.n	800c78c <tk_stp_alm+0x68>
	} else {
		if ( (almcb->almstat & TALM_STA) != 0 ) {
 800c76a:	693b      	ldr	r3, [r7, #16]
 800c76c:	68db      	ldr	r3, [r3, #12]
 800c76e:	f003 0301 	and.w	r3, r3, #1
 800c772:	2b00      	cmp	r3, #0
 800c774:	d00a      	beq.n	800c78c <tk_stp_alm+0x68>
			/* Stop alarm handler address */
			knl_timer_delete(&almcb->almtmeb);
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	3310      	adds	r3, #16
 800c77a:	4618      	mov	r0, r3
 800c77c:	f7ff f9f8 	bl	800bb70 <knl_timer_delete>
			almcb->almstat &= ~TALM_STA;
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	68db      	ldr	r3, [r3, #12]
 800c784:	f023 0201 	bic.w	r2, r3, #1
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	60da      	str	r2, [r3, #12]
		}
	}
	END_CRITICAL_SECTION;
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d10b      	bne.n	800c7aa <tk_stp_alm+0x86>
 800c792:	4b0b      	ldr	r3, [pc, #44]	@ (800c7c0 <tk_stp_alm+0x9c>)
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	4b0b      	ldr	r3, [pc, #44]	@ (800c7c4 <tk_stp_alm+0xa0>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d005      	beq.n	800c7aa <tk_stp_alm+0x86>
 800c79e:	4b0a      	ldr	r3, [pc, #40]	@ (800c7c8 <tk_stp_alm+0xa4>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d101      	bne.n	800c7aa <tk_stp_alm+0x86>
 800c7a6:	f7f7 f87b 	bl	80038a0 <knl_dispatch>
 800c7aa:	68f8      	ldr	r0, [r7, #12]
 800c7ac:	f000 ff97 	bl	800d6de <set_basepri>

	return ercd;
 800c7b0:	697b      	ldr	r3, [r7, #20]
}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3718      	adds	r7, #24
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
 800c7ba:	bf00      	nop
 800c7bc:	24002738 	.word	0x24002738
 800c7c0:	24001870 	.word	0x24001870
 800c7c4:	24001874 	.word	0x24001874
 800c7c8:	2400186c 	.word	0x2400186c

0800c7cc <tk_ref_alm>:
#ifdef USE_FUNC_TK_REF_ALM
/*
 * Refer alarm handler state
 */
SYSCALL ER tk_ref_alm( ID almid, T_RALM *pk_ralm )
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b088      	sub	sp, #32
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	6039      	str	r1, [r7, #0]
	ALMCB	*almcb;
	ABSTIM	tm, cur;
	ER	ercd = E_OK;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	61bb      	str	r3, [r7, #24]

	CHECK_ALMID(almid);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	dd02      	ble.n	800c7e6 <tk_ref_alm+0x1a>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2b04      	cmp	r3, #4
 800c7e4:	dd02      	ble.n	800c7ec <tk_ref_alm+0x20>
 800c7e6:	f06f 0311 	mvn.w	r3, #17
 800c7ea:	e053      	b.n	800c894 <tk_ref_alm+0xc8>

	almcb = get_almcb(almid);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	1e5a      	subs	r2, r3, #1
 800c7f0:	4613      	mov	r3, r2
 800c7f2:	00db      	lsls	r3, r3, #3
 800c7f4:	4413      	add	r3, r2
 800c7f6:	009b      	lsls	r3, r3, #2
 800c7f8:	4a28      	ldr	r2, [pc, #160]	@ (800c89c <tk_ref_alm+0xd0>)
 800c7fa:	4413      	add	r3, r2
 800c7fc:	617b      	str	r3, [r7, #20]

	BEGIN_CRITICAL_SECTION;
 800c7fe:	f000 ff86 	bl	800d70e <disint>
 800c802:	6138      	str	r0, [r7, #16]
	if ( almcb->almhdr == NULL ) { /* Unregistered handler */
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	689b      	ldr	r3, [r3, #8]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d103      	bne.n	800c814 <tk_ref_alm+0x48>
		ercd = E_NOEXS;
 800c80c:	f06f 0329 	mvn.w	r3, #41	@ 0x29
 800c810:	61bb      	str	r3, [r7, #24]
 800c812:	e02c      	b.n	800c86e <tk_ref_alm+0xa2>
	} else {
		cur = lltoul(knl_current_time);
 800c814:	4b22      	ldr	r3, [pc, #136]	@ (800c8a0 <tk_ref_alm+0xd4>)
 800c816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c81a:	4613      	mov	r3, r2
 800c81c:	60fb      	str	r3, [r7, #12]
		if ( (almcb->almstat & TALM_STA) != 0 ) {
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	68db      	ldr	r3, [r3, #12]
 800c822:	f003 0301 	and.w	r3, r3, #1
 800c826:	2b00      	cmp	r3, #0
 800c828:	d014      	beq.n	800c854 <tk_ref_alm+0x88>
			tm = almcb->almtmeb.time;
 800c82a:	697b      	ldr	r3, [r7, #20]
 800c82c:	699b      	ldr	r3, [r3, #24]
 800c82e:	61fb      	str	r3, [r7, #28]
			if ( knl_abstim_reached(cur + TIMER_PERIOD, tm) ) {
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	330a      	adds	r3, #10
 800c834:	69f9      	ldr	r1, [r7, #28]
 800c836:	4618      	mov	r0, r3
 800c838:	f7ff f98a 	bl	800bb50 <knl_abstim_reached>
 800c83c:	4603      	mov	r3, r0
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d002      	beq.n	800c848 <tk_ref_alm+0x7c>
				tm = 0;
 800c842:	2300      	movs	r3, #0
 800c844:	61fb      	str	r3, [r7, #28]
 800c846:	e007      	b.n	800c858 <tk_ref_alm+0x8c>
			}
			else {
				tm -= (cur + TIMER_PERIOD);
 800c848:	69fa      	ldr	r2, [r7, #28]
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	1ad3      	subs	r3, r2, r3
 800c84e:	3b0a      	subs	r3, #10
 800c850:	61fb      	str	r3, [r7, #28]
 800c852:	e001      	b.n	800c858 <tk_ref_alm+0x8c>
			}
		} else {
			tm = 0;
 800c854:	2300      	movs	r3, #0
 800c856:	61fb      	str	r3, [r7, #28]
		}

		pk_ralm->exinf   = almcb->exinf;
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	681a      	ldr	r2, [r3, #0]
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	601a      	str	r2, [r3, #0]
		pk_ralm->lfttim  = tm;
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	69fa      	ldr	r2, [r7, #28]
 800c864:	605a      	str	r2, [r3, #4]
		pk_ralm->almstat = almcb->almstat;
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	68da      	ldr	r2, [r3, #12]
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	609a      	str	r2, [r3, #8]
	}
	END_CRITICAL_SECTION;
 800c86e:	693b      	ldr	r3, [r7, #16]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d10b      	bne.n	800c88c <tk_ref_alm+0xc0>
 800c874:	4b0b      	ldr	r3, [pc, #44]	@ (800c8a4 <tk_ref_alm+0xd8>)
 800c876:	681a      	ldr	r2, [r3, #0]
 800c878:	4b0b      	ldr	r3, [pc, #44]	@ (800c8a8 <tk_ref_alm+0xdc>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	429a      	cmp	r2, r3
 800c87e:	d005      	beq.n	800c88c <tk_ref_alm+0xc0>
 800c880:	4b0a      	ldr	r3, [pc, #40]	@ (800c8ac <tk_ref_alm+0xe0>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d101      	bne.n	800c88c <tk_ref_alm+0xc0>
 800c888:	f7f7 f80a 	bl	80038a0 <knl_dispatch>
 800c88c:	6938      	ldr	r0, [r7, #16]
 800c88e:	f000 ff26 	bl	800d6de <set_basepri>

	return ercd;
 800c892:	69bb      	ldr	r3, [r7, #24]
}
 800c894:	4618      	mov	r0, r3
 800c896:	3720      	adds	r7, #32
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}
 800c89c:	24002738 	.word	0x24002738
 800c8a0:	240027d0 	.word	0x240027d0
 800c8a4:	24001870 	.word	0x24001870
 800c8a8:	24001874 	.word	0x24001874
 800c8ac:	2400186c 	.word	0x2400186c

0800c8b0 <out_w>:
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b083      	sub	sp, #12
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	6039      	str	r1, [r7, #0]
	*(_UW*)port = data;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	683a      	ldr	r2, [r7, #0]
 800c8be:	601a      	str	r2, [r3, #0]
}
 800c8c0:	bf00      	nop
 800c8c2:	370c      	adds	r7, #12
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bc80      	pop	{r7}
 800c8c8:	4770      	bx	lr

0800c8ca <in_w>:
{
 800c8ca:	b480      	push	{r7}
 800c8cc:	b083      	sub	sp, #12
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
	return *(_UW*)port;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	370c      	adds	r7, #12
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bc80      	pop	{r7}
 800c8de:	4770      	bx	lr

0800c8e0 <QueInit>:
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b083      	sub	sp, #12
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
	que->next = (struct queue *)que;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	687a      	ldr	r2, [r7, #4]
 800c8ec:	601a      	str	r2, [r3, #0]
	que->prev = (struct queue *)que;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	687a      	ldr	r2, [r7, #4]
 800c8f2:	605a      	str	r2, [r3, #4]
}
 800c8f4:	bf00      	nop
 800c8f6:	370c      	adds	r7, #12
 800c8f8:	46bd      	mov	sp, r7
 800c8fa:	bc80      	pop	{r7}
 800c8fc:	4770      	bx	lr

0800c8fe <isQueEmpty>:
{
 800c8fe:	b480      	push	{r7}
 800c900:	b083      	sub	sp, #12
 800c902:	af00      	add	r7, sp, #0
 800c904:	6078      	str	r0, [r7, #4]
	return ( que->next == que )? TRUE: FALSE;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	429a      	cmp	r2, r3
 800c90e:	bf0c      	ite	eq
 800c910:	2301      	moveq	r3, #1
 800c912:	2300      	movne	r3, #0
 800c914:	b2db      	uxtb	r3, r3
}
 800c916:	4618      	mov	r0, r3
 800c918:	370c      	adds	r7, #12
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bc80      	pop	{r7}
 800c91e:	4770      	bx	lr

0800c920 <QueInsert>:
{
 800c920:	b480      	push	{r7}
 800c922:	b083      	sub	sp, #12
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	685a      	ldr	r2, [r3, #4]
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	605a      	str	r2, [r3, #4]
	entry->next = que;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	683a      	ldr	r2, [r7, #0]
 800c936:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	685b      	ldr	r3, [r3, #4]
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	605a      	str	r2, [r3, #4]
}
 800c946:	bf00      	nop
 800c948:	370c      	adds	r7, #12
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bc80      	pop	{r7}
 800c94e:	4770      	bx	lr

0800c950 <QueRemove>:
{
 800c950:	b480      	push	{r7}
 800c952:	b083      	sub	sp, #12
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
	if ( entry->next != entry ) {
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	687a      	ldr	r2, [r7, #4]
 800c95e:	429a      	cmp	r2, r3
 800c960:	d009      	beq.n	800c976 <QueRemove+0x26>
		entry->prev->next = (struct queue*) entry->next;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	685b      	ldr	r3, [r3, #4]
 800c966:	687a      	ldr	r2, [r7, #4]
 800c968:	6812      	ldr	r2, [r2, #0]
 800c96a:	601a      	str	r2, [r3, #0]
		entry->next->prev = (struct queue*) entry->prev;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	6852      	ldr	r2, [r2, #4]
 800c974:	605a      	str	r2, [r3, #4]
}
 800c976:	bf00      	nop
 800c978:	370c      	adds	r7, #12
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bc80      	pop	{r7}
 800c97e:	4770      	bx	lr

0800c980 <knl_abstim_reached>:
{
 800c980:	b480      	push	{r7}
 800c982:	b083      	sub	sp, #12
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
 800c988:	6039      	str	r1, [r7, #0]
	return (ABSTIM)(curtim - evttim) <= (ABSTIM)ABSTIM_DIFF_MIN;
 800c98a:	687a      	ldr	r2, [r7, #4]
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	1ad3      	subs	r3, r2, r3
 800c990:	43db      	mvns	r3, r3
 800c992:	0fdb      	lsrs	r3, r3, #31
 800c994:	b2db      	uxtb	r3, r3
}
 800c996:	4618      	mov	r0, r3
 800c998:	370c      	adds	r7, #12
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bc80      	pop	{r7}
 800c99e:	4770      	bx	lr

0800c9a0 <knl_start_hw_timer>:
/*
 * Timer start processing
 *	Initialize the timer and start the periodical timer interrupt.
 */
Inline void knl_start_hw_timer( void )
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b082      	sub	sp, #8
 800c9a4:	af00      	add	r7, sp, #0
	UINT	n, imask;

	DI(imask);
 800c9a6:	f000 feb2 	bl	800d70e <disint>
 800c9aa:	6078      	str	r0, [r7, #4]

	/* Set System timer CLK source to Core, Systick exception enable */
	out_w(SYST_CSR, 0x00000006);
 800c9ac:	2106      	movs	r1, #6
 800c9ae:	480a      	ldr	r0, [pc, #40]	@ (800c9d8 <knl_start_hw_timer+0x38>)
 800c9b0:	f7ff ff7e 	bl	800c8b0 <out_w>

	/* Set counter: TMCLK(MHz) */
	n = (UINT)(TIMER_PERIOD * TMCLK_KHz - 1);
 800c9b4:	4b09      	ldr	r3, [pc, #36]	@ (800c9dc <knl_start_hw_timer+0x3c>)
 800c9b6:	603b      	str	r3, [r7, #0]
	out_w(SYST_RVR, n);
 800c9b8:	6839      	ldr	r1, [r7, #0]
 800c9ba:	4809      	ldr	r0, [pc, #36]	@ (800c9e0 <knl_start_hw_timer+0x40>)
 800c9bc:	f7ff ff78 	bl	800c8b0 <out_w>

	/* Start timer count */
	out_w(SYST_CSR, 0x00000007);
 800c9c0:	2107      	movs	r1, #7
 800c9c2:	4805      	ldr	r0, [pc, #20]	@ (800c9d8 <knl_start_hw_timer+0x38>)
 800c9c4:	f7ff ff74 	bl	800c8b0 <out_w>

	EI(imask);
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f000 fe88 	bl	800d6de <set_basepri>
}
 800c9ce:	bf00      	nop
 800c9d0:	3708      	adds	r7, #8
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bd80      	pop	{r7, pc}
 800c9d6:	bf00      	nop
 800c9d8:	e000e010 	.word	0xe000e010
 800c9dc:	0053ec5f 	.word	0x0053ec5f
 800c9e0:	e000e014 	.word	0xe000e014

0800c9e4 <knl_clear_hw_timer_interrupt>:
 *	'end_of_hw_timer_interrupt()' is called at the end of the timer
 *	interrupt handler.
 *	Use either or both according to hardware.
 */
Inline void knl_clear_hw_timer_interrupt( void )
{
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	af00      	add	r7, sp, #0
	(void)in_w(SYST_CSR);			/* Clear COUNTFLAG */
 800c9e8:	4804      	ldr	r0, [pc, #16]	@ (800c9fc <knl_clear_hw_timer_interrupt+0x18>)
 800c9ea:	f7ff ff6e 	bl	800c8ca <in_w>
	out_w(SCB_ICSR, ICSR_PENDSTCLR);
 800c9ee:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800c9f2:	4803      	ldr	r0, [pc, #12]	@ (800ca00 <knl_clear_hw_timer_interrupt+0x1c>)
 800c9f4:	f7ff ff5c 	bl	800c8b0 <out_w>
}
 800c9f8:	bf00      	nop
 800c9fa:	bd80      	pop	{r7, pc}
 800c9fc:	e000e010 	.word	0xe000e010
 800ca00:	e000ed04 	.word	0xe000ed04

0800ca04 <knl_end_of_hw_timer_interrupt>:

Inline void knl_end_of_hw_timer_interrupt( void )
{
 800ca04:	b480      	push	{r7}
 800ca06:	af00      	add	r7, sp, #0
	/* No processing */
}
 800ca08:	bf00      	nop
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bc80      	pop	{r7}
 800ca0e:	4770      	bx	lr

0800ca10 <knl_terminate_hw_timer>:
 * Timer stop processing
 *	Stop the timer operation.
 *	Called when system stops.
 */
Inline void knl_terminate_hw_timer( void )
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	af00      	add	r7, sp, #0
	/* Timer interrupt disable */
	out_w(SYST_CSR, 0x00000000);
 800ca14:	2100      	movs	r1, #0
 800ca16:	4802      	ldr	r0, [pc, #8]	@ (800ca20 <knl_terminate_hw_timer+0x10>)
 800ca18:	f7ff ff4a 	bl	800c8b0 <out_w>
}
 800ca1c:	bf00      	nop
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	e000e010 	.word	0xe000e010

0800ca24 <knl_timer_startup>:

/*
 * Start system timer
 */
EXPORT ER knl_timer_startup( void )
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	af00      	add	r7, sp, #0
	knl_current_time = knl_real_time_ofs = uitoll(0);
 800ca28:	490a      	ldr	r1, [pc, #40]	@ (800ca54 <knl_timer_startup+0x30>)
 800ca2a:	f04f 0200 	mov.w	r2, #0
 800ca2e:	f04f 0300 	mov.w	r3, #0
 800ca32:	e9c1 2300 	strd	r2, r3, [r1]
 800ca36:	4b07      	ldr	r3, [pc, #28]	@ (800ca54 <knl_timer_startup+0x30>)
 800ca38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca3c:	4906      	ldr	r1, [pc, #24]	@ (800ca58 <knl_timer_startup+0x34>)
 800ca3e:	e9c1 2300 	strd	r2, r3, [r1]
	QueInit(&knl_timer_queue);
 800ca42:	4806      	ldr	r0, [pc, #24]	@ (800ca5c <knl_timer_startup+0x38>)
 800ca44:	f7ff ff4c 	bl	800c8e0 <QueInit>

	/* Start timer interrupt */
	knl_start_hw_timer();
 800ca48:	f7ff ffaa 	bl	800c9a0 <knl_start_hw_timer>

	return E_OK;
 800ca4c:	2300      	movs	r3, #0
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	bd80      	pop	{r7, pc}
 800ca52:	bf00      	nop
 800ca54:	240027d8 	.word	0x240027d8
 800ca58:	240027d0 	.word	0x240027d0
 800ca5c:	240027e0 	.word	0x240027e0

0800ca60 <knl_timer_shutdown>:
#if USE_SHUTDOWN
/*
 * Stop system timer
 */
EXPORT void knl_timer_shutdown( void )
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	af00      	add	r7, sp, #0
	knl_terminate_hw_timer();
 800ca64:	f7ff ffd4 	bl	800ca10 <knl_terminate_hw_timer>
}
 800ca68:	bf00      	nop
 800ca6a:	bd80      	pop	{r7, pc}

0800ca6c <knl_enqueue_tmeb>:

/*
 * Insert timer event to timer event queue
 */
LOCAL void knl_enqueue_tmeb( TMEB *event )
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b084      	sub	sp, #16
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
	QUEUE	*q;
	ABSTIM	ofs = lltoul(knl_current_time) - ABSTIM_DIFF_MIN;
 800ca74:	4b12      	ldr	r3, [pc, #72]	@ (800cac0 <knl_enqueue_tmeb+0x54>)
 800ca76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca7a:	4b12      	ldr	r3, [pc, #72]	@ (800cac4 <knl_enqueue_tmeb+0x58>)
 800ca7c:	4413      	add	r3, r2
 800ca7e:	60bb      	str	r3, [r7, #8]

	for ( q = knl_timer_queue.next; q != &knl_timer_queue; q = q->next ) {
 800ca80:	4b11      	ldr	r3, [pc, #68]	@ (800cac8 <knl_enqueue_tmeb+0x5c>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	60fb      	str	r3, [r7, #12]
 800ca86:	e00c      	b.n	800caa2 <knl_enqueue_tmeb+0x36>
		if ( (ABSTIM)(event->time - ofs) < (ABSTIM)((((TMEB*)q)->time) - ofs) ) {
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	689a      	ldr	r2, [r3, #8]
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	1ad2      	subs	r2, r2, r3
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	6899      	ldr	r1, [r3, #8]
 800ca94:	68bb      	ldr	r3, [r7, #8]
 800ca96:	1acb      	subs	r3, r1, r3
 800ca98:	429a      	cmp	r2, r3
 800ca9a:	d307      	bcc.n	800caac <knl_enqueue_tmeb+0x40>
	for ( q = knl_timer_queue.next; q != &knl_timer_queue; q = q->next ) {
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	60fb      	str	r3, [r7, #12]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	4a08      	ldr	r2, [pc, #32]	@ (800cac8 <knl_enqueue_tmeb+0x5c>)
 800caa6:	4293      	cmp	r3, r2
 800caa8:	d1ee      	bne.n	800ca88 <knl_enqueue_tmeb+0x1c>
 800caaa:	e000      	b.n	800caae <knl_enqueue_tmeb+0x42>
			break;
 800caac:	bf00      	nop
		}
	}
	QueInsert(&event->queue, q);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	68f9      	ldr	r1, [r7, #12]
 800cab2:	4618      	mov	r0, r3
 800cab4:	f7ff ff34 	bl	800c920 <QueInsert>
}
 800cab8:	bf00      	nop
 800caba:	3710      	adds	r7, #16
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}
 800cac0:	240027d0 	.word	0x240027d0
 800cac4:	80000001 	.word	0x80000001
 800cac8:	240027e0 	.word	0x240027e0

0800cacc <knl_timer_insert>:
 *	typedef	W		TMO;
 *	typedef UW		RELTIM;
 *	#define TMO_FEVR	(-1)
 */
EXPORT void knl_timer_insert( TMEB *event, TMO tmout, CBACK callback, void *arg )
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b084      	sub	sp, #16
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	60f8      	str	r0, [r7, #12]
 800cad4:	60b9      	str	r1, [r7, #8]
 800cad6:	607a      	str	r2, [r7, #4]
 800cad8:	603b      	str	r3, [r7, #0]
	event->callback = callback;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	687a      	ldr	r2, [r7, #4]
 800cade:	60da      	str	r2, [r3, #12]
	event->arg = arg;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	683a      	ldr	r2, [r7, #0]
 800cae4:	611a      	str	r2, [r3, #16]

	if ( tmout == TMO_FEVR ) {
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800caec:	d104      	bne.n	800caf8 <knl_timer_insert+0x2c>
		QueInit(&event->queue);
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	4618      	mov	r0, r3
 800caf2:	f7ff fef5 	bl	800c8e0 <QueInit>
		/* To guarantee longer wait time specified by 'tmout',
		   add TIMER_PERIOD on wait time */
		event->time = lltoul(knl_current_time) + tmout + TIMER_PERIOD;
		knl_enqueue_tmeb(event);
	}
}
 800caf6:	e00b      	b.n	800cb10 <knl_timer_insert+0x44>
		event->time = lltoul(knl_current_time) + tmout + TIMER_PERIOD;
 800caf8:	4b07      	ldr	r3, [pc, #28]	@ (800cb18 <knl_timer_insert+0x4c>)
 800cafa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cafe:	68bb      	ldr	r3, [r7, #8]
 800cb00:	4413      	add	r3, r2
 800cb02:	f103 020a 	add.w	r2, r3, #10
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	609a      	str	r2, [r3, #8]
		knl_enqueue_tmeb(event);
 800cb0a:	68f8      	ldr	r0, [r7, #12]
 800cb0c:	f7ff ffae 	bl	800ca6c <knl_enqueue_tmeb>
}
 800cb10:	bf00      	nop
 800cb12:	3710      	adds	r7, #16
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}
 800cb18:	240027d0 	.word	0x240027d0

0800cb1c <knl_timer_insert_reltim>:

EXPORT void knl_timer_insert_reltim( TMEB *event, RELTIM tmout, CBACK callback, void *arg )
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b084      	sub	sp, #16
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	60f8      	str	r0, [r7, #12]
 800cb24:	60b9      	str	r1, [r7, #8]
 800cb26:	607a      	str	r2, [r7, #4]
 800cb28:	603b      	str	r3, [r7, #0]
	event->callback = callback;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	687a      	ldr	r2, [r7, #4]
 800cb2e:	60da      	str	r2, [r3, #12]
	event->arg = arg;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	683a      	ldr	r2, [r7, #0]
 800cb34:	611a      	str	r2, [r3, #16]

	/* To guarantee longer wait time specified by 'tmout',
	   add TIMER_PERIOD on wait time */
	event->time = lltoul(knl_current_time) + tmout + TIMER_PERIOD;
 800cb36:	4b08      	ldr	r3, [pc, #32]	@ (800cb58 <knl_timer_insert_reltim+0x3c>)
 800cb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	4413      	add	r3, r2
 800cb40:	f103 020a 	add.w	r2, r3, #10
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	609a      	str	r2, [r3, #8]
	knl_enqueue_tmeb(event);
 800cb48:	68f8      	ldr	r0, [r7, #12]
 800cb4a:	f7ff ff8f 	bl	800ca6c <knl_enqueue_tmeb>
}
 800cb4e:	bf00      	nop
 800cb50:	3710      	adds	r7, #16
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
 800cb56:	bf00      	nop
 800cb58:	240027d0 	.word	0x240027d0

0800cb5c <knl_timer_insert_abs>:
 *	Register the timer event 'evt' onto the timer queue to start at the 
 *	(absolute) time 'time'.
 *	'time' is not an actual time. It is system operation time.
 */
EXPORT void knl_timer_insert_abs( TMEB *evt, ABSTIM time, CBACK cback, void *arg )
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	60f8      	str	r0, [r7, #12]
 800cb64:	60b9      	str	r1, [r7, #8]
 800cb66:	607a      	str	r2, [r7, #4]
 800cb68:	603b      	str	r3, [r7, #0]
	evt->callback = cback;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	687a      	ldr	r2, [r7, #4]
 800cb6e:	60da      	str	r2, [r3, #12]
	evt->arg = arg;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	683a      	ldr	r2, [r7, #0]
 800cb74:	611a      	str	r2, [r3, #16]
	evt->time = time;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	68ba      	ldr	r2, [r7, #8]
 800cb7a:	609a      	str	r2, [r3, #8]
	knl_enqueue_tmeb(evt);
 800cb7c:	68f8      	ldr	r0, [r7, #12]
 800cb7e:	f7ff ff75 	bl	800ca6c <knl_enqueue_tmeb>
}
 800cb82:	bf00      	nop
 800cb84:	3710      	adds	r7, #16
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
	...

0800cb8c <knl_timer_handler>:
 *	interval by hardware timer. Update the software clock and start the 
 *	timer event upon arriving at start time.
 */

EXPORT void knl_timer_handler( void )
{
 800cb8c:	b5b0      	push	{r4, r5, r7, lr}
 800cb8e:	b084      	sub	sp, #16
 800cb90:	af00      	add	r7, sp, #0
	TMEB	*event;
	ABSTIM	cur;

	knl_clear_hw_timer_interrupt();		/* Clear timer interrupt */
 800cb92:	f7ff ff27 	bl	800c9e4 <knl_clear_hw_timer_interrupt>

	BEGIN_CRITICAL_SECTION;
 800cb96:	f000 fdba 	bl	800d70e <disint>
 800cb9a:	60f8      	str	r0, [r7, #12]
	knl_current_time = ll_add(knl_current_time, uitoll(TIMER_PERIOD));
 800cb9c:	4b24      	ldr	r3, [pc, #144]	@ (800cc30 <knl_timer_handler+0xa4>)
 800cb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba2:	f112 040a 	adds.w	r4, r2, #10
 800cba6:	f143 0500 	adc.w	r5, r3, #0
 800cbaa:	4b21      	ldr	r3, [pc, #132]	@ (800cc30 <knl_timer_handler+0xa4>)
 800cbac:	e9c3 4500 	strd	r4, r5, [r3]
	cur = lltoul(knl_current_time);
 800cbb0:	4b1f      	ldr	r3, [pc, #124]	@ (800cc30 <knl_timer_handler+0xa4>)
 800cbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb6:	4613      	mov	r3, r2
 800cbb8:	60bb      	str	r3, [r7, #8]
		}
	}
#endif

	/* Execute event that passed occurring time. */
	while ( !isQueEmpty(&knl_timer_queue) ) {
 800cbba:	e019      	b.n	800cbf0 <knl_timer_handler+0x64>
		event = (TMEB*)knl_timer_queue.next;
 800cbbc:	4b1d      	ldr	r3, [pc, #116]	@ (800cc34 <knl_timer_handler+0xa8>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	607b      	str	r3, [r7, #4]

		if ( !knl_abstim_reached(cur, event->time) ) {
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	689b      	ldr	r3, [r3, #8]
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	68b8      	ldr	r0, [r7, #8]
 800cbca:	f7ff fed9 	bl	800c980 <knl_abstim_reached>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d014      	beq.n	800cbfe <knl_timer_handler+0x72>
			break;
		}

		QueRemove(&event->queue);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f7ff feba 	bl	800c950 <QueRemove>
		if ( event->callback != NULL ) {
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	68db      	ldr	r3, [r3, #12]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d005      	beq.n	800cbf0 <knl_timer_handler+0x64>
			(*event->callback)(event->arg);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	687a      	ldr	r2, [r7, #4]
 800cbea:	6912      	ldr	r2, [r2, #16]
 800cbec:	4610      	mov	r0, r2
 800cbee:	4798      	blx	r3
	while ( !isQueEmpty(&knl_timer_queue) ) {
 800cbf0:	4810      	ldr	r0, [pc, #64]	@ (800cc34 <knl_timer_handler+0xa8>)
 800cbf2:	f7ff fe84 	bl	800c8fe <isQueEmpty>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d0df      	beq.n	800cbbc <knl_timer_handler+0x30>
 800cbfc:	e000      	b.n	800cc00 <knl_timer_handler+0x74>
			break;
 800cbfe:	bf00      	nop
		}
	}

	END_CRITICAL_SECTION;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d10b      	bne.n	800cc1e <knl_timer_handler+0x92>
 800cc06:	4b0c      	ldr	r3, [pc, #48]	@ (800cc38 <knl_timer_handler+0xac>)
 800cc08:	681a      	ldr	r2, [r3, #0]
 800cc0a:	4b0c      	ldr	r3, [pc, #48]	@ (800cc3c <knl_timer_handler+0xb0>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	429a      	cmp	r2, r3
 800cc10:	d005      	beq.n	800cc1e <knl_timer_handler+0x92>
 800cc12:	4b0b      	ldr	r3, [pc, #44]	@ (800cc40 <knl_timer_handler+0xb4>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d101      	bne.n	800cc1e <knl_timer_handler+0x92>
 800cc1a:	f7f6 fe41 	bl	80038a0 <knl_dispatch>
 800cc1e:	68f8      	ldr	r0, [r7, #12]
 800cc20:	f000 fd5d 	bl	800d6de <set_basepri>

	knl_end_of_hw_timer_interrupt();		/* Clear timer interrupt */
 800cc24:	f7ff feee 	bl	800ca04 <knl_end_of_hw_timer_interrupt>
}
 800cc28:	bf00      	nop
 800cc2a:	3710      	adds	r7, #16
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bdb0      	pop	{r4, r5, r7, pc}
 800cc30:	240027d0 	.word	0x240027d0
 800cc34:	240027e0 	.word	0x240027e0
 800cc38:	24001870 	.word	0x24001870
 800cc3c:	24001874 	.word	0x24001874
 800cc40:	2400186c 	.word	0x2400186c

0800cc44 <knl_init_object>:

/*
 * Each kernel-object initialization
 */
EXPORT ER knl_init_object( void)
{	
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b082      	sub	sp, #8
 800cc48:	af00      	add	r7, sp, #0
	ER	ercd;

	ercd = knl_task_initialize();
 800cc4a:	f7fd fcb7 	bl	800a5bc <knl_task_initialize>
 800cc4e:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	da01      	bge.n	800cc5a <knl_init_object+0x16>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	e048      	b.n	800ccec <knl_init_object+0xa8>

#if USE_SEMAPHORE
	ercd = knl_semaphore_initialize();
 800cc5a:	f7fd f833 	bl	8009cc4 <knl_semaphore_initialize>
 800cc5e:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	da01      	bge.n	800cc6a <knl_init_object+0x26>
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	e040      	b.n	800ccec <knl_init_object+0xa8>
#endif
#if USE_EVENTFLAG
	ercd = knl_eventflag_initialize();
 800cc6a:	f7f9 f9f5 	bl	8006058 <knl_eventflag_initialize>
 800cc6e:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	da01      	bge.n	800cc7a <knl_init_object+0x36>
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	e038      	b.n	800ccec <knl_init_object+0xa8>
#endif
#if USE_MAILBOX
	ercd = knl_mailbox_initialize();
 800cc7a:	f7f9 ff83 	bl	8006b84 <knl_mailbox_initialize>
 800cc7e:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	da01      	bge.n	800cc8a <knl_init_object+0x46>
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	e030      	b.n	800ccec <knl_init_object+0xa8>
#endif
#if USE_MESSAGEBUFFER
	ercd = knl_messagebuffer_initialize();
 800cc8a:	f7fb fded 	bl	8008868 <knl_messagebuffer_initialize>
 800cc8e:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	da01      	bge.n	800cc9a <knl_init_object+0x56>
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	e028      	b.n	800ccec <knl_init_object+0xa8>
#if USE_LEGACY_API && USE_RENDEZVOUS
	ercd = knl_rendezvous_initialize();
	if(ercd < E_OK) return ercd;
#endif
#if USE_MUTEX
	ercd = knl_mutex_initialize();
 800cc9a:	f7fc fb93 	bl	80093c4 <knl_mutex_initialize>
 800cc9e:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	da01      	bge.n	800ccaa <knl_init_object+0x66>
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	e020      	b.n	800ccec <knl_init_object+0xa8>
#endif
#if USE_MEMORYPOOL
	ercd = knl_memorypool_initialize();
 800ccaa:	f7fb f899 	bl	8007de0 <knl_memorypool_initialize>
 800ccae:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	da01      	bge.n	800ccba <knl_init_object+0x76>
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	e018      	b.n	800ccec <knl_init_object+0xa8>
#endif
#if USE_FIX_MEMORYPOOL
	ercd = knl_fix_memorypool_initialize();
 800ccba:	f7fa fcef 	bl	800769c <knl_fix_memorypool_initialize>
 800ccbe:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	da01      	bge.n	800ccca <knl_init_object+0x86>
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	e010      	b.n	800ccec <knl_init_object+0xa8>
#endif
#if USE_CYCLICHANDLER
	ercd = knl_cyclichandler_initialize();
 800ccca:	f7ff f91b 	bl	800bf04 <knl_cyclichandler_initialize>
 800ccce:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	da01      	bge.n	800ccda <knl_init_object+0x96>
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	e008      	b.n	800ccec <knl_init_object+0xa8>
#endif
#if USE_ALARMHANDLER
	ercd = knl_alarmhandler_initialize();
 800ccda:	f7ff fbaf 	bl	800c43c <knl_alarmhandler_initialize>
 800ccde:	6078      	str	r0, [r7, #4]
	if(ercd < E_OK) return ercd;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	da01      	bge.n	800ccea <knl_init_object+0xa6>
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	e000      	b.n	800ccec <knl_init_object+0xa8>
#endif

	return E_OK;
 800ccea:	2300      	movs	r3, #0
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3708      	adds	r7, #8
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}

0800ccf4 <isQueEmpty>:
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b083      	sub	sp, #12
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
	return ( que->next == que )? TRUE: FALSE;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	687a      	ldr	r2, [r7, #4]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	bf0c      	ite	eq
 800cd06:	2301      	moveq	r3, #1
 800cd08:	2300      	movne	r3, #0
 800cd0a:	b2db      	uxtb	r3, r3
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	370c      	adds	r7, #12
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bc80      	pop	{r7}
 800cd14:	4770      	bx	lr

0800cd16 <QueInsert>:
{
 800cd16:	b480      	push	{r7}
 800cd18:	b083      	sub	sp, #12
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]
 800cd1e:	6039      	str	r1, [r7, #0]
	entry->prev = (struct queue*) que->prev;
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	685a      	ldr	r2, [r3, #4]
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	605a      	str	r2, [r3, #4]
	entry->next = que;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	683a      	ldr	r2, [r7, #0]
 800cd2c:	601a      	str	r2, [r3, #0]
	que->prev->next = entry;
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	685b      	ldr	r3, [r3, #4]
 800cd32:	687a      	ldr	r2, [r7, #4]
 800cd34:	601a      	str	r2, [r3, #0]
	que->prev = entry;
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	687a      	ldr	r2, [r7, #4]
 800cd3a:	605a      	str	r2, [r3, #4]
}
 800cd3c:	bf00      	nop
 800cd3e:	370c      	adds	r7, #12
 800cd40:	46bd      	mov	sp, r7
 800cd42:	bc80      	pop	{r7}
 800cd44:	4770      	bx	lr

0800cd46 <QueRemove>:
{
 800cd46:	b480      	push	{r7}
 800cd48:	b083      	sub	sp, #12
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
	if ( entry->next != entry ) {
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	687a      	ldr	r2, [r7, #4]
 800cd54:	429a      	cmp	r2, r3
 800cd56:	d009      	beq.n	800cd6c <QueRemove+0x26>
		entry->prev->next = (struct queue*) entry->next;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	685b      	ldr	r3, [r3, #4]
 800cd5c:	687a      	ldr	r2, [r7, #4]
 800cd5e:	6812      	ldr	r2, [r2, #0]
 800cd60:	601a      	str	r2, [r3, #0]
		entry->next->prev = (struct queue*) entry->prev;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	687a      	ldr	r2, [r7, #4]
 800cd68:	6852      	ldr	r2, [r2, #4]
 800cd6a:	605a      	str	r2, [r3, #4]
}
 800cd6c:	bf00      	nop
 800cd6e:	370c      	adds	r7, #12
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bc80      	pop	{r7}
 800cd74:	4770      	bx	lr

0800cd76 <knl_timer_delete>:
{
 800cd76:	b580      	push	{r7, lr}
 800cd78:	b082      	sub	sp, #8
 800cd7a:	af00      	add	r7, sp, #0
 800cd7c:	6078      	str	r0, [r7, #4]
	QueRemove(&event->queue);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	4618      	mov	r0, r3
 800cd82:	f7ff ffe0 	bl	800cd46 <QueRemove>
}
 800cd86:	bf00      	nop
 800cd88:	3708      	adds	r7, #8
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	bd80      	pop	{r7, pc}

0800cd8e <knl_queue_insert_tpri>:
{
 800cd8e:	b580      	push	{r7, lr}
 800cd90:	b088      	sub	sp, #32
 800cd92:	af00      	add	r7, sp, #0
 800cd94:	6078      	str	r0, [r7, #4]
 800cd96:	6039      	str	r1, [r7, #0]
	start = end = queue;
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	61bb      	str	r3, [r7, #24]
 800cd9c:	69bb      	ldr	r3, [r7, #24]
 800cd9e:	617b      	str	r3, [r7, #20]
	val = tcb->priority;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800cda6:	74fb      	strb	r3, [r7, #19]
	offset = offsetof(TCB, priority);
 800cda8:	2326      	movs	r3, #38	@ 0x26
 800cdaa:	60fb      	str	r3, [r7, #12]
	for ( q = start->next; q != end; q = q->next ) {
 800cdac:	697b      	ldr	r3, [r7, #20]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	61fb      	str	r3, [r7, #28]
 800cdb2:	e009      	b.n	800cdc8 <knl_queue_insert_tpri+0x3a>
		if ( *(UB*)((VB*)q + offset) > val ) {
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	69fa      	ldr	r2, [r7, #28]
 800cdb8:	4413      	add	r3, r2
 800cdba:	781b      	ldrb	r3, [r3, #0]
 800cdbc:	7cfa      	ldrb	r2, [r7, #19]
 800cdbe:	429a      	cmp	r2, r3
 800cdc0:	d307      	bcc.n	800cdd2 <knl_queue_insert_tpri+0x44>
	for ( q = start->next; q != end; q = q->next ) {
 800cdc2:	69fb      	ldr	r3, [r7, #28]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	61fb      	str	r3, [r7, #28]
 800cdc8:	69fa      	ldr	r2, [r7, #28]
 800cdca:	69bb      	ldr	r3, [r7, #24]
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	d1f1      	bne.n	800cdb4 <knl_queue_insert_tpri+0x26>
 800cdd0:	e000      	b.n	800cdd4 <knl_queue_insert_tpri+0x46>
			break;
 800cdd2:	bf00      	nop
	QueInsert(&tcb->tskque, q);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	69f9      	ldr	r1, [r7, #28]
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f7ff ff9c 	bl	800cd16 <QueInsert>
}
 800cdde:	bf00      	nop
 800cde0:	3720      	adds	r7, #32
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}

0800cde6 <knl_make_non_wait>:
 * Update the task state to release wait. When it becomes ready state,
 * connect to the ready queue.
 * Call when the task is in the wait state (including double wait).
 */
Inline void knl_make_non_wait( TCB *tcb )
{
 800cde6:	b580      	push	{r7, lr}
 800cde8:	b082      	sub	sp, #8
 800cdea:	af00      	add	r7, sp, #0
 800cdec:	6078      	str	r0, [r7, #4]
	if ( tcb->state == TS_WAIT ) {
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800cdf4:	2b02      	cmp	r3, #2
 800cdf6:	d103      	bne.n	800ce00 <knl_make_non_wait+0x1a>
		knl_make_ready(tcb);
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f7fd fc5d 	bl	800a6b8 <knl_make_ready>
	} else {
		tcb->state = TS_SUSPEND;
	}
}
 800cdfe:	e003      	b.n	800ce08 <knl_make_non_wait+0x22>
		tcb->state = TS_SUSPEND;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2204      	movs	r2, #4
 800ce04:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
}
 800ce08:	bf00      	nop
 800ce0a:	3708      	adds	r7, #8
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}

0800ce10 <knl_wait_release>:

/*
 * Release wait state of the task.
 */
Inline void knl_wait_release( TCB *tcb )
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b082      	sub	sp, #8
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
	knl_timer_delete(&tcb->wtmeb);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	334c      	adds	r3, #76	@ 0x4c
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7ff ffaa 	bl	800cd76 <knl_timer_delete>
	QueRemove(&tcb->tskque);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	4618      	mov	r0, r3
 800ce26:	f7ff ff8e 	bl	800cd46 <QueRemove>
	knl_make_non_wait(tcb);
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f7ff ffdb 	bl	800cde6 <knl_make_non_wait>
}
 800ce30:	bf00      	nop
 800ce32:	3708      	adds	r7, #8
 800ce34:	46bd      	mov	sp, r7
 800ce36:	bd80      	pop	{r7, pc}

0800ce38 <knl_wait_release_ok>:

#include "kernel.h"
#include "wait.h"

EXPORT void knl_wait_release_ok( TCB *tcb )
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
	knl_wait_release(tcb);
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f7ff ffe5 	bl	800ce10 <knl_wait_release>
	*tcb->wercd = E_OK;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	601a      	str	r2, [r3, #0]
}
 800ce4e:	bf00      	nop
 800ce50:	3708      	adds	r7, #8
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}

0800ce56 <knl_wait_release_ok_ercd>:

EXPORT void knl_wait_release_ok_ercd( TCB *tcb, ER ercd )
{
 800ce56:	b580      	push	{r7, lr}
 800ce58:	b082      	sub	sp, #8
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	6078      	str	r0, [r7, #4]
 800ce5e:	6039      	str	r1, [r7, #0]
	knl_wait_release(tcb);
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	f7ff ffd5 	bl	800ce10 <knl_wait_release>
	*tcb->wercd = ercd;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce6a:	683a      	ldr	r2, [r7, #0]
 800ce6c:	601a      	str	r2, [r3, #0]
}
 800ce6e:	bf00      	nop
 800ce70:	3708      	adds	r7, #8
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}

0800ce76 <knl_wait_release_ng>:

EXPORT void knl_wait_release_ng( TCB *tcb, ER ercd )
{
 800ce76:	b580      	push	{r7, lr}
 800ce78:	b082      	sub	sp, #8
 800ce7a:	af00      	add	r7, sp, #0
 800ce7c:	6078      	str	r0, [r7, #4]
 800ce7e:	6039      	str	r1, [r7, #0]
	knl_wait_release(tcb);
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f7ff ffc5 	bl	800ce10 <knl_wait_release>
	if ( tcb->wspec->rel_wai_hook != NULL ) {
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce8a:	689b      	ldr	r3, [r3, #8]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d004      	beq.n	800ce9a <knl_wait_release_ng+0x24>
		(*tcb->wspec->rel_wai_hook)(tcb);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce94:	689b      	ldr	r3, [r3, #8]
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	4798      	blx	r3
	}
	*tcb->wercd = ercd;
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce9e:	683a      	ldr	r2, [r7, #0]
 800cea0:	601a      	str	r2, [r3, #0]
}
 800cea2:	bf00      	nop
 800cea4:	3708      	adds	r7, #8
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}

0800ceaa <knl_wait_release_tmout>:

EXPORT void knl_wait_release_tmout( TCB *tcb )
{
 800ceaa:	b580      	push	{r7, lr}
 800ceac:	b082      	sub	sp, #8
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	6078      	str	r0, [r7, #4]
	QueRemove(&tcb->tskque);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f7ff ff46 	bl	800cd46 <QueRemove>
	knl_make_non_wait(tcb);
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f7ff ff93 	bl	800cde6 <knl_make_non_wait>
	if ( tcb->wspec->rel_wai_hook != NULL ) {
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cec4:	689b      	ldr	r3, [r3, #8]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d004      	beq.n	800ced4 <knl_wait_release_tmout+0x2a>
		(*tcb->wspec->rel_wai_hook)(tcb);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cece:	689b      	ldr	r3, [r3, #8]
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	4798      	blx	r3
	}
}
 800ced4:	bf00      	nop
 800ced6:	3708      	adds	r7, #8
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}

0800cedc <knl_make_wait>:
 *	typedef	W		TMO;
 *	typedef UW		RELTIM;
 *	#define TMO_FEVR	(-1)
 */
EXPORT void knl_make_wait( TMO tmout, ATR atr )
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b082      	sub	sp, #8
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	6039      	str	r1, [r7, #0]
	switch ( knl_ctxtsk->state ) {
 800cee6:	4b14      	ldr	r3, [pc, #80]	@ (800cf38 <knl_make_wait+0x5c>)
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800ceee:	2b01      	cmp	r3, #1
 800cef0:	d002      	beq.n	800cef8 <knl_make_wait+0x1c>
 800cef2:	2b04      	cmp	r3, #4
 800cef4:	d00b      	beq.n	800cf0e <knl_make_wait+0x32>
 800cef6:	e010      	b.n	800cf1a <knl_make_wait+0x3e>
	  case TS_READY:
		knl_make_non_ready(knl_ctxtsk);
 800cef8:	4b0f      	ldr	r3, [pc, #60]	@ (800cf38 <knl_make_wait+0x5c>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	4618      	mov	r0, r3
 800cefe:	f7fd fbf5 	bl	800a6ec <knl_make_non_ready>
		knl_ctxtsk->state = TS_WAIT;
 800cf02:	4b0d      	ldr	r3, [pc, #52]	@ (800cf38 <knl_make_wait+0x5c>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	2202      	movs	r2, #2
 800cf08:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		break;
 800cf0c:	e005      	b.n	800cf1a <knl_make_wait+0x3e>
	  case TS_SUSPEND:
		knl_ctxtsk->state = TS_WAITSUS;
 800cf0e:	4b0a      	ldr	r3, [pc, #40]	@ (800cf38 <knl_make_wait+0x5c>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	2206      	movs	r2, #6
 800cf14:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		break;
 800cf18:	bf00      	nop
	}
	knl_timer_insert(&knl_ctxtsk->wtmeb, tmout, (CBACK)knl_wait_release_tmout, knl_ctxtsk);
 800cf1a:	4b07      	ldr	r3, [pc, #28]	@ (800cf38 <knl_make_wait+0x5c>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 800cf22:	4b05      	ldr	r3, [pc, #20]	@ (800cf38 <knl_make_wait+0x5c>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	4a05      	ldr	r2, [pc, #20]	@ (800cf3c <knl_make_wait+0x60>)
 800cf28:	6879      	ldr	r1, [r7, #4]
 800cf2a:	f7ff fdcf 	bl	800cacc <knl_timer_insert>
}
 800cf2e:	bf00      	nop
 800cf30:	3708      	adds	r7, #8
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	24001870 	.word	0x24001870
 800cf3c:	0800ceab 	.word	0x0800ceab

0800cf40 <knl_make_wait_reltim>:

EXPORT void knl_make_wait_reltim( RELTIM tmout, ATR atr )
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b082      	sub	sp, #8
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
 800cf48:	6039      	str	r1, [r7, #0]
	switch ( knl_ctxtsk->state ) {
 800cf4a:	4b14      	ldr	r3, [pc, #80]	@ (800cf9c <knl_make_wait_reltim+0x5c>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800cf52:	2b01      	cmp	r3, #1
 800cf54:	d002      	beq.n	800cf5c <knl_make_wait_reltim+0x1c>
 800cf56:	2b04      	cmp	r3, #4
 800cf58:	d00b      	beq.n	800cf72 <knl_make_wait_reltim+0x32>
 800cf5a:	e010      	b.n	800cf7e <knl_make_wait_reltim+0x3e>
	  case TS_READY:
		knl_make_non_ready(knl_ctxtsk);
 800cf5c:	4b0f      	ldr	r3, [pc, #60]	@ (800cf9c <knl_make_wait_reltim+0x5c>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	4618      	mov	r0, r3
 800cf62:	f7fd fbc3 	bl	800a6ec <knl_make_non_ready>
		knl_ctxtsk->state = TS_WAIT;
 800cf66:	4b0d      	ldr	r3, [pc, #52]	@ (800cf9c <knl_make_wait_reltim+0x5c>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	2202      	movs	r2, #2
 800cf6c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		break;
 800cf70:	e005      	b.n	800cf7e <knl_make_wait_reltim+0x3e>
	  case TS_SUSPEND:
		knl_ctxtsk->state = TS_WAITSUS;
 800cf72:	4b0a      	ldr	r3, [pc, #40]	@ (800cf9c <knl_make_wait_reltim+0x5c>)
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	2206      	movs	r2, #6
 800cf78:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
		break;
 800cf7c:	bf00      	nop
	}
	knl_timer_insert_reltim(&knl_ctxtsk->wtmeb, tmout, (CBACK)knl_wait_release_tmout, knl_ctxtsk);
 800cf7e:	4b07      	ldr	r3, [pc, #28]	@ (800cf9c <knl_make_wait_reltim+0x5c>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 800cf86:	4b05      	ldr	r3, [pc, #20]	@ (800cf9c <knl_make_wait_reltim+0x5c>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	4a05      	ldr	r2, [pc, #20]	@ (800cfa0 <knl_make_wait_reltim+0x60>)
 800cf8c:	6879      	ldr	r1, [r7, #4]
 800cf8e:	f7ff fdc5 	bl	800cb1c <knl_timer_insert_reltim>
}
 800cf92:	bf00      	nop
 800cf94:	3708      	adds	r7, #8
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}
 800cf9a:	bf00      	nop
 800cf9c:	24001870 	.word	0x24001870
 800cfa0:	0800ceab 	.word	0x0800ceab

0800cfa4 <knl_wait_delete>:
/*
 * Release all tasks connected to the wait queue, and define it
 * as E_DLT error.
 */
EXPORT void knl_wait_delete( QUEUE *wait_queue )
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b084      	sub	sp, #16
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
	TCB	*tcb;

	while ( !isQueEmpty(wait_queue) ) {
 800cfac:	e00a      	b.n	800cfc4 <knl_wait_delete+0x20>
		tcb = (TCB*)wait_queue->next;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	60fb      	str	r3, [r7, #12]
		knl_wait_release(tcb);
 800cfb4:	68f8      	ldr	r0, [r7, #12]
 800cfb6:	f7ff ff2b 	bl	800ce10 <knl_wait_release>
		*tcb->wercd = E_DLT;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfbe:	f06f 0232 	mvn.w	r2, #50	@ 0x32
 800cfc2:	601a      	str	r2, [r3, #0]
	while ( !isQueEmpty(wait_queue) ) {
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f7ff fe95 	bl	800ccf4 <isQueEmpty>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d0ee      	beq.n	800cfae <knl_wait_delete+0xa>
	}
}
 800cfd0:	bf00      	nop
 800cfd2:	bf00      	nop
 800cfd4:	3710      	adds	r7, #16
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}

0800cfda <knl_wait_tskid>:

/*
 * Get ID of the head task in the wait queue.
 */
EXPORT ID knl_wait_tskid( QUEUE *wait_queue )
{
 800cfda:	b580      	push	{r7, lr}
 800cfdc:	b082      	sub	sp, #8
 800cfde:	af00      	add	r7, sp, #0
 800cfe0:	6078      	str	r0, [r7, #4]
	if ( isQueEmpty(wait_queue) ) {
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f7ff fe86 	bl	800ccf4 <isQueEmpty>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d001      	beq.n	800cff2 <knl_wait_tskid+0x18>
		return 0;
 800cfee:	2300      	movs	r3, #0
 800cff0:	e002      	b.n	800cff8 <knl_wait_tskid+0x1e>
	}

	return ((TCB*)wait_queue->next)->tskid;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	689b      	ldr	r3, [r3, #8]
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	3708      	adds	r7, #8
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}

0800d000 <knl_gcb_make_wait>:
/*
 * Change the active task state to wait state and connect to the timer wait 
 * queue and the object wait queue. Also set 'wid' in 'knl_ctxtsk'.
 */
EXPORT void knl_gcb_make_wait( GCB *gcb, TMO tmout )
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b082      	sub	sp, #8
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
 800d008:	6039      	str	r1, [r7, #0]
	*knl_ctxtsk->wercd = E_TMOUT;
 800d00a:	4b17      	ldr	r3, [pc, #92]	@ (800d068 <knl_gcb_make_wait+0x68>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d010:	f06f 0231 	mvn.w	r2, #49	@ 0x31
 800d014:	601a      	str	r2, [r3, #0]
	if ( tmout != TMO_POL ) {
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d020      	beq.n	800d05e <knl_gcb_make_wait+0x5e>
		knl_ctxtsk->wid = gcb->objid;
 800d01c:	4b12      	ldr	r3, [pc, #72]	@ (800d068 <knl_gcb_make_wait+0x68>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	687a      	ldr	r2, [r7, #4]
 800d022:	6892      	ldr	r2, [r2, #8]
 800d024:	631a      	str	r2, [r3, #48]	@ 0x30
		knl_make_wait(tmout, gcb->objatr);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	691b      	ldr	r3, [r3, #16]
 800d02a:	4619      	mov	r1, r3
 800d02c:	6838      	ldr	r0, [r7, #0]
 800d02e:	f7ff ff55 	bl	800cedc <knl_make_wait>
		if ( (gcb->objatr & TA_TPRI) != 0 ) {
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	691b      	ldr	r3, [r3, #16]
 800d036:	f003 0301 	and.w	r3, r3, #1
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d007      	beq.n	800d04e <knl_gcb_make_wait+0x4e>
			knl_queue_insert_tpri(knl_ctxtsk, &gcb->wait_queue);
 800d03e:	4b0a      	ldr	r3, [pc, #40]	@ (800d068 <knl_gcb_make_wait+0x68>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	687a      	ldr	r2, [r7, #4]
 800d044:	4611      	mov	r1, r2
 800d046:	4618      	mov	r0, r3
 800d048:	f7ff fea1 	bl	800cd8e <knl_queue_insert_tpri>
		} else {
			QueInsert(&knl_ctxtsk->tskque, &gcb->wait_queue);
		}
	}
}
 800d04c:	e007      	b.n	800d05e <knl_gcb_make_wait+0x5e>
			QueInsert(&knl_ctxtsk->tskque, &gcb->wait_queue);
 800d04e:	4b06      	ldr	r3, [pc, #24]	@ (800d068 <knl_gcb_make_wait+0x68>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	461a      	mov	r2, r3
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	4619      	mov	r1, r3
 800d058:	4610      	mov	r0, r2
 800d05a:	f7ff fe5c 	bl	800cd16 <QueInsert>
}
 800d05e:	bf00      	nop
 800d060:	3708      	adds	r7, #8
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}
 800d066:	bf00      	nop
 800d068:	24001870 	.word	0x24001870

0800d06c <knl_gcb_change_priority>:
 * When the task priority changes, adjust the task position at the wait queue.
 * It is called only if the object attribute TA_TPRI is specified.
 *
 */
EXPORT void knl_gcb_change_priority( GCB *gcb, TCB *tcb )
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b082      	sub	sp, #8
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
 800d074:	6039      	str	r1, [r7, #0]
	QueRemove(&tcb->tskque);
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	4618      	mov	r0, r3
 800d07a:	f7ff fe64 	bl	800cd46 <QueRemove>
	knl_queue_insert_tpri(tcb, &gcb->wait_queue);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	4619      	mov	r1, r3
 800d082:	6838      	ldr	r0, [r7, #0]
 800d084:	f7ff fe83 	bl	800cd8e <knl_queue_insert_tpri>
}
 800d088:	bf00      	nop
 800d08a:	3708      	adds	r7, #8
 800d08c:	46bd      	mov	sp, r7
 800d08e:	bd80      	pop	{r7, pc}

0800d090 <knl_gcb_top_of_wait_queue>:
 * Search the first task of wait queue include "tcb" with target.
 * (Not insert "tcb" into wait queue.)
 *
 */
EXPORT TCB* knl_gcb_top_of_wait_queue( GCB *gcb, TCB *tcb )
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b084      	sub	sp, #16
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	6039      	str	r1, [r7, #0]
	TCB	*q;

	if ( isQueEmpty(&gcb->wait_queue) ) {
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	4618      	mov	r0, r3
 800d09e:	f7ff fe29 	bl	800ccf4 <isQueEmpty>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d001      	beq.n	800d0ac <knl_gcb_top_of_wait_queue+0x1c>
		return tcb;
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	e015      	b.n	800d0d8 <knl_gcb_top_of_wait_queue+0x48>
	}

	q = (TCB*)gcb->wait_queue.next;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	60fb      	str	r3, [r7, #12]
	if ( (gcb->objatr & TA_TPRI) == 0 ) {
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	691b      	ldr	r3, [r3, #16]
 800d0b6:	f003 0301 	and.w	r3, r3, #1
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d101      	bne.n	800d0c2 <knl_gcb_top_of_wait_queue+0x32>
		return q;
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	e00a      	b.n	800d0d8 <knl_gcb_top_of_wait_queue+0x48>
	}

	return ( tcb->priority < q->priority )? tcb: q;
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	d201      	bcs.n	800d0d6 <knl_gcb_top_of_wait_queue+0x46>
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	e000      	b.n	800d0d8 <knl_gcb_top_of_wait_queue+0x48>
 800d0d6:	68fb      	ldr	r3, [r7, #12]
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3710      	adds	r7, #16
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}

0800d0e0 <knl_memset>:
#include "kernel.h"

/*** binary operation ***/
/* memset : fill memory area */
void* knl_memset( void *s, int c, SZ n )
{
 800d0e0:	b4f0      	push	{r4, r5, r6, r7}
 800d0e2:	b084      	sub	sp, #16
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	60f8      	str	r0, [r7, #12]
 800d0e8:	60b9      	str	r1, [r7, #8]
 800d0ea:	607a      	str	r2, [r7, #4]
	register unsigned char *cp, cval;
	register unsigned long *lp, lval;

	cp = (unsigned char *)s;
 800d0ec:	68fc      	ldr	r4, [r7, #12]
	cval = (unsigned char)c;
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	b2dd      	uxtb	r5, r3
	
	if (n < 8) {
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2b07      	cmp	r3, #7
 800d0f6:	dc12      	bgt.n	800d11e <knl_memset+0x3e>
		while (n-- > 0) {
 800d0f8:	e003      	b.n	800d102 <knl_memset+0x22>
			*cp++ = cval;
 800d0fa:	4623      	mov	r3, r4
 800d0fc:	1c5c      	adds	r4, r3, #1
 800d0fe:	462a      	mov	r2, r5
 800d100:	701a      	strb	r2, [r3, #0]
		while (n-- > 0) {
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	1e5a      	subs	r2, r3, #1
 800d106:	607a      	str	r2, [r7, #4]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	dcf6      	bgt.n	800d0fa <knl_memset+0x1a>
		}
		return s;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	e02e      	b.n	800d16e <knl_memset+0x8e>
	}

	while ((long)cp % 4) {
		--n;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	3b01      	subs	r3, #1
 800d114:	607b      	str	r3, [r7, #4]
		*cp++ = cval;
 800d116:	4623      	mov	r3, r4
 800d118:	1c5c      	adds	r4, r3, #1
 800d11a:	462a      	mov	r2, r5
 800d11c:	701a      	strb	r2, [r3, #0]
	while ((long)cp % 4) {
 800d11e:	4623      	mov	r3, r4
 800d120:	f003 0303 	and.w	r3, r3, #3
 800d124:	2b00      	cmp	r3, #0
 800d126:	d1f3      	bne.n	800d110 <knl_memset+0x30>
	}

	lp = (unsigned long *)cp;
 800d128:	4626      	mov	r6, r4
	lval = (unsigned long)cval |
 800d12a:	462a      	mov	r2, r5
 800d12c:	4613      	mov	r3, r2
 800d12e:	021b      	lsls	r3, r3, #8
 800d130:	441a      	add	r2, r3
		(unsigned long)cval << 8 |
		(unsigned long)cval << 16 |
 800d132:	462b      	mov	r3, r5
 800d134:	041b      	lsls	r3, r3, #16
		(unsigned long)cval << 8 |
 800d136:	431a      	orrs	r2, r3
		(unsigned long)cval << 24;
 800d138:	462b      	mov	r3, r5
 800d13a:	061b      	lsls	r3, r3, #24
	lval = (unsigned long)cval |
 800d13c:	ea42 0403 	orr.w	r4, r2, r3

	while (n >= 4) {
 800d140:	e005      	b.n	800d14e <knl_memset+0x6e>
		*lp++ = lval;
 800d142:	4633      	mov	r3, r6
 800d144:	1d1e      	adds	r6, r3, #4
 800d146:	601c      	str	r4, [r3, #0]
		n -= 4;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	3b04      	subs	r3, #4
 800d14c:	607b      	str	r3, [r7, #4]
	while (n >= 4) {
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2b03      	cmp	r3, #3
 800d152:	dcf6      	bgt.n	800d142 <knl_memset+0x62>
	}

	cp = (unsigned char *)lp;
 800d154:	4634      	mov	r4, r6
	while (n) {
 800d156:	e006      	b.n	800d166 <knl_memset+0x86>
		*cp++ = cval;
 800d158:	4623      	mov	r3, r4
 800d15a:	1c5c      	adds	r4, r3, #1
 800d15c:	462a      	mov	r2, r5
 800d15e:	701a      	strb	r2, [r3, #0]
		--n;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	3b01      	subs	r3, #1
 800d164:	607b      	str	r3, [r7, #4]
	while (n) {
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d1f5      	bne.n	800d158 <knl_memset+0x78>
	}

	return s;
 800d16c:	68fb      	ldr	r3, [r7, #12]
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3710      	adds	r7, #16
 800d172:	46bd      	mov	sp, r7
 800d174:	bcf0      	pop	{r4, r5, r6, r7}
 800d176:	4770      	bx	lr

0800d178 <knl_memcpy>:

/* memcpy : copy memory */
void* knl_memcpy( void *dst, const void *src, SZ n )
{
 800d178:	b4b0      	push	{r4, r5, r7}
 800d17a:	b085      	sub	sp, #20
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	60f8      	str	r0, [r7, #12]
 800d180:	60b9      	str	r1, [r7, #8]
 800d182:	607a      	str	r2, [r7, #4]
	register unsigned char *cdst, *csrc;

	cdst = (unsigned char *)dst;
 800d184:	68fc      	ldr	r4, [r7, #12]
	csrc = (unsigned char *)src;
 800d186:	68bd      	ldr	r5, [r7, #8]
	while (n-- > 0) {
 800d188:	e005      	b.n	800d196 <knl_memcpy+0x1e>
		*cdst++ = *csrc++;
 800d18a:	462a      	mov	r2, r5
 800d18c:	1c55      	adds	r5, r2, #1
 800d18e:	4623      	mov	r3, r4
 800d190:	1c5c      	adds	r4, r3, #1
 800d192:	7812      	ldrb	r2, [r2, #0]
 800d194:	701a      	strb	r2, [r3, #0]
	while (n-- > 0) {
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	1e5a      	subs	r2, r3, #1
 800d19a:	607a      	str	r2, [r7, #4]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	dcf4      	bgt.n	800d18a <knl_memcpy+0x12>
	}

	return dst;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3714      	adds	r7, #20
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bcb0      	pop	{r4, r5, r7}
 800d1aa:	4770      	bx	lr

0800d1ac <knl_strlen>:

/* strlen : get text string length */
SZ knl_strlen( const char *s )
{
 800d1ac:	b490      	push	{r4, r7}
 800d1ae:	b082      	sub	sp, #8
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
	register char *cp;

	cp = (char *)s;
 800d1b4:	687c      	ldr	r4, [r7, #4]
	while (*cp) {
 800d1b6:	e000      	b.n	800d1ba <knl_strlen+0xe>
		++cp;
 800d1b8:	3401      	adds	r4, #1
	while (*cp) {
 800d1ba:	7823      	ldrb	r3, [r4, #0]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d1fb      	bne.n	800d1b8 <knl_strlen+0xc>
	}
	return (SZ)(cp - s);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	1ae3      	subs	r3, r4, r3
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3708      	adds	r7, #8
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bc90      	pop	{r4, r7}
 800d1cc:	4770      	bx	lr

0800d1ce <knl_strcpy>:

/* strcpy : copy text string */
char* knl_strcpy( char *dst, const char *src )
{
 800d1ce:	b490      	push	{r4, r7}
 800d1d0:	b082      	sub	sp, #8
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	6078      	str	r0, [r7, #4]
 800d1d6:	6039      	str	r1, [r7, #0]
	register char *cp;

	cp = dst;
 800d1d8:	687c      	ldr	r4, [r7, #4]
	do {
		*cp++ = *src;
 800d1da:	4623      	mov	r3, r4
 800d1dc:	1c5c      	adds	r4, r3, #1
 800d1de:	683a      	ldr	r2, [r7, #0]
 800d1e0:	7812      	ldrb	r2, [r2, #0]
 800d1e2:	701a      	strb	r2, [r3, #0]
	} while (*src++);
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	1c5a      	adds	r2, r3, #1
 800d1e8:	603a      	str	r2, [r7, #0]
 800d1ea:	781b      	ldrb	r3, [r3, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d1f4      	bne.n	800d1da <knl_strcpy+0xc>

	return dst;
 800d1f0:	687b      	ldr	r3, [r7, #4]
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3708      	adds	r7, #8
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bc90      	pop	{r4, r7}
 800d1fa:	4770      	bx	lr

0800d1fc <knl_strncpy>:

char* knl_strncpy( char *dst, const char *src, SZ n )
{
 800d1fc:	b490      	push	{r4, r7}
 800d1fe:	b084      	sub	sp, #16
 800d200:	af00      	add	r7, sp, #0
 800d202:	60f8      	str	r0, [r7, #12]
 800d204:	60b9      	str	r1, [r7, #8]
 800d206:	607a      	str	r2, [r7, #4]
	register char *cp;

	cp = dst;
 800d208:	68fc      	ldr	r4, [r7, #12]
	do {
		if (n-- <= 0) {
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	1e5a      	subs	r2, r3, #1
 800d20e:	607a      	str	r2, [r7, #4]
 800d210:	2b00      	cmp	r3, #0
 800d212:	dc01      	bgt.n	800d218 <knl_strncpy+0x1c>
			return dst;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	e015      	b.n	800d244 <knl_strncpy+0x48>
		}
		*cp++ = *src;
 800d218:	4623      	mov	r3, r4
 800d21a:	1c5c      	adds	r4, r3, #1
 800d21c:	68ba      	ldr	r2, [r7, #8]
 800d21e:	7812      	ldrb	r2, [r2, #0]
 800d220:	701a      	strb	r2, [r3, #0]
	} while (*src++);
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	1c5a      	adds	r2, r3, #1
 800d226:	60ba      	str	r2, [r7, #8]
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d1ed      	bne.n	800d20a <knl_strncpy+0xe>

	while (n-- > 0) {
 800d22e:	e003      	b.n	800d238 <knl_strncpy+0x3c>
		*cp++ = 0;
 800d230:	4623      	mov	r3, r4
 800d232:	1c5c      	adds	r4, r3, #1
 800d234:	2200      	movs	r2, #0
 800d236:	701a      	strb	r2, [r3, #0]
	while (n-- > 0) {
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	1e5a      	subs	r2, r3, #1
 800d23c:	607a      	str	r2, [r7, #4]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	dcf6      	bgt.n	800d230 <knl_strncpy+0x34>
	}

	return dst;
 800d242:	68fb      	ldr	r3, [r7, #12]
}
 800d244:	4618      	mov	r0, r3
 800d246:	3710      	adds	r7, #16
 800d248:	46bd      	mov	sp, r7
 800d24a:	bc90      	pop	{r4, r7}
 800d24c:	4770      	bx	lr

0800d24e <knl_strcmp>:

/* strcmp : perform text string comparison */
int knl_strcmp( const char *s1, const char *s2 )
{
 800d24e:	b490      	push	{r4, r7}
 800d250:	b082      	sub	sp, #8
 800d252:	af00      	add	r7, sp, #0
 800d254:	6078      	str	r0, [r7, #4]
 800d256:	6039      	str	r1, [r7, #0]
	register int result;

	while (*s1) {
 800d258:	e00d      	b.n	800d276 <knl_strcmp+0x28>
		result = (unsigned char)*s1++ - (unsigned char)*s2++;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	1c5a      	adds	r2, r3, #1
 800d25e:	607a      	str	r2, [r7, #4]
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	4619      	mov	r1, r3
 800d264:	683b      	ldr	r3, [r7, #0]
 800d266:	1c5a      	adds	r2, r3, #1
 800d268:	603a      	str	r2, [r7, #0]
 800d26a:	781b      	ldrb	r3, [r3, #0]
 800d26c:	1acc      	subs	r4, r1, r3
		if (result) {
 800d26e:	2c00      	cmp	r4, #0
 800d270:	d001      	beq.n	800d276 <knl_strcmp+0x28>
			return result;
 800d272:	4623      	mov	r3, r4
 800d274:	e009      	b.n	800d28a <knl_strcmp+0x3c>
	while (*s1) {
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	781b      	ldrb	r3, [r3, #0]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d1ed      	bne.n	800d25a <knl_strcmp+0xc>
		}
	}

	return (unsigned char)*s1 - (unsigned char)*s2;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	461a      	mov	r2, r3
 800d284:	683b      	ldr	r3, [r7, #0]
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	1ad3      	subs	r3, r2, r3
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	3708      	adds	r7, #8
 800d28e:	46bd      	mov	sp, r7
 800d290:	bc90      	pop	{r4, r7}
 800d292:	4770      	bx	lr

0800d294 <knl_strcat>:

/* strcat : perform text string concatenation */
char* knl_strcat( char *dst, const char *src )
{
 800d294:	b490      	push	{r4, r7}
 800d296:	b082      	sub	sp, #8
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
 800d29c:	6039      	str	r1, [r7, #0]
	register char *cp;

	cp = dst;
 800d29e:	687c      	ldr	r4, [r7, #4]
	while (*cp) {
 800d2a0:	e000      	b.n	800d2a4 <knl_strcat+0x10>
		++cp;
 800d2a2:	3401      	adds	r4, #1
	while (*cp) {
 800d2a4:	7823      	ldrb	r3, [r4, #0]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d1fb      	bne.n	800d2a2 <knl_strcat+0xe>
	}

	while (*src) {
 800d2aa:	e006      	b.n	800d2ba <knl_strcat+0x26>
		*cp++ = *src++;
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	1c5a      	adds	r2, r3, #1
 800d2b0:	603a      	str	r2, [r7, #0]
 800d2b2:	4622      	mov	r2, r4
 800d2b4:	1c54      	adds	r4, r2, #1
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	7013      	strb	r3, [r2, #0]
	while (*src) {
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	781b      	ldrb	r3, [r3, #0]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d1f4      	bne.n	800d2ac <knl_strcat+0x18>
	}
	*cp = '\0';
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	7023      	strb	r3, [r4, #0]

	return dst;
 800d2c6:	687b      	ldr	r3, [r7, #4]
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	3708      	adds	r7, #8
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bc90      	pop	{r4, r7}
 800d2d0:	4770      	bx	lr
 * (2)initialize and start the user application by the user
 * initial task.
 */

WEAK_FUNC EXPORT INT	usermain( void )
{
 800d2d2:	b480      	push	{r7}
 800d2d4:	af00      	add	r7, sp, #0
	return 0;
 800d2d6:	2300      	movs	r3, #0
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bc80      	pop	{r7}
 800d2de:	4770      	bx	lr

0800d2e0 <Inc>:
 *	Increment/Decrement and evaluation of the associated result must
 *	be executed exclusively.
 */

Inline INT Inc( FastLock *lock )
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b084      	sub	sp, #16
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
	UINT	imask;
	INT	c;
	DI(imask);
 800d2e8:	f000 fa11 	bl	800d70e <disint>
 800d2ec:	60f8      	str	r0, [r7, #12]
	c = ++lock->cnt;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	1c5a      	adds	r2, r3, #1
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	601a      	str	r2, [r3, #0]
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	60bb      	str	r3, [r7, #8]
	EI(imask);
 800d2fe:	68f8      	ldr	r0, [r7, #12]
 800d300:	f000 f9ed 	bl	800d6de <set_basepri>
	return c;
 800d304:	68bb      	ldr	r3, [r7, #8]
}
 800d306:	4618      	mov	r0, r3
 800d308:	3710      	adds	r7, #16
 800d30a:	46bd      	mov	sp, r7
 800d30c:	bd80      	pop	{r7, pc}

0800d30e <Dec>:
Inline INT Dec( FastLock *lock )
{
 800d30e:	b580      	push	{r7, lr}
 800d310:	b084      	sub	sp, #16
 800d312:	af00      	add	r7, sp, #0
 800d314:	6078      	str	r0, [r7, #4]
	UINT	imask;
	INT	c;
	DI(imask);
 800d316:	f000 f9fa 	bl	800d70e <disint>
 800d31a:	60f8      	str	r0, [r7, #12]
	c = lock->cnt--;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	1e59      	subs	r1, r3, #1
 800d322:	687a      	ldr	r2, [r7, #4]
 800d324:	6011      	str	r1, [r2, #0]
 800d326:	60bb      	str	r3, [r7, #8]
	EI(imask);
 800d328:	68f8      	ldr	r0, [r7, #12]
 800d32a:	f000 f9d8 	bl	800d6de <set_basepri>
	return c;
 800d32e:	68bb      	ldr	r3, [r7, #8]
}
 800d330:	4618      	mov	r0, r3
 800d332:	3710      	adds	r7, #16
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}

0800d338 <Lock>:

/*
 * Lock 
 */
EXPORT void Lock( FastLock *lock )
{
 800d338:	b580      	push	{r7, lr}
 800d33a:	b082      	sub	sp, #8
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
	if ( Inc(lock) > 0 ) {
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f7ff ffcd 	bl	800d2e0 <Inc>
 800d346:	4603      	mov	r3, r0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	dd07      	ble.n	800d35c <Lock+0x24>
		tk_wai_sem(lock->id, 1, TMO_FEVR);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	685b      	ldr	r3, [r3, #4]
 800d350:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d354:	2101      	movs	r1, #1
 800d356:	4618      	mov	r0, r3
 800d358:	f7fc fe7c 	bl	800a054 <tk_wai_sem>
	}
}
 800d35c:	bf00      	nop
 800d35e:	3708      	adds	r7, #8
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}

0800d364 <Unlock>:

/*
 * Lock release
 */
EXPORT void Unlock( FastLock *lock )
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b082      	sub	sp, #8
 800d368:	af00      	add	r7, sp, #0
 800d36a:	6078      	str	r0, [r7, #4]
	if ( Dec(lock) > 0 ) {
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f7ff ffce 	bl	800d30e <Dec>
 800d372:	4603      	mov	r3, r0
 800d374:	2b00      	cmp	r3, #0
 800d376:	dd05      	ble.n	800d384 <Unlock+0x20>
		tk_sig_sem(lock->id, 1);
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	685b      	ldr	r3, [r3, #4]
 800d37c:	2101      	movs	r1, #1
 800d37e:	4618      	mov	r0, r3
 800d380:	f7fc fd90 	bl	8009ea4 <tk_sig_sem>
	}
}
 800d384:	bf00      	nop
 800d386:	3708      	adds	r7, #8
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <CreateLock>:

/*
 * Create high-speed lock 
 */
EXPORT ER CreateLock( FastLock *lock, CONST UB *name )
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b08a      	sub	sp, #40	@ 0x28
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	6039      	str	r1, [r7, #0]
	T_CSEM	csem;
	ER	ercd;

	csem.sematr  = TA_TPRI;
 800d396:	2301      	movs	r3, #1
 800d398:	60fb      	str	r3, [r7, #12]
	csem.isemcnt = 0;
 800d39a:	2300      	movs	r3, #0
 800d39c:	613b      	str	r3, [r7, #16]
	csem.maxsem  = 1;
 800d39e:	2301      	movs	r3, #1
 800d3a0:	617b      	str	r3, [r7, #20]
	SetOBJNAME(csem.exinf, "FLOC");
 800d3a2:	f107 0308 	add.w	r3, r7, #8
 800d3a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800d3a8:	4b16      	ldr	r3, [pc, #88]	@ (800d404 <CreateLock+0x78>)
 800d3aa:	623b      	str	r3, [r7, #32]
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	61fb      	str	r3, [r7, #28]
 800d3b0:	e00a      	b.n	800d3c8 <CreateLock+0x3c>
 800d3b2:	6a3a      	ldr	r2, [r7, #32]
 800d3b4:	1c53      	adds	r3, r2, #1
 800d3b6:	623b      	str	r3, [r7, #32]
 800d3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ba:	1c59      	adds	r1, r3, #1
 800d3bc:	6279      	str	r1, [r7, #36]	@ 0x24
 800d3be:	7812      	ldrb	r2, [r2, #0]
 800d3c0:	701a      	strb	r2, [r3, #0]
 800d3c2:	69fb      	ldr	r3, [r7, #28]
 800d3c4:	3301      	adds	r3, #1
 800d3c6:	61fb      	str	r3, [r7, #28]
 800d3c8:	69fb      	ldr	r3, [r7, #28]
 800d3ca:	2b03      	cmp	r3, #3
 800d3cc:	ddf1      	ble.n	800d3b2 <CreateLock+0x26>

	ercd = tk_cre_sem(&csem);
 800d3ce:	f107 0308 	add.w	r3, r7, #8
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7fc fc9c 	bl	8009d10 <tk_cre_sem>
 800d3d8:	61b8      	str	r0, [r7, #24]
	if ( ercd < E_OK ) {
 800d3da:	69bb      	ldr	r3, [r7, #24]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	da01      	bge.n	800d3e4 <CreateLock+0x58>
		return ercd;
 800d3e0:	69bb      	ldr	r3, [r7, #24]
 800d3e2:	e00a      	b.n	800d3fa <CreateLock+0x6e>
	}

	lock->id = ercd;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	69ba      	ldr	r2, [r7, #24]
 800d3e8:	605a      	str	r2, [r3, #4]
	lock->cnt = -1;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d3f0:	601a      	str	r2, [r3, #0]
	lock->name = name;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	683a      	ldr	r2, [r7, #0]
 800d3f6:	609a      	str	r2, [r3, #8]
  
	return E_OK;
 800d3f8:	2300      	movs	r3, #0
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	3728      	adds	r7, #40	@ 0x28
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}
 800d402:	bf00      	nop
 800d404:	0800ec08 	.word	0x0800ec08

0800d408 <DeleteLock>:

/*
 * Delete high-speed lock
 */
EXPORT void DeleteLock( FastLock *lock )
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b082      	sub	sp, #8
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	6078      	str	r0, [r7, #4]
	if ( lock->id > 0 ) {
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	685b      	ldr	r3, [r3, #4]
 800d414:	2b00      	cmp	r3, #0
 800d416:	dd04      	ble.n	800d422 <DeleteLock+0x1a>
		tk_del_sem(lock->id);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	685b      	ldr	r3, [r3, #4]
 800d41c:	4618      	mov	r0, r3
 800d41e:	f7fc fcf1 	bl	8009e04 <tk_del_sem>
	}
	lock->id = 0;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2200      	movs	r2, #0
 800d426:	605a      	str	r2, [r3, #4]
}
 800d428:	bf00      	nop
 800d42a:	3708      	adds	r7, #8
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <INC>:
 *
 *	The above must be operated exclusively.
 */

Inline void INC( INT *val )
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
	UINT	imask;

	DI(imask);
 800d438:	f000 f969 	bl	800d70e <disint>
 800d43c:	60f8      	str	r0, [r7, #12]
	(*val)++;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	1c5a      	adds	r2, r3, #1
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	601a      	str	r2, [r3, #0]
	EI(imask);
 800d448:	68f8      	ldr	r0, [r7, #12]
 800d44a:	f000 f948 	bl	800d6de <set_basepri>
}
 800d44e:	bf00      	nop
 800d450:	3710      	adds	r7, #16
 800d452:	46bd      	mov	sp, r7
 800d454:	bd80      	pop	{r7, pc}

0800d456 <DEC>:

Inline void DEC( INT *val )
{
 800d456:	b580      	push	{r7, lr}
 800d458:	b084      	sub	sp, #16
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	6078      	str	r0, [r7, #4]
	UINT	imask;

	DI(imask);
 800d45e:	f000 f956 	bl	800d70e <disint>
 800d462:	60f8      	str	r0, [r7, #12]
	(*val)--;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	1e5a      	subs	r2, r3, #1
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	601a      	str	r2, [r3, #0]
	EI(imask);
 800d46e:	68f8      	ldr	r0, [r7, #12]
 800d470:	f000 f935 	bl	800d6de <set_basepri>
}
 800d474:	bf00      	nop
 800d476:	3710      	adds	r7, #16
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}

0800d47c <BTS>:

Inline BOOL BTS( UINT *val, INT no )
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b086      	sub	sp, #24
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	6039      	str	r1, [r7, #0]
	UINT	imask;
	UINT	b;
	UINT	bm = (UINT)(1 << no);
 800d486:	2201      	movs	r2, #1
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	fa02 f303 	lsl.w	r3, r2, r3
 800d48e:	617b      	str	r3, [r7, #20]

	DI(imask);
 800d490:	f000 f93d 	bl	800d70e <disint>
 800d494:	6138      	str	r0, [r7, #16]
	b = *val & bm;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	697a      	ldr	r2, [r7, #20]
 800d49c:	4013      	ands	r3, r2
 800d49e:	60fb      	str	r3, [r7, #12]
	*val |= bm;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681a      	ldr	r2, [r3, #0]
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	431a      	orrs	r2, r3
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	601a      	str	r2, [r3, #0]
	EI(imask);
 800d4ac:	6938      	ldr	r0, [r7, #16]
 800d4ae:	f000 f916 	bl	800d6de <set_basepri>
	return (BOOL)b;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
}
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	3718      	adds	r7, #24
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}

0800d4bc <BR>:

Inline void BR( UINT *val, INT no )
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b084      	sub	sp, #16
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
 800d4c4:	6039      	str	r1, [r7, #0]
	UINT	imask;

	DI(imask);
 800d4c6:	f000 f922 	bl	800d70e <disint>
 800d4ca:	60f8      	str	r0, [r7, #12]
	*val &= ~(UINT)(1 << no);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681a      	ldr	r2, [r3, #0]
 800d4d0:	2101      	movs	r1, #1
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	fa01 f303 	lsl.w	r3, r1, r3
 800d4d8:	43db      	mvns	r3, r3
 800d4da:	401a      	ands	r2, r3
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	601a      	str	r2, [r3, #0]
	EI(imask);
 800d4e0:	68f8      	ldr	r0, [r7, #12]
 800d4e2:	f000 f8fc 	bl	800d6de <set_basepri>
}
 800d4e6:	bf00      	nop
 800d4e8:	3710      	adds	r7, #16
 800d4ea:	46bd      	mov	sp, r7
 800d4ec:	bd80      	pop	{r7, pc}

0800d4ee <MLockTmo>:
/*
 * Lock with wait time designation 
 *	no	lock number 0 - 31 
 */
EXPORT ER MLockTmo( FastMLock *lock, INT no, TMO tmo )
{
 800d4ee:	b580      	push	{r7, lr}
 800d4f0:	b08a      	sub	sp, #40	@ 0x28
 800d4f2:	af02      	add	r7, sp, #8
 800d4f4:	60f8      	str	r0, [r7, #12]
 800d4f6:	60b9      	str	r1, [r7, #8]
 800d4f8:	607a      	str	r2, [r7, #4]
	UINT	ptn = (UINT)(1 << no);
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	fa02 f303 	lsl.w	r3, r2, r3
 800d502:	61bb      	str	r3, [r7, #24]
	UINT	flg;
	ER	ercd;

	INC(&lock->wai);
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	3304      	adds	r3, #4
 800d508:	4618      	mov	r0, r3
 800d50a:	f7ff ff91 	bl	800d430 <INC>
	for ( ;; ) {
		if ( !BTS(&lock->flg, no) ) {
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	68b9      	ldr	r1, [r7, #8]
 800d512:	4618      	mov	r0, r3
 800d514:	f7ff ffb2 	bl	800d47c <BTS>
 800d518:	4603      	mov	r3, r0
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d102      	bne.n	800d524 <MLockTmo+0x36>
			ercd = E_OK;
 800d51e:	2300      	movs	r3, #0
 800d520:	61fb      	str	r3, [r7, #28]
			break;
 800d522:	e010      	b.n	800d546 <MLockTmo+0x58>
		}

		ercd = tk_wai_flg(lock->id, ptn, TWF_ORW|TWF_BITCLR, &flg, tmo);
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	6898      	ldr	r0, [r3, #8]
 800d528:	f107 0214 	add.w	r2, r7, #20
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	9300      	str	r3, [sp, #0]
 800d530:	4613      	mov	r3, r2
 800d532:	2221      	movs	r2, #33	@ 0x21
 800d534:	69b9      	ldr	r1, [r7, #24]
 800d536:	f7f8 ff51 	bl	80063dc <tk_wai_flg>
 800d53a:	61f8      	str	r0, [r7, #28]
		if ( ercd < E_OK ) {
 800d53c:	69fb      	ldr	r3, [r7, #28]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	db00      	blt.n	800d544 <MLockTmo+0x56>
		if ( !BTS(&lock->flg, no) ) {
 800d542:	e7e4      	b.n	800d50e <MLockTmo+0x20>
			break;
 800d544:	bf00      	nop
		}
	}
	DEC(&lock->wai);
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	3304      	adds	r3, #4
 800d54a:	4618      	mov	r0, r3
 800d54c:	f7ff ff83 	bl	800d456 <DEC>

	return ercd;
 800d550:	69fb      	ldr	r3, [r7, #28]
}
 800d552:	4618      	mov	r0, r3
 800d554:	3720      	adds	r7, #32
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}

0800d55a <MLock>:
/*
 * Lock 
 *	no	Lock number 0 - 31 
 */
EXPORT ER MLock( FastMLock *lock, INT no )
{
 800d55a:	b580      	push	{r7, lr}
 800d55c:	b082      	sub	sp, #8
 800d55e:	af00      	add	r7, sp, #0
 800d560:	6078      	str	r0, [r7, #4]
 800d562:	6039      	str	r1, [r7, #0]
	return MLockTmo(lock, no, TMO_FEVR);
 800d564:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d568:	6839      	ldr	r1, [r7, #0]
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f7ff ffbf 	bl	800d4ee <MLockTmo>
 800d570:	4603      	mov	r3, r0
}
 800d572:	4618      	mov	r0, r3
 800d574:	3708      	adds	r7, #8
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}

0800d57a <MUnlock>:
/*
 * Lock release 
 *	no	Lock number 0 - 31 
 */
EXPORT ER MUnlock( FastMLock *lock, INT no )
{
 800d57a:	b580      	push	{r7, lr}
 800d57c:	b084      	sub	sp, #16
 800d57e:	af00      	add	r7, sp, #0
 800d580:	6078      	str	r0, [r7, #4]
 800d582:	6039      	str	r1, [r7, #0]
	UINT	ptn = (UINT)(1 << no);
 800d584:	2201      	movs	r2, #1
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	fa02 f303 	lsl.w	r3, r2, r3
 800d58c:	60fb      	str	r3, [r7, #12]
	ER	ercd;

	BR(&lock->flg, no);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6839      	ldr	r1, [r7, #0]
 800d592:	4618      	mov	r0, r3
 800d594:	f7ff ff92 	bl	800d4bc <BR>
	ercd = ( lock->wai == 0 )? E_OK: tk_set_flg(lock->id, ptn);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	685b      	ldr	r3, [r3, #4]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d007      	beq.n	800d5b0 <MUnlock+0x36>
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	689b      	ldr	r3, [r3, #8]
 800d5a4:	68f9      	ldr	r1, [r7, #12]
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f7f8 fe2c 	bl	8006204 <tk_set_flg>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	e000      	b.n	800d5b2 <MUnlock+0x38>
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	60bb      	str	r3, [r7, #8]

	return ercd;
 800d5b4:	68bb      	ldr	r3, [r7, #8]
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3710      	adds	r7, #16
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
	...

0800d5c0 <CreateMLock>:

/*
 * Create multi-lock 
 */
EXPORT ER CreateMLock( FastMLock *lock, CONST UB *name )
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b08a      	sub	sp, #40	@ 0x28
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	6078      	str	r0, [r7, #4]
 800d5c8:	6039      	str	r1, [r7, #0]
	T_CFLG	cflg;
	ER	ercd;

	cflg.flgatr  = TA_TPRI | TA_WMUL;
 800d5ca:	2309      	movs	r3, #9
 800d5cc:	613b      	str	r3, [r7, #16]
	cflg.iflgptn = 0;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	617b      	str	r3, [r7, #20]
	SetOBJNAME(cflg.exinf, "MLOC");
 800d5d2:	f107 030c 	add.w	r3, r7, #12
 800d5d6:	627b      	str	r3, [r7, #36]	@ 0x24
 800d5d8:	4b17      	ldr	r3, [pc, #92]	@ (800d638 <CreateMLock+0x78>)
 800d5da:	623b      	str	r3, [r7, #32]
 800d5dc:	2300      	movs	r3, #0
 800d5de:	61fb      	str	r3, [r7, #28]
 800d5e0:	e00a      	b.n	800d5f8 <CreateMLock+0x38>
 800d5e2:	6a3a      	ldr	r2, [r7, #32]
 800d5e4:	1c53      	adds	r3, r2, #1
 800d5e6:	623b      	str	r3, [r7, #32]
 800d5e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5ea:	1c59      	adds	r1, r3, #1
 800d5ec:	6279      	str	r1, [r7, #36]	@ 0x24
 800d5ee:	7812      	ldrb	r2, [r2, #0]
 800d5f0:	701a      	strb	r2, [r3, #0]
 800d5f2:	69fb      	ldr	r3, [r7, #28]
 800d5f4:	3301      	adds	r3, #1
 800d5f6:	61fb      	str	r3, [r7, #28]
 800d5f8:	69fb      	ldr	r3, [r7, #28]
 800d5fa:	2b03      	cmp	r3, #3
 800d5fc:	ddf1      	ble.n	800d5e2 <CreateMLock+0x22>

	lock->id = ercd = tk_cre_flg(&cflg);
 800d5fe:	f107 030c 	add.w	r3, r7, #12
 800d602:	4618      	mov	r0, r3
 800d604:	f7f8 fd4e 	bl	80060a4 <tk_cre_flg>
 800d608:	61b8      	str	r0, [r7, #24]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	69ba      	ldr	r2, [r7, #24]
 800d60e:	609a      	str	r2, [r3, #8]
	if ( ercd < E_OK ) {
 800d610:	69bb      	ldr	r3, [r7, #24]
 800d612:	2b00      	cmp	r3, #0
 800d614:	da01      	bge.n	800d61a <CreateMLock+0x5a>
		return ercd;
 800d616:	69bb      	ldr	r3, [r7, #24]
 800d618:	e009      	b.n	800d62e <CreateMLock+0x6e>
	}

	lock->wai = 0;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2200      	movs	r2, #0
 800d61e:	605a      	str	r2, [r3, #4]
	lock->flg = 0;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2200      	movs	r2, #0
 800d624:	601a      	str	r2, [r3, #0]
	lock->name = name;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	683a      	ldr	r2, [r7, #0]
 800d62a:	60da      	str	r2, [r3, #12]

	return E_OK;
 800d62c:	2300      	movs	r3, #0
}
 800d62e:	4618      	mov	r0, r3
 800d630:	3728      	adds	r7, #40	@ 0x28
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}
 800d636:	bf00      	nop
 800d638:	0800ec10 	.word	0x0800ec10

0800d63c <DeleteMLock>:

/*
 * Delete multi-lock 
 */
EXPORT ER DeleteMLock( FastMLock *lock )
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b084      	sub	sp, #16
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
	ER	ercd;

	if ( lock->id <= 0 ) {
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	689b      	ldr	r3, [r3, #8]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	dc02      	bgt.n	800d652 <DeleteMLock+0x16>
		return E_PAR;
 800d64c:	f06f 0310 	mvn.w	r3, #16
 800d650:	e00e      	b.n	800d670 <DeleteMLock+0x34>
	}

	ercd = tk_del_flg(lock->id);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	689b      	ldr	r3, [r3, #8]
 800d656:	4618      	mov	r0, r3
 800d658:	f7f8 fd84 	bl	8006164 <tk_del_flg>
 800d65c:	60f8      	str	r0, [r7, #12]
	if ( ercd < E_OK ) {
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	2b00      	cmp	r3, #0
 800d662:	da01      	bge.n	800d668 <DeleteMLock+0x2c>
		return ercd;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	e003      	b.n	800d670 <DeleteMLock+0x34>
	}

	lock->id = 0;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2200      	movs	r2, #0
 800d66c:	609a      	str	r2, [r3, #8]

	return E_OK;
 800d66e:	2300      	movs	r3, #0
}
 800d670:	4618      	mov	r0, r3
 800d672:	3710      	adds	r7, #16
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}

0800d678 <Kmalloc>:
/* --------------------------------------------------------------------- */
/*
 * Memory allocation API definition
 */
EXPORT void* Kmalloc( size_t size )
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b082      	sub	sp, #8
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
	return knl_Imalloc(size);
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f7f9 fe27 	bl	80072d4 <knl_Imalloc>
 800d686:	4603      	mov	r3, r0
}
 800d688:	4618      	mov	r0, r3
 800d68a:	3708      	adds	r7, #8
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <Kcalloc>:

EXPORT void* Kcalloc( size_t nmemb, size_t size )
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	6039      	str	r1, [r7, #0]
	return knl_Icalloc(nmemb, size);
 800d69a:	6839      	ldr	r1, [r7, #0]
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f7f9 fe6f 	bl	8007380 <knl_Icalloc>
 800d6a2:	4603      	mov	r3, r0
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3708      	adds	r7, #8
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <Krealloc>:

EXPORT void *Krealloc( void *ptr, size_t size)
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b082      	sub	sp, #8
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	6039      	str	r1, [r7, #0]
	return knl_Irealloc(ptr, size);
 800d6b6:	6839      	ldr	r1, [r7, #0]
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f7f9 fe7e 	bl	80073ba <knl_Irealloc>
 800d6be:	4603      	mov	r3, r0
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3708      	adds	r7, #8
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <Kfree>:

EXPORT void Kfree( void *ptr )
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b082      	sub	sp, #8
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
	knl_Ifree(ptr);
 800d6d0:	6878      	ldr	r0, [r7, #4]
 800d6d2:	f7f9 fea7 	bl	8007424 <knl_Ifree>
}
 800d6d6:	bf00      	nop
 800d6d8:	3708      	adds	r7, #8
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}

0800d6de <set_basepri>:

/*
 * Set Base Priority register
 */
EXPORT void set_basepri(UW intsts)
{	
 800d6de:	b480      	push	{r7}
 800d6e0:	b083      	sub	sp, #12
 800d6e2:	af00      	add	r7, sp, #0
 800d6e4:	6078      	str	r0, [r7, #4]
	Asm("msr basepri, %0":: "r"(intsts));
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	f383 8811 	msr	BASEPRI, r3
}
 800d6ec:	bf00      	nop
 800d6ee:	370c      	adds	r7, #12
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bc80      	pop	{r7}
 800d6f4:	4770      	bx	lr

0800d6f6 <get_basepri>:

/*
 * Get Base Priority register
 */
EXPORT UW get_basepri(void)
{
 800d6f6:	b480      	push	{r7}
 800d6f8:	b083      	sub	sp, #12
 800d6fa:	af00      	add	r7, sp, #0
	UW	basepri;

	Asm("mrs %0, basepri": "=r"(basepri));
 800d6fc:	f3ef 8311 	mrs	r3, BASEPRI
 800d700:	607b      	str	r3, [r7, #4]
	return basepri;
 800d702:	687b      	ldr	r3, [r7, #4]
}
 800d704:	4618      	mov	r0, r3
 800d706:	370c      	adds	r7, #12
 800d708:	46bd      	mov	sp, r7
 800d70a:	bc80      	pop	{r7}
 800d70c:	4770      	bx	lr

0800d70e <disint>:

/* 
 * Disable interrupt 
 */
EXPORT UW disint(void)
{
 800d70e:	b480      	push	{r7}
 800d710:	b083      	sub	sp, #12
 800d712:	af00      	add	r7, sp, #0
	UW	intsts, maxint;

	maxint = INTPRI_VAL(INTPRI_MAX_EXTINT_PRI);
 800d714:	2310      	movs	r3, #16
 800d716:	607b      	str	r3, [r7, #4]
	Asm("mrs %0, basepri": "=r"(intsts));
 800d718:	f3ef 8311 	mrs	r3, BASEPRI
 800d71c:	603b      	str	r3, [r7, #0]
	Asm("msr basepri, %0":: "r"(maxint));
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f383 8811 	msr	BASEPRI, r3

	return intsts;
 800d724:	683b      	ldr	r3, [r7, #0]
}
 800d726:	4618      	mov	r0, r3
 800d728:	370c      	adds	r7, #12
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bc80      	pop	{r7}
 800d72e:	4770      	bx	lr

0800d730 <SetCpuIntLevel>:

/*
 * Set Interrupt Mask Level in CPU
 */
EXPORT void SetCpuIntLevel( INT level )
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b082      	sub	sp, #8
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
	set_basepri((level+1) << (8-INTPRI_BITWIDTH));
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	3301      	adds	r3, #1
 800d73c:	011b      	lsls	r3, r3, #4
 800d73e:	4618      	mov	r0, r3
 800d740:	f7ff ffcd 	bl	800d6de <set_basepri>
}
 800d744:	bf00      	nop
 800d746:	3708      	adds	r7, #8
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <GetCpuIntLevel>:

/*
 * Get Interrupt Mask Level in CPU
 */
EXPORT INT GetCpuIntLevel( void )
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b082      	sub	sp, #8
 800d750:	af00      	add	r7, sp, #0
	INT	lv;

	lv = (INT)(get_basepri() >>(8-INTPRI_BITWIDTH)) -1;
 800d752:	f7ff ffd0 	bl	800d6f6 <get_basepri>
 800d756:	4603      	mov	r3, r0
 800d758:	091b      	lsrs	r3, r3, #4
 800d75a:	3b01      	subs	r3, #1
 800d75c:	607b      	str	r3, [r7, #4]
	return lv<0?INTLEVEL_EI:lv;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2b00      	cmp	r3, #0
 800d762:	db01      	blt.n	800d768 <GetCpuIntLevel+0x1c>
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	e000      	b.n	800d76a <GetCpuIntLevel+0x1e>
 800d768:	23ff      	movs	r3, #255	@ 0xff
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3708      	adds	r7, #8
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}
	...

0800d774 <EnableInt_nvic>:

/*
 * Enable interrupt for NVIC
 */
EXPORT void EnableInt_nvic( UINT intno, INT level )
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b084      	sub	sp, #16
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
 800d77c:	6039      	str	r1, [r7, #0]
	UINT	imask;
	
	DI(imask);
 800d77e:	f7ff ffc6 	bl	800d70e <disint>
 800d782:	60f8      	str	r0, [r7, #12]
	/* Set interrupt priority level. */
	*(_UB*)(NVIC_IPR(intno)) = (UB)INTPRI_GROUP(level, 0);
 800d784:	683b      	ldr	r3, [r7, #0]
 800d786:	0119      	lsls	r1, r3, #4
 800d788:	687a      	ldr	r2, [r7, #4]
 800d78a:	4b0b      	ldr	r3, [pc, #44]	@ (800d7b8 <EnableInt_nvic+0x44>)
 800d78c:	4413      	add	r3, r2
 800d78e:	b2ca      	uxtb	r2, r1
 800d790:	701a      	strb	r2, [r3, #0]

	/* Enables the specified interrupt. */
	*(_UW*)(NVIC_ISER(intno)) = (0x01U << (intno % 32));
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f003 021f 	and.w	r2, r3, #31
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	095b      	lsrs	r3, r3, #5
 800d79c:	0099      	lsls	r1, r3, #2
 800d79e:	4b07      	ldr	r3, [pc, #28]	@ (800d7bc <EnableInt_nvic+0x48>)
 800d7a0:	440b      	add	r3, r1
 800d7a2:	4619      	mov	r1, r3
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	4093      	lsls	r3, r2
 800d7a8:	600b      	str	r3, [r1, #0]

	EI(imask);
 800d7aa:	68f8      	ldr	r0, [r7, #12]
 800d7ac:	f7ff ff97 	bl	800d6de <set_basepri>
}
 800d7b0:	bf00      	nop
 800d7b2:	3710      	adds	r7, #16
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}
 800d7b8:	e000e400 	.word	0xe000e400
 800d7bc:	e000e100 	.word	0xe000e100

0800d7c0 <in_w>:
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b083      	sub	sp, #12
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
	return *(_UW*)port;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	370c      	adds	r7, #12
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bc80      	pop	{r7}
 800d7d4:	4770      	bx	lr
	...

0800d7d8 <wait_us>:

#include <tk/tkernel.h>
#include <config.h>

LOCAL void wait_us( UW usec )
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b088      	sub	sp, #32
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
	UW	max, pre, cur, ofs, rem;

	max = in_w(SYST_RVR);
 800d7e0:	481c      	ldr	r0, [pc, #112]	@ (800d854 <wait_us+0x7c>)
 800d7e2:	f7ff ffed 	bl	800d7c0 <in_w>
 800d7e6:	6178      	str	r0, [r7, #20]
	rem = max * usec / (TIMER_PERIOD * 1000) + 1;
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	687a      	ldr	r2, [r7, #4]
 800d7ec:	fb02 f303 	mul.w	r3, r2, r3
 800d7f0:	4a19      	ldr	r2, [pc, #100]	@ (800d858 <wait_us+0x80>)
 800d7f2:	fba2 2303 	umull	r2, r3, r2, r3
 800d7f6:	0b5b      	lsrs	r3, r3, #13
 800d7f8:	3301      	adds	r3, #1
 800d7fa:	61bb      	str	r3, [r7, #24]

	cur = in_w(SYST_CVR) & 0x00ffffff;
 800d7fc:	4817      	ldr	r0, [pc, #92]	@ (800d85c <wait_us+0x84>)
 800d7fe:	f7ff ffdf 	bl	800d7c0 <in_w>
 800d802:	4603      	mov	r3, r0
 800d804:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d808:	61fb      	str	r3, [r7, #28]

	for ( ;; ) {
		pre = cur;
 800d80a:	69fb      	ldr	r3, [r7, #28]
 800d80c:	613b      	str	r3, [r7, #16]
		cur = in_w(SYST_CVR) & 0x00ffffff;
 800d80e:	4813      	ldr	r0, [pc, #76]	@ (800d85c <wait_us+0x84>)
 800d810:	f7ff ffd6 	bl	800d7c0 <in_w>
 800d814:	4603      	mov	r3, r0
 800d816:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d81a:	61fb      	str	r3, [r7, #28]

		ofs = (pre >= cur) ? (pre - cur) : (pre + max - cur);
 800d81c:	693a      	ldr	r2, [r7, #16]
 800d81e:	69fb      	ldr	r3, [r7, #28]
 800d820:	429a      	cmp	r2, r3
 800d822:	d303      	bcc.n	800d82c <wait_us+0x54>
 800d824:	693a      	ldr	r2, [r7, #16]
 800d826:	69fb      	ldr	r3, [r7, #28]
 800d828:	1ad3      	subs	r3, r2, r3
 800d82a:	e004      	b.n	800d836 <wait_us+0x5e>
 800d82c:	693a      	ldr	r2, [r7, #16]
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	441a      	add	r2, r3
 800d832:	69fb      	ldr	r3, [r7, #28]
 800d834:	1ad3      	subs	r3, r2, r3
 800d836:	60fb      	str	r3, [r7, #12]
		if ( ofs >= rem ) {
 800d838:	68fa      	ldr	r2, [r7, #12]
 800d83a:	69bb      	ldr	r3, [r7, #24]
 800d83c:	429a      	cmp	r2, r3
 800d83e:	d204      	bcs.n	800d84a <wait_us+0x72>
			break;
		}
		rem -= ofs;
 800d840:	69ba      	ldr	r2, [r7, #24]
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	1ad3      	subs	r3, r2, r3
 800d846:	61bb      	str	r3, [r7, #24]
		pre = cur;
 800d848:	e7df      	b.n	800d80a <wait_us+0x32>
			break;
 800d84a:	bf00      	nop
	}
}
 800d84c:	bf00      	nop
 800d84e:	3720      	adds	r7, #32
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}
 800d854:	e000e014 	.word	0xe000e014
 800d858:	d1b71759 	.word	0xd1b71759
 800d85c:	e000e018 	.word	0xe000e018

0800d860 <WaitUsec>:

/* maximum time (in microseconds) that wait_us() can handle at a time */
#define WAIT_US_STEP 10000

EXPORT void WaitUsec( UW usec )
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b082      	sub	sp, #8
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
	for ( ; usec >= WAIT_US_STEP; usec -= WAIT_US_STEP ) {
 800d868:	e007      	b.n	800d87a <WaitUsec+0x1a>
		wait_us(WAIT_US_STEP);
 800d86a:	f242 7010 	movw	r0, #10000	@ 0x2710
 800d86e:	f7ff ffb3 	bl	800d7d8 <wait_us>
	for ( ; usec >= WAIT_US_STEP; usec -= WAIT_US_STEP ) {
 800d872:	687a      	ldr	r2, [r7, #4]
 800d874:	4b07      	ldr	r3, [pc, #28]	@ (800d894 <WaitUsec+0x34>)
 800d876:	4413      	add	r3, r2
 800d878:	607b      	str	r3, [r7, #4]
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	f242 720f 	movw	r2, #9999	@ 0x270f
 800d880:	4293      	cmp	r3, r2
 800d882:	d8f2      	bhi.n	800d86a <WaitUsec+0xa>
	}
	wait_us(usec);
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f7ff ffa7 	bl	800d7d8 <wait_us>
}
 800d88a:	bf00      	nop
 800d88c:	3708      	adds	r7, #8
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}
 800d892:	bf00      	nop
 800d894:	ffffd8f0 	.word	0xffffd8f0

0800d898 <WaitNsec>:

EXPORT void WaitNsec( UW nsec )
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b082      	sub	sp, #8
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
	for ( ; nsec >= (WAIT_US_STEP * 1000); nsec -= (WAIT_US_STEP * 1000) ) {
 800d8a0:	e007      	b.n	800d8b2 <WaitNsec+0x1a>
		wait_us(WAIT_US_STEP);
 800d8a2:	f242 7010 	movw	r0, #10000	@ 0x2710
 800d8a6:	f7ff ff97 	bl	800d7d8 <wait_us>
	for ( ; nsec >= (WAIT_US_STEP * 1000); nsec -= (WAIT_US_STEP * 1000) ) {
 800d8aa:	687a      	ldr	r2, [r7, #4]
 800d8ac:	4b09      	ldr	r3, [pc, #36]	@ (800d8d4 <WaitNsec+0x3c>)
 800d8ae:	4413      	add	r3, r2
 800d8b0:	607b      	str	r3, [r7, #4]
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	4a08      	ldr	r2, [pc, #32]	@ (800d8d8 <WaitNsec+0x40>)
 800d8b6:	4293      	cmp	r3, r2
 800d8b8:	d2f3      	bcs.n	800d8a2 <WaitNsec+0xa>
	}
	wait_us(nsec / 1000 + 1);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	4a07      	ldr	r2, [pc, #28]	@ (800d8dc <WaitNsec+0x44>)
 800d8be:	fba2 2303 	umull	r2, r3, r2, r3
 800d8c2:	099b      	lsrs	r3, r3, #6
 800d8c4:	3301      	adds	r3, #1
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7ff ff86 	bl	800d7d8 <wait_us>
}
 800d8cc:	bf00      	nop
 800d8ce:	3708      	adds	r7, #8
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	bd80      	pop	{r7, pc}
 800d8d4:	ff676980 	.word	0xff676980
 800d8d8:	00989680 	.word	0x00989680
 800d8dc:	10624dd3 	.word	0x10624dd3

0800d8e0 <DisableInt_nvic>:

/*
 * Disable interrupt for NVIC
 */
Inline void DisableInt_nvic( UINT intno )
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b083      	sub	sp, #12
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
	*(_UW*)(NVIC_ICER(intno)) = (0x01U << (intno % 32));
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	f003 021f 	and.w	r2, r3, #31
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	095b      	lsrs	r3, r3, #5
 800d8f2:	0099      	lsls	r1, r3, #2
 800d8f4:	4b05      	ldr	r3, [pc, #20]	@ (800d90c <DisableInt_nvic+0x2c>)
 800d8f6:	440b      	add	r3, r1
 800d8f8:	4619      	mov	r1, r3
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	4093      	lsls	r3, r2
 800d8fe:	600b      	str	r3, [r1, #0]
}
 800d900:	bf00      	nop
 800d902:	370c      	adds	r7, #12
 800d904:	46bd      	mov	sp, r7
 800d906:	bc80      	pop	{r7}
 800d908:	4770      	bx	lr
 800d90a:	bf00      	nop
 800d90c:	e000e180 	.word	0xe000e180

0800d910 <ClearInt_nvic>:

/*
 * Clear interrupt for NVIC
 */
Inline void ClearInt_nvic( UINT intno )
{
 800d910:	b480      	push	{r7}
 800d912:	b083      	sub	sp, #12
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
	*(_UW*)(NVIC_ICPR(intno)) = (0x01U << (intno % 32));
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	f003 021f 	and.w	r2, r3, #31
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	095b      	lsrs	r3, r3, #5
 800d922:	0099      	lsls	r1, r3, #2
 800d924:	4b05      	ldr	r3, [pc, #20]	@ (800d93c <ClearInt_nvic+0x2c>)
 800d926:	440b      	add	r3, r1
 800d928:	4619      	mov	r1, r3
 800d92a:	2301      	movs	r3, #1
 800d92c:	4093      	lsls	r3, r2
 800d92e:	600b      	str	r3, [r1, #0]
}
 800d930:	bf00      	nop
 800d932:	370c      	adds	r7, #12
 800d934:	46bd      	mov	sp, r7
 800d936:	bc80      	pop	{r7}
 800d938:	4770      	bx	lr
 800d93a:	bf00      	nop
 800d93c:	e000e280 	.word	0xe000e280

0800d940 <CheckInt_nvic>:

/*
 * Check active state for NVIC
 */
Inline BOOL CheckInt_nvic( UINT intno )
{
 800d940:	b480      	push	{r7}
 800d942:	b083      	sub	sp, #12
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
	return (*(_UW*)(NVIC_ICPR(intno)) & (0x01U << (intno % 32)));
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	095b      	lsrs	r3, r3, #5
 800d94c:	009a      	lsls	r2, r3, #2
 800d94e:	4b07      	ldr	r3, [pc, #28]	@ (800d96c <CheckInt_nvic+0x2c>)
 800d950:	4413      	add	r3, r2
 800d952:	681a      	ldr	r2, [r3, #0]
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	f003 031f 	and.w	r3, r3, #31
 800d95a:	2101      	movs	r1, #1
 800d95c:	fa01 f303 	lsl.w	r3, r1, r3
 800d960:	4013      	ands	r3, r2
}
 800d962:	4618      	mov	r0, r3
 800d964:	370c      	adds	r7, #12
 800d966:	46bd      	mov	sp, r7
 800d968:	bc80      	pop	{r7}
 800d96a:	4770      	bx	lr
 800d96c:	e000e280 	.word	0xe000e280

0800d970 <EnableInt_exti>:
/*
 * EXTI (Extended interrupt controller) functions
 * 
 */
LOCAL void EnableInt_exti( UINT intno, INT level )
{
 800d970:	b480      	push	{r7}
 800d972:	b083      	sub	sp, #12
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
 800d978:	6039      	str	r1, [r7, #0]
	if(intno < 32) {
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2b1f      	cmp	r3, #31
 800d97e:	d80a      	bhi.n	800d996 <EnableInt_exti+0x26>
		*(_UW*)EXTI_CPUIMR1 |= (UW)(1<<intno);
 800d980:	4b14      	ldr	r3, [pc, #80]	@ (800d9d4 <EnableInt_exti+0x64>)
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	2101      	movs	r1, #1
 800d986:	687a      	ldr	r2, [r7, #4]
 800d988:	fa01 f202 	lsl.w	r2, r1, r2
 800d98c:	4611      	mov	r1, r2
 800d98e:	4a11      	ldr	r2, [pc, #68]	@ (800d9d4 <EnableInt_exti+0x64>)
 800d990:	430b      	orrs	r3, r1
 800d992:	6013      	str	r3, [r2, #0]
	} else if(intno < 64) {
		*(_UW*)EXTI_CPUIMR2 |= (UW)(1<<(intno-32));
	} else {
		*(_UW*)EXTI_CPUIMR3 |= (UW)(1<<(intno-64));
	}	
}
 800d994:	e019      	b.n	800d9ca <EnableInt_exti+0x5a>
	} else if(intno < 64) {
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2b3f      	cmp	r3, #63	@ 0x3f
 800d99a:	d80b      	bhi.n	800d9b4 <EnableInt_exti+0x44>
		*(_UW*)EXTI_CPUIMR2 |= (UW)(1<<(intno-32));
 800d99c:	4b0e      	ldr	r3, [pc, #56]	@ (800d9d8 <EnableInt_exti+0x68>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	687a      	ldr	r2, [r7, #4]
 800d9a2:	3a20      	subs	r2, #32
 800d9a4:	2101      	movs	r1, #1
 800d9a6:	fa01 f202 	lsl.w	r2, r1, r2
 800d9aa:	4611      	mov	r1, r2
 800d9ac:	4a0a      	ldr	r2, [pc, #40]	@ (800d9d8 <EnableInt_exti+0x68>)
 800d9ae:	430b      	orrs	r3, r1
 800d9b0:	6013      	str	r3, [r2, #0]
}
 800d9b2:	e00a      	b.n	800d9ca <EnableInt_exti+0x5a>
		*(_UW*)EXTI_CPUIMR3 |= (UW)(1<<(intno-64));
 800d9b4:	4b09      	ldr	r3, [pc, #36]	@ (800d9dc <EnableInt_exti+0x6c>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	687a      	ldr	r2, [r7, #4]
 800d9ba:	3a40      	subs	r2, #64	@ 0x40
 800d9bc:	2101      	movs	r1, #1
 800d9be:	fa01 f202 	lsl.w	r2, r1, r2
 800d9c2:	4611      	mov	r1, r2
 800d9c4:	4a05      	ldr	r2, [pc, #20]	@ (800d9dc <EnableInt_exti+0x6c>)
 800d9c6:	430b      	orrs	r3, r1
 800d9c8:	6013      	str	r3, [r2, #0]
}
 800d9ca:	bf00      	nop
 800d9cc:	370c      	adds	r7, #12
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bc80      	pop	{r7}
 800d9d2:	4770      	bx	lr
 800d9d4:	58000080 	.word	0x58000080
 800d9d8:	58000090 	.word	0x58000090
 800d9dc:	580000a0 	.word	0x580000a0

0800d9e0 <DisableInt_exti>:

LOCAL void DisableInt_exti( UINT intno )
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b083      	sub	sp, #12
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
	if(intno < 32) {
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2b1f      	cmp	r3, #31
 800d9ec:	d80a      	bhi.n	800da04 <DisableInt_exti+0x24>
		*(_UW*)EXTI_CPUIMR1 &= ~(UW)(1<<intno);
 800d9ee:	4b15      	ldr	r3, [pc, #84]	@ (800da44 <DisableInt_exti+0x64>)
 800d9f0:	681a      	ldr	r2, [r3, #0]
 800d9f2:	2101      	movs	r1, #1
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	fa01 f303 	lsl.w	r3, r1, r3
 800d9fa:	43db      	mvns	r3, r3
 800d9fc:	4911      	ldr	r1, [pc, #68]	@ (800da44 <DisableInt_exti+0x64>)
 800d9fe:	4013      	ands	r3, r2
 800da00:	600b      	str	r3, [r1, #0]
		*(_UW*)EXTI_CPUIMR2 &= ~(UW)(1<<(intno-32));
	} else {
		*(_UW*)EXTI_CPUIMR3 &= ~(UW)(1<<(intno-64));
	}

}
 800da02:	e019      	b.n	800da38 <DisableInt_exti+0x58>
	} else if(intno < 64) {
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2b3f      	cmp	r3, #63	@ 0x3f
 800da08:	d80b      	bhi.n	800da22 <DisableInt_exti+0x42>
		*(_UW*)EXTI_CPUIMR2 &= ~(UW)(1<<(intno-32));
 800da0a:	4b0f      	ldr	r3, [pc, #60]	@ (800da48 <DisableInt_exti+0x68>)
 800da0c:	681a      	ldr	r2, [r3, #0]
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	3b20      	subs	r3, #32
 800da12:	2101      	movs	r1, #1
 800da14:	fa01 f303 	lsl.w	r3, r1, r3
 800da18:	43db      	mvns	r3, r3
 800da1a:	490b      	ldr	r1, [pc, #44]	@ (800da48 <DisableInt_exti+0x68>)
 800da1c:	4013      	ands	r3, r2
 800da1e:	600b      	str	r3, [r1, #0]
}
 800da20:	e00a      	b.n	800da38 <DisableInt_exti+0x58>
		*(_UW*)EXTI_CPUIMR3 &= ~(UW)(1<<(intno-64));
 800da22:	4b0a      	ldr	r3, [pc, #40]	@ (800da4c <DisableInt_exti+0x6c>)
 800da24:	681a      	ldr	r2, [r3, #0]
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	3b40      	subs	r3, #64	@ 0x40
 800da2a:	2101      	movs	r1, #1
 800da2c:	fa01 f303 	lsl.w	r3, r1, r3
 800da30:	43db      	mvns	r3, r3
 800da32:	4906      	ldr	r1, [pc, #24]	@ (800da4c <DisableInt_exti+0x6c>)
 800da34:	4013      	ands	r3, r2
 800da36:	600b      	str	r3, [r1, #0]
}
 800da38:	bf00      	nop
 800da3a:	370c      	adds	r7, #12
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bc80      	pop	{r7}
 800da40:	4770      	bx	lr
 800da42:	bf00      	nop
 800da44:	58000080 	.word	0x58000080
 800da48:	58000090 	.word	0x58000090
 800da4c:	580000a0 	.word	0x580000a0

0800da50 <ClearInt_exti>:

LOCAL void ClearInt_exti( UINT intno )
{
 800da50:	b480      	push	{r7}
 800da52:	b083      	sub	sp, #12
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
	if(intno < 32) {
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2b1f      	cmp	r3, #31
 800da5c:	d80a      	bhi.n	800da74 <ClearInt_exti+0x24>
		*(_UW*)EXTI_CPUPR1 |= (UW)(1<<intno);
 800da5e:	4b15      	ldr	r3, [pc, #84]	@ (800dab4 <ClearInt_exti+0x64>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	2101      	movs	r1, #1
 800da64:	687a      	ldr	r2, [r7, #4]
 800da66:	fa01 f202 	lsl.w	r2, r1, r2
 800da6a:	4611      	mov	r1, r2
 800da6c:	4a11      	ldr	r2, [pc, #68]	@ (800dab4 <ClearInt_exti+0x64>)
 800da6e:	430b      	orrs	r3, r1
 800da70:	6013      	str	r3, [r2, #0]
	} else if(intno < 64) {
		*(_UW*)EXTI_CPUPR2 |= (UW)(1<<(intno-32));
	} else {
		*(_UW*)EXTI_CPUPR3 |= (UW)(1<<(intno-64));
	}
}
 800da72:	e019      	b.n	800daa8 <ClearInt_exti+0x58>
	} else if(intno < 64) {
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	2b3f      	cmp	r3, #63	@ 0x3f
 800da78:	d80b      	bhi.n	800da92 <ClearInt_exti+0x42>
		*(_UW*)EXTI_CPUPR2 |= (UW)(1<<(intno-32));
 800da7a:	4b0f      	ldr	r3, [pc, #60]	@ (800dab8 <ClearInt_exti+0x68>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	687a      	ldr	r2, [r7, #4]
 800da80:	3a20      	subs	r2, #32
 800da82:	2101      	movs	r1, #1
 800da84:	fa01 f202 	lsl.w	r2, r1, r2
 800da88:	4611      	mov	r1, r2
 800da8a:	4a0b      	ldr	r2, [pc, #44]	@ (800dab8 <ClearInt_exti+0x68>)
 800da8c:	430b      	orrs	r3, r1
 800da8e:	6013      	str	r3, [r2, #0]
}
 800da90:	e00a      	b.n	800daa8 <ClearInt_exti+0x58>
		*(_UW*)EXTI_CPUPR3 |= (UW)(1<<(intno-64));
 800da92:	4b0a      	ldr	r3, [pc, #40]	@ (800dabc <ClearInt_exti+0x6c>)
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	687a      	ldr	r2, [r7, #4]
 800da98:	3a40      	subs	r2, #64	@ 0x40
 800da9a:	2101      	movs	r1, #1
 800da9c:	fa01 f202 	lsl.w	r2, r1, r2
 800daa0:	4611      	mov	r1, r2
 800daa2:	4a06      	ldr	r2, [pc, #24]	@ (800dabc <ClearInt_exti+0x6c>)
 800daa4:	430b      	orrs	r3, r1
 800daa6:	6013      	str	r3, [r2, #0]
}
 800daa8:	bf00      	nop
 800daaa:	370c      	adds	r7, #12
 800daac:	46bd      	mov	sp, r7
 800daae:	bc80      	pop	{r7}
 800dab0:	4770      	bx	lr
 800dab2:	bf00      	nop
 800dab4:	58000088 	.word	0x58000088
 800dab8:	58000098 	.word	0x58000098
 800dabc:	580000a8 	.word	0x580000a8

0800dac0 <CheckInt_exti>:

LOCAL BOOL CheckInt_exti( UINT intno )
{
 800dac0:	b480      	push	{r7}
 800dac2:	b085      	sub	sp, #20
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
	UW	pif;

	if(intno < 32) {
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2b1f      	cmp	r3, #31
 800dacc:	d808      	bhi.n	800dae0 <CheckInt_exti+0x20>
		pif = *(_UW*)EXTI_CPUPR1 & (UW)(1<<intno);
 800dace:	4b15      	ldr	r3, [pc, #84]	@ (800db24 <CheckInt_exti+0x64>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	2101      	movs	r1, #1
 800dad4:	687a      	ldr	r2, [r7, #4]
 800dad6:	fa01 f202 	lsl.w	r2, r1, r2
 800dada:	4013      	ands	r3, r2
 800dadc:	60fb      	str	r3, [r7, #12]
 800dade:	e015      	b.n	800db0c <CheckInt_exti+0x4c>
	} else if(intno < 64) {
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2b3f      	cmp	r3, #63	@ 0x3f
 800dae4:	d809      	bhi.n	800dafa <CheckInt_exti+0x3a>
		pif = *(_UW*)EXTI_CPUPR2 & (UW)(1<<(intno-32));		
 800dae6:	4b10      	ldr	r3, [pc, #64]	@ (800db28 <CheckInt_exti+0x68>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	687a      	ldr	r2, [r7, #4]
 800daec:	3a20      	subs	r2, #32
 800daee:	2101      	movs	r1, #1
 800daf0:	fa01 f202 	lsl.w	r2, r1, r2
 800daf4:	4013      	ands	r3, r2
 800daf6:	60fb      	str	r3, [r7, #12]
 800daf8:	e008      	b.n	800db0c <CheckInt_exti+0x4c>
	} else {
		pif = *(_UW*)EXTI_CPUPR3 & (UW)(1<<(intno-64));		
 800dafa:	4b0c      	ldr	r3, [pc, #48]	@ (800db2c <CheckInt_exti+0x6c>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	687a      	ldr	r2, [r7, #4]
 800db00:	3a40      	subs	r2, #64	@ 0x40
 800db02:	2101      	movs	r1, #1
 800db04:	fa01 f202 	lsl.w	r2, r1, r2
 800db08:	4013      	ands	r3, r2
 800db0a:	60fb      	str	r3, [r7, #12]
	}
	return pif?TRUE:FALSE;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	bf14      	ite	ne
 800db12:	2301      	movne	r3, #1
 800db14:	2300      	moveq	r3, #0
 800db16:	b2db      	uxtb	r3, r3
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3714      	adds	r7, #20
 800db1c:	46bd      	mov	sp, r7
 800db1e:	bc80      	pop	{r7}
 800db20:	4770      	bx	lr
 800db22:	bf00      	nop
 800db24:	58000088 	.word	0x58000088
 800db28:	58000098 	.word	0x58000098
 800db2c:	580000a8 	.word	0x580000a8

0800db30 <SetIntMode_exti>:

LOCAL void SetIntMode_exti(UINT intno, UINT mode)
{
 800db30:	b480      	push	{r7}
 800db32:	b083      	sub	sp, #12
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	6039      	str	r1, [r7, #0]
	if(mode & IM_HI) {
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	f003 0302 	and.w	r3, r3, #2
 800db40:	2b00      	cmp	r3, #0
 800db42:	d029      	beq.n	800db98 <SetIntMode_exti+0x68>
		if(intno < 32) {
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2b1f      	cmp	r3, #31
 800db48:	d80c      	bhi.n	800db64 <SetIntMode_exti+0x34>
			*(_UW*)EXTI_RTSR1 |= (UW)(1<<intno);
 800db4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	2101      	movs	r1, #1
 800db52:	687a      	ldr	r2, [r7, #4]
 800db54:	fa01 f202 	lsl.w	r2, r1, r2
 800db58:	4611      	mov	r1, r2
 800db5a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800db5e:	430b      	orrs	r3, r1
 800db60:	6013      	str	r3, [r2, #0]
 800db62:	e019      	b.n	800db98 <SetIntMode_exti+0x68>
		} else if(intno < 64) {
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2b3f      	cmp	r3, #63	@ 0x3f
 800db68:	d80b      	bhi.n	800db82 <SetIntMode_exti+0x52>
			*(_UW*)EXTI_RTSR2 |= (UW)(1<<(intno-32));
 800db6a:	4b24      	ldr	r3, [pc, #144]	@ (800dbfc <SetIntMode_exti+0xcc>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	687a      	ldr	r2, [r7, #4]
 800db70:	3a20      	subs	r2, #32
 800db72:	2101      	movs	r1, #1
 800db74:	fa01 f202 	lsl.w	r2, r1, r2
 800db78:	4611      	mov	r1, r2
 800db7a:	4a20      	ldr	r2, [pc, #128]	@ (800dbfc <SetIntMode_exti+0xcc>)
 800db7c:	430b      	orrs	r3, r1
 800db7e:	6013      	str	r3, [r2, #0]
 800db80:	e00a      	b.n	800db98 <SetIntMode_exti+0x68>
		} else {
			*(_UW*)EXTI_RTSR3 |= (UW)(1<<(intno-64));
 800db82:	4b1f      	ldr	r3, [pc, #124]	@ (800dc00 <SetIntMode_exti+0xd0>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	687a      	ldr	r2, [r7, #4]
 800db88:	3a40      	subs	r2, #64	@ 0x40
 800db8a:	2101      	movs	r1, #1
 800db8c:	fa01 f202 	lsl.w	r2, r1, r2
 800db90:	4611      	mov	r1, r2
 800db92:	4a1b      	ldr	r2, [pc, #108]	@ (800dc00 <SetIntMode_exti+0xd0>)
 800db94:	430b      	orrs	r3, r1
 800db96:	6013      	str	r3, [r2, #0]
		}
	}
	if(mode & IM_LOW) {
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	f003 0301 	and.w	r3, r3, #1
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d027      	beq.n	800dbf2 <SetIntMode_exti+0xc2>
		if(intno < 32) {
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2b1f      	cmp	r3, #31
 800dba6:	d80a      	bhi.n	800dbbe <SetIntMode_exti+0x8e>
			*(_UW*)EXTI_FTSR1 |= (UW)(1<<intno);
 800dba8:	4b16      	ldr	r3, [pc, #88]	@ (800dc04 <SetIntMode_exti+0xd4>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	2101      	movs	r1, #1
 800dbae:	687a      	ldr	r2, [r7, #4]
 800dbb0:	fa01 f202 	lsl.w	r2, r1, r2
 800dbb4:	4611      	mov	r1, r2
 800dbb6:	4a13      	ldr	r2, [pc, #76]	@ (800dc04 <SetIntMode_exti+0xd4>)
 800dbb8:	430b      	orrs	r3, r1
 800dbba:	6013      	str	r3, [r2, #0]
			*(_UW*)EXTI_FTSR2 |= (UW)(1<<(intno-32));
		} else {
			*(_UW*)EXTI_FTSR3 |= (UW)(1<<(intno-64));
		}
	}
}
 800dbbc:	e019      	b.n	800dbf2 <SetIntMode_exti+0xc2>
		} else if(intno < 64) {
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2b3f      	cmp	r3, #63	@ 0x3f
 800dbc2:	d80b      	bhi.n	800dbdc <SetIntMode_exti+0xac>
			*(_UW*)EXTI_FTSR2 |= (UW)(1<<(intno-32));
 800dbc4:	4b10      	ldr	r3, [pc, #64]	@ (800dc08 <SetIntMode_exti+0xd8>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	687a      	ldr	r2, [r7, #4]
 800dbca:	3a20      	subs	r2, #32
 800dbcc:	2101      	movs	r1, #1
 800dbce:	fa01 f202 	lsl.w	r2, r1, r2
 800dbd2:	4611      	mov	r1, r2
 800dbd4:	4a0c      	ldr	r2, [pc, #48]	@ (800dc08 <SetIntMode_exti+0xd8>)
 800dbd6:	430b      	orrs	r3, r1
 800dbd8:	6013      	str	r3, [r2, #0]
}
 800dbda:	e00a      	b.n	800dbf2 <SetIntMode_exti+0xc2>
			*(_UW*)EXTI_FTSR3 |= (UW)(1<<(intno-64));
 800dbdc:	4b0b      	ldr	r3, [pc, #44]	@ (800dc0c <SetIntMode_exti+0xdc>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	687a      	ldr	r2, [r7, #4]
 800dbe2:	3a40      	subs	r2, #64	@ 0x40
 800dbe4:	2101      	movs	r1, #1
 800dbe6:	fa01 f202 	lsl.w	r2, r1, r2
 800dbea:	4611      	mov	r1, r2
 800dbec:	4a07      	ldr	r2, [pc, #28]	@ (800dc0c <SetIntMode_exti+0xdc>)
 800dbee:	430b      	orrs	r3, r1
 800dbf0:	6013      	str	r3, [r2, #0]
}
 800dbf2:	bf00      	nop
 800dbf4:	370c      	adds	r7, #12
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bc80      	pop	{r7}
 800dbfa:	4770      	bx	lr
 800dbfc:	58000020 	.word	0x58000020
 800dc00:	58000040 	.word	0x58000040
 800dc04:	58000004 	.word	0x58000004
 800dc08:	58000024 	.word	0x58000024
 800dc0c:	58000044 	.word	0x58000044

0800dc10 <EnableInt>:
 */
/*
 * Enable interrupt 
 */
EXPORT void EnableInt( UINT intno, INT level )
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b082      	sub	sp, #8
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	6039      	str	r1, [r7, #0]
	if( intno <= MAX_NVIC_INTNO) {
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	2bbd      	cmp	r3, #189	@ 0xbd
 800dc1e:	d804      	bhi.n	800dc2a <EnableInt+0x1a>
		EnableInt_nvic( intno, level);
 800dc20:	6839      	ldr	r1, [r7, #0]
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	f7ff fda6 	bl	800d774 <EnableInt_nvic>
	} else if(intno >= MIN_EXTI_INTNO && intno <= MAX_EXTI_INTNO) {
		EnableInt_exti( intno - MIN_EXTI_INTNO, level);
	}
}
 800dc28:	e00c      	b.n	800dc44 <EnableInt+0x34>
	} else if(intno >= MIN_EXTI_INTNO && intno <= MAX_EXTI_INTNO) {
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2bc7      	cmp	r3, #199	@ 0xc7
 800dc2e:	d909      	bls.n	800dc44 <EnableInt+0x34>
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	f5b3 7f92 	cmp.w	r3, #292	@ 0x124
 800dc36:	d205      	bcs.n	800dc44 <EnableInt+0x34>
		EnableInt_exti( intno - MIN_EXTI_INTNO, level);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	3bc8      	subs	r3, #200	@ 0xc8
 800dc3c:	6839      	ldr	r1, [r7, #0]
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f7ff fe96 	bl	800d970 <EnableInt_exti>
}
 800dc44:	bf00      	nop
 800dc46:	3708      	adds	r7, #8
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	bd80      	pop	{r7, pc}

0800dc4c <DisableInt>:

/*
 * Disable interrupt 
 */
EXPORT void DisableInt( UINT intno )
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b082      	sub	sp, #8
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
	if( intno <= MAX_NVIC_INTNO) {
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2bbd      	cmp	r3, #189	@ 0xbd
 800dc58:	d803      	bhi.n	800dc62 <DisableInt+0x16>
		DisableInt_nvic( intno);
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f7ff fe40 	bl	800d8e0 <DisableInt_nvic>
	} else if(intno >= MIN_EXTI_INTNO && intno <= MAX_EXTI_INTNO) {
		DisableInt_exti( intno - MIN_EXTI_INTNO);
	}
}
 800dc60:	e00b      	b.n	800dc7a <DisableInt+0x2e>
	} else if(intno >= MIN_EXTI_INTNO && intno <= MAX_EXTI_INTNO) {
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	2bc7      	cmp	r3, #199	@ 0xc7
 800dc66:	d908      	bls.n	800dc7a <DisableInt+0x2e>
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f5b3 7f92 	cmp.w	r3, #292	@ 0x124
 800dc6e:	d204      	bcs.n	800dc7a <DisableInt+0x2e>
		DisableInt_exti( intno - MIN_EXTI_INTNO);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	3bc8      	subs	r3, #200	@ 0xc8
 800dc74:	4618      	mov	r0, r3
 800dc76:	f7ff feb3 	bl	800d9e0 <DisableInt_exti>
}
 800dc7a:	bf00      	nop
 800dc7c:	3708      	adds	r7, #8
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}

0800dc82 <ClearInt>:

/*
 * Clear interrupt
 */
EXPORT void ClearInt(UINT intno)
{
 800dc82:	b580      	push	{r7, lr}
 800dc84:	b082      	sub	sp, #8
 800dc86:	af00      	add	r7, sp, #0
 800dc88:	6078      	str	r0, [r7, #4]
	if( intno <= MAX_NVIC_INTNO) {
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	2bbd      	cmp	r3, #189	@ 0xbd
 800dc8e:	d803      	bhi.n	800dc98 <ClearInt+0x16>
		ClearInt_nvic( intno);
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f7ff fe3d 	bl	800d910 <ClearInt_nvic>
	} else if(intno >= MIN_EXTI_INTNO && intno <= MAX_EXTI_INTNO) {
		ClearInt_exti( intno - MIN_EXTI_INTNO);
	}
}
 800dc96:	e00b      	b.n	800dcb0 <ClearInt+0x2e>
	} else if(intno >= MIN_EXTI_INTNO && intno <= MAX_EXTI_INTNO) {
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2bc7      	cmp	r3, #199	@ 0xc7
 800dc9c:	d908      	bls.n	800dcb0 <ClearInt+0x2e>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f5b3 7f92 	cmp.w	r3, #292	@ 0x124
 800dca4:	d204      	bcs.n	800dcb0 <ClearInt+0x2e>
		ClearInt_exti( intno - MIN_EXTI_INTNO);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	3bc8      	subs	r3, #200	@ 0xc8
 800dcaa:	4618      	mov	r0, r3
 800dcac:	f7ff fed0 	bl	800da50 <ClearInt_exti>
}
 800dcb0:	bf00      	nop
 800dcb2:	3708      	adds	r7, #8
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <EndOfInt>:

/*
 * Issue EOI to interrupt controller
 */
EXPORT void EndOfInt(UINT intno)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b083      	sub	sp, #12
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
	/* No opetarion. */
}
 800dcc0:	bf00      	nop
 800dcc2:	370c      	adds	r7, #12
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bc80      	pop	{r7}
 800dcc8:	4770      	bx	lr

0800dcca <CheckInt>:

/*
 * Check active state
 */
EXPORT BOOL CheckInt( UINT intno )
{
 800dcca:	b580      	push	{r7, lr}
 800dccc:	b084      	sub	sp, #16
 800dcce:	af00      	add	r7, sp, #0
 800dcd0:	6078      	str	r0, [r7, #4]
	BOOL rtncd;

	if( intno <= MAX_NVIC_INTNO) {
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	2bbd      	cmp	r3, #189	@ 0xbd
 800dcd6:	d804      	bhi.n	800dce2 <CheckInt+0x18>
		rtncd = CheckInt_nvic( intno);
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f7ff fe31 	bl	800d940 <CheckInt_nvic>
 800dcde:	60f8      	str	r0, [r7, #12]
 800dce0:	e00f      	b.n	800dd02 <CheckInt+0x38>
	} else if(intno >= MIN_EXTI_INTNO && intno <= MAX_EXTI_INTNO) {
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2bc7      	cmp	r3, #199	@ 0xc7
 800dce6:	d90a      	bls.n	800dcfe <CheckInt+0x34>
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f5b3 7f92 	cmp.w	r3, #292	@ 0x124
 800dcee:	d206      	bcs.n	800dcfe <CheckInt+0x34>
		rtncd = CheckInt_exti( intno - MIN_EXTI_INTNO);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	3bc8      	subs	r3, #200	@ 0xc8
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	f7ff fee3 	bl	800dac0 <CheckInt_exti>
 800dcfa:	60f8      	str	r0, [r7, #12]
 800dcfc:	e001      	b.n	800dd02 <CheckInt+0x38>
	} else {
		rtncd = FALSE;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	60fb      	str	r3, [r7, #12]
	}
	return rtncd;
 800dd02:	68fb      	ldr	r3, [r7, #12]
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3710      	adds	r7, #16
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <SetIntMode>:

/*
 * Set interrupt mode
 */
EXPORT void SetIntMode(UINT intno, UINT mode)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b082      	sub	sp, #8
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
 800dd14:	6039      	str	r1, [r7, #0]
	if(intno >= MIN_EXTI_INTNO && intno <= MAX_EXTI_INTNO) {
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2bc7      	cmp	r3, #199	@ 0xc7
 800dd1a:	d909      	bls.n	800dd30 <SetIntMode+0x24>
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f5b3 7f92 	cmp.w	r3, #292	@ 0x124
 800dd22:	d205      	bcs.n	800dd30 <SetIntMode+0x24>
		SetIntMode_exti( intno - MIN_EXTI_INTNO, mode);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	3bc8      	subs	r3, #200	@ 0xc8
 800dd28:	6839      	ldr	r1, [r7, #0]
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f7ff ff00 	bl	800db30 <SetIntMode_exti>
	}
}
 800dd30:	bf00      	nop
 800dd32:	3708      	adds	r7, #8
 800dd34:	46bd      	mov	sp, r7
 800dd36:	bd80      	pop	{r7, pc}

0800dd38 <libtm_init>:
/*
 * libtm_init() - libtm Initialize
 * supported only on wait != 0 (polling not supported)
 */
EXPORT void libtm_init(void)
{
 800dd38:	b580      	push	{r7, lr}
 800dd3a:	af00      	add	r7, sp, #0
	tm_com_init();
 800dd3c:	f000 fcd2 	bl	800e6e4 <tm_com_init>
}
 800dd40:	bf00      	nop
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <tm_getchar>:
/*
 * tm_getchar() - Get Character
 * supported only on wait != 0 (polling not supported)
 */
EXPORT INT tm_getchar( INT wait )
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b084      	sub	sp, #16
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
	UB	p;
	UINT	imask;

	DI(imask);
 800dd4c:	f7ff fcdf 	bl	800d70e <disint>
 800dd50:	60f8      	str	r0, [r7, #12]
	tm_rcv_dat(&p, 1);
 800dd52:	f107 030b 	add.w	r3, r7, #11
 800dd56:	2101      	movs	r1, #1
 800dd58:	4618      	mov	r0, r3
 800dd5a:	f000 fc9d 	bl	800e698 <tm_rcv_dat>
	EI(imask);
 800dd5e:	68f8      	ldr	r0, [r7, #12]
 800dd60:	f7ff fcbd 	bl	800d6de <set_basepri>

	return (INT)p;
 800dd64:	7afb      	ldrb	r3, [r7, #11]
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3710      	adds	r7, #16
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}
	...

0800dd70 <tm_getline>:
/*
 * tm_getline() - Get Line
 * special key is not supported
 */
EXPORT INT tm_getline( UB *buff )
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b086      	sub	sp, #24
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
	UB* p = buff;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	617b      	str	r3, [r7, #20]
	int len = 0;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	613b      	str	r3, [r7, #16]
	static const char LF = CHR_LF;
	INT imask;

	DI(imask);
 800dd80:	f7ff fcc5 	bl	800d70e <disint>
 800dd84:	4603      	mov	r3, r0
 800dd86:	60fb      	str	r3, [r7, #12]
	while (1) {
		tm_rcv_dat(p, 1);
 800dd88:	2101      	movs	r1, #1
 800dd8a:	6978      	ldr	r0, [r7, #20]
 800dd8c:	f000 fc84 	bl	800e698 <tm_rcv_dat>
		tm_snd_dat(p, 1); /* echo back */
 800dd90:	2101      	movs	r1, #1
 800dd92:	6978      	ldr	r0, [r7, #20]
 800dd94:	f000 fc52 	bl	800e63c <tm_snd_dat>
		if (*p == CHR_CR) {
 800dd98:	697b      	ldr	r3, [r7, #20]
 800dd9a:	781b      	ldrb	r3, [r3, #0]
 800dd9c:	2b0d      	cmp	r3, #13
 800dd9e:	d104      	bne.n	800ddaa <tm_getline+0x3a>
			tm_snd_dat((const UB*)&LF, 1);
 800dda0:	2101      	movs	r1, #1
 800dda2:	480f      	ldr	r0, [pc, #60]	@ (800dde0 <tm_getline+0x70>)
 800dda4:	f000 fc4a 	bl	800e63c <tm_snd_dat>
			break;
 800dda8:	e00e      	b.n	800ddc8 <tm_getline+0x58>
		} else if (*p == CHR_ETX) {
 800ddaa:	697b      	ldr	r3, [r7, #20]
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	2b03      	cmp	r3, #3
 800ddb0:	d103      	bne.n	800ddba <tm_getline+0x4a>
			len = -1;
 800ddb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ddb6:	613b      	str	r3, [r7, #16]
			break;
 800ddb8:	e006      	b.n	800ddc8 <tm_getline+0x58>
		}
		p++; len++;
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	617b      	str	r3, [r7, #20]
 800ddc0:	693b      	ldr	r3, [r7, #16]
 800ddc2:	3301      	adds	r3, #1
 800ddc4:	613b      	str	r3, [r7, #16]
		tm_rcv_dat(p, 1);
 800ddc6:	e7df      	b.n	800dd88 <tm_getline+0x18>
	}
	*p = 0x00;
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	701a      	strb	r2, [r3, #0]
	EI(imask);
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f7ff fc84 	bl	800d6de <set_basepri>

	return len;
 800ddd6:	693b      	ldr	r3, [r7, #16]
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3718      	adds	r7, #24
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}
 800dde0:	0800eee8 	.word	0x0800eee8

0800dde4 <tm_putchar>:
/*
 * tm_putchar()
 * Ctrl-C is not supported
 */
EXPORT INT tm_putchar( INT c )
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b084      	sub	sp, #16
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
	static const char CR = CHR_CR;
	UB buf = (UB)c;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	b2db      	uxtb	r3, r3
 800ddf0:	72fb      	strb	r3, [r7, #11]
	INT imask;

	DI(imask);
 800ddf2:	f7ff fc8c 	bl	800d70e <disint>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	60fb      	str	r3, [r7, #12]
	if (buf == CHR_LF) {
 800ddfa:	7afb      	ldrb	r3, [r7, #11]
 800ddfc:	2b0a      	cmp	r3, #10
 800ddfe:	d103      	bne.n	800de08 <tm_putchar+0x24>
		tm_snd_dat((const UB*)&CR, 1);
 800de00:	2101      	movs	r1, #1
 800de02:	4809      	ldr	r0, [pc, #36]	@ (800de28 <tm_putchar+0x44>)
 800de04:	f000 fc1a 	bl	800e63c <tm_snd_dat>
	}
	tm_snd_dat(&buf, 1);
 800de08:	f107 030b 	add.w	r3, r7, #11
 800de0c:	2101      	movs	r1, #1
 800de0e:	4618      	mov	r0, r3
 800de10:	f000 fc14 	bl	800e63c <tm_snd_dat>
	EI(imask);
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	4618      	mov	r0, r3
 800de18:	f7ff fc61 	bl	800d6de <set_basepri>

	return 0;
 800de1c:	2300      	movs	r3, #0
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3710      	adds	r7, #16
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}
 800de26:	bf00      	nop
 800de28:	0800eee9 	.word	0x0800eee9

0800de2c <tm_putstring>:
/*
 * tm_putstring() - Put String
 * Ctrl-C is not supported
 */
EXPORT INT tm_putstring( const UB *buff )
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b084      	sub	sp, #16
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
	const UB* p = buff;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	60fb      	str	r3, [r7, #12]
	INT imask;

	DI(imask);
 800de38:	f7ff fc69 	bl	800d70e <disint>
 800de3c:	4603      	mov	r3, r0
 800de3e:	60bb      	str	r3, [r7, #8]
	while ( *p != (UB)'\0' ) {
 800de40:	e006      	b.n	800de50 <tm_putstring+0x24>
		tm_putchar(*p++);
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	1c5a      	adds	r2, r3, #1
 800de46:	60fa      	str	r2, [r7, #12]
 800de48:	781b      	ldrb	r3, [r3, #0]
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7ff ffca 	bl	800dde4 <tm_putchar>
	while ( *p != (UB)'\0' ) {
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	781b      	ldrb	r3, [r3, #0]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d1f4      	bne.n	800de42 <tm_putstring+0x16>
	}
	EI(imask);
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7ff fc3f 	bl	800d6de <set_basepri>

	return 0;
 800de60:	2300      	movs	r3, #0
}
 800de62:	4618      	mov	r0, r3
 800de64:	3710      	adds	r7, #16
 800de66:	46bd      	mov	sp, r7
 800de68:	bd80      	pop	{r7, pc}
	...

0800de6c <outint>:

/*
 *	Output integer value
 */
LOCAL	UB	*outint( UB *ep, UW val, UB base )
{
 800de6c:	b480      	push	{r7}
 800de6e:	b087      	sub	sp, #28
 800de70:	af00      	add	r7, sp, #0
 800de72:	60f8      	str	r0, [r7, #12]
 800de74:	60b9      	str	r1, [r7, #8]
 800de76:	4613      	mov	r3, r2
 800de78:	71fb      	strb	r3, [r7, #7]
LOCAL const UB  digits[32] = "0123456789abcdef0123456789ABCDEF";
	UB	caps;

	caps = (base & 0x40) >> 2;		/* 'a' or 'A' */
 800de7a:	79fb      	ldrb	r3, [r7, #7]
 800de7c:	109b      	asrs	r3, r3, #2
 800de7e:	b2db      	uxtb	r3, r3
 800de80:	f003 0310 	and.w	r3, r3, #16
 800de84:	75fb      	strb	r3, [r7, #23]
	for (base &= 0x3F; val >= base; val /= base) {
 800de86:	79fb      	ldrb	r3, [r7, #7]
 800de88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800de8c:	71fb      	strb	r3, [r7, #7]
 800de8e:	e014      	b.n	800deba <outint+0x4e>
		*--ep = digits[(val % base) + caps];
 800de90:	79fa      	ldrb	r2, [r7, #7]
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	fbb3 f1f2 	udiv	r1, r3, r2
 800de98:	fb01 f202 	mul.w	r2, r1, r2
 800de9c:	1a9a      	subs	r2, r3, r2
 800de9e:	7dfb      	ldrb	r3, [r7, #23]
 800dea0:	4413      	add	r3, r2
 800dea2:	68fa      	ldr	r2, [r7, #12]
 800dea4:	3a01      	subs	r2, #1
 800dea6:	60fa      	str	r2, [r7, #12]
 800dea8:	4a0e      	ldr	r2, [pc, #56]	@ (800dee4 <outint+0x78>)
 800deaa:	5cd2      	ldrb	r2, [r2, r3]
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	701a      	strb	r2, [r3, #0]
	for (base &= 0x3F; val >= base; val /= base) {
 800deb0:	79fb      	ldrb	r3, [r7, #7]
 800deb2:	68ba      	ldr	r2, [r7, #8]
 800deb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800deb8:	60bb      	str	r3, [r7, #8]
 800deba:	79fb      	ldrb	r3, [r7, #7]
 800debc:	68ba      	ldr	r2, [r7, #8]
 800debe:	429a      	cmp	r2, r3
 800dec0:	d2e6      	bcs.n	800de90 <outint+0x24>
	}
	*--ep = digits[val + caps];
 800dec2:	7dfa      	ldrb	r2, [r7, #23]
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	4413      	add	r3, r2
 800dec8:	68fa      	ldr	r2, [r7, #12]
 800deca:	3a01      	subs	r2, #1
 800decc:	60fa      	str	r2, [r7, #12]
 800dece:	4a05      	ldr	r2, [pc, #20]	@ (800dee4 <outint+0x78>)
 800ded0:	5cd2      	ldrb	r2, [r2, r3]
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	701a      	strb	r2, [r3, #0]
	return ep;				/* buffer top pointer */
 800ded6:	68fb      	ldr	r3, [r7, #12]
}
 800ded8:	4618      	mov	r0, r3
 800deda:	371c      	adds	r7, #28
 800dedc:	46bd      	mov	sp, r7
 800dede:	bc80      	pop	{r7}
 800dee0:	4770      	bx	lr
 800dee2:	bf00      	nop
 800dee4:	0800eeec 	.word	0x0800eeec

0800dee8 <tm_vsprintf>:

/*
 *	Output with format (limitted version)
 */
LOCAL	void	tm_vsprintf( OutFn ostr, OutPar *par, const UB *fmt, va_list ap )
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b090      	sub	sp, #64	@ 0x40
 800deec:	af00      	add	r7, sp, #0
 800deee:	60f8      	str	r0, [r7, #12]
 800def0:	60b9      	str	r1, [r7, #8]
 800def2:	607a      	str	r2, [r7, #4]
 800def4:	603b      	str	r3, [r7, #0]
#define	F_PLUS		0x02
#define	F_SPACE		0x04
#define	F_PREFIX	0x08
#define	F_ZERO		0x10

	for (fms = NULL; (c = *fmt++) != '\0'; ) {
 800def6:	2300      	movs	r3, #0
 800def8:	633b      	str	r3, [r7, #48]	@ 0x30
 800defa:	e2f1      	b.n	800e4e0 <tm_vsprintf+0x5f8>

		if (c != '%') {	/* Fixed string */
 800defc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df00:	2b25      	cmp	r3, #37	@ 0x25
 800df02:	d007      	beq.n	800df14 <tm_vsprintf+0x2c>
			if (fms == NULL) fms = (UB*)fmt - 1;
 800df04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df06:	2b00      	cmp	r3, #0
 800df08:	f040 82e9 	bne.w	800e4de <tm_vsprintf+0x5f6>
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	3b01      	subs	r3, #1
 800df10:	633b      	str	r3, [r7, #48]	@ 0x30
			continue;
 800df12:	e2e4      	b.n	800e4de <tm_vsprintf+0x5f6>
		}

		/* Output fix string */
		if (fms != NULL) {
 800df14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df16:	2b00      	cmp	r3, #0
 800df18:	d009      	beq.n	800df2e <tm_vsprintf+0x46>
			(*ostr)(fms, fmt - fms - 1, par);
 800df1a:	687a      	ldr	r2, [r7, #4]
 800df1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df1e:	1ad3      	subs	r3, r2, r3
 800df20:	1e59      	subs	r1, r3, #1
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	68ba      	ldr	r2, [r7, #8]
 800df26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800df28:	4798      	blx	r3
			fms = NULL;
 800df2a:	2300      	movs	r3, #0
 800df2c:	633b      	str	r3, [r7, #48]	@ 0x30
		}

		/* Get flags */
		for (flg = 0; ; ) {
 800df2e:	2300      	movs	r3, #0
 800df30:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			switch (c = *fmt++) {
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	1c5a      	adds	r2, r3, #1
 800df38:	607a      	str	r2, [r7, #4]
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800df40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df44:	3b20      	subs	r3, #32
 800df46:	2b10      	cmp	r3, #16
 800df48:	d848      	bhi.n	800dfdc <tm_vsprintf+0xf4>
 800df4a:	a201      	add	r2, pc, #4	@ (adr r2, 800df50 <tm_vsprintf+0x68>)
 800df4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df50:	0800dfb1 	.word	0x0800dfb1
 800df54:	0800dfdd 	.word	0x0800dfdd
 800df58:	0800dfdd 	.word	0x0800dfdd
 800df5c:	0800dfbf 	.word	0x0800dfbf
 800df60:	0800dfdd 	.word	0x0800dfdd
 800df64:	0800dfdd 	.word	0x0800dfdd
 800df68:	0800dfdd 	.word	0x0800dfdd
 800df6c:	0800dfdd 	.word	0x0800dfdd
 800df70:	0800dfdd 	.word	0x0800dfdd
 800df74:	0800dfdd 	.word	0x0800dfdd
 800df78:	0800dfdd 	.word	0x0800dfdd
 800df7c:	0800dfa3 	.word	0x0800dfa3
 800df80:	0800dfdd 	.word	0x0800dfdd
 800df84:	0800df95 	.word	0x0800df95
 800df88:	0800dfdd 	.word	0x0800dfdd
 800df8c:	0800dfdd 	.word	0x0800dfdd
 800df90:	0800dfcd 	.word	0x0800dfcd
			case '-': flg |= F_LEFT;	continue;
 800df94:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800df98:	f043 0301 	orr.w	r3, r3, #1
 800df9c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800dfa0:	e01b      	b.n	800dfda <tm_vsprintf+0xf2>
			case '+': flg |= F_PLUS;	continue;
 800dfa2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800dfa6:	f043 0302 	orr.w	r3, r3, #2
 800dfaa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800dfae:	e014      	b.n	800dfda <tm_vsprintf+0xf2>
			case ' ': flg |= F_SPACE;	continue;
 800dfb0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800dfb4:	f043 0304 	orr.w	r3, r3, #4
 800dfb8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800dfbc:	e00d      	b.n	800dfda <tm_vsprintf+0xf2>
			case '#': flg |= F_PREFIX;	continue;
 800dfbe:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800dfc2:	f043 0308 	orr.w	r3, r3, #8
 800dfc6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800dfca:	e006      	b.n	800dfda <tm_vsprintf+0xf2>
			case '0': flg |= F_ZERO;	continue;
 800dfcc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800dfd0:	f043 0310 	orr.w	r3, r3, #16
 800dfd4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800dfd8:	bf00      	nop
			switch (c = *fmt++) {
 800dfda:	e7ab      	b.n	800df34 <tm_vsprintf+0x4c>
			}
			break;
 800dfdc:	bf00      	nop
		}

		/* Get field width */
		if (c == '*') {
 800dfde:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dfe2:	2b2a      	cmp	r3, #42	@ 0x2a
 800dfe4:	d119      	bne.n	800e01a <tm_vsprintf+0x132>
			wid = va_arg(ap, INT);
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	1d1a      	adds	r2, r3, #4
 800dfea:	603a      	str	r2, [r7, #0]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	877b      	strh	r3, [r7, #58]	@ 0x3a
			if (wid < 0) {
 800dff0:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	da09      	bge.n	800e00c <tm_vsprintf+0x124>
				wid = -wid;
 800dff8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800dffa:	425b      	negs	r3, r3
 800dffc:	b29b      	uxth	r3, r3
 800dffe:	877b      	strh	r3, [r7, #58]	@ 0x3a
				flg |= F_LEFT;
 800e000:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800e004:	f043 0301 	orr.w	r3, r3, #1
 800e008:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			}
			c = *fmt++;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	1c5a      	adds	r2, r3, #1
 800e010:	607a      	str	r2, [r7, #4]
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e018:	e01e      	b.n	800e058 <tm_vsprintf+0x170>
		} else {
			for (wid = 0; c >= '0' && c <= '9'; c = *fmt++)
 800e01a:	2300      	movs	r3, #0
 800e01c:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800e01e:	e013      	b.n	800e048 <tm_vsprintf+0x160>
				wid = wid * 10 + c - '0';
 800e020:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e022:	461a      	mov	r2, r3
 800e024:	0092      	lsls	r2, r2, #2
 800e026:	4413      	add	r3, r2
 800e028:	005b      	lsls	r3, r3, #1
 800e02a:	b29a      	uxth	r2, r3
 800e02c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e030:	b29b      	uxth	r3, r3
 800e032:	4413      	add	r3, r2
 800e034:	b29b      	uxth	r3, r3
 800e036:	3b30      	subs	r3, #48	@ 0x30
 800e038:	b29b      	uxth	r3, r3
 800e03a:	877b      	strh	r3, [r7, #58]	@ 0x3a
			for (wid = 0; c >= '0' && c <= '9'; c = *fmt++)
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	1c5a      	adds	r2, r3, #1
 800e040:	607a      	str	r2, [r7, #4]
 800e042:	781b      	ldrb	r3, [r3, #0]
 800e044:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e048:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e04c:	2b2f      	cmp	r3, #47	@ 0x2f
 800e04e:	d903      	bls.n	800e058 <tm_vsprintf+0x170>
 800e050:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e054:	2b39      	cmp	r3, #57	@ 0x39
 800e056:	d9e3      	bls.n	800e020 <tm_vsprintf+0x138>
		}

		/* Get precision */
		prec = -1;
 800e058:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e05c:	873b      	strh	r3, [r7, #56]	@ 0x38
		if (c == '.') {
 800e05e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e062:	2b2e      	cmp	r3, #46	@ 0x2e
 800e064:	d140      	bne.n	800e0e8 <tm_vsprintf+0x200>
			c = *fmt++;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	1c5a      	adds	r2, r3, #1
 800e06a:	607a      	str	r2, [r7, #4]
 800e06c:	781b      	ldrb	r3, [r3, #0]
 800e06e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (c == '*') {
 800e072:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e076:	2b2a      	cmp	r3, #42	@ 0x2a
 800e078:	d111      	bne.n	800e09e <tm_vsprintf+0x1b6>
				prec = va_arg(ap, INT);
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	1d1a      	adds	r2, r3, #4
 800e07e:	603a      	str	r2, [r7, #0]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	873b      	strh	r3, [r7, #56]	@ 0x38
				if (prec < 0) prec = 0;
 800e084:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800e088:	2b00      	cmp	r3, #0
 800e08a:	da01      	bge.n	800e090 <tm_vsprintf+0x1a8>
 800e08c:	2300      	movs	r3, #0
 800e08e:	873b      	strh	r3, [r7, #56]	@ 0x38
				c = *fmt++;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	1c5a      	adds	r2, r3, #1
 800e094:	607a      	str	r2, [r7, #4]
 800e096:	781b      	ldrb	r3, [r3, #0]
 800e098:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e09c:	e01e      	b.n	800e0dc <tm_vsprintf+0x1f4>
			} else {
				for (prec = 0;c >= '0' && c <= '9';c = *fmt++)
 800e09e:	2300      	movs	r3, #0
 800e0a0:	873b      	strh	r3, [r7, #56]	@ 0x38
 800e0a2:	e013      	b.n	800e0cc <tm_vsprintf+0x1e4>
					prec = prec * 10 + c - '0';
 800e0a4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800e0a6:	461a      	mov	r2, r3
 800e0a8:	0092      	lsls	r2, r2, #2
 800e0aa:	4413      	add	r3, r2
 800e0ac:	005b      	lsls	r3, r3, #1
 800e0ae:	b29a      	uxth	r2, r3
 800e0b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e0b4:	b29b      	uxth	r3, r3
 800e0b6:	4413      	add	r3, r2
 800e0b8:	b29b      	uxth	r3, r3
 800e0ba:	3b30      	subs	r3, #48	@ 0x30
 800e0bc:	b29b      	uxth	r3, r3
 800e0be:	873b      	strh	r3, [r7, #56]	@ 0x38
				for (prec = 0;c >= '0' && c <= '9';c = *fmt++)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	1c5a      	adds	r2, r3, #1
 800e0c4:	607a      	str	r2, [r7, #4]
 800e0c6:	781b      	ldrb	r3, [r3, #0]
 800e0c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e0cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e0d0:	2b2f      	cmp	r3, #47	@ 0x2f
 800e0d2:	d903      	bls.n	800e0dc <tm_vsprintf+0x1f4>
 800e0d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e0d8:	2b39      	cmp	r3, #57	@ 0x39
 800e0da:	d9e3      	bls.n	800e0a4 <tm_vsprintf+0x1bc>
			}
			flg &= ~F_ZERO;		/* No ZERO padding */
 800e0dc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800e0e0:	f023 0310 	bic.w	r3, r3, #16
 800e0e4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		}

		/* Get qualifier */
		qual = 0;
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		if (c == 'h' || c == 'l') {
 800e0ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e0f2:	2b68      	cmp	r3, #104	@ 0x68
 800e0f4:	d003      	beq.n	800e0fe <tm_vsprintf+0x216>
 800e0f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e0fa:	2b6c      	cmp	r3, #108	@ 0x6c
 800e0fc:	d109      	bne.n	800e112 <tm_vsprintf+0x22a>
			qual = c;
 800e0fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e102:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			c = *fmt++;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	1c5a      	adds	r2, r3, #1
 800e10a:	607a      	str	r2, [r7, #4]
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		}

		/* Format items */
		base = 10;
 800e112:	230a      	movs	r3, #10
 800e114:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		sign = 0;
 800e118:	2300      	movs	r3, #0
 800e11a:	74fb      	strb	r3, [r7, #19]
		cbe = &cbuf[MAX_DIGITS];	/* buffer end pointer */
 800e11c:	f107 0314 	add.w	r3, r7, #20
 800e120:	330e      	adds	r3, #14
 800e122:	62bb      	str	r3, [r7, #40]	@ 0x28

		switch (c) {
 800e124:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e128:	2b78      	cmp	r3, #120	@ 0x78
 800e12a:	f300 814d 	bgt.w	800e3c8 <tm_vsprintf+0x4e0>
 800e12e:	2b64      	cmp	r3, #100	@ 0x64
 800e130:	da0b      	bge.n	800e14a <tm_vsprintf+0x262>
 800e132:	2b63      	cmp	r3, #99	@ 0x63
 800e134:	f000 8135 	beq.w	800e3a2 <tm_vsprintf+0x4ba>
 800e138:	2b63      	cmp	r3, #99	@ 0x63
 800e13a:	f300 8145 	bgt.w	800e3c8 <tm_vsprintf+0x4e0>
 800e13e:	2b00      	cmp	r3, #0
 800e140:	f000 813e 	beq.w	800e3c0 <tm_vsprintf+0x4d8>
 800e144:	2b58      	cmp	r3, #88	@ 0x58
 800e146:	d022      	beq.n	800e18e <tm_vsprintf+0x2a6>
 800e148:	e13e      	b.n	800e3c8 <tm_vsprintf+0x4e0>
 800e14a:	3b64      	subs	r3, #100	@ 0x64
 800e14c:	2201      	movs	r2, #1
 800e14e:	fa02 f303 	lsl.w	r3, r2, r3
 800e152:	4a9f      	ldr	r2, [pc, #636]	@ (800e3d0 <tm_vsprintf+0x4e8>)
 800e154:	401a      	ands	r2, r3
 800e156:	2a00      	cmp	r2, #0
 800e158:	bf14      	ite	ne
 800e15a:	2201      	movne	r2, #1
 800e15c:	2200      	moveq	r2, #0
 800e15e:	b2d2      	uxtb	r2, r2
 800e160:	2a00      	cmp	r2, #0
 800e162:	d114      	bne.n	800e18e <tm_vsprintf+0x2a6>
 800e164:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 800e168:	2a00      	cmp	r2, #0
 800e16a:	bf14      	ite	ne
 800e16c:	2201      	movne	r2, #1
 800e16e:	2200      	moveq	r2, #0
 800e170:	b2d2      	uxtb	r2, r2
 800e172:	2a00      	cmp	r2, #0
 800e174:	f040 80f1 	bne.w	800e35a <tm_vsprintf+0x472>
 800e178:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	bf14      	ite	ne
 800e180:	2301      	movne	r3, #1
 800e182:	2300      	moveq	r3, #0
 800e184:	b2db      	uxtb	r3, r3
 800e186:	2b00      	cmp	r3, #0
 800e188:	f040 80cf 	bne.w	800e32a <tm_vsprintf+0x442>
 800e18c:	e11c      	b.n	800e3c8 <tm_vsprintf+0x4e0>
		case 'd':
		case 'u':
		case 'X':
		case 'x':
		case 'o':
			if (qual == 'l') {
 800e18e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e192:	2b6c      	cmp	r3, #108	@ 0x6c
 800e194:	d105      	bne.n	800e1a2 <tm_vsprintf+0x2ba>
				v = va_arg(ap, UW);
 800e196:	683b      	ldr	r3, [r7, #0]
 800e198:	1d1a      	adds	r2, r3, #4
 800e19a:	603a      	str	r2, [r7, #0]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e1a0:	e016      	b.n	800e1d0 <tm_vsprintf+0x2e8>
			} else {
				v = va_arg(ap, UINT);
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	1d1a      	adds	r2, r3, #4
 800e1a6:	603a      	str	r2, [r7, #0]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
				if (qual == 'h') {
 800e1ac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e1b0:	2b68      	cmp	r3, #104	@ 0x68
 800e1b2:	d10d      	bne.n	800e1d0 <tm_vsprintf+0x2e8>
					v = (c == 'i' || c == 'd') ?
						(H)v :(UH)v;
 800e1b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e1b8:	2b69      	cmp	r3, #105	@ 0x69
 800e1ba:	d003      	beq.n	800e1c4 <tm_vsprintf+0x2dc>
					v = (c == 'i' || c == 'd') ?
 800e1bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e1c0:	2b64      	cmp	r3, #100	@ 0x64
 800e1c2:	d102      	bne.n	800e1ca <tm_vsprintf+0x2e2>
						(H)v :(UH)v;
 800e1c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1c6:	b21b      	sxth	r3, r3
 800e1c8:	e001      	b.n	800e1ce <tm_vsprintf+0x2e6>
 800e1ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e1cc:	b29b      	uxth	r3, r3
					v = (c == 'i' || c == 'd') ?
 800e1ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
				}
			}
			switch (c) {
 800e1d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e1d4:	3b58      	subs	r3, #88	@ 0x58
 800e1d6:	2b20      	cmp	r3, #32
 800e1d8:	f200 8094 	bhi.w	800e304 <tm_vsprintf+0x41c>
 800e1dc:	a201      	add	r2, pc, #4	@ (adr r2, 800e1e4 <tm_vsprintf+0x2fc>)
 800e1de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1e2:	bf00      	nop
 800e1e4:	0800e2ab 	.word	0x0800e2ab
 800e1e8:	0800e305 	.word	0x0800e305
 800e1ec:	0800e305 	.word	0x0800e305
 800e1f0:	0800e305 	.word	0x0800e305
 800e1f4:	0800e305 	.word	0x0800e305
 800e1f8:	0800e305 	.word	0x0800e305
 800e1fc:	0800e305 	.word	0x0800e305
 800e200:	0800e305 	.word	0x0800e305
 800e204:	0800e305 	.word	0x0800e305
 800e208:	0800e305 	.word	0x0800e305
 800e20c:	0800e305 	.word	0x0800e305
 800e210:	0800e305 	.word	0x0800e305
 800e214:	0800e269 	.word	0x0800e269
 800e218:	0800e305 	.word	0x0800e305
 800e21c:	0800e305 	.word	0x0800e305
 800e220:	0800e305 	.word	0x0800e305
 800e224:	0800e305 	.word	0x0800e305
 800e228:	0800e269 	.word	0x0800e269
 800e22c:	0800e305 	.word	0x0800e305
 800e230:	0800e305 	.word	0x0800e305
 800e234:	0800e305 	.word	0x0800e305
 800e238:	0800e305 	.word	0x0800e305
 800e23c:	0800e305 	.word	0x0800e305
 800e240:	0800e2bf 	.word	0x0800e2bf
 800e244:	0800e305 	.word	0x0800e305
 800e248:	0800e305 	.word	0x0800e305
 800e24c:	0800e305 	.word	0x0800e305
 800e250:	0800e305 	.word	0x0800e305
 800e254:	0800e305 	.word	0x0800e305
 800e258:	0800e305 	.word	0x0800e305
 800e25c:	0800e305 	.word	0x0800e305
 800e260:	0800e305 	.word	0x0800e305
 800e264:	0800e2b5 	.word	0x0800e2b5
			case 'i':
			case 'd':
				if ((W)v < 0) {
 800e268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	da05      	bge.n	800e27a <tm_vsprintf+0x392>
					v = - (W)v;
 800e26e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e270:	425b      	negs	r3, r3
 800e272:	63fb      	str	r3, [r7, #60]	@ 0x3c
					sign = '-';
 800e274:	232d      	movs	r3, #45	@ 0x2d
 800e276:	74fb      	strb	r3, [r7, #19]
 800e278:	e010      	b.n	800e29c <tm_vsprintf+0x3b4>
				} else if ((flg & F_PLUS) != 0) {
 800e27a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800e27e:	f003 0302 	and.w	r3, r3, #2
 800e282:	2b00      	cmp	r3, #0
 800e284:	d002      	beq.n	800e28c <tm_vsprintf+0x3a4>
					sign = '+';
 800e286:	232b      	movs	r3, #43	@ 0x2b
 800e288:	74fb      	strb	r3, [r7, #19]
 800e28a:	e007      	b.n	800e29c <tm_vsprintf+0x3b4>
				} else if ((flg & F_SPACE) != 0) {
 800e28c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800e290:	f003 0304 	and.w	r3, r3, #4
 800e294:	2b00      	cmp	r3, #0
 800e296:	d032      	beq.n	800e2fe <tm_vsprintf+0x416>
					sign = ' ';
 800e298:	2320      	movs	r3, #32
 800e29a:	74fb      	strb	r3, [r7, #19]
				} else {
					break;
				}
				wid--;		/* for sign */
 800e29c:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 800e2a0:	b29b      	uxth	r3, r3
 800e2a2:	3b01      	subs	r3, #1
 800e2a4:	b29b      	uxth	r3, r3
 800e2a6:	877b      	strh	r3, [r7, #58]	@ 0x3a
			case 'u':
				break;
 800e2a8:	e02c      	b.n	800e304 <tm_vsprintf+0x41c>
			case 'X':
				base += 0x40;	/* base = 16 + 0x40 */
 800e2aa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e2ae:	3340      	adds	r3, #64	@ 0x40
 800e2b0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			case 'x':
				base += 8;	/* base = 16 */
 800e2b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e2b8:	3308      	adds	r3, #8
 800e2ba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			case 'o':
				base -= 2;	/* base = 8 */
 800e2be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e2c2:	3b02      	subs	r3, #2
 800e2c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				if ((flg & F_PREFIX) != 0 && v != 0) {
 800e2c8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800e2cc:	f003 0308 	and.w	r3, r3, #8
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d016      	beq.n	800e302 <tm_vsprintf+0x41a>
 800e2d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d013      	beq.n	800e302 <tm_vsprintf+0x41a>
					wid -= (base == 8) ? 1 : 2;
 800e2da:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800e2dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e2e0:	2b08      	cmp	r3, #8
 800e2e2:	d101      	bne.n	800e2e8 <tm_vsprintf+0x400>
 800e2e4:	2301      	movs	r3, #1
 800e2e6:	e000      	b.n	800e2ea <tm_vsprintf+0x402>
 800e2e8:	2302      	movs	r3, #2
 800e2ea:	1ad3      	subs	r3, r2, r3
 800e2ec:	b29b      	uxth	r3, r3
 800e2ee:	877b      	strh	r3, [r7, #58]	@ 0x3a
					base |= 0x80;
 800e2f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e2f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e2f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				}
				break;
 800e2fc:	e001      	b.n	800e302 <tm_vsprintf+0x41a>
					break;
 800e2fe:	bf00      	nop
 800e300:	e000      	b.n	800e304 <tm_vsprintf+0x41c>
				break;
 800e302:	bf00      	nop
			}
			/* Note: None outputs when v == 0 && prec == 0 */
			cbs = (v == 0 && prec == 0) ?
						cbe : outint(cbe, v, base);
 800e304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e306:	2b00      	cmp	r3, #0
 800e308:	d103      	bne.n	800e312 <tm_vsprintf+0x42a>
			cbs = (v == 0 && prec == 0) ?
 800e30a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d008      	beq.n	800e324 <tm_vsprintf+0x43c>
						cbe : outint(cbe, v, base);
 800e312:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e316:	461a      	mov	r2, r3
 800e318:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e31a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e31c:	f7ff fda6 	bl	800de6c <outint>
 800e320:	4603      	mov	r3, r0
 800e322:	e000      	b.n	800e326 <tm_vsprintf+0x43e>
 800e324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
			cbs = (v == 0 && prec == 0) ?
 800e326:	62fb      	str	r3, [r7, #44]	@ 0x2c
			break;
 800e328:	e055      	b.n	800e3d6 <tm_vsprintf+0x4ee>
		case 'p':
			v = (UW)va_arg(ap, void *);
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	1d1a      	adds	r2, r3, #4
 800e32e:	603a      	str	r2, [r7, #0]
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (v != 0) {
 800e334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e336:	2b00      	cmp	r3, #0
 800e338:	d006      	beq.n	800e348 <tm_vsprintf+0x460>
				base = 16 | 0x80;
 800e33a:	2390      	movs	r3, #144	@ 0x90
 800e33c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				wid -= 2;
 800e340:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e342:	3b02      	subs	r3, #2
 800e344:	b29b      	uxth	r3, r3
 800e346:	877b      	strh	r3, [r7, #58]	@ 0x3a
			}
			cbs = outint(cbe, v, base);
 800e348:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e34c:	461a      	mov	r2, r3
 800e34e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e350:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e352:	f7ff fd8b 	bl	800de6c <outint>
 800e356:	62f8      	str	r0, [r7, #44]	@ 0x2c
			break;
 800e358:	e03d      	b.n	800e3d6 <tm_vsprintf+0x4ee>
		case 's':
			cbe = cbs = va_arg(ap, UB *);
 800e35a:	683b      	ldr	r3, [r7, #0]
 800e35c:	1d1a      	adds	r2, r3, #4
 800e35e:	603a      	str	r2, [r7, #0]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e366:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (prec < 0) {
 800e368:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	da0b      	bge.n	800e388 <tm_vsprintf+0x4a0>
				while (*cbe != '\0') cbe++;
 800e370:	e002      	b.n	800e378 <tm_vsprintf+0x490>
 800e372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e374:	3301      	adds	r3, #1
 800e376:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e37a:	781b      	ldrb	r3, [r3, #0]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d1f8      	bne.n	800e372 <tm_vsprintf+0x48a>
			} else {
				while (--prec >= 0 && *cbe != '\0') cbe++;
			}
			break;
 800e380:	e028      	b.n	800e3d4 <tm_vsprintf+0x4ec>
				while (--prec >= 0 && *cbe != '\0') cbe++;
 800e382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e384:	3301      	adds	r3, #1
 800e386:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e388:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800e38a:	3b01      	subs	r3, #1
 800e38c:	b29b      	uxth	r3, r3
 800e38e:	873b      	strh	r3, [r7, #56]	@ 0x38
 800e390:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800e394:	2b00      	cmp	r3, #0
 800e396:	db1d      	blt.n	800e3d4 <tm_vsprintf+0x4ec>
 800e398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e39a:	781b      	ldrb	r3, [r3, #0]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d1f0      	bne.n	800e382 <tm_vsprintf+0x49a>
			break;
 800e3a0:	e018      	b.n	800e3d4 <tm_vsprintf+0x4ec>
		case 'c':
			cbs = cbe;
 800e3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			*--cbs = (UB)va_arg(ap, INT);
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	1d1a      	adds	r2, r3, #4
 800e3aa:	603a      	str	r2, [r7, #0]
 800e3ac:	681a      	ldr	r2, [r3, #0]
 800e3ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3b0:	3b01      	subs	r3, #1
 800e3b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e3b4:	b2d2      	uxtb	r2, r2
 800e3b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3b8:	701a      	strb	r2, [r3, #0]
			prec = 0;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	873b      	strh	r3, [r7, #56]	@ 0x38
			break;
 800e3be:	e00a      	b.n	800e3d6 <tm_vsprintf+0x4ee>
		case '\0':
			fmt--;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	3b01      	subs	r3, #1
 800e3c4:	607b      	str	r3, [r7, #4]
			continue;
 800e3c6:	e08b      	b.n	800e4e0 <tm_vsprintf+0x5f8>
		default:
			/* Output as fixed string */
			fms = (UB*)fmt - 1;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	3b01      	subs	r3, #1
 800e3cc:	633b      	str	r3, [r7, #48]	@ 0x30
			continue;
 800e3ce:	e087      	b.n	800e4e0 <tm_vsprintf+0x5f8>
 800e3d0:	00120821 	.word	0x00120821
			break;
 800e3d4:	bf00      	nop
		}

		n = cbe - cbs;				/* item length */
 800e3d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e3d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3da:	1ad3      	subs	r3, r2, r3
 800e3dc:	86fb      	strh	r3, [r7, #54]	@ 0x36
		if ((prec -= n) > 0) n += prec;
 800e3de:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800e3e0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e3e2:	1ad3      	subs	r3, r2, r3
 800e3e4:	b29b      	uxth	r3, r3
 800e3e6:	873b      	strh	r3, [r7, #56]	@ 0x38
 800e3e8:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	dd04      	ble.n	800e3fa <tm_vsprintf+0x512>
 800e3f0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800e3f2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800e3f4:	4413      	add	r3, r2
 800e3f6:	b29b      	uxth	r3, r3
 800e3f8:	86fb      	strh	r3, [r7, #54]	@ 0x36
		wid -= n;				/* pad length */
 800e3fa:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800e3fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e3fe:	1ad3      	subs	r3, r2, r3
 800e400:	b29b      	uxth	r3, r3
 800e402:	877b      	strh	r3, [r7, #58]	@ 0x3a

		/* Output preceding spaces */
		if ((flg & (F_LEFT | F_ZERO)) == 0 ) {
 800e404:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800e408:	f003 0311 	and.w	r3, r3, #17
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d10d      	bne.n	800e42c <tm_vsprintf+0x544>
			while (--wid >= 0) (*ostr)((UB*)" ", 1, par);
 800e410:	e004      	b.n	800e41c <tm_vsprintf+0x534>
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	68ba      	ldr	r2, [r7, #8]
 800e416:	2101      	movs	r1, #1
 800e418:	483e      	ldr	r0, [pc, #248]	@ (800e514 <tm_vsprintf+0x62c>)
 800e41a:	4798      	blx	r3
 800e41c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e41e:	3b01      	subs	r3, #1
 800e420:	b29b      	uxth	r3, r3
 800e422:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800e424:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 800e428:	2b00      	cmp	r3, #0
 800e42a:	daf2      	bge.n	800e412 <tm_vsprintf+0x52a>
		}

		/* Output sign */
		if (sign != 0) {
 800e42c:	7cfb      	ldrb	r3, [r7, #19]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d005      	beq.n	800e43e <tm_vsprintf+0x556>
			(*ostr)(&sign, 1, par);
 800e432:	f107 0013 	add.w	r0, r7, #19
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	68ba      	ldr	r2, [r7, #8]
 800e43a:	2101      	movs	r1, #1
 800e43c:	4798      	blx	r3
		}

		/* Output prefix "0x", "0X" or "0" */
		if ((base & 0x80) != 0) {
 800e43e:	f997 3026 	ldrsb.w	r3, [r7, #38]	@ 0x26
 800e442:	2b00      	cmp	r3, #0
 800e444:	da17      	bge.n	800e476 <tm_vsprintf+0x58e>
			(*ostr)((UB*)"0", 1, par);
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	68ba      	ldr	r2, [r7, #8]
 800e44a:	2101      	movs	r1, #1
 800e44c:	4832      	ldr	r0, [pc, #200]	@ (800e518 <tm_vsprintf+0x630>)
 800e44e:	4798      	blx	r3
			if ((base & 0x10) != 0) {
 800e450:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e454:	f003 0310 	and.w	r3, r3, #16
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d00c      	beq.n	800e476 <tm_vsprintf+0x58e>
				(*ostr)((base & 0x40) ? (UB*)"X" : (UB*)"x", 1, par);
 800e45c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e464:	2b00      	cmp	r3, #0
 800e466:	d001      	beq.n	800e46c <tm_vsprintf+0x584>
 800e468:	482c      	ldr	r0, [pc, #176]	@ (800e51c <tm_vsprintf+0x634>)
 800e46a:	e000      	b.n	800e46e <tm_vsprintf+0x586>
 800e46c:	482c      	ldr	r0, [pc, #176]	@ (800e520 <tm_vsprintf+0x638>)
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	68ba      	ldr	r2, [r7, #8]
 800e472:	2101      	movs	r1, #1
 800e474:	4798      	blx	r3
			}
		}

		/* Output preceding zeros for precision or padding */
		if ((n = prec) <= 0) {
 800e476:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800e478:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e47a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800e47e:	2b00      	cmp	r3, #0
 800e480:	dc0f      	bgt.n	800e4a2 <tm_vsprintf+0x5ba>
			if ((flg & (F_LEFT | F_ZERO)) == F_ZERO ) {
 800e482:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800e486:	f003 0311 	and.w	r3, r3, #17
 800e48a:	2b10      	cmp	r3, #16
 800e48c:	d109      	bne.n	800e4a2 <tm_vsprintf+0x5ba>
				n = wid;
 800e48e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e490:	86fb      	strh	r3, [r7, #54]	@ 0x36
				wid = 0;
 800e492:	2300      	movs	r3, #0
 800e494:	877b      	strh	r3, [r7, #58]	@ 0x3a
			}
		}
		while (--n >= 0) (*ostr)((UB*)"0", 1, par);
 800e496:	e004      	b.n	800e4a2 <tm_vsprintf+0x5ba>
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	68ba      	ldr	r2, [r7, #8]
 800e49c:	2101      	movs	r1, #1
 800e49e:	481e      	ldr	r0, [pc, #120]	@ (800e518 <tm_vsprintf+0x630>)
 800e4a0:	4798      	blx	r3
 800e4a2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800e4a4:	3b01      	subs	r3, #1
 800e4a6:	b29b      	uxth	r3, r3
 800e4a8:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800e4aa:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	daf2      	bge.n	800e498 <tm_vsprintf+0x5b0>

		/* Output item string */
		(*ostr)(cbs, cbe - cbs, par);
 800e4b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e4b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4b6:	1ad1      	subs	r1, r2, r3
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	68ba      	ldr	r2, [r7, #8]
 800e4bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e4be:	4798      	blx	r3

		/* Output tailing spaces */
		while (--wid >= 0) (*ostr)((UB*)" ", 1, par);
 800e4c0:	e004      	b.n	800e4cc <tm_vsprintf+0x5e4>
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	68ba      	ldr	r2, [r7, #8]
 800e4c6:	2101      	movs	r1, #1
 800e4c8:	4812      	ldr	r0, [pc, #72]	@ (800e514 <tm_vsprintf+0x62c>)
 800e4ca:	4798      	blx	r3
 800e4cc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e4ce:	3b01      	subs	r3, #1
 800e4d0:	b29b      	uxth	r3, r3
 800e4d2:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800e4d4:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	daf2      	bge.n	800e4c2 <tm_vsprintf+0x5da>
 800e4dc:	e000      	b.n	800e4e0 <tm_vsprintf+0x5f8>
			continue;
 800e4de:	bf00      	nop
	for (fms = NULL; (c = *fmt++) != '\0'; ) {
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	1c5a      	adds	r2, r3, #1
 800e4e4:	607a      	str	r2, [r7, #4]
 800e4e6:	781b      	ldrb	r3, [r3, #0]
 800e4e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e4ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	f47f ad03 	bne.w	800defc <tm_vsprintf+0x14>
	}

	/* Output last fix string */
	if (fms != NULL) {
 800e4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d007      	beq.n	800e50c <tm_vsprintf+0x624>
		(*ostr)(fms, fmt - fms - 1, par);
 800e4fc:	687a      	ldr	r2, [r7, #4]
 800e4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e500:	1ad3      	subs	r3, r2, r3
 800e502:	1e59      	subs	r1, r3, #1
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	68ba      	ldr	r2, [r7, #8]
 800e508:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e50a:	4798      	blx	r3
	}
#if	TM_OUTBUF_SZ > 0
	/* Flush output */
	(*ostr)(NULL, 0, par);
#endif
}
 800e50c:	bf00      	nop
 800e50e:	3740      	adds	r7, #64	@ 0x40
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}
 800e514:	0800ec18 	.word	0x0800ec18
 800e518:	0800ec1c 	.word	0x0800ec1c
 800e51c:	0800ec20 	.word	0x0800ec20
 800e520:	0800ec24 	.word	0x0800ec24

0800e524 <out_cons>:

/*
 *	Output to console
 */
LOCAL	void	out_cons( UB *str, INT len,  OutPar *par )
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b084      	sub	sp, #16
 800e528:	af00      	add	r7, sp, #0
 800e52a:	60f8      	str	r0, [r7, #12]
 800e52c:	60b9      	str	r1, [r7, #8]
 800e52e:	607a      	str	r2, [r7, #4]
#if	TM_OUTBUF_SZ == 0
	/* Direct output to console */
	par->len += len;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e536:	b29a      	uxth	r2, r3
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	b29b      	uxth	r3, r3
 800e53c:	4413      	add	r3, r2
 800e53e:	b29b      	uxth	r3, r3
 800e540:	b21a      	sxth	r2, r3
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	801a      	strh	r2, [r3, #0]
	while (--len >= 0) tm_putchar(*str++);
 800e546:	e006      	b.n	800e556 <out_cons+0x32>
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	1c5a      	adds	r2, r3, #1
 800e54c:	60fa      	str	r2, [r7, #12]
 800e54e:	781b      	ldrb	r3, [r3, #0]
 800e550:	4618      	mov	r0, r3
 800e552:	f7ff fc47 	bl	800dde4 <tm_putchar>
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	3b01      	subs	r3, #1
 800e55a:	60bb      	str	r3, [r7, #8]
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	daf2      	bge.n	800e548 <out_cons+0x24>
			}
			par->bufp[par->cnt++] = *str++;
		}
	}
#endif
}
 800e562:	bf00      	nop
 800e564:	bf00      	nop
 800e566:	3710      	adds	r7, #16
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}

0800e56c <tm_printf>:

EXPORT INT	tm_printf( const UB *format, ... )
{
 800e56c:	b40f      	push	{r0, r1, r2, r3}
 800e56e:	b580      	push	{r7, lr}
 800e570:	b082      	sub	sp, #8
 800e572:	af00      	add	r7, sp, #0
	va_list	ap;

#if	TM_OUTBUF_SZ == 0
	H	len = 0;
 800e574:	2300      	movs	r3, #0
 800e576:	807b      	strh	r3, [r7, #2]

	va_start(ap, format);
 800e578:	f107 0314 	add.w	r3, r7, #20
 800e57c:	607b      	str	r3, [r7, #4]
	tm_vsprintf(out_cons, (OutPar*)&len, format, ap);
 800e57e:	1cb9      	adds	r1, r7, #2
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	693a      	ldr	r2, [r7, #16]
 800e584:	4805      	ldr	r0, [pc, #20]	@ (800e59c <tm_printf+0x30>)
 800e586:	f7ff fcaf 	bl	800dee8 <tm_vsprintf>
	va_end(ap);
	return len;
 800e58a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
	va_start(ap, format);
	tm_vsprintf(out_cons, (OutPar*)&par, format, ap);
	va_end(ap);
	return par.len;
#endif
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3708      	adds	r7, #8
 800e592:	46bd      	mov	sp, r7
 800e594:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e598:	b004      	add	sp, #16
 800e59a:	4770      	bx	lr
 800e59c:	0800e525 	.word	0x0800e525

0800e5a0 <out_buf>:

/*
 *	Output to buffer
 */
LOCAL	void	out_buf( UB *str, INT len, OutPar *par )
{
 800e5a0:	b480      	push	{r7}
 800e5a2:	b085      	sub	sp, #20
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	60f8      	str	r0, [r7, #12]
 800e5a8:	60b9      	str	r1, [r7, #8]
 800e5aa:	607a      	str	r2, [r7, #4]
	par->len += len;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e5b2:	b29a      	uxth	r2, r3
 800e5b4:	68bb      	ldr	r3, [r7, #8]
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	4413      	add	r3, r2
 800e5ba:	b29b      	uxth	r3, r3
 800e5bc:	b21a      	sxth	r2, r3
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	801a      	strh	r2, [r3, #0]
	while (--len >= 0) *(par->bufp)++ = *str++;
 800e5c2:	e009      	b.n	800e5d8 <out_buf+0x38>
 800e5c4:	68fa      	ldr	r2, [r7, #12]
 800e5c6:	1c53      	adds	r3, r2, #1
 800e5c8:	60fb      	str	r3, [r7, #12]
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	685b      	ldr	r3, [r3, #4]
 800e5ce:	1c58      	adds	r0, r3, #1
 800e5d0:	6879      	ldr	r1, [r7, #4]
 800e5d2:	6048      	str	r0, [r1, #4]
 800e5d4:	7812      	ldrb	r2, [r2, #0]
 800e5d6:	701a      	strb	r2, [r3, #0]
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	3b01      	subs	r3, #1
 800e5dc:	60bb      	str	r3, [r7, #8]
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	daef      	bge.n	800e5c4 <out_buf+0x24>
}
 800e5e4:	bf00      	nop
 800e5e6:	bf00      	nop
 800e5e8:	3714      	adds	r7, #20
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	bc80      	pop	{r7}
 800e5ee:	4770      	bx	lr

0800e5f0 <tm_sprintf>:

EXPORT INT	tm_sprintf( UB *str, const UB *format, ... )
{
 800e5f0:	b40e      	push	{r1, r2, r3}
 800e5f2:	b580      	push	{r7, lr}
 800e5f4:	b087      	sub	sp, #28
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	6078      	str	r0, [r7, #4]
	OutPar	par;
	va_list	ap;

	par.len = 0;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	823b      	strh	r3, [r7, #16]
	par.bufp = str;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	617b      	str	r3, [r7, #20]
	va_start(ap, format);
 800e602:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e606:	60fb      	str	r3, [r7, #12]
	tm_vsprintf(out_buf, &par, format, ap);
 800e608:	f107 0110 	add.w	r1, r7, #16
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e610:	4809      	ldr	r0, [pc, #36]	@ (800e638 <tm_sprintf+0x48>)
 800e612:	f7ff fc69 	bl	800dee8 <tm_vsprintf>
	va_end(ap);
	str[par.len] = '\0';
 800e616:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800e61a:	461a      	mov	r2, r3
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	4413      	add	r3, r2
 800e620:	2200      	movs	r2, #0
 800e622:	701a      	strb	r2, [r3, #0]
	return par.len;
 800e624:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
}
 800e628:	4618      	mov	r0, r3
 800e62a:	371c      	adds	r7, #28
 800e62c:	46bd      	mov	sp, r7
 800e62e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e632:	b003      	add	sp, #12
 800e634:	4770      	bx	lr
 800e636:	bf00      	nop
 800e638:	0800e5a1 	.word	0x0800e5a1

0800e63c <tm_snd_dat>:

/* Communication speed */
#define UART_BAUD	(115200)			/* 115200 bps */

EXPORT	void	tm_snd_dat( const UB* buf, INT size )
{
 800e63c:	b480      	push	{r7}
 800e63e:	b085      	sub	sp, #20
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	6039      	str	r1, [r7, #0]
	UB	*b;

	for( b = (UB *)buf; size > 0; size--, b++ ){
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	60fb      	str	r3, [r7, #12]
 800e64a:	e017      	b.n	800e67c <tm_snd_dat+0x40>
		while ((UART_ISR & ISR_TXE) == 0 );
 800e64c:	bf00      	nop
 800e64e:	4b10      	ldr	r3, [pc, #64]	@ (800e690 <tm_snd_dat+0x54>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e656:	2b00      	cmp	r3, #0
 800e658:	d0f9      	beq.n	800e64e <tm_snd_dat+0x12>
		UART_TDR = *b;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	781a      	ldrb	r2, [r3, #0]
 800e65e:	4b0d      	ldr	r3, [pc, #52]	@ (800e694 <tm_snd_dat+0x58>)
 800e660:	601a      	str	r2, [r3, #0]
		while ((UART_ISR & ISR_TC) == 0 );
 800e662:	bf00      	nop
 800e664:	4b0a      	ldr	r3, [pc, #40]	@ (800e690 <tm_snd_dat+0x54>)
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d0f9      	beq.n	800e664 <tm_snd_dat+0x28>
	for( b = (UB *)buf; size > 0; size--, b++ ){
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	3b01      	subs	r3, #1
 800e674:	603b      	str	r3, [r7, #0]
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	3301      	adds	r3, #1
 800e67a:	60fb      	str	r3, [r7, #12]
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	dce4      	bgt.n	800e64c <tm_snd_dat+0x10>
	}
}
 800e682:	bf00      	nop
 800e684:	bf00      	nop
 800e686:	3714      	adds	r7, #20
 800e688:	46bd      	mov	sp, r7
 800e68a:	bc80      	pop	{r7}
 800e68c:	4770      	bx	lr
 800e68e:	bf00      	nop
 800e690:	4000481c 	.word	0x4000481c
 800e694:	40004828 	.word	0x40004828

0800e698 <tm_rcv_dat>:


EXPORT	void	tm_rcv_dat( UB* buf, INT size )
{
 800e698:	b480      	push	{r7}
 800e69a:	b083      	sub	sp, #12
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
 800e6a0:	6039      	str	r1, [r7, #0]
	for( ; size > 0; size--, buf++ ){
 800e6a2:	e011      	b.n	800e6c8 <tm_rcv_dat+0x30>
		while ( (UART_ISR & ISR_RXNE) == 0 );
 800e6a4:	bf00      	nop
 800e6a6:	4b0d      	ldr	r3, [pc, #52]	@ (800e6dc <tm_rcv_dat+0x44>)
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	f003 0320 	and.w	r3, r3, #32
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d0f9      	beq.n	800e6a6 <tm_rcv_dat+0xe>
		*buf = UART_RDR & 0xff;
 800e6b2:	4b0b      	ldr	r3, [pc, #44]	@ (800e6e0 <tm_rcv_dat+0x48>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	b2da      	uxtb	r2, r3
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	701a      	strb	r2, [r3, #0]
	for( ; size > 0; size--, buf++ ){
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	3b01      	subs	r3, #1
 800e6c0:	603b      	str	r3, [r7, #0]
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	3301      	adds	r3, #1
 800e6c6:	607b      	str	r3, [r7, #4]
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	dcea      	bgt.n	800e6a4 <tm_rcv_dat+0xc>
	}
}
 800e6ce:	bf00      	nop
 800e6d0:	bf00      	nop
 800e6d2:	370c      	adds	r7, #12
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bc80      	pop	{r7}
 800e6d8:	4770      	bx	lr
 800e6da:	bf00      	nop
 800e6dc:	4000481c 	.word	0x4000481c
 800e6e0:	40004824 	.word	0x40004824

0800e6e4 <tm_com_init>:


EXPORT	void	tm_com_init(void)
{
 800e6e4:	b480      	push	{r7}
 800e6e6:	af00      	add	r7, sp, #0
	/* Initialize serial communication. Disable all interrupt. */
	UART_CR1 = 0;		/* 8bit, Non parity (Reset value) */
 800e6e8:	4b09      	ldr	r3, [pc, #36]	@ (800e710 <tm_com_init+0x2c>)
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	601a      	str	r2, [r3, #0]
	UART_CR2 = 0;		/* Stop bit 1 (Reset value) */
 800e6ee:	4b09      	ldr	r3, [pc, #36]	@ (800e714 <tm_com_init+0x30>)
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	601a      	str	r2, [r3, #0]
	UART_CR3 = 0;		/* No hard flow control (Reset value) */
 800e6f4:	4b08      	ldr	r3, [pc, #32]	@ (800e718 <tm_com_init+0x34>)
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	601a      	str	r2, [r3, #0]

	/* Set baud rate */
	UART_BRR = ((PCLK1*1000*1000) + UART_BAUD/2)/UART_BAUD;
 800e6fa:	4b08      	ldr	r3, [pc, #32]	@ (800e71c <tm_com_init+0x38>)
 800e6fc:	f240 42a5 	movw	r2, #1189	@ 0x4a5
 800e700:	601a      	str	r2, [r3, #0]

	UART_CR1 = CR1_UE | CR1_RE |CR1_TE;	/* Start UART */
 800e702:	4b03      	ldr	r3, [pc, #12]	@ (800e710 <tm_com_init+0x2c>)
 800e704:	220d      	movs	r2, #13
 800e706:	601a      	str	r2, [r3, #0]
}
 800e708:	bf00      	nop
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bc80      	pop	{r7}
 800e70e:	4770      	bx	lr
 800e710:	40004800 	.word	0x40004800
 800e714:	40004804 	.word	0x40004804
 800e718:	40004808 	.word	0x40004808
 800e71c:	4000480c 	.word	0x4000480c

0800e720 <memset>:
 800e720:	4402      	add	r2, r0
 800e722:	4603      	mov	r3, r0
 800e724:	4293      	cmp	r3, r2
 800e726:	d100      	bne.n	800e72a <memset+0xa>
 800e728:	4770      	bx	lr
 800e72a:	f803 1b01 	strb.w	r1, [r3], #1
 800e72e:	e7f9      	b.n	800e724 <memset+0x4>
 800e730:	70637555 	.word	0x70637555
 800e734:	00000000 	.word	0x00000000
 800e738:	61746144 	.word	0x61746144
 800e73c:	63757320 	.word	0x63757320
 800e740:	73736563 	.word	0x73736563
 800e744:	6c6c7566 	.word	0x6c6c7566
 800e748:	65722079 	.word	0x65722079
 800e74c:	66206461 	.word	0x66206461
 800e750:	206d6f72 	.word	0x206d6f72
 800e754:	69676572 	.word	0x69676572
 800e758:	72657473 	.word	0x72657473
 800e75c:	25783020 	.word	0x25783020
 800e760:	42202e78 	.word	0x42202e78
 800e764:	73657479 	.word	0x73657479
 800e768:	61657220 	.word	0x61657220
 800e76c:	25203a64 	.word	0x25203a64
 800e770:	00000a64 	.word	0x00000a64
 800e774:	61746144 	.word	0x61746144
 800e778:	5d64255b 	.word	0x5d64255b
 800e77c:	30203d20 	.word	0x30203d20
 800e780:	0a782578 	.word	0x0a782578
 800e784:	00000000 	.word	0x00000000
 800e788:	6f727245 	.word	0x6f727245
 800e78c:	65722072 	.word	0x65722072
 800e790:	6e696461 	.word	0x6e696461
 800e794:	72662067 	.word	0x72662067
 800e798:	72206d6f 	.word	0x72206d6f
 800e79c:	73696765 	.word	0x73696765
 800e7a0:	20726574 	.word	0x20726574
 800e7a4:	78257830 	.word	0x78257830
 800e7a8:	0000000a 	.word	0x0000000a
 800e7ac:	6c696146 	.word	0x6c696146
 800e7b0:	74206465 	.word	0x74206465
 800e7b4:	706f206f 	.word	0x706f206f
 800e7b8:	49206e65 	.word	0x49206e65
 800e7bc:	64204332 	.word	0x64204332
 800e7c0:	63697665 	.word	0x63697665
 800e7c4:	00000a65 	.word	0x00000a65
 800e7c8:	54524155 	.word	0x54524155
 800e7cc:	00000031 	.word	0x00000031
 800e7d0:	6c696146 	.word	0x6c696146
 800e7d4:	74206465 	.word	0x74206465
 800e7d8:	706f206f 	.word	0x706f206f
 800e7dc:	55206e65 	.word	0x55206e65
 800e7e0:	20545241 	.word	0x20545241
 800e7e4:	69766564 	.word	0x69766564
 800e7e8:	000a6563 	.word	0x000a6563
 800e7ec:	6c696146 	.word	0x6c696146
 800e7f0:	74206465 	.word	0x74206465
 800e7f4:	6572206f 	.word	0x6572206f
 800e7f8:	66206461 	.word	0x66206461
 800e7fc:	206d6f72 	.word	0x206d6f72
 800e800:	54524155 	.word	0x54524155
 800e804:	0000000a 	.word	0x0000000a
 800e808:	65636341 	.word	0x65636341
 800e80c:	58203a6c 	.word	0x58203a6c
 800e810:	2c64253d 	.word	0x2c64253d
 800e814:	253d5920 	.word	0x253d5920
 800e818:	5a202c64 	.word	0x5a202c64
 800e81c:	0a64253d 	.word	0x0a64253d
 800e820:	00000000 	.word	0x00000000
 800e824:	6f727947 	.word	0x6f727947
 800e828:	5820203a 	.word	0x5820203a
 800e82c:	2c64253d 	.word	0x2c64253d
 800e830:	253d5920 	.word	0x253d5920
 800e834:	5a202c64 	.word	0x5a202c64
 800e838:	0a64253d 	.word	0x0a64253d
 800e83c:	00000000 	.word	0x00000000
 800e840:	6d6f644f 	.word	0x6d6f644f
 800e844:	3d58203a 	.word	0x3d58203a
 800e848:	66322e25 	.word	0x66322e25
 800e84c:	3d59202c 	.word	0x3d59202c
 800e850:	66322e25 	.word	0x66322e25
 800e854:	6854202c 	.word	0x6854202c
 800e858:	3d617465 	.word	0x3d617465
 800e85c:	66322e25 	.word	0x66322e25
 800e860:	0000000a 	.word	0x0000000a
 800e864:	72657355 	.word	0x72657355
 800e868:	6f727020 	.word	0x6f727020
 800e86c:	6d617267 	.word	0x6d617267
 800e870:	61747320 	.word	0x61747320
 800e874:	64657472 	.word	0x64657472
 800e878:	0000000a 	.word	0x0000000a
 800e87c:	6c696146 	.word	0x6c696146
 800e880:	74206465 	.word	0x74206465
 800e884:	7263206f 	.word	0x7263206f
 800e888:	65746165 	.word	0x65746165
 800e88c:	73617420 	.word	0x73617420
 800e890:	0a315f6b 	.word	0x0a315f6b
 800e894:	00000000 	.word	0x00000000
 800e898:	6c696146 	.word	0x6c696146
 800e89c:	74206465 	.word	0x74206465
 800e8a0:	7263206f 	.word	0x7263206f
 800e8a4:	65746165 	.word	0x65746165
 800e8a8:	73617420 	.word	0x73617420
 800e8ac:	0a325f6b 	.word	0x0a325f6b
 800e8b0:	00000000 	.word	0x00000000
 800e8b4:	6c696146 	.word	0x6c696146
 800e8b8:	74206465 	.word	0x74206465
 800e8bc:	7263206f 	.word	0x7263206f
 800e8c0:	65746165 	.word	0x65746165
 800e8c4:	746f6d20 	.word	0x746f6d20
 800e8c8:	7420726f 	.word	0x7420726f
 800e8cc:	0a6b7361 	.word	0x0a6b7361
 800e8d0:	00000000 	.word	0x00000000
 800e8d4:	00636461 	.word	0x00636461
 800e8d8:	00000001 	.word	0x00000001
 800e8dc:	0800165d 	.word	0x0800165d
 800e8e0:	00636969 	.word	0x00636969
 800e8e4:	00726573 	.word	0x00726573
 800e8e8:	00000001 	.word	0x00000001
 800e8ec:	08003229 	.word	0x08003229
 800e8f0:	203c3c0a 	.word	0x203c3c0a
 800e8f4:	54535953 	.word	0x54535953
 800e8f8:	53204d45 	.word	0x53204d45
 800e8fc:	44545548 	.word	0x44545548
 800e900:	204e574f 	.word	0x204e574f
 800e904:	000a3e3e 	.word	0x000a3e3e
 800e908:	696d0a0a 	.word	0x696d0a0a
 800e90c:	546f7263 	.word	0x546f7263
 800e910:	72654b2d 	.word	0x72654b2d
 800e914:	206c656e 	.word	0x206c656e
 800e918:	73726556 	.word	0x73726556
 800e91c:	206e6f69 	.word	0x206e6f69
 800e920:	252e7825 	.word	0x252e7825
 800e924:	0a783230 	.word	0x0a783230
 800e928:	0000000a 	.word	0x0000000a
 800e92c:	52524521 	.word	0x52524521
 800e930:	2021524f 	.word	0x2021524f
 800e934:	74696e49 	.word	0x74696e49
 800e938:	73615420 	.word	0x73615420
 800e93c:	7473206b 	.word	0x7473206b
 800e940:	0a747261 	.word	0x0a747261
 800e944:	00000000 	.word	0x00000000
 800e948:	0a494d4e 	.word	0x0a494d4e
 800e94c:	00000000 	.word	0x00000000
 800e950:	202a2a2a 	.word	0x202a2a2a
 800e954:	64726148 	.word	0x64726148
 800e958:	75616620 	.word	0x75616620
 800e95c:	2a20746c 	.word	0x2a20746c
 800e960:	20202a2a 	.word	0x20202a2a
 800e964:	74787463 	.word	0x74787463
 800e968:	253a6b73 	.word	0x253a6b73
 800e96c:	48202064 	.word	0x48202064
 800e970:	3a525346 	.word	0x3a525346
 800e974:	20207825 	.word	0x20207825
 800e978:	52534643 	.word	0x52534643
 800e97c:	0a78253a 	.word	0x0a78253a
 800e980:	00000000 	.word	0x00000000
 800e984:	202a2a2a 	.word	0x202a2a2a
 800e988:	64726148 	.word	0x64726148
 800e98c:	75616620 	.word	0x75616620
 800e990:	2a20746c 	.word	0x2a20746c
 800e994:	20202a2a 	.word	0x20202a2a
 800e998:	74787463 	.word	0x74787463
 800e99c:	253a6b73 	.word	0x253a6b73
 800e9a0:	48202064 	.word	0x48202064
 800e9a4:	3a525346 	.word	0x3a525346
 800e9a8:	78257825 	.word	0x78257825
 800e9ac:	0000000a 	.word	0x0000000a
 800e9b0:	2055504d 	.word	0x2055504d
 800e9b4:	6c756146 	.word	0x6c756146
 800e9b8:	00000a74 	.word	0x00000a74
 800e9bc:	20737542 	.word	0x20737542
 800e9c0:	6c756146 	.word	0x6c756146
 800e9c4:	00000a74 	.word	0x00000a74
 800e9c8:	67617355 	.word	0x67617355
 800e9cc:	61462065 	.word	0x61462065
 800e9d0:	0a746c75 	.word	0x0a746c75
 800e9d4:	00000000 	.word	0x00000000
 800e9d8:	61435653 	.word	0x61435653
 800e9dc:	000a6c6c 	.word	0x000a6c6c
 800e9e0:	75626544 	.word	0x75626544
 800e9e4:	6f4d2067 	.word	0x6f4d2067
 800e9e8:	6f74696e 	.word	0x6f74696e
 800e9ec:	00000a72 	.word	0x00000a72
 800e9f0:	65646e55 	.word	0x65646e55
 800e9f4:	656e6966 	.word	0x656e6966
 800e9f8:	63784520 	.word	0x63784520
 800e9fc:	69747065 	.word	0x69747065
 800ea00:	4349206f 	.word	0x4349206f
 800ea04:	203a5250 	.word	0x203a5250
 800ea08:	00000000 	.word	0x00000000
 800ea0c:	00207825 	.word	0x00207825
 800ea10:	0000000a 	.word	0x0000000a
 800ea14:	203c3c0a 	.word	0x203c3c0a
 800ea18:	54535953 	.word	0x54535953
 800ea1c:	52204d45 	.word	0x52204d45
 800ea20:	54455345 	.word	0x54455345
 800ea24:	52202620 	.word	0x52202620
 800ea28:	41545345 	.word	0x41545345
 800ea2c:	3e205452 	.word	0x3e205452
 800ea30:	00000a3e 	.word	0x00000a3e
 800ea34:	203c3c0a 	.word	0x203c3c0a
 800ea38:	54535953 	.word	0x54535953
 800ea3c:	46204d45 	.word	0x46204d45
 800ea40:	20545341 	.word	0x20545341
 800ea44:	54534552 	.word	0x54534552
 800ea48:	20545241 	.word	0x20545241
 800ea4c:	000a3e3e 	.word	0x000a3e3e
 800ea50:	203c3c0a 	.word	0x203c3c0a
 800ea54:	54535953 	.word	0x54535953
 800ea58:	52204d45 	.word	0x52204d45
 800ea5c:	41545345 	.word	0x41545345
 800ea60:	3e205452 	.word	0x3e205452
 800ea64:	00000a3e 	.word	0x00000a3e
 800ea68:	52524521 	.word	0x52524521
 800ea6c:	2021524f 	.word	0x2021524f
 800ea70:	74696e69 	.word	0x74696e69
 800ea74:	616d495f 	.word	0x616d495f
 800ea78:	636f6c6c 	.word	0x636f6c6c
 800ea7c:	0000000a 	.word	0x0000000a
 800ea80:	52524521 	.word	0x52524521
 800ea84:	2021524f 	.word	0x2021524f
 800ea88:	74696e69 	.word	0x74696e69
 800ea8c:	7665645f 	.word	0x7665645f
 800ea90:	0a656369 	.word	0x0a656369
 800ea94:	00000000 	.word	0x00000000
 800ea98:	52524521 	.word	0x52524521
 800ea9c:	2021524f 	.word	0x2021524f
 800eaa0:	74696e69 	.word	0x74696e69
 800eaa4:	696e695f 	.word	0x696e695f
 800eaa8:	6c616974 	.word	0x6c616974
 800eaac:	0a657a69 	.word	0x0a657a69
 800eab0:	00000000 	.word	0x00000000
 800eab4:	52524521 	.word	0x52524521
 800eab8:	2021524f 	.word	0x2021524f
 800eabc:	6e72656b 	.word	0x6e72656b
 800eac0:	6f206c65 	.word	0x6f206c65
 800eac4:	63656a62 	.word	0x63656a62
 800eac8:	6e692074 	.word	0x6e692074
 800eacc:	61697469 	.word	0x61697469
 800ead0:	657a696c 	.word	0x657a696c
 800ead4:	0000000a 	.word	0x0000000a
 800ead8:	52524521 	.word	0x52524521
 800eadc:	2021524f 	.word	0x2021524f
 800eae0:	74737953 	.word	0x74737953
 800eae4:	74206d65 	.word	0x74206d65
 800eae8:	72656d69 	.word	0x72656d69
 800eaec:	61747320 	.word	0x61747320
 800eaf0:	70757472 	.word	0x70757472
 800eaf4:	0000000a 	.word	0x0000000a
 800eaf8:	52524521 	.word	0x52524521
 800eafc:	2021524f 	.word	0x2021524f
 800eb00:	74696e49 	.word	0x74696e49
 800eb04:	206c6169 	.word	0x206c6169
 800eb08:	6b736154 	.word	0x6b736154
 800eb0c:	6e616320 	.word	0x6e616320
 800eb10:	746f6e20 	.word	0x746f6e20
 800eb14:	61747320 	.word	0x61747320
 800eb18:	000a7472 	.word	0x000a7472
 800eb1c:	52524521 	.word	0x52524521
 800eb20:	2021524f 	.word	0x2021524f
 800eb24:	74696e49 	.word	0x74696e49
 800eb28:	206c6169 	.word	0x206c6169
 800eb2c:	6b736154 	.word	0x6b736154
 800eb30:	6e616320 	.word	0x6e616320
 800eb34:	746f6e20 	.word	0x746f6e20
 800eb38:	65726320 	.word	0x65726320
 800eb3c:	000a7461 	.word	0x000a7461
 800eb40:	6b4c4d44 	.word	0x6b4c4d44
 800eb44:	00000000 	.word	0x00000000
 800eb48:	655f6b74 	.word	0x655f6b74
 800eb4c:	745f7478 	.word	0x745f7478
 800eb50:	77206b73 	.word	0x77206b73
 800eb54:	63207361 	.word	0x63207361
 800eb58:	656c6c61 	.word	0x656c6c61
 800eb5c:	6e692064 	.word	0x6e692064
 800eb60:	65687420 	.word	0x65687420
 800eb64:	73617420 	.word	0x73617420
 800eb68:	6e69206b 	.word	0x6e69206b
 800eb6c:	65706564 	.word	0x65706564
 800eb70:	6e65646e 	.word	0x6e65646e
 800eb74:	00000a74 	.word	0x00000a74
 800eb78:	655f6b74 	.word	0x655f6b74
 800eb7c:	745f7478 	.word	0x745f7478
 800eb80:	77206b73 	.word	0x77206b73
 800eb84:	63207361 	.word	0x63207361
 800eb88:	656c6c61 	.word	0x656c6c61
 800eb8c:	6e692064 	.word	0x6e692064
 800eb90:	65687420 	.word	0x65687420
 800eb94:	73696420 	.word	0x73696420
 800eb98:	63746170 	.word	0x63746170
 800eb9c:	69642068 	.word	0x69642068
 800eba0:	6c626173 	.word	0x6c626173
 800eba4:	000a6465 	.word	0x000a6465
 800eba8:	655f6b74 	.word	0x655f6b74
 800ebac:	745f6478 	.word	0x745f6478
 800ebb0:	77206b73 	.word	0x77206b73
 800ebb4:	63207361 	.word	0x63207361
 800ebb8:	656c6c61 	.word	0x656c6c61
 800ebbc:	6e692064 	.word	0x6e692064
 800ebc0:	65687420 	.word	0x65687420
 800ebc4:	73617420 	.word	0x73617420
 800ebc8:	6e69206b 	.word	0x6e69206b
 800ebcc:	65706564 	.word	0x65706564
 800ebd0:	6e65646e 	.word	0x6e65646e
 800ebd4:	00000a74 	.word	0x00000a74
 800ebd8:	655f6b74 	.word	0x655f6b74
 800ebdc:	745f6478 	.word	0x745f6478
 800ebe0:	77206b73 	.word	0x77206b73
 800ebe4:	63207361 	.word	0x63207361
 800ebe8:	656c6c61 	.word	0x656c6c61
 800ebec:	6e692064 	.word	0x6e692064
 800ebf0:	65687420 	.word	0x65687420
 800ebf4:	73696420 	.word	0x73696420
 800ebf8:	63746170 	.word	0x63746170
 800ebfc:	69642068 	.word	0x69642068
 800ec00:	6c626173 	.word	0x6c626173
 800ec04:	000a6465 	.word	0x000a6465
 800ec08:	434f4c46 	.word	0x434f4c46
 800ec0c:	00000000 	.word	0x00000000
 800ec10:	434f4c4d 	.word	0x434f4c4d
 800ec14:	00000000 	.word	0x00000000
 800ec18:	00000020 	.word	0x00000020
 800ec1c:	00000030 	.word	0x00000030
 800ec20:	00000058 	.word	0x00000058
 800ec24:	00000078 	.word	0x00000078

0800ec28 <ba>:
 800ec28:	40022000 40022100 58026000              . .@.!.@.`.X

0800ec34 <cba>:
 800ec34:	40022300 40022300 58026300              .#.@.#.@.c.X

0800ec40 <ba>:
 800ec40:	40005400 40005800 40005c00 58001c00     .T.@.X.@.\.@...X
 800ec50:	40006400                                .d.@

0800ec54 <ll_devdat>:
 800ec54:	0000001f 00000005 000003e8 00000021     ............!...
 800ec64:	00000005 000003e8 00000048 00000005     ........H.......
 800ec74:	000003e8 0000005f 00000005 000003e8     ...._...........
 800ec84:	0000009d 00000005 000003e8              ............

0800ec90 <ba>:
 800ec90:	40011000 40004400 40004800 40004c00     ...@.D.@.H.@.L.@
 800eca0:	40005000 40011400 40007800 40007c00     .P.@...@.x.@.|.@
 800ecb0:	40007800 40011c00                       .x.@...@

0800ecb8 <ll_devdat>:
 800ecb8:	00000025 00000005 00000026 00000005     %.......&.......
 800ecc8:	00000027 00000005 00000034 00000005     '.......4.......
 800ecd8:	00000035 00000005 0000004e 00000005     5.......N.......
 800ece8:	00000059 00000005 0000005a 00000005     Y.......Z.......
 800ecf8:	000000a2 00000005 000000a3 00000005     ................

0800ed08 <knl_init_ctsk>:
 800ed08:	00000000 00000001 080036e1 00000001     .........6......
 800ed18:	00000400 00000000                       ........

0800ed20 <modclk_tbl>:
 800ed20:	580244e0 0000001f 580244e8 0004000f     .D.X.....D.X....
 800ed30:	580244f4 00000002 00000000 00000000     .D.X............

0800ed40 <pinfnc_tbl>:
 800ed40:	58020000 abffffff 58020004 00000000     ...X.......X....
 800ed50:	58020008 0c000000 5802000c 64000000     ...X.......X...d
 800ed60:	58020400 dffafebd 58020404 00000300     ...X.......X....
 800ed70:	58020408 000000c0 5802040c 00000100     ...X.......X....
 800ed80:	58020424 00000044 58020800 f3ffffff     $..XD......X....
 800ed90:	58020804 00000000 58020808 00000000     ...X.......X....
 800eda0:	5802080c 00000000 58020c00 fffaffff     ...X.......X....
 800edb0:	58020c04 00000000 58020c08 00000000     ...X.......X....
 800edc0:	58020c0c 00000000 58020c24 00000077     ...X....$..Xw...
 800edd0:	58021000 fffffff7 58021004 00000000     ...X.......X....
 800ede0:	58021008 00000000 5802100c 00000000     ...X.......X....
 800edf0:	58000404 08000000 00000000 00000000     ...X............

0800ee00 <knl_pk_csem_DM>:
	...
 800ee0c:	00000001                                ....

0800ee10 <knl_wspec_flg_tfifo>:
 800ee10:	00000008 00000000 00000000              ............

0800ee1c <knl_wspec_flg_tpri>:
 800ee1c:	00000008 080063a9 00000000              .....c......

0800ee28 <knl_wspec_mbx_tfifo>:
 800ee28:	00000040 00000000 00000000              @...........

0800ee34 <knl_wspec_mbx_tpri>:
 800ee34:	00000040 08006e31 00000000              @...1n......

0800ee40 <knl_wspec_mpf_tfifo>:
 800ee40:	00002000 00000000 00000000              . ..........

0800ee4c <knl_wspec_mpf_tpri>:
 800ee4c:	00002000 08007951 00000000              . ..Qy......

0800ee58 <knl_wspec_mpl_tfifo>:
 800ee58:	00004000 00000000 080083c5              .@..........

0800ee64 <knl_wspec_mpl_tpri>:
 800ee64:	00004000 08008389 080083c5              .@..........

0800ee70 <knl_wspec_smbf_tfifo>:
 800ee70:	00000100 00000000 08008c41              ........A...

0800ee7c <knl_wspec_smbf_tpri>:
 800ee7c:	00000100 08008c05 08008c41              ........A...

0800ee88 <knl_wspec_rmbf>:
 800ee88:	00000200 00000000 00000000              ............

0800ee94 <knl_wspec_mtx_tfifo>:
 800ee94:	00000080 00000000 00000000              ............

0800eea0 <knl_wspec_mtx_tpri>:
 800eea0:	00000080 080097c1 00000000              ............

0800eeac <knl_wspec_mtx_inherit>:
 800eeac:	00000080 080097c1 08009835              ........5...

0800eeb8 <knl_wspec_sem_tfifo>:
 800eeb8:	00000004 00000000 0800a039              ........9...

0800eec4 <knl_wspec_sem_tpri>:
 800eec4:	00000004 08009fb5 0800a039              ........9...

0800eed0 <knl_wspec_slp>:
 800eed0:	00000001 00000000 00000000              ............

0800eedc <knl_wspec_dly>:
 800eedc:	00000002 00000000 00000000              ............

0800eee8 <LF.1>:
 800eee8:	                                         .

0800eee9 <CR.0>:
 800eee9:	                                         ...

0800eeec <digits.0>:
 800eeec:	33323130 37363534 62613938 66656463     0123456789abcdef
 800eefc:	33323130 37363534 42413938 46454443     0123456789ABCDEF
